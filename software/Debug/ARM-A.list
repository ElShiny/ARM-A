
ARM-A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010190  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08010368  08010368  00020368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103f8  080103f8  00030184  2**0
                  CONTENTS
  4 .ARM          00000008  080103f8  080103f8  000203f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010400  08010400  00030184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010400  08010400  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010404  08010404  00020404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08010408  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002320  20000184  0801058c  00030184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024a4  0801058c  000324a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034760  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006cfb  00000000  00000000  00064914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028a8  00000000  00000000  0006b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002590  00000000  00000000  0006deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000326d0  00000000  00000000  00070448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037d05  00000000  00000000  000a2b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b08e  00000000  00000000  000da81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002058ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000acc0  00000000  00000000  002058fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08010350 	.word	0x08010350

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08010350 	.word	0x08010350

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f00f fae5 	bl	8010340 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d76:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000d78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000d80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000da0:	2204      	movs	r2, #4
 8000da2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db6:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de0:	4817      	ldr	r0, [pc, #92]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000de2:	f002 fd8f 	bl	8003904 <HAL_ADC_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000dec:	f001 f934 	bl	8002058 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4811      	ldr	r0, [pc, #68]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000dfc:	f003 fbaa 	bl	8004554 <HAL_ADCEx_MultiModeConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e06:	f001 f927 	bl	8002058 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_ADC1_Init+0xec>)
 8000e0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0e:	2306      	movs	r3, #6
 8000e10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e16:	237f      	movs	r3, #127	; 0x7f
 8000e18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_ADC1_Init+0xe8>)
 8000e28:	f002 ff2e 	bl	8003c88 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e32:	f001 f911 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3730      	adds	r7, #48	; 0x30
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200001a0 	.word	0x200001a0
 8000e44:	08600004 	.word	0x08600004

08000e48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2220      	movs	r2, #32
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f00f fa73 	bl	8010340 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e5c:	4a2b      	ldr	r2, [pc, #172]	; (8000f0c <MX_ADC2_Init+0xc4>)
 8000e5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e7a:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e86:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ec2:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000ec4:	f002 fd1e 	bl	8003904 <HAL_ADC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000ece:	f001 f8c3 	bl	8002058 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_ADC2_Init+0xc8>)
 8000ed4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ede:	237f      	movs	r3, #127	; 0x7f
 8000ee0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <MX_ADC2_Init+0xc0>)
 8000ef0:	f002 feca 	bl	8003c88 <HAL_ADC_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000efa:	f001 f8ad 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000020c 	.word	0x2000020c
 8000f0c:	50000100 	.word	0x50000100
 8000f10:	14f00020 	.word	0x14f00020

08000f14 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f00f fa07 	bl	8010340 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f32:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f34:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <MX_ADC3_Init+0xe8>)
 8000f36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f38:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f52:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000f9c:	f002 fcb2 	bl	8003904 <HAL_ADC_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000fa6:	f001 f857 	bl	8002058 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000fb6:	f003 facd 	bl	8004554 <HAL_ADCEx_MultiModeConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000fc0:	f001 f84a 	bl	8002058 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_ADC3_Init+0xec>)
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd0:	237f      	movs	r3, #127	; 0x7f
 8000fd2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_ADC3_Init+0xe4>)
 8000fe2:	f002 fe51 	bl	8003c88 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000fec:	f001 f834 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3730      	adds	r7, #48	; 0x30
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000278 	.word	0x20000278
 8000ffc:	50000400 	.word	0x50000400
 8001000:	21800100 	.word	0x21800100

08001004 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00f f995 	bl	8010340 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001018:	4a34      	ldr	r2, [pc, #208]	; (80010ec <MX_ADC4_Init+0xe8>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800101c:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_ADC4_Init+0xe4>)
 800101e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001022:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC4_Init+0xe4>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001038:	2201      	movs	r2, #1
 800103a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_ADC4_Init+0xe4>)
 800103e:	2204      	movs	r2, #4
 8001040:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001044:	2200      	movs	r2, #0
 8001046:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_ADC4_Init+0xe4>)
 800104a:	2200      	movs	r2, #0
 800104c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 2;
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001050:	2202      	movs	r2, #2
 8001052:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = ENABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfDiscConversion = 1;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC4_Init+0xe4>)
 800105e:	2201      	movs	r2, #1
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_ADC4_Init+0xe4>)
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800107c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001086:	4818      	ldr	r0, [pc, #96]	; (80010e8 <MX_ADC4_Init+0xe4>)
 8001088:	f002 fc3c 	bl	8003904 <HAL_ADC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC4_Init+0x92>
  {
    Error_Handler();
 8001092:	f000 ffe1 	bl	8002058 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_ADC4_Init+0xec>)
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109a:	2306      	movs	r3, #6
 800109c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800109e:	2305      	movs	r3, #5
 80010a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a2:	237f      	movs	r3, #127	; 0x7f
 80010a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a6:	2304      	movs	r3, #4
 80010a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC4_Init+0xe4>)
 80010b4:	f002 fde8 	bl	8003c88 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC4_Init+0xbe>
  {
    Error_Handler();
 80010be:	f000 ffcb 	bl	8002058 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_ADC4_Init+0xf0>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c6:	230c      	movs	r3, #12
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC4_Init+0xe4>)
 80010d0:	f002 fdda 	bl	8003c88 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC4_Init+0xda>
  {
    Error_Handler();
 80010da:	f000 ffbd 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200002e4 	.word	0x200002e4
 80010ec:	50000500 	.word	0x50000500
 80010f0:	10c00010 	.word	0x10c00010
 80010f4:	14f00020 	.word	0x14f00020

080010f8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0a8      	sub	sp, #160	; 0xa0
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001114:	2254      	movs	r2, #84	; 0x54
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f00f f911 	bl	8010340 <memset>
  if(adcHandle->Instance==ADC1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001126:	d141      	bne.n	80011ac <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800112e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001132:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001138:	4618      	mov	r0, r3
 800113a:	f007 fde7 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001144:	f000 ff88 	bl	8002058 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001148:	4bae      	ldr	r3, [pc, #696]	; (8001404 <HAL_ADC_MspInit+0x30c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4aad      	ldr	r2, [pc, #692]	; (8001404 <HAL_ADC_MspInit+0x30c>)
 8001150:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001152:	4bac      	ldr	r3, [pc, #688]	; (8001404 <HAL_ADC_MspInit+0x30c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10b      	bne.n	8001172 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800115a:	4bab      	ldr	r3, [pc, #684]	; (8001408 <HAL_ADC_MspInit+0x310>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4aaa      	ldr	r2, [pc, #680]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001160:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4ba8      	ldr	r3, [pc, #672]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
 8001170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4ba5      	ldr	r3, [pc, #660]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	4aa4      	ldr	r2, [pc, #656]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117e:	4ba2      	ldr	r3, [pc, #648]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin;
 800118a:	230f      	movs	r3, #15
 800118c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001190:	2303      	movs	r3, #3
 8001192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f004 fa8f 	bl	80056c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80011aa:	e127      	b.n	80013fc <HAL_ADC_MspInit+0x304>
  else if(adcHandle->Instance==ADC2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a96      	ldr	r2, [pc, #600]	; (800140c <HAL_ADC_MspInit+0x314>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	f040 8093 	bne.w	80012de <HAL_ADC_MspInit+0x1e6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011c8:	4618      	mov	r0, r3
 80011ca:	f007 fd9f 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_ADC_MspInit+0xe0>
      Error_Handler();
 80011d4:	f000 ff40 	bl	8002058 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011d8:	4b8a      	ldr	r3, [pc, #552]	; (8001404 <HAL_ADC_MspInit+0x30c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a89      	ldr	r2, [pc, #548]	; (8001404 <HAL_ADC_MspInit+0x30c>)
 80011e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011e2:	4b88      	ldr	r3, [pc, #544]	; (8001404 <HAL_ADC_MspInit+0x30c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10b      	bne.n	8001202 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011ea:	4b87      	ldr	r3, [pc, #540]	; (8001408 <HAL_ADC_MspInit+0x310>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a86      	ldr	r2, [pc, #536]	; (8001408 <HAL_ADC_MspInit+0x310>)
 80011f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b84      	ldr	r3, [pc, #528]	; (8001408 <HAL_ADC_MspInit+0x310>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001202:	4b81      	ldr	r3, [pc, #516]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a80      	ldr	r2, [pc, #512]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b7e      	ldr	r3, [pc, #504]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b7b      	ldr	r3, [pc, #492]	; (8001408 <HAL_ADC_MspInit+0x310>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a7a      	ldr	r2, [pc, #488]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b78      	ldr	r3, [pc, #480]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b75      	ldr	r3, [pc, #468]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a74      	ldr	r2, [pc, #464]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <HAL_ADC_MspInit+0x310>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = AD5_Pin;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001278:	4619      	mov	r1, r3
 800127a:	4865      	ldr	r0, [pc, #404]	; (8001410 <HAL_ADC_MspInit+0x318>)
 800127c:	f004 fa24 	bl	80056c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD8_Pin;
 8001280:	2320      	movs	r3, #32
 8001282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f004 fa14 	bl	80056c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD4_Pin|AD6_Pin;
 80012a0:	2330      	movs	r3, #48	; 0x30
 80012a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012b6:	4619      	mov	r1, r3
 80012b8:	4856      	ldr	r0, [pc, #344]	; (8001414 <HAL_ADC_MspInit+0x31c>)
 80012ba:	f004 fa05 	bl	80056c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD7_Pin;
 80012be:	2304      	movs	r3, #4
 80012c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AD7_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012d4:	4619      	mov	r1, r3
 80012d6:	4850      	ldr	r0, [pc, #320]	; (8001418 <HAL_ADC_MspInit+0x320>)
 80012d8:	f004 f9f6 	bl	80056c8 <HAL_GPIO_Init>
}
 80012dc:	e08e      	b.n	80013fc <HAL_ADC_MspInit+0x304>
  else if(adcHandle->Instance==ADC3)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <HAL_ADC_MspInit+0x324>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d142      	bne.n	800136e <HAL_ADC_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80012ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80012f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 fd06 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_ADC_MspInit+0x212>
      Error_Handler();
 8001306:	f000 fea7 	bl	8002058 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800130a:	4b45      	ldr	r3, [pc, #276]	; (8001420 <HAL_ADC_MspInit+0x328>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	4a43      	ldr	r2, [pc, #268]	; (8001420 <HAL_ADC_MspInit+0x328>)
 8001312:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <HAL_ADC_MspInit+0x328>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d10b      	bne.n	8001334 <HAL_ADC_MspInit+0x23c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_ADC_MspInit+0x310>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	4a39      	ldr	r2, [pc, #228]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001328:	4b37      	ldr	r3, [pc, #220]	; (8001408 <HAL_ADC_MspInit+0x310>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b34      	ldr	r3, [pc, #208]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a33      	ldr	r2, [pc, #204]	; (8001408 <HAL_ADC_MspInit+0x310>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <HAL_ADC_MspInit+0x310>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AD9_Pin|AD10_Pin|AD11_Pin;
 800134c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001354:	2303      	movs	r3, #3
 8001356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001360:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001364:	4619      	mov	r1, r3
 8001366:	482f      	ldr	r0, [pc, #188]	; (8001424 <HAL_ADC_MspInit+0x32c>)
 8001368:	f004 f9ae 	bl	80056c8 <HAL_GPIO_Init>
}
 800136c:	e046      	b.n	80013fc <HAL_ADC_MspInit+0x304>
  else if(adcHandle->Instance==ADC4)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a2d      	ldr	r2, [pc, #180]	; (8001428 <HAL_ADC_MspInit+0x330>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d141      	bne.n	80013fc <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800137e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001386:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800138a:	4618      	mov	r0, r3
 800138c:	f007 fcbe 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_ADC_MspInit+0x2a2>
      Error_Handler();
 8001396:	f000 fe5f 	bl	8002058 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_ADC_MspInit+0x328>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_ADC_MspInit+0x328>)
 80013a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_ADC_MspInit+0x328>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10b      	bne.n	80013c4 <HAL_ADC_MspInit+0x2cc>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_ADC_MspInit+0x310>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_ADC_MspInit+0x310>)
 80013b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_ADC_MspInit+0x310>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_ADC_MspInit+0x310>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_ADC_MspInit+0x310>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_ADC_MspInit+0x310>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 80013dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e4:	2303      	movs	r3, #3
 80013e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013f4:	4619      	mov	r1, r3
 80013f6:	4808      	ldr	r0, [pc, #32]	; (8001418 <HAL_ADC_MspInit+0x320>)
 80013f8:	f004 f966 	bl	80056c8 <HAL_GPIO_Init>
}
 80013fc:	bf00      	nop
 80013fe:	37a0      	adds	r7, #160	; 0xa0
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000350 	.word	0x20000350
 8001408:	40021000 	.word	0x40021000
 800140c:	50000100 	.word	0x50000100
 8001410:	48001400 	.word	0x48001400
 8001414:	48000800 	.word	0x48000800
 8001418:	48000400 	.word	0x48000400
 800141c:	50000400 	.word	0x50000400
 8001420:	20000354 	.word	0x20000354
 8001424:	48000c00 	.word	0x48000c00
 8001428:	50000500 	.word	0x50000500

0800142c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <MX_CRC_Init+0x3c>)
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <MX_CRC_Init+0x40>)
 8001434:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_CRC_Init+0x3c>)
 8001438:	2200      	movs	r2, #0
 800143a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_CRC_Init+0x3c>)
 800143e:	2200      	movs	r2, #0
 8001440:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_CRC_Init+0x3c>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_CRC_Init+0x3c>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_CRC_Init+0x3c>)
 8001450:	2201      	movs	r2, #1
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_CRC_Init+0x3c>)
 8001456:	f003 fa95 	bl	8004984 <HAL_CRC_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001460:	f000 fdfa 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000358 	.word	0x20000358
 800146c:	40023000 	.word	0x40023000

08001470 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_CRC_MspInit+0x38>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d10b      	bne.n	800149a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_CRC_MspInit+0x3c>)
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_CRC_MspInit+0x3c>)
 8001488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148c:	6493      	str	r3, [r2, #72]	; 0x48
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <HAL_CRC_MspInit+0x3c>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023000 	.word	0x40023000
 80014ac:	40021000 	.word	0x40021000

080014b0 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014b6:	463b      	mov	r3, r7
 80014b8:	2230      	movs	r2, #48	; 0x30
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f00e ff3f 	bl	8010340 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_DAC1_Init+0x6c>)
 80014c4:	4a16      	ldr	r2, [pc, #88]	; (8001520 <MX_DAC1_Init+0x70>)
 80014c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014c8:	4814      	ldr	r0, [pc, #80]	; (800151c <MX_DAC1_Init+0x6c>)
 80014ca:	f003 fb45 	bl	8004b58 <HAL_DAC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014d4:	f000 fdc0 	bl	8002058 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80014d8:	2302      	movs	r3, #2
 80014da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_DAC1_Init+0x6c>)
 8001504:	f003 fbae 	bl	8004c64 <HAL_DAC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800150e:	f000 fda3 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3730      	adds	r7, #48	; 0x30
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000037c 	.word	0x2000037c
 8001520:	50000800 	.word	0x50000800

08001524 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2230      	movs	r2, #48	; 0x30
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00e ff05 	bl	8010340 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_DAC2_Init+0x6c>)
 8001538:	4a16      	ldr	r2, [pc, #88]	; (8001594 <MX_DAC2_Init+0x70>)
 800153a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800153c:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_DAC2_Init+0x6c>)
 800153e:	f003 fb0b 	bl	8004b58 <HAL_DAC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001548:	f000 fd86 	bl	8002058 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800154c:	2302      	movs	r3, #2
 800154e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_DAC2_Init+0x6c>)
 8001578:	f003 fb74 	bl	8004c64 <HAL_DAC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001582:	f000 fd69 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3730      	adds	r7, #48	; 0x30
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000390 	.word	0x20000390
 8001594:	50000c00 	.word	0x50000c00

08001598 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2f      	ldr	r2, [pc, #188]	; (8001674 <HAL_DAC_MspInit+0xdc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12d      	bne.n	8001616 <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4a28      	ldr	r2, [pc, #160]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC1_Pin;
 80015ea:	2310      	movs	r3, #16
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DAC1_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f004 f862 	bl	80056c8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2036      	movs	r0, #54	; 0x36
 800160a:	f003 f986 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800160e:	2036      	movs	r0, #54	; 0x36
 8001610:	f003 f99d 	bl	800494e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001614:	e029      	b.n	800166a <HAL_DAC_MspInit+0xd2>
  else if(dacHandle->Instance==DAC2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_DAC_MspInit+0xe4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d124      	bne.n	800166a <HAL_DAC_MspInit+0xd2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 8001626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_DAC_MspInit+0xe0>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAC2_Pin;
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DAC2_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f004 f82f 	bl	80056c8 <HAL_GPIO_Init>
}
 800166a:	bf00      	nop
 800166c:	3730      	adds	r7, #48	; 0x30
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	50000800 	.word	0x50000800
 8001678:	40021000 	.word	0x40021000
 800167c:	50000c00 	.word	0x50000c00

08001680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_DMA_Init+0x60>)
 8001688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168a:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <MX_DMA_Init+0x60>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6493      	str	r3, [r2, #72]	; 0x48
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_DMA_Init+0x60>)
 8001694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <MX_DMA_Init+0x60>)
 80016a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <MX_DMA_Init+0x60>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6493      	str	r3, [r2, #72]	; 0x48
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <MX_DMA_Init+0x60>)
 80016ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	200b      	movs	r0, #11
 80016bc:	f003 f92d 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016c0:	200b      	movs	r0, #11
 80016c2:	f003 f944 	bl	800494e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	200c      	movs	r0, #12
 80016cc:	f003 f925 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016d0:	200c      	movs	r0, #12
 80016d2:	f003 f93c 	bl	800494e <HAL_NVIC_EnableIRQ>

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <MX_FDCAN2_Init+0x84>)
 80016ea:	4a20      	ldr	r2, [pc, #128]	; (800176c <MX_FDCAN2_Init+0x88>)
 80016ec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_FDCAN2_Init+0x84>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_FDCAN2_Init+0x84>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_FDCAN2_Init+0x84>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001702:	2200      	movs	r2, #0
 8001704:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001708:	2200      	movs	r2, #0
 800170a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_FDCAN2_Init+0x84>)
 800170e:	2200      	movs	r2, #0
 8001710:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001714:	2201      	movs	r2, #1
 8001716:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_FDCAN2_Init+0x84>)
 800171a:	2201      	movs	r2, #1
 800171c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001720:	2202      	movs	r2, #2
 8001722:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001726:	2202      	movs	r2, #2
 8001728:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_FDCAN2_Init+0x84>)
 800172c:	2201      	movs	r2, #1
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001732:	2201      	movs	r2, #1
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001738:	2201      	movs	r2, #1
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <MX_FDCAN2_Init+0x84>)
 800173e:	2201      	movs	r2, #1
 8001740:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001744:	2200      	movs	r2, #0
 8001746:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <MX_FDCAN2_Init+0x84>)
 800174a:	2200      	movs	r2, #0
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001750:	2200      	movs	r2, #0
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_FDCAN2_Init+0x84>)
 8001756:	f003 fdf1 	bl	800533c <HAL_FDCAN_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001760:	f000 fc7a 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200003a4 	.word	0x200003a4
 800176c:	40006800 	.word	0x40006800

08001770 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09e      	sub	sp, #120	; 0x78
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	2254      	movs	r2, #84	; 0x54
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00e fdd5 	bl	8010340 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <HAL_FDCAN_MspInit+0xac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d138      	bne.n	8001812 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80017a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4618      	mov	r0, r3
 80017b2:	f007 faab 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80017bc:	f000 fc4c 	bl	8002058 <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_FDCAN_MspInit+0xb0>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a16      	ldr	r2, [pc, #88]	; (8001820 <HAL_FDCAN_MspInit+0xb0>)
 80017c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_FDCAN_MspInit+0xb0>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_FDCAN_MspInit+0xb0>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_FDCAN_MspInit+0xb0>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_FDCAN_MspInit+0xb0>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 80017f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017f4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001802:	2309      	movs	r3, #9
 8001804:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <HAL_FDCAN_MspInit+0xb4>)
 800180e:	f003 ff5b 	bl	80056c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001812:	bf00      	nop
 8001814:	3778      	adds	r7, #120	; 0x78
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40006800 	.word	0x40006800
 8001820:	40021000 	.word	0x40021000
 8001824:	48000400 	.word	0x48000400

08001828 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800182e:	463b      	mov	r3, r7
 8001830:	2220      	movs	r2, #32
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f00e fd83 	bl	8010340 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <MX_FMC_Init+0xc8>)
 800183c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001840:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <MX_FMC_Init+0xc8>)
 8001844:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <MX_FMC_Init+0xcc>)
 8001846:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <MX_FMC_Init+0xc8>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <MX_FMC_Init+0xc8>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <MX_FMC_Init+0xc8>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <MX_FMC_Init+0xc8>)
 800185c:	2210      	movs	r2, #16
 800185e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <MX_FMC_Init+0xc8>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_FMC_Init+0xc8>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_FMC_Init+0xc8>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_FMC_Init+0xc8>)
 8001874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_FMC_Init+0xc8>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_FMC_Init+0xc8>)
 8001882:	2200      	movs	r2, #0
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_FMC_Init+0xc8>)
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_FMC_Init+0xc8>)
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_FMC_Init+0xc8>)
 8001894:	2200      	movs	r2, #0
 8001896:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_FMC_Init+0xc8>)
 800189a:	2200      	movs	r2, #0
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_FMC_Init+0xc8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_FMC_Init+0xc8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_FMC_Init+0xc8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 3;
 80018b2:	2303      	movs	r3, #3
 80018b4:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80018b6:	230f      	movs	r3, #15
 80018b8:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 80018ba:	2303      	movs	r3, #3
 80018bc:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 80018be:	2303      	movs	r3, #3
 80018c0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 3;
 80018c2:	2303      	movs	r3, #3
 80018c4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80018c6:	2310      	movs	r3, #16
 80018c8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80018ca:	2311      	movs	r3, #17
 80018cc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_FMC_Init+0xc8>)
 80018da:	f007 fd10 	bl	80092fe <HAL_SRAM_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 80018e4:	f000 fbb8 	bl	8002058 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018e8:	bf00      	nop
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000408 	.word	0x20000408
 80018f4:	a0000104 	.word	0xa0000104

080018f8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_FMC_MspInit+0xa4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d13e      	bne.n	8001992 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_FMC_MspInit+0xa4>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_FMC_MspInit+0xa8>)
 800191c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191e:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <HAL_FMC_MspInit+0xa8>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6513      	str	r3, [r2, #80]	; 0x50
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <HAL_FMC_MspInit+0xa8>)
 8001928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001932:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001936:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001944:	230c      	movs	r3, #12
 8001946:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4815      	ldr	r0, [pc, #84]	; (80019a4 <HAL_FMC_MspInit+0xac>)
 800194e:	f003 febb 	bl	80056c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001952:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001956:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|LCD_RD_Pin
                          |LCD_WR_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001964:	230c      	movs	r3, #12
 8001966:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4619      	mov	r1, r3
 800196c:	480e      	ldr	r0, [pc, #56]	; (80019a8 <HAL_FMC_MspInit+0xb0>)
 800196e:	f003 feab 	bl	80056c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001972:	2320      	movs	r3, #32
 8001974:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001982:	230c      	movs	r3, #12
 8001984:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	4619      	mov	r1, r3
 800198a:	4808      	ldr	r0, [pc, #32]	; (80019ac <HAL_FMC_MspInit+0xb4>)
 800198c:	f003 fe9c 	bl	80056c8 <HAL_GPIO_Init>
 8001990:	e000      	b.n	8001994 <HAL_FMC_MspInit+0x9c>
    return;
 8001992:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000460 	.word	0x20000460
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48001000 	.word	0x48001000
 80019a8:	48000c00 	.word	0x48000c00
 80019ac:	48001800 	.word	0x48001800

080019b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80019b8:	f7ff ff9e 	bl	80018f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019da:	4b99      	ldr	r3, [pc, #612]	; (8001c40 <MX_GPIO_Init+0x27c>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	4a98      	ldr	r2, [pc, #608]	; (8001c40 <MX_GPIO_Init+0x27c>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e6:	4b96      	ldr	r3, [pc, #600]	; (8001c40 <MX_GPIO_Init+0x27c>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	4b93      	ldr	r3, [pc, #588]	; (8001c40 <MX_GPIO_Init+0x27c>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	4a92      	ldr	r2, [pc, #584]	; (8001c40 <MX_GPIO_Init+0x27c>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fe:	4b90      	ldr	r3, [pc, #576]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0a:	4b8d      	ldr	r3, [pc, #564]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a8c      	ldr	r2, [pc, #560]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a10:	f043 0320 	orr.w	r3, r3, #32
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b8a      	ldr	r3, [pc, #552]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b87      	ldr	r3, [pc, #540]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a86      	ldr	r2, [pc, #536]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b84      	ldr	r3, [pc, #528]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b81      	ldr	r3, [pc, #516]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a80      	ldr	r2, [pc, #512]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b7e      	ldr	r3, [pc, #504]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a52:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a7a      	ldr	r2, [pc, #488]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a6a:	4b75      	ldr	r3, [pc, #468]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a74      	ldr	r2, [pc, #464]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED0_Pin
 8001a82:	2200      	movs	r2, #0
 8001a84:	f640 013c 	movw	r1, #2108	; 0x83c
 8001a88:	486e      	ldr	r0, [pc, #440]	; (8001c44 <MX_GPIO_Init+0x280>)
 8001a8a:	f003 ff9f 	bl	80059cc <HAL_GPIO_WritePin>
                          |ARDUINO_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	210f      	movs	r1, #15
 8001a92:	486d      	ldr	r0, [pc, #436]	; (8001c48 <MX_GPIO_Init+0x284>)
 8001a94:	f003 ff9a 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	486b      	ldr	r0, [pc, #428]	; (8001c4c <MX_GPIO_Init+0x288>)
 8001a9e:	f003 ff95 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	486a      	ldr	r0, [pc, #424]	; (8001c50 <MX_GPIO_Init+0x28c>)
 8001aa8:	f003 ff90 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIN_SLP_Pin|LCD_BKLT_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2160      	movs	r1, #96	; 0x60
 8001ab0:	4868      	ldr	r0, [pc, #416]	; (8001c54 <MX_GPIO_Init+0x290>)
 8001ab2:	f003 ff8b 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4867      	ldr	r0, [pc, #412]	; (8001c58 <MX_GPIO_Init+0x294>)
 8001abc:	f003 ff86 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4864      	ldr	r0, [pc, #400]	; (8001c58 <MX_GPIO_Init+0x294>)
 8001ac6:	f003 ff81 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin|BTN_OK_Pin;
 8001aca:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	485a      	ldr	r0, [pc, #360]	; (8001c48 <MX_GPIO_Init+0x284>)
 8001ae0:	f003 fdf2 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_ESC_Pin;
 8001ae4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_ESC_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	4853      	ldr	r0, [pc, #332]	; (8001c48 <MX_GPIO_Init+0x284>)
 8001afc:	f003 fde4 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ARDUINO_CS_Pin;
 8001b00:	f640 0338 	movw	r3, #2104	; 0x838
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	484a      	ldr	r0, [pc, #296]	; (8001c44 <MX_GPIO_Init+0x280>)
 8001b1a:	f003 fdd5 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
 8001b1e:	230f      	movs	r3, #15
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4844      	ldr	r0, [pc, #272]	; (8001c48 <MX_GPIO_Init+0x284>)
 8001b36:	f003 fdc7 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	483c      	ldr	r0, [pc, #240]	; (8001c44 <MX_GPIO_Init+0x280>)
 8001b52:	f003 fdb9 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001b56:	f240 1343 	movw	r3, #323	; 0x143
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4838      	ldr	r0, [pc, #224]	; (8001c4c <MX_GPIO_Init+0x288>)
 8001b6c:	f003 fdac 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	4831      	ldr	r0, [pc, #196]	; (8001c4c <MX_GPIO_Init+0x288>)
 8001b88:	f003 fd9e 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	482b      	ldr	r0, [pc, #172]	; (8001c50 <MX_GPIO_Init+0x28c>)
 8001ba4:	f003 fd90 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8001ba8:	2340      	movs	r3, #64	; 0x40
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4824      	ldr	r0, [pc, #144]	; (8001c50 <MX_GPIO_Init+0x28c>)
 8001bbe:	f003 fd83 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIN_SLP_Pin|LCD_BKLT_Pin;
 8001bc2:	2360      	movs	r3, #96	; 0x60
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	481e      	ldr	r0, [pc, #120]	; (8001c54 <MX_GPIO_Init+0x290>)
 8001bda:	f003 fd75 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4818      	ldr	r0, [pc, #96]	; (8001c58 <MX_GPIO_Init+0x294>)
 8001bf6:	f003 fd67 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c06:	2302      	movs	r3, #2
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4811      	ldr	r0, [pc, #68]	; (8001c58 <MX_GPIO_Init+0x294>)
 8001c12:	f003 fd59 	bl	80056c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2017      	movs	r0, #23
 8001c1c:	f002 fe7d 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c20:	2017      	movs	r0, #23
 8001c22:	f002 fe94 	bl	800494e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2028      	movs	r0, #40	; 0x28
 8001c2c:	f002 fe75 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c30:	2028      	movs	r0, #40	; 0x28
 8001c32:	f002 fe8c 	bl	800494e <HAL_NVIC_EnableIRQ>

}
 8001c36:	bf00      	nop
 8001c38:	3730      	adds	r7, #48	; 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	48001400 	.word	0x48001400
 8001c48:	48000800 	.word	0x48000800
 8001c4c:	48001800 	.word	0x48001800
 8001c50:	48000c00 	.word	0x48000c00
 8001c54:	48000400 	.word	0x48000400
 8001c58:	48001000 	.word	0x48001000

08001c5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <MX_I2C1_Init+0x78>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0D9FF;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <MX_I2C1_Init+0x7c>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c96:	480e      	ldr	r0, [pc, #56]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001c98:	f003 fed3 	bl	8005a42 <HAL_I2C_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ca2:	f000 f9d9 	bl	8002058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001caa:	f004 fbbb 	bl	8006424 <HAL_I2CEx_ConfigAnalogFilter>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cb4:	f000 f9d0 	bl	8002058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_I2C1_Init+0x74>)
 8001cbc:	f004 fbfd 	bl	80064ba <HAL_I2CEx_ConfigDigitalFilter>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cc6:	f000 f9c7 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000464 	.word	0x20000464
 8001cd4:	40005400 	.word	0x40005400
 8001cd8:	20b0d9ff 	.word	0x20b0d9ff

08001cdc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <MX_I2C2_Init+0x78>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0D9FF;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <MX_I2C2_Init+0x7c>)
 8001cea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d16:	480e      	ldr	r0, [pc, #56]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001d18:	f003 fe93 	bl	8005a42 <HAL_I2C_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d22:	f000 f999 	bl	8002058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001d2a:	f004 fb7b 	bl	8006424 <HAL_I2CEx_ConfigAnalogFilter>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d34:	f000 f990 	bl	8002058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_I2C2_Init+0x74>)
 8001d3c:	f004 fbbd 	bl	80064ba <HAL_I2CEx_ConfigDigitalFilter>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d46:	f000 f987 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200004b0 	.word	0x200004b0
 8001d54:	40005800 	.word	0x40005800
 8001d58:	20b0d9ff 	.word	0x20b0d9ff

08001d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0a2      	sub	sp, #136	; 0x88
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	2254      	movs	r2, #84	; 0x54
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00e fadf 	bl	8010340 <memset>
  if(i2cHandle->Instance==I2C1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a4f      	ldr	r2, [pc, #316]	; (8001ec4 <HAL_I2C_MspInit+0x168>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d158      	bne.n	8001e3e <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d8c:	2340      	movs	r3, #64	; 0x40
 8001d8e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f006 ffb7 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001da4:	f000 f958 	bl	8002058 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	4a46      	ldr	r2, [pc, #280]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db4:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	4a40      	ldr	r2, [pc, #256]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dcc:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ddc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dde:	2312      	movs	r3, #18
 8001de0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dec:	2304      	movs	r3, #4
 8001dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001df6:	4619      	mov	r1, r3
 8001df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfc:	f003 fc64 	bl	80056c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e04:	2312      	movs	r3, #18
 8001e06:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e12:	2304      	movs	r3, #4
 8001e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	482b      	ldr	r0, [pc, #172]	; (8001ecc <HAL_I2C_MspInit+0x170>)
 8001e20:	f003 fc52 	bl	80056c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e3c:	e03e      	b.n	8001ebc <HAL_I2C_MspInit+0x160>
  else if(i2cHandle->Instance==I2C2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <HAL_I2C_MspInit+0x174>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d139      	bne.n	8001ebc <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e50:	f107 0320 	add.w	r3, r7, #32
 8001e54:	4618      	mov	r0, r3
 8001e56:	f006 ff59 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8001e60:	f000 f8fa 	bl	8002058 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e80:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e82:	2312      	movs	r3, #18
 8001e84:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e90:	2304      	movs	r3, #4
 8001e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea0:	f003 fc12 	bl	80056c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001eaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eae:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_I2C_MspInit+0x16c>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3788      	adds	r7, #136	; 0x88
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40005400 	.word	0x40005400
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	40005800 	.word	0x40005800

08001ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eda:	f001 faa6 	bl	800342a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ede:	f000 f871 	bl	8001fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee2:	f7ff fd6f 	bl	80019c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ee6:	f7fe ff37 	bl	8000d58 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001eea:	f7fe ffad 	bl	8000e48 <MX_ADC2_Init>
  MX_FMC_Init();
 8001eee:	f7ff fc9b 	bl	8001828 <MX_FMC_Init>
  MX_I2C2_Init();
 8001ef2:	f7ff fef3 	bl	8001cdc <MX_I2C2_Init>
  MX_UART4_Init();
 8001ef6:	f000 fedf 	bl	8002cb8 <MX_UART4_Init>
  MX_UART5_Init();
 8001efa:	f000 ff29 	bl	8002d50 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001efe:	f000 ff73 	bl	8002de8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f02:	f000 ffbd 	bl	8002e80 <MX_USART2_UART_Init>
  MX_QUADSPI1_Init();
 8001f06:	f000 f8ad 	bl	8002064 <MX_QUADSPI1_Init>
  MX_SPI1_Init();
 8001f0a:	f000 f96d 	bl	80021e8 <MX_SPI1_Init>
  MX_TIM5_Init();
 8001f0e:	f000 fa89 	bl	8002424 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001f12:	f000 fb51 	bl	80025b8 <MX_TIM8_Init>
  MX_TIM20_Init();
 8001f16:	f000 fcd1 	bl	80028bc <MX_TIM20_Init>
  MX_ADC3_Init();
 8001f1a:	f7fe fffb 	bl	8000f14 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001f1e:	f7ff fac7 	bl	80014b0 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001f22:	f7ff faff 	bl	8001524 <MX_DAC2_Init>
  MX_FDCAN2_Init();
 8001f26:	f7ff fbdd 	bl	80016e4 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001f2a:	f7ff fe97 	bl	8001c5c <MX_I2C1_Init>
  MX_TIM15_Init();
 8001f2e:	f000 fc21 	bl	8002774 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8001f32:	f000 fff1 	bl	8002f18 <MX_USART3_UART_Init>
  MX_ADC4_Init();
 8001f36:	f7ff f865 	bl	8001004 <MX_ADC4_Init>
  MX_USB_Device_Init();
 8001f3a:	f00d fb95 	bl	800f668 <MX_USB_Device_Init>
  MX_DMA_Init();
 8001f3e:	f7ff fb9f 	bl	8001680 <MX_DMA_Init>
  MX_CRC_Init();
 8001f42:	f7ff fa73 	bl	800142c <MX_CRC_Init>
  MX_TIM6_Init();
 8001f46:	f000 fb01 	bl	800254c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Transmit(&huart3, "hello\r\n", sizeof("hello\r\n"), 1);
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	4918      	ldr	r1, [pc, #96]	; (8001fb0 <main+0xdc>)
 8001f50:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <main+0xe0>)
 8001f52:	f008 fcfb 	bl	800a94c <HAL_UART_Transmit>

  pca9685_handle_t pca1;
  pca1.device_address = PCA_DEFAULT_ADDRESS;
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	813b      	strh	r3, [r7, #8]
  pca1.i2c_handle = &hi2c1;
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <main+0xe4>)
 8001f5c:	607b      	str	r3, [r7, #4]

//  uint8_t data;
//  char msg[20];

  //pca9685_write_u8(&pca1, 0x0, 0x10);
  pca9685_init(&pca1);
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00e f8a5 	bl	80100b0 <pca9685_init>
  HAL_Delay(1000);
 8001f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f6a:	f001 facf 	bl	800350c <HAL_Delay>
  pca9685_setOscFreq(&pca1, 25200000);
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	4912      	ldr	r1, [pc, #72]	; (8001fbc <main+0xe8>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f00e f970 	bl	8010258 <pca9685_setOscFreq>
  pca9685_setPrescaleFreq(&pca1, 50);
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001fc0 <main+0xec>
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f00e f8be 	bl	8010100 <pca9685_setPrescaleFreq>
//	    //pwm.setPWM(servonum, 0, pulselen);
//	    pca9685_setPWM(&pca1, 0, 0, pulselen);
//	    HAL_Delay(1);
//	  }

	  pca9685_setPWM(&pca1, 1, 0, 50);
 8001f84:	1d38      	adds	r0, r7, #4
 8001f86:	2332      	movs	r3, #50	; 0x32
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	f00e f972 	bl	8010274 <pca9685_setPWM>

	  HAL_Delay(1000);
 8001f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f94:	f001 faba 	bl	800350c <HAL_Delay>

	  pca9685_setPWM(&pca1, 1, 0, 480);
 8001f98:	1d38      	adds	r0, r7, #4
 8001f9a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	f00e f967 	bl	8010274 <pca9685_setPWM>

	  HAL_Delay(1000);
 8001fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001faa:	f001 faaf 	bl	800350c <HAL_Delay>
	  pca9685_setPWM(&pca1, 1, 0, 50);
 8001fae:	e7e9      	b.n	8001f84 <main+0xb0>
 8001fb0:	08010368 	.word	0x08010368
 8001fb4:	20000968 	.word	0x20000968
 8001fb8:	20000464 	.word	0x20000464
 8001fbc:	01808580 	.word	0x01808580
 8001fc0:	42480000 	.word	0x42480000

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b094      	sub	sp, #80	; 0x50
 8001fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fca:	f107 0318 	add.w	r3, r7, #24
 8001fce:	2238      	movs	r2, #56	; 0x38
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00e f9b4 	bl	8010340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fea:	f005 ffe5 	bl	8007fb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ff2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ff6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002000:	2302      	movs	r3, #2
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002004:	2348      	movs	r3, #72	; 0x48
 8002006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002008:	2302      	movs	r3, #2
 800200a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800200c:	2306      	movs	r3, #6
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002010:	2302      	movs	r3, #2
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	4618      	mov	r0, r3
 800201a:	f006 f943 	bl	80082a4 <HAL_RCC_OscConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002024:	f000 f818 	bl	8002058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002028:	230f      	movs	r3, #15
 800202a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202c:	2303      	movs	r3, #3
 800202e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2104      	movs	r1, #4
 8002040:	4618      	mov	r0, r3
 8002042:	f006 fc47 	bl	80088d4 <HAL_RCC_ClockConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800204c:	f000 f804 	bl	8002058 <Error_Handler>
  }
}
 8002050:	bf00      	nop
 8002052:	3750      	adds	r7, #80	; 0x50
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
}
 800205e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002060:	e7fe      	b.n	8002060 <Error_Handler+0x8>
	...

08002064 <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 800206a:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <MX_QUADSPI1_Init+0x54>)
 800206c:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 255;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 8002070:	22ff      	movs	r2, #255	; 0xff
 8002072:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 8002076:	2201      	movs	r2, #1
 8002078:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 1;
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 8002082:	2201      	movs	r2, #1
 8002084:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <MX_QUADSPI1_Init+0x50>)
 80020a0:	f006 f83e 	bl	8008120 <HAL_QSPI_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_QUADSPI1_Init+0x4a>
  {
    Error_Handler();
 80020aa:	f7ff ffd5 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200004fc 	.word	0x200004fc
 80020b8:	a0001000 	.word	0xa0001000

080020bc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b0a0      	sub	sp, #128	; 0x80
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	2254      	movs	r2, #84	; 0x54
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f00e f92f 	bl	8010340 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <HAL_QSPI_MspInit+0x11c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d170      	bne.n	80021ce <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80020ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f6:	f107 0318 	add.w	r3, r7, #24
 80020fa:	4618      	mov	r0, r3
 80020fc:	f006 fe06 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 8002106:	f7ff ffa7 	bl	8002058 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800210a:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 800210c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210e:	4a33      	ldr	r2, [pc, #204]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	6513      	str	r3, [r2, #80]	; 0x50
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	4a2d      	ldr	r2, [pc, #180]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212e:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002158:	f043 0320 	orr.w	r3, r3, #32
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_QSPI_MspInit+0x120>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> QUADSPI1_BK1_IO0
    PB10     ------> QUADSPI1_CLK
    PB11     ------> QUADSPI1_BK1_NCS
    PF6     ------> QUADSPI1_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800217a:	230a      	movs	r3, #10
 800217c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002182:	4619      	mov	r1, r3
 8002184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002188:	f003 fa9e 	bl	80056c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_IO1_Pin|QSPI_IO0_Pin|QSPI_CLK_Pin|QSPI_NCS_Pin;
 800218c:	f640 4303 	movw	r3, #3075	; 0xc03
 8002190:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800219e:	230a      	movs	r3, #10
 80021a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021a6:	4619      	mov	r1, r3
 80021a8:	480d      	ldr	r0, [pc, #52]	; (80021e0 <HAL_QSPI_MspInit+0x124>)
 80021aa:	f003 fa8d 	bl	80056c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_IO3_Pin;
 80021ae:	2340      	movs	r3, #64	; 0x40
 80021b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021be:	230a      	movs	r3, #10
 80021c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(QSPI_IO3_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021c6:	4619      	mov	r1, r3
 80021c8:	4806      	ldr	r0, [pc, #24]	; (80021e4 <HAL_QSPI_MspInit+0x128>)
 80021ca:	f003 fa7d 	bl	80056c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80021ce:	bf00      	nop
 80021d0:	3780      	adds	r7, #128	; 0x80
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	a0001000 	.word	0xa0001000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	48000400 	.word	0x48000400
 80021e4:	48001400 	.word	0x48001400

080021e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <MX_SPI1_Init+0x74>)
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <MX_SPI1_Init+0x78>)
 80021f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <MX_SPI1_Init+0x74>)
 80021f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <MX_SPI1_Init+0x74>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_SPI1_Init+0x74>)
 8002202:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002206:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_SPI1_Init+0x74>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <MX_SPI1_Init+0x74>)
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_SPI1_Init+0x74>)
 8002216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_SPI1_Init+0x74>)
 800221e:	2228      	movs	r2, #40	; 0x28
 8002220:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_SPI1_Init+0x74>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_SPI1_Init+0x74>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_SPI1_Init+0x74>)
 8002230:	2200      	movs	r2, #0
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_SPI1_Init+0x74>)
 8002236:	2207      	movs	r2, #7
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <MX_SPI1_Init+0x74>)
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_SPI1_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_SPI1_Init+0x74>)
 8002248:	f006 ffae 	bl	80091a8 <HAL_SPI_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002252:	f7ff ff01 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000548 	.word	0x20000548
 8002260:	40013000 	.word	0x40013000

08002264 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_SPI_MspInit+0x7c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d127      	bne.n	80022d6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_SPI_MspInit+0x80>)
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <HAL_SPI_MspInit+0x80>)
 800228c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002290:	6613      	str	r3, [r2, #96]	; 0x60
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_SPI_MspInit+0x80>)
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_SPI_MspInit+0x80>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_SPI_MspInit+0x80>)
 80022a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_SPI_MspInit+0x80>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80022b6:	231c      	movs	r3, #28
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022c6:	2305      	movs	r3, #5
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <HAL_SPI_MspInit+0x84>)
 80022d2:	f003 f9f9 	bl	80056c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	; 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40013000 	.word	0x40013000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	48001800 	.word	0x48001800

080022ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_MspInit+0x44>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_MspInit+0x44>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6613      	str	r3, [r2, #96]	; 0x60
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_MspInit+0x44>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_MspInit+0x44>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_MspInit+0x44>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	6593      	str	r3, [r2, #88]	; 0x58
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_MspInit+0x44>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002322:	f005 feed 	bl	8008100 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <NMI_Handler+0x4>

0800233a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <MemManage_Handler+0x4>

08002346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <UsageFault_Handler+0x4>

08002352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002380:	f001 f8a6 	bl	80034d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <DMA1_Channel1_IRQHandler+0x10>)
 800238e:	f002 fec3 	bl	8005118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200009f8 	.word	0x200009f8

0800239c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <DMA1_Channel2_IRQHandler+0x10>)
 80023a2:	f002 feb9 	bl	8005118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000a58 	.word	0x20000a58

080023b0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <USB_LP_IRQHandler+0x10>)
 80023b6:	f004 f9d3 	bl	8006760 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20001f90 	.word	0x20001f90

080023c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 80023c8:	2040      	movs	r0, #64	; 0x40
 80023ca:	f003 fb17 	bl	80059fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_ESC_Pin);
 80023d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023da:	f003 fb0f 	bl	80059fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <TIM6_DAC_IRQHandler+0x14>)
 80023ea:	f007 f888 	bl	80094fe <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <TIM6_DAC_IRQHandler+0x18>)
 80023f0:	f002 fbd4 	bl	8004b9c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200005f8 	.word	0x200005f8
 80023fc:	2000037c 	.word	0x2000037c

08002400 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <SystemInit+0x20>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <SystemInit+0x20>)
 800240c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <MX_TIM5_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim20;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08e      	sub	sp, #56	; 0x38
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	f107 031c 	add.w	r3, r7, #28
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002444:	463b      	mov	r3, r7
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	615a      	str	r2, [r3, #20]
 8002454:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <MX_TIM5_Init+0x120>)
 8002458:	4a3b      	ldr	r2, [pc, #236]	; (8002548 <MX_TIM5_Init+0x124>)
 800245a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10;
 800245c:	4b39      	ldr	r3, [pc, #228]	; (8002544 <MX_TIM5_Init+0x120>)
 800245e:	220a      	movs	r2, #10
 8002460:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b38      	ldr	r3, [pc, #224]	; (8002544 <MX_TIM5_Init+0x120>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <MX_TIM5_Init+0x120>)
 800246a:	f242 7210 	movw	r2, #10000	; 0x2710
 800246e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002470:	4b34      	ldr	r3, [pc, #208]	; (8002544 <MX_TIM5_Init+0x120>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002476:	4b33      	ldr	r3, [pc, #204]	; (8002544 <MX_TIM5_Init+0x120>)
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800247c:	4831      	ldr	r0, [pc, #196]	; (8002544 <MX_TIM5_Init+0x120>)
 800247e:	f006 ff86 	bl	800938e <HAL_TIM_Base_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002488:	f7ff fde6 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002496:	4619      	mov	r1, r3
 8002498:	482a      	ldr	r0, [pc, #168]	; (8002544 <MX_TIM5_Init+0x120>)
 800249a:	f007 fac3 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80024a4:	f7ff fdd8 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024a8:	4826      	ldr	r0, [pc, #152]	; (8002544 <MX_TIM5_Init+0x120>)
 80024aa:	f006 ffc7 	bl	800943c <HAL_TIM_PWM_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80024b4:	f7ff fdd0 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	4619      	mov	r1, r3
 80024c6:	481f      	ldr	r0, [pc, #124]	; (8002544 <MX_TIM5_Init+0x120>)
 80024c8:	f008 f862 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80024d2:	f7ff fdc1 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d6:	2360      	movs	r3, #96	; 0x60
 80024d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 80024da:	23c8      	movs	r3, #200	; 0xc8
 80024dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024e6:	463b      	mov	r3, r7
 80024e8:	2204      	movs	r2, #4
 80024ea:	4619      	mov	r1, r3
 80024ec:	4815      	ldr	r0, [pc, #84]	; (8002544 <MX_TIM5_Init+0x120>)
 80024ee:	f007 f985 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80024f8:	f7ff fdae 	bl	8002058 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 80024fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002500:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002502:	463b      	mov	r3, r7
 8002504:	2208      	movs	r2, #8
 8002506:	4619      	mov	r1, r3
 8002508:	480e      	ldr	r0, [pc, #56]	; (8002544 <MX_TIM5_Init+0x120>)
 800250a:	f007 f977 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM5_Init+0xf4>
  {
    Error_Handler();
 8002514:	f7ff fda0 	bl	8002058 <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8002518:	f44f 7316 	mov.w	r3, #600	; 0x258
 800251c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800251e:	463b      	mov	r3, r7
 8002520:	220c      	movs	r2, #12
 8002522:	4619      	mov	r1, r3
 8002524:	4807      	ldr	r0, [pc, #28]	; (8002544 <MX_TIM5_Init+0x120>)
 8002526:	f007 f969 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8002530:	f7ff fd92 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002534:	4803      	ldr	r0, [pc, #12]	; (8002544 <MX_TIM5_Init+0x120>)
 8002536:	f000 fb15 	bl	8002b64 <HAL_TIM_MspPostInit>

}
 800253a:	bf00      	nop
 800253c:	3738      	adds	r7, #56	; 0x38
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200005ac 	.word	0x200005ac
 8002548:	40000c00 	.word	0x40000c00

0800254c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <MX_TIM6_Init+0x64>)
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <MX_TIM6_Init+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <MX_TIM6_Init+0x64>)
 8002564:	22aa      	movs	r2, #170	; 0xaa
 8002566:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <MX_TIM6_Init+0x64>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <MX_TIM6_Init+0x64>)
 8002570:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002574:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <MX_TIM6_Init+0x64>)
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <MX_TIM6_Init+0x64>)
 800257e:	f006 ff06 	bl	800938e <HAL_TIM_Base_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002588:	f7ff fd66 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_TIM6_Init+0x64>)
 800259a:	f007 fff9 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80025a4:	f7ff fd58 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200005f8 	.word	0x200005f8
 80025b4:	40001000 	.word	0x40001000

080025b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b09c      	sub	sp, #112	; 0x70
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
 80025e8:	615a      	str	r2, [r3, #20]
 80025ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	2234      	movs	r2, #52	; 0x34
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f00d fea4 	bl	8010340 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025f8:	4b5c      	ldr	r3, [pc, #368]	; (800276c <MX_TIM8_Init+0x1b4>)
 80025fa:	4a5d      	ldr	r2, [pc, #372]	; (8002770 <MX_TIM8_Init+0x1b8>)
 80025fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002600:	2200      	movs	r2, #0
 8002602:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800260a:	4b58      	ldr	r3, [pc, #352]	; (800276c <MX_TIM8_Init+0x1b4>)
 800260c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002610:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002612:	4b56      	ldr	r3, [pc, #344]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002618:	4b54      	ldr	r3, [pc, #336]	; (800276c <MX_TIM8_Init+0x1b4>)
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261e:	4b53      	ldr	r3, [pc, #332]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002624:	4851      	ldr	r0, [pc, #324]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002626:	f006 feb2 	bl	800938e <HAL_TIM_Base_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002630:	f7ff fd12 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002638:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800263a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800263e:	4619      	mov	r1, r3
 8002640:	484a      	ldr	r0, [pc, #296]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002642:	f007 f9ef 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800264c:	f7ff fd04 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002650:	4846      	ldr	r0, [pc, #280]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002652:	f006 fef3 	bl	800943c <HAL_TIM_PWM_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800265c:	f7ff fcfc 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800266c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002670:	4619      	mov	r1, r3
 8002672:	483e      	ldr	r0, [pc, #248]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002674:	f007 ff8c 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800267e:	f7ff fceb 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002682:	2360      	movs	r3, #96	; 0x60
 8002684:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 8002686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800268c:	2300      	movs	r3, #0
 800268e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002690:	2300      	movs	r3, #0
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026a4:	2200      	movs	r2, #0
 80026a6:	4619      	mov	r1, r3
 80026a8:	4830      	ldr	r0, [pc, #192]	; (800276c <MX_TIM8_Init+0x1b4>)
 80026aa:	f007 f8a7 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80026b4:	f7ff fcd0 	bl	8002058 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 80026b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80026bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026c2:	2204      	movs	r2, #4
 80026c4:	4619      	mov	r1, r3
 80026c6:	4829      	ldr	r0, [pc, #164]	; (800276c <MX_TIM8_Init+0x1b4>)
 80026c8:	f007 f898 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80026d2:	f7ff fcc1 	bl	8002058 <Error_Handler>
  }
  sConfigOC.Pulse = 4000;
 80026d6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026e0:	2208      	movs	r2, #8
 80026e2:	4619      	mov	r1, r3
 80026e4:	4821      	ldr	r0, [pc, #132]	; (800276c <MX_TIM8_Init+0x1b4>)
 80026e6:	f007 f889 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 80026f0:	f7ff fcb2 	bl	8002058 <Error_Handler>
  }
  sConfigOC.Pulse = 8000;
 80026f4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80026f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026fe:	220c      	movs	r2, #12
 8002700:	4619      	mov	r1, r3
 8002702:	481a      	ldr	r0, [pc, #104]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002704:	f007 f87a 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800270e:	f7ff fca3 	bl	8002058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800272a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002738:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002742:	2300      	movs	r3, #0
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002750:	f007 ffb4 	bl	800a6bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM8_Init+0x1a6>
  {
    Error_Handler();
 800275a:	f7ff fc7d 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800275e:	4803      	ldr	r0, [pc, #12]	; (800276c <MX_TIM8_Init+0x1b4>)
 8002760:	f000 fa00 	bl	8002b64 <HAL_TIM_MspPostInit>

}
 8002764:	bf00      	nop
 8002766:	3770      	adds	r7, #112	; 0x70
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000644 	.word	0x20000644
 8002770:	40013400 	.word	0x40013400

08002774 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b09c      	sub	sp, #112	; 0x70
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002788:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002794:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
 80027a4:	615a      	str	r2, [r3, #20]
 80027a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	2234      	movs	r2, #52	; 0x34
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f00d fdc6 	bl	8010340 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80027b4:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <MX_TIM15_Init+0x140>)
 80027b6:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <MX_TIM15_Init+0x144>)
 80027b8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <MX_TIM15_Init+0x140>)
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c0:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <MX_TIM15_Init+0x140>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 32768;
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <MX_TIM15_Init+0x140>)
 80027c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027cc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <MX_TIM15_Init+0x140>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80027d4:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <MX_TIM15_Init+0x140>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027da:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <MX_TIM15_Init+0x140>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80027e0:	4834      	ldr	r0, [pc, #208]	; (80028b4 <MX_TIM15_Init+0x140>)
 80027e2:	f006 fdd4 	bl	800938e <HAL_TIM_Base_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80027ec:	f7ff fc34 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80027f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027fa:	4619      	mov	r1, r3
 80027fc:	482d      	ldr	r0, [pc, #180]	; (80028b4 <MX_TIM15_Init+0x140>)
 80027fe:	f007 f911 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8002808:	f7ff fc26 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800280c:	4829      	ldr	r0, [pc, #164]	; (80028b4 <MX_TIM15_Init+0x140>)
 800280e:	f006 fe15 	bl	800943c <HAL_TIM_PWM_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002818:	f7ff fc1e 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281c:	2300      	movs	r3, #0
 800281e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002824:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002828:	4619      	mov	r1, r3
 800282a:	4822      	ldr	r0, [pc, #136]	; (80028b4 <MX_TIM15_Init+0x140>)
 800282c:	f007 feb0 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8002836:	f7ff fc0f 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800283a:	2360      	movs	r3, #96	; 0x60
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 800283e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002844:	2300      	movs	r3, #0
 8002846:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002848:	2300      	movs	r3, #0
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002858:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800285c:	2204      	movs	r2, #4
 800285e:	4619      	mov	r1, r3
 8002860:	4814      	ldr	r0, [pc, #80]	; (80028b4 <MX_TIM15_Init+0x140>)
 8002862:	f006 ffcb 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800286c:	f7ff fbf4 	bl	8002058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4807      	ldr	r0, [pc, #28]	; (80028b4 <MX_TIM15_Init+0x140>)
 8002898:	f007 ff10 	bl	800a6bc <HAL_TIMEx_ConfigBreakDeadTime>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80028a2:	f7ff fbd9 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80028a6:	4803      	ldr	r0, [pc, #12]	; (80028b4 <MX_TIM15_Init+0x140>)
 80028a8:	f000 f95c 	bl	8002b64 <HAL_TIM_MspPostInit>

}
 80028ac:	bf00      	nop
 80028ae:	3770      	adds	r7, #112	; 0x70
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000690 	.word	0x20000690
 80028b8:	40014000 	.word	0x40014000

080028bc <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b09c      	sub	sp, #112	; 0x70
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
 80028ec:	615a      	str	r2, [r3, #20]
 80028ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	2234      	movs	r2, #52	; 0x34
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f00d fd22 	bl	8010340 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80028fc:	4b5c      	ldr	r3, [pc, #368]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 80028fe:	4a5d      	ldr	r2, [pc, #372]	; (8002a74 <MX_TIM20_Init+0x1b8>)
 8002900:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002902:	4b5b      	ldr	r3, [pc, #364]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 16000;
 800290e:	4b58      	ldr	r3, [pc, #352]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002910:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002914:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002916:	4b56      	ldr	r3, [pc, #344]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800291c:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 800291e:	2200      	movs	r2, #0
 8002920:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002922:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002928:	4851      	ldr	r0, [pc, #324]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 800292a:	f006 fd30 	bl	800938e <HAL_TIM_Base_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8002934:	f7ff fb90 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 800293e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002942:	4619      	mov	r1, r3
 8002944:	484a      	ldr	r0, [pc, #296]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002946:	f007 f86d 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8002950:	f7ff fb82 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8002954:	4846      	ldr	r0, [pc, #280]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002956:	f006 fd71 	bl	800943c <HAL_TIM_PWM_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8002960:	f7ff fb7a 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002964:	2300      	movs	r3, #0
 8002966:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002968:	2300      	movs	r3, #0
 800296a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002970:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002974:	4619      	mov	r1, r3
 8002976:	483e      	ldr	r0, [pc, #248]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002978:	f007 fe0a 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8002982:	f7ff fb69 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002986:	2360      	movs	r3, #96	; 0x60
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 800298a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002990:	2300      	movs	r3, #0
 8002992:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002994:	2300      	movs	r3, #0
 8002996:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029a0:	2300      	movs	r3, #0
 80029a2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029a8:	2200      	movs	r2, #0
 80029aa:	4619      	mov	r1, r3
 80029ac:	4830      	ldr	r0, [pc, #192]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 80029ae:	f006 ff25 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM20_Init+0x100>
  {
    Error_Handler();
 80029b8:	f7ff fb4e 	bl	8002058 <Error_Handler>
  }
  sConfigOC.Pulse = 10000;
 80029bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80029c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029c6:	2204      	movs	r2, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4829      	ldr	r0, [pc, #164]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 80029cc:	f006 ff16 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM20_Init+0x11e>
  {
    Error_Handler();
 80029d6:	f7ff fb3f 	bl	8002058 <Error_Handler>
  }
  sConfigOC.Pulse = 12000;
 80029da:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029e4:	2208      	movs	r2, #8
 80029e6:	4619      	mov	r1, r3
 80029e8:	4821      	ldr	r0, [pc, #132]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 80029ea:	f006 ff07 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM20_Init+0x13c>
  {
    Error_Handler();
 80029f4:	f7ff fb30 	bl	8002058 <Error_Handler>
  }
  sConfigOC.Pulse = 15000;
 80029f8:	f643 2398 	movw	r3, #15000	; 0x3a98
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a02:	220c      	movs	r2, #12
 8002a04:	4619      	mov	r1, r3
 8002a06:	481a      	ldr	r0, [pc, #104]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002a08:	f006 fef8 	bl	80097fc <HAL_TIM_PWM_ConfigChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM20_Init+0x15a>
  {
    Error_Handler();
 8002a12:	f7ff fb21 	bl	8002058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002a34:	2300      	movs	r3, #0
 8002a36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002a46:	2300      	movs	r3, #0
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4807      	ldr	r0, [pc, #28]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002a54:	f007 fe32 	bl	800a6bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM20_Init+0x1a6>
  {
    Error_Handler();
 8002a5e:	f7ff fafb 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8002a62:	4803      	ldr	r0, [pc, #12]	; (8002a70 <MX_TIM20_Init+0x1b4>)
 8002a64:	f000 f87e 	bl	8002b64 <HAL_TIM_MspPostInit>

}
 8002a68:	bf00      	nop
 8002a6a:	3770      	adds	r7, #112	; 0x70
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200006dc 	.word	0x200006dc
 8002a74:	40015000 	.word	0x40015000

08002a78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a31      	ldr	r2, [pc, #196]	; (8002b4c <HAL_TIM_Base_MspInit+0xd4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10c      	bne.n	8002aa4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a8a:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	4a30      	ldr	r2, [pc, #192]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	6593      	str	r3, [r2, #88]	; 0x58
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8002aa2:	e04e      	b.n	8002b42 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM6)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <HAL_TIM_Base_MspInit+0xdc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d114      	bne.n	8002ad8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002aae:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002ab4:	f043 0310 	orr.w	r3, r3, #16
 8002ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2036      	movs	r0, #54	; 0x36
 8002acc:	f001 ff25 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ad0:	2036      	movs	r0, #54	; 0x36
 8002ad2:	f001 ff3c 	bl	800494e <HAL_NVIC_EnableIRQ>
}
 8002ad6:	e034      	b.n	8002b42 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM8)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_TIM_Base_MspInit+0xe0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10c      	bne.n	8002afc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	4a1a      	ldr	r2, [pc, #104]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002ae8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aec:	6613      	str	r3, [r2, #96]	; 0x60
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697b      	ldr	r3, [r7, #20]
}
 8002afa:	e022      	b.n	8002b42 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM15)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_TIM_Base_MspInit+0xe4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10c      	bne.n	8002b20 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0a:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6613      	str	r3, [r2, #96]	; 0x60
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
}
 8002b1e:	e010      	b.n	8002b42 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM20)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_TIM_Base_MspInit+0xe8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10b      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b34:	6613      	str	r3, [r2, #96]	; 0x60
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_TIM_Base_MspInit+0xd8>)
 8002b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
}
 8002b42:	bf00      	nop
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40001000 	.word	0x40001000
 8002b58:	40013400 	.word	0x40013400
 8002b5c:	40014000 	.word	0x40014000
 8002b60:	40015000 	.word	0x40015000

08002b64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	; 0x30
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a46      	ldr	r2, [pc, #280]	; (8002c9c <HAL_TIM_MspPostInit+0x138>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d11d      	bne.n	8002bc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b86:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4a45      	ldr	r2, [pc, #276]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002b8c:	f043 0320 	orr.w	r3, r3, #32
 8002b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b92:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PF7     ------> TIM5_CH2
    PF8     ------> TIM5_CH3
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8002b9e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8002bb0:	2306      	movs	r3, #6
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	4619      	mov	r1, r3
 8002bba:	483a      	ldr	r0, [pc, #232]	; (8002ca4 <HAL_TIM_MspPostInit+0x140>)
 8002bbc:	f002 fd84 	bl	80056c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8002bc0:	e067      	b.n	8002c92 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a38      	ldr	r2, [pc, #224]	; (8002ca8 <HAL_TIM_MspPostInit+0x144>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d11d      	bne.n	8002c08 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bcc:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	4a33      	ldr	r2, [pc, #204]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd8:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 8002be4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	482a      	ldr	r0, [pc, #168]	; (8002cac <HAL_TIM_MspPostInit+0x148>)
 8002c02:	f002 fd61 	bl	80056c8 <HAL_GPIO_Init>
}
 8002c06:	e044      	b.n	8002c92 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM15)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <HAL_TIM_MspPostInit+0x14c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d11d      	bne.n	8002c4e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002c18:	f043 0320 	orr.w	r3, r3, #32
 8002c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM5_Pin;
 8002c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	4619      	mov	r1, r3
 8002c46:	4817      	ldr	r0, [pc, #92]	; (8002ca4 <HAL_TIM_MspPostInit+0x140>)
 8002c48:	f002 fd3e 	bl	80056c8 <HAL_GPIO_Init>
}
 8002c4c:	e021      	b.n	8002c92 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM20)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <HAL_TIM_MspPostInit+0x150>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d11c      	bne.n	8002c92 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_TIM_MspPostInit+0x13c>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 8002c70:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002c82:	2302      	movs	r3, #2
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c86:	f107 031c 	add.w	r3, r7, #28
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <HAL_TIM_MspPostInit+0x140>)
 8002c8e:	f002 fd1b 	bl	80056c8 <HAL_GPIO_Init>
}
 8002c92:	bf00      	nop
 8002c94:	3730      	adds	r7, #48	; 0x30
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	48001400 	.word	0x48001400
 8002ca8:	40013400 	.word	0x40013400
 8002cac:	48000800 	.word	0x48000800
 8002cb0:	40014000 	.word	0x40014000
 8002cb4:	40015000 	.word	0x40015000

08002cb8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <MX_UART4_Init+0x90>)
 8002cbe:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <MX_UART4_Init+0x94>)
 8002cc0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <MX_UART4_Init+0x90>)
 8002cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002cca:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <MX_UART4_Init+0x90>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <MX_UART4_Init+0x90>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002cd6:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <MX_UART4_Init+0x90>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <MX_UART4_Init+0x90>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce2:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <MX_UART4_Init+0x90>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <MX_UART4_Init+0x90>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <MX_UART4_Init+0x90>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <MX_UART4_Init+0x90>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <MX_UART4_Init+0x90>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d00:	4811      	ldr	r0, [pc, #68]	; (8002d48 <MX_UART4_Init+0x90>)
 8002d02:	f007 fdd3 	bl	800a8ac <HAL_UART_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002d0c:	f7ff f9a4 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d10:	2100      	movs	r1, #0
 8002d12:	480d      	ldr	r0, [pc, #52]	; (8002d48 <MX_UART4_Init+0x90>)
 8002d14:	f008 fb9a 	bl	800b44c <HAL_UARTEx_SetTxFifoThreshold>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002d1e:	f7ff f99b 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d22:	2100      	movs	r1, #0
 8002d24:	4808      	ldr	r0, [pc, #32]	; (8002d48 <MX_UART4_Init+0x90>)
 8002d26:	f008 fbcf 	bl	800b4c8 <HAL_UARTEx_SetRxFifoThreshold>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002d30:	f7ff f992 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002d34:	4804      	ldr	r0, [pc, #16]	; (8002d48 <MX_UART4_Init+0x90>)
 8002d36:	f008 fb50 	bl	800b3da <HAL_UARTEx_DisableFifoMode>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002d40:	f7ff f98a 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000728 	.word	0x20000728
 8002d4c:	40004c00 	.word	0x40004c00

08002d50 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d56:	4a23      	ldr	r2, [pc, #140]	; (8002de4 <MX_UART5_Init+0x94>)
 8002d58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002d5a:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d76:	220c      	movs	r2, #12
 8002d78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002d98:	4811      	ldr	r0, [pc, #68]	; (8002de0 <MX_UART5_Init+0x90>)
 8002d9a:	f007 fd87 	bl	800a8ac <HAL_UART_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002da4:	f7ff f958 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da8:	2100      	movs	r1, #0
 8002daa:	480d      	ldr	r0, [pc, #52]	; (8002de0 <MX_UART5_Init+0x90>)
 8002dac:	f008 fb4e 	bl	800b44c <HAL_UARTEx_SetTxFifoThreshold>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002db6:	f7ff f94f 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4808      	ldr	r0, [pc, #32]	; (8002de0 <MX_UART5_Init+0x90>)
 8002dbe:	f008 fb83 	bl	800b4c8 <HAL_UARTEx_SetRxFifoThreshold>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002dc8:	f7ff f946 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002dcc:	4804      	ldr	r0, [pc, #16]	; (8002de0 <MX_UART5_Init+0x90>)
 8002dce:	f008 fb04 	bl	800b3da <HAL_UARTEx_DisableFifoMode>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002dd8:	f7ff f93e 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200007b8 	.word	0x200007b8
 8002de4:	40005000 	.word	0x40005000

08002de8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002dee:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <MX_USART1_UART_Init+0x94>)
 8002df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e0e:	220c      	movs	r2, #12
 8002e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e30:	4811      	ldr	r0, [pc, #68]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e32:	f007 fd3b 	bl	800a8ac <HAL_UART_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e3c:	f7ff f90c 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e40:	2100      	movs	r1, #0
 8002e42:	480d      	ldr	r0, [pc, #52]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e44:	f008 fb02 	bl	800b44c <HAL_UARTEx_SetTxFifoThreshold>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e4e:	f7ff f903 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e52:	2100      	movs	r1, #0
 8002e54:	4808      	ldr	r0, [pc, #32]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e56:	f008 fb37 	bl	800b4c8 <HAL_UARTEx_SetRxFifoThreshold>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e60:	f7ff f8fa 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e64:	4804      	ldr	r0, [pc, #16]	; (8002e78 <MX_USART1_UART_Init+0x90>)
 8002e66:	f008 fab8 	bl	800b3da <HAL_UARTEx_DisableFifoMode>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e70:	f7ff f8f2 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000848 	.word	0x20000848
 8002e7c:	40013800 	.word	0x40013800

08002e80 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e84:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <MX_USART2_UART_Init+0x94>)
 8002e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e92:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ec8:	4811      	ldr	r0, [pc, #68]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002eca:	f007 fcef 	bl	800a8ac <HAL_UART_Init>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002ed4:	f7ff f8c0 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ed8:	2100      	movs	r1, #0
 8002eda:	480d      	ldr	r0, [pc, #52]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002edc:	f008 fab6 	bl	800b44c <HAL_UARTEx_SetTxFifoThreshold>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002ee6:	f7ff f8b7 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eea:	2100      	movs	r1, #0
 8002eec:	4808      	ldr	r0, [pc, #32]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002eee:	f008 faeb 	bl	800b4c8 <HAL_UARTEx_SetRxFifoThreshold>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002ef8:	f7ff f8ae 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002efc:	4804      	ldr	r0, [pc, #16]	; (8002f10 <MX_USART2_UART_Init+0x90>)
 8002efe:	f008 fa6c 	bl	800b3da <HAL_UARTEx_DisableFifoMode>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002f08:	f7ff f8a6 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	200008d8 	.word	0x200008d8
 8002f14:	40004400 	.word	0x40004400

08002f18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f1c:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f1e:	4a23      	ldr	r2, [pc, #140]	; (8002fac <MX_USART3_UART_Init+0x94>)
 8002f20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f22:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f3e:	220c      	movs	r2, #12
 8002f40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f54:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f60:	4811      	ldr	r0, [pc, #68]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f62:	f007 fca3 	bl	800a8ac <HAL_UART_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002f6c:	f7ff f874 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f70:	2100      	movs	r1, #0
 8002f72:	480d      	ldr	r0, [pc, #52]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f74:	f008 fa6a 	bl	800b44c <HAL_UARTEx_SetTxFifoThreshold>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002f7e:	f7ff f86b 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f82:	2100      	movs	r1, #0
 8002f84:	4808      	ldr	r0, [pc, #32]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f86:	f008 fa9f 	bl	800b4c8 <HAL_UARTEx_SetRxFifoThreshold>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002f90:	f7ff f862 	bl	8002058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <MX_USART3_UART_Init+0x90>)
 8002f96:	f008 fa20 	bl	800b3da <HAL_UARTEx_DisableFifoMode>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002fa0:	f7ff f85a 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000968 	.word	0x20000968
 8002fac:	40004800 	.word	0x40004800

08002fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0a8      	sub	sp, #160	; 0xa0
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fcc:	2254      	movs	r2, #84	; 0x54
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f00d f9b5 	bl	8010340 <memset>
  if(uartHandle->Instance==UART4)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4aad      	ldr	r2, [pc, #692]	; (8003290 <HAL_UART_MspInit+0x2e0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d13c      	bne.n	800305a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fe8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fec:	4618      	mov	r0, r3
 8002fee:	f005 fe8d 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ff8:	f7ff f82e 	bl	8002058 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ffc:	4ba5      	ldr	r3, [pc, #660]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	4aa4      	ldr	r2, [pc, #656]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8003002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003006:	6593      	str	r3, [r2, #88]	; 0x58
 8003008:	4ba2      	ldr	r3, [pc, #648]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003014:	4b9f      	ldr	r3, [pc, #636]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8003016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003018:	4a9e      	ldr	r2, [pc, #632]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003020:	4b9c      	ldr	r3, [pc, #624]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800302c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003046:	2305      	movs	r3, #5
 8003048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800304c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003050:	4619      	mov	r1, r3
 8003052:	4891      	ldr	r0, [pc, #580]	; (8003298 <HAL_UART_MspInit+0x2e8>)
 8003054:	f002 fb38 	bl	80056c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003058:	e1b2      	b.n	80033c0 <HAL_UART_MspInit+0x410>
  else if(uartHandle->Instance==UART5)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a8f      	ldr	r2, [pc, #572]	; (800329c <HAL_UART_MspInit+0x2ec>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d15d      	bne.n	8003120 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003064:	2310      	movs	r3, #16
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003068:	2300      	movs	r3, #0
 800306a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800306c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003070:	4618      	mov	r0, r3
 8003072:	f005 fe4b 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800307c:	f7fe ffec 	bl	8002058 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003080:	4b84      	ldr	r3, [pc, #528]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	4a83      	ldr	r2, [pc, #524]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8003086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800308a:	6593      	str	r3, [r2, #88]	; 0x58
 800308c:	4b81      	ldr	r3, [pc, #516]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003098:	4b7e      	ldr	r3, [pc, #504]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800309a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309c:	4a7d      	ldr	r2, [pc, #500]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030a4:	4b7b      	ldr	r3, [pc, #492]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b0:	4b78      	ldr	r3, [pc, #480]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 80030b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b4:	4a77      	ldr	r2, [pc, #476]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 80030b6:	f043 0308 	orr.w	r3, r3, #8
 80030ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030bc:	4b75      	ldr	r3, [pc, #468]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 80030be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 80030c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80030e2:	2305      	movs	r3, #5
 80030e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 80030e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80030ec:	4619      	mov	r1, r3
 80030ee:	486a      	ldr	r0, [pc, #424]	; (8003298 <HAL_UART_MspInit+0x2e8>)
 80030f0:	f002 faea 	bl	80056c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 80030f4:	2304      	movs	r3, #4
 80030f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fa:	2302      	movs	r3, #2
 80030fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800310c:	2305      	movs	r3, #5
 800310e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 8003112:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003116:	4619      	mov	r1, r3
 8003118:	4861      	ldr	r0, [pc, #388]	; (80032a0 <HAL_UART_MspInit+0x2f0>)
 800311a:	f002 fad5 	bl	80056c8 <HAL_GPIO_Init>
}
 800311e:	e14f      	b.n	80033c0 <HAL_UART_MspInit+0x410>
  else if(uartHandle->Instance==USART1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <HAL_UART_MspInit+0x2f4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	f040 80c8 	bne.w	80032bc <HAL_UART_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800312c:	2301      	movs	r3, #1
 800312e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003134:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003138:	4618      	mov	r0, r3
 800313a:	f005 fde7 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8003144:	f7fe ff88 	bl	8002058 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003148:	4b52      	ldr	r3, [pc, #328]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	4a51      	ldr	r2, [pc, #324]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800314e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003152:	6613      	str	r3, [r2, #96]	; 0x60
 8003154:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8003156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315c:	623b      	str	r3, [r7, #32]
 800315e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003160:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8003162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003164:	4a4b      	ldr	r2, [pc, #300]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800316c:	4b49      	ldr	r3, [pc, #292]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003178:	4b46      	ldr	r3, [pc, #280]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800317a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317c:	4a45      	ldr	r2, [pc, #276]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 800317e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003184:	4b43      	ldr	r3, [pc, #268]	; (8003294 <HAL_UART_MspInit+0x2e4>)
 8003186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031aa:	2307      	movs	r3, #7
 80031ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80031b4:	4619      	mov	r1, r3
 80031b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ba:	f002 fa85 	bl	80056c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031d8:	2307      	movs	r3, #7
 80031da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80031e2:	4619      	mov	r1, r3
 80031e4:	4830      	ldr	r0, [pc, #192]	; (80032a8 <HAL_UART_MspInit+0x2f8>)
 80031e6:	f002 fa6f 	bl	80056c8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 80031ec:	4a30      	ldr	r2, [pc, #192]	; (80032b0 <HAL_UART_MspInit+0x300>)
 80031ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80031f0:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 80031f2:	2218      	movs	r2, #24
 80031f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003202:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 800320a:	2200      	movs	r2, #0
 800320c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003220:	4822      	ldr	r0, [pc, #136]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 8003222:	f001 fed1 	bl	8004fc8 <HAL_DMA_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_UART_MspInit+0x280>
      Error_Handler();
 800322c:	f7fe ff14 	bl	8002058 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 8003234:	67da      	str	r2, [r3, #124]	; 0x7c
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_UART_MspInit+0x2fc>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_UART_MspInit+0x304>)
 800323e:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <HAL_UART_MspInit+0x308>)
 8003240:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003242:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <HAL_UART_MspInit+0x304>)
 8003244:	2219      	movs	r2, #25
 8003246:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003248:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <HAL_UART_MspInit+0x304>)
 800324a:	2210      	movs	r2, #16
 800324c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800324e:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_UART_MspInit+0x304>)
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <HAL_UART_MspInit+0x304>)
 8003256:	2280      	movs	r2, #128	; 0x80
 8003258:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800325a:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <HAL_UART_MspInit+0x304>)
 800325c:	2200      	movs	r2, #0
 800325e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <HAL_UART_MspInit+0x304>)
 8003262:	2200      	movs	r2, #0
 8003264:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003266:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_UART_MspInit+0x304>)
 8003268:	2200      	movs	r2, #0
 800326a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_UART_MspInit+0x304>)
 800326e:	2200      	movs	r2, #0
 8003270:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003272:	4810      	ldr	r0, [pc, #64]	; (80032b4 <HAL_UART_MspInit+0x304>)
 8003274:	f001 fea8 	bl	8004fc8 <HAL_DMA_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 800327e:	f7fe feeb 	bl	8002058 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a0b      	ldr	r2, [pc, #44]	; (80032b4 <HAL_UART_MspInit+0x304>)
 8003286:	679a      	str	r2, [r3, #120]	; 0x78
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_UART_MspInit+0x304>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800328e:	e097      	b.n	80033c0 <HAL_UART_MspInit+0x410>
 8003290:	40004c00 	.word	0x40004c00
 8003294:	40021000 	.word	0x40021000
 8003298:	48000800 	.word	0x48000800
 800329c:	40005000 	.word	0x40005000
 80032a0:	48000c00 	.word	0x48000c00
 80032a4:	40013800 	.word	0x40013800
 80032a8:	48001800 	.word	0x48001800
 80032ac:	200009f8 	.word	0x200009f8
 80032b0:	40020008 	.word	0x40020008
 80032b4:	20000a58 	.word	0x20000a58
 80032b8:	4002001c 	.word	0x4002001c
  else if(uartHandle->Instance==USART2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a41      	ldr	r2, [pc, #260]	; (80033c8 <HAL_UART_MspInit+0x418>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d13b      	bne.n	800333e <HAL_UART_MspInit+0x38e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032c6:	2302      	movs	r3, #2
 80032c8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032ca:	2300      	movs	r3, #0
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032d2:	4618      	mov	r0, r3
 80032d4:	f005 fd1a 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_UART_MspInit+0x332>
      Error_Handler();
 80032de:	f7fe febb 	bl	8002058 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032e2:	4b3a      	ldr	r3, [pc, #232]	; (80033cc <HAL_UART_MspInit+0x41c>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	4a39      	ldr	r2, [pc, #228]	; (80033cc <HAL_UART_MspInit+0x41c>)
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	6593      	str	r3, [r2, #88]	; 0x58
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_UART_MspInit+0x41c>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_UART_MspInit+0x41c>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	4a33      	ldr	r2, [pc, #204]	; (80033cc <HAL_UART_MspInit+0x41c>)
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003306:	4b31      	ldr	r3, [pc, #196]	; (80033cc <HAL_UART_MspInit+0x41c>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003312:	2318      	movs	r3, #24
 8003314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800332a:	2307      	movs	r3, #7
 800332c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003330:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003334:	4619      	mov	r1, r3
 8003336:	4826      	ldr	r0, [pc, #152]	; (80033d0 <HAL_UART_MspInit+0x420>)
 8003338:	f002 f9c6 	bl	80056c8 <HAL_GPIO_Init>
}
 800333c:	e040      	b.n	80033c0 <HAL_UART_MspInit+0x410>
  else if(uartHandle->Instance==USART3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_UART_MspInit+0x424>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d13b      	bne.n	80033c0 <HAL_UART_MspInit+0x410>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003348:	2304      	movs	r3, #4
 800334a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800334c:	2300      	movs	r3, #0
 800334e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003350:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003354:	4618      	mov	r0, r3
 8003356:	f005 fcd9 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_UART_MspInit+0x3b4>
      Error_Handler();
 8003360:	f7fe fe7a 	bl	8002058 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_UART_MspInit+0x41c>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_UART_MspInit+0x41c>)
 800336a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336e:	6593      	str	r3, [r2, #88]	; 0x58
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <HAL_UART_MspInit+0x41c>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <HAL_UART_MspInit+0x41c>)
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	4a12      	ldr	r2, [pc, #72]	; (80033cc <HAL_UART_MspInit+0x41c>)
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <HAL_UART_MspInit+0x41c>)
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003394:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033ae:	2307      	movs	r3, #7
 80033b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033b8:	4619      	mov	r1, r3
 80033ba:	4805      	ldr	r0, [pc, #20]	; (80033d0 <HAL_UART_MspInit+0x420>)
 80033bc:	f002 f984 	bl	80056c8 <HAL_GPIO_Init>
}
 80033c0:	bf00      	nop
 80033c2:	37a0      	adds	r7, #160	; 0xa0
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40021000 	.word	0x40021000
 80033d0:	48000400 	.word	0x48000400
 80033d4:	40004800 	.word	0x40004800

080033d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033d8:	480d      	ldr	r0, [pc, #52]	; (8003410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033dc:	480d      	ldr	r0, [pc, #52]	; (8003414 <LoopForever+0x6>)
  ldr r1, =_edata
 80033de:	490e      	ldr	r1, [pc, #56]	; (8003418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033e0:	4a0e      	ldr	r2, [pc, #56]	; (800341c <LoopForever+0xe>)
  movs r3, #0
 80033e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80033e4:	e002      	b.n	80033ec <LoopCopyDataInit>

080033e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ea:	3304      	adds	r3, #4

080033ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f0:	d3f9      	bcc.n	80033e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f2:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033f4:	4c0b      	ldr	r4, [pc, #44]	; (8003424 <LoopForever+0x16>)
  movs r3, #0
 80033f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f8:	e001      	b.n	80033fe <LoopFillZerobss>

080033fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033fc:	3204      	adds	r2, #4

080033fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003400:	d3fb      	bcc.n	80033fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003402:	f7fe fffd 	bl	8002400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003406:	f00c ff77 	bl	80102f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800340a:	f7fe fd63 	bl	8001ed4 <main>

0800340e <LoopForever>:

LoopForever:
    b LoopForever
 800340e:	e7fe      	b.n	800340e <LoopForever>
  ldr   r0, =_estack
 8003410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003418:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800341c:	08010408 	.word	0x08010408
  ldr r2, =_sbss
 8003420:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8003424:	200024a4 	.word	0x200024a4

08003428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003428:	e7fe      	b.n	8003428 <ADC1_2_IRQHandler>

0800342a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003434:	2003      	movs	r0, #3
 8003436:	f001 fa65 	bl	8004904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800343a:	2000      	movs	r0, #0
 800343c:	f000 f80e 	bl	800345c <HAL_InitTick>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	71fb      	strb	r3, [r7, #7]
 800344a:	e001      	b.n	8003450 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800344c:	f7fe ff4e 	bl	80022ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003450:	79fb      	ldrb	r3, [r7, #7]

}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003468:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <HAL_InitTick+0x68>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d022      	beq.n	80034b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003470:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <HAL_InitTick+0x6c>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_InitTick+0x68>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800347c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	4618      	mov	r0, r3
 8003486:	f001 fa70 	bl	800496a <HAL_SYSTICK_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10f      	bne.n	80034b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b0f      	cmp	r3, #15
 8003494:	d809      	bhi.n	80034aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003496:	2200      	movs	r2, #0
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	f04f 30ff 	mov.w	r0, #4294967295
 800349e:	f001 fa3c 	bl	800491a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_InitTick+0x70>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	e007      	b.n	80034ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e004      	b.n	80034ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	e001      	b.n	80034ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000008 	.word	0x20000008
 80034c8:	20000000 	.word	0x20000000
 80034cc:	20000004 	.word	0x20000004

080034d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_IncTick+0x1c>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_IncTick+0x20>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4413      	add	r3, r2
 80034de:	4a03      	ldr	r2, [pc, #12]	; (80034ec <HAL_IncTick+0x1c>)
 80034e0:	6013      	str	r3, [r2, #0]
}
 80034e2:	bf00      	nop
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	20000ab8 	.word	0x20000ab8
 80034f0:	20000008 	.word	0x20000008

080034f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return uwTick;
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_GetTick+0x14>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000ab8 	.word	0x20000ab8

0800350c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff ffee 	bl	80034f4 <HAL_GetTick>
 8003518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d004      	beq.n	8003530 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_Delay+0x40>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4413      	add	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003530:	bf00      	nop
 8003532:	f7ff ffdf 	bl	80034f4 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	429a      	cmp	r2, r3
 8003540:	d8f7      	bhi.n	8003532 <HAL_Delay+0x26>
  {
  }
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000008 	.word	0x20000008

08003550 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	609a      	str	r2, [r3, #8]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3360      	adds	r3, #96	; 0x60
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <LL_ADC_SetOffset+0x44>)
 80035da:	4013      	ands	r3, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	03fff000 	.word	0x03fff000

08003600 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3360      	adds	r3, #96	; 0x60
 800360e:	461a      	mov	r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3360      	adds	r3, #96	; 0x60
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	431a      	orrs	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003662:	b480      	push	{r7}
 8003664:	b087      	sub	sp, #28
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3360      	adds	r3, #96	; 0x60
 8003672:	461a      	mov	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	431a      	orrs	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3360      	adds	r3, #96	; 0x60
 80036a8:	461a      	mov	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	431a      	orrs	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	615a      	str	r2, [r3, #20]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3330      	adds	r3, #48	; 0x30
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	4413      	add	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	211f      	movs	r1, #31
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	401a      	ands	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	0e9b      	lsrs	r3, r3, #26
 800372c:	f003 011f 	and.w	r1, r3, #31
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	431a      	orrs	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3314      	adds	r3, #20
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	0e5b      	lsrs	r3, r3, #25
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	4413      	add	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	0d1b      	lsrs	r3, r3, #20
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2107      	movs	r1, #7
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	401a      	ands	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	0d1b      	lsrs	r3, r3, #20
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	431a      	orrs	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10a      	bne.n	80037ce <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80037cc:	e00a      	b.n	80037e4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037da:	43db      	mvns	r3, r3
 80037dc:	401a      	ands	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	407f0000 	.word	0x407f0000

080037f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6093      	str	r3, [r2, #8]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800382c:	d101      	bne.n	8003832 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003854:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800387c:	d101      	bne.n	8003882 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <LL_ADC_IsEnabled+0x18>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <LL_ADC_IsEnabled+0x1a>
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d101      	bne.n	80038ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d101      	bne.n	80038f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b089      	sub	sp, #36	; 0x24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003910:	2300      	movs	r3, #0
 8003912:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e1af      	b.n	8003c7e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fd fbe3 	bl	80010f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff67 	bl	8003818 <LL_ADC_IsDeepPowerDownEnabled>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff4d 	bl	80037f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff82 	bl	8003868 <LL_ADC_IsInternalRegulatorEnabled>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d115      	bne.n	8003996 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ff66 	bl	8003840 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003974:	4b9f      	ldr	r3, [pc, #636]	; (8003bf4 <HAL_ADC_Init+0x2f0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	4a9f      	ldr	r2, [pc, #636]	; (8003bf8 <HAL_ADC_Init+0x2f4>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	3301      	adds	r3, #1
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003988:	e002      	b.n	8003990 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3b01      	subs	r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f9      	bne.n	800398a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff64 	bl	8003868 <LL_ADC_IsInternalRegulatorEnabled>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10d      	bne.n	80039c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f043 0210 	orr.w	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ff75 	bl	80038b6 <LL_ADC_REG_IsConversionOngoing>
 80039cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 8148 	bne.w	8003c6c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 8144 	bne.w	8003c6c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039ec:	f043 0202 	orr.w	r2, r3, #2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff49 	bl	8003890 <LL_ADC_IsEnabled>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d141      	bne.n	8003a88 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a0c:	d004      	beq.n	8003a18 <HAL_ADC_Init+0x114>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a7a      	ldr	r2, [pc, #488]	; (8003bfc <HAL_ADC_Init+0x2f8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10f      	bne.n	8003a38 <HAL_ADC_Init+0x134>
 8003a18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a1c:	f7ff ff38 	bl	8003890 <LL_ADC_IsEnabled>
 8003a20:	4604      	mov	r4, r0
 8003a22:	4876      	ldr	r0, [pc, #472]	; (8003bfc <HAL_ADC_Init+0x2f8>)
 8003a24:	f7ff ff34 	bl	8003890 <LL_ADC_IsEnabled>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	4323      	orrs	r3, r4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e012      	b.n	8003a5e <HAL_ADC_Init+0x15a>
 8003a38:	4871      	ldr	r0, [pc, #452]	; (8003c00 <HAL_ADC_Init+0x2fc>)
 8003a3a:	f7ff ff29 	bl	8003890 <LL_ADC_IsEnabled>
 8003a3e:	4604      	mov	r4, r0
 8003a40:	4870      	ldr	r0, [pc, #448]	; (8003c04 <HAL_ADC_Init+0x300>)
 8003a42:	f7ff ff25 	bl	8003890 <LL_ADC_IsEnabled>
 8003a46:	4603      	mov	r3, r0
 8003a48:	431c      	orrs	r4, r3
 8003a4a:	486f      	ldr	r0, [pc, #444]	; (8003c08 <HAL_ADC_Init+0x304>)
 8003a4c:	f7ff ff20 	bl	8003890 <LL_ADC_IsEnabled>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4323      	orrs	r3, r4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d012      	beq.n	8003a88 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a6a:	d004      	beq.n	8003a76 <HAL_ADC_Init+0x172>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a62      	ldr	r2, [pc, #392]	; (8003bfc <HAL_ADC_Init+0x2f8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_Init+0x176>
 8003a76:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <HAL_ADC_Init+0x308>)
 8003a78:	e000      	b.n	8003a7c <HAL_ADC_Init+0x178>
 8003a7a:	4a65      	ldr	r2, [pc, #404]	; (8003c10 <HAL_ADC_Init+0x30c>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4619      	mov	r1, r3
 8003a82:	4610      	mov	r0, r2
 8003a84:	f7ff fd64 	bl	8003550 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7f5b      	ldrb	r3, [r3, #29]
 8003a8c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a92:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a98:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a9e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aa6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d106      	bne.n	8003ac4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	3b01      	subs	r3, #1
 8003abc:	045b      	lsls	r3, r3, #17
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	4b4b      	ldr	r3, [pc, #300]	; (8003c14 <HAL_ADC_Init+0x310>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	69b9      	ldr	r1, [r7, #24]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fed1 	bl	80038b6 <LL_ADC_REG_IsConversionOngoing>
 8003b14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fede 	bl	80038dc <LL_ADC_INJ_IsConversionOngoing>
 8003b20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d17f      	bne.n	8003c28 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d17c      	bne.n	8003c28 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b32:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b3a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4a:	f023 0302 	bic.w	r3, r3, #2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	69b9      	ldr	r1, [r7, #24]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d017      	beq.n	8003b90 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6911      	ldr	r1, [r2, #16]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003b8e:	e013      	b.n	8003bb8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bb4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d12a      	bne.n	8003c18 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bde:	4311      	orrs	r1, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003be4:	430a      	orrs	r2, r1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	611a      	str	r2, [r3, #16]
 8003bf2:	e019      	b.n	8003c28 <HAL_ADC_Init+0x324>
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	053e2d63 	.word	0x053e2d63
 8003bfc:	50000100 	.word	0x50000100
 8003c00:	50000400 	.word	0x50000400
 8003c04:	50000500 	.word	0x50000500
 8003c08:	50000600 	.word	0x50000600
 8003c0c:	50000300 	.word	0x50000300
 8003c10:	50000700 	.word	0x50000700
 8003c14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d10c      	bne.n	8003c4a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f023 010f 	bic.w	r1, r3, #15
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
 8003c48:	e007      	b.n	8003c5a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 020f 	bic.w	r2, r2, #15
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c6a:	e007      	b.n	8003c7c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3724      	adds	r7, #36	; 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd90      	pop	{r4, r7, pc}
 8003c86:	bf00      	nop

08003c88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b0b6      	sub	sp, #216	; 0xd8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d102      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x24>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	f000 bc13 	b.w	80044d2 <HAL_ADC_ConfigChannel+0x84a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fdfc 	bl	80038b6 <LL_ADC_REG_IsConversionOngoing>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f040 83f3 	bne.w	80044ac <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f7ff fd0e 	bl	80036f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fdea 	bl	80038b6 <LL_ADC_REG_IsConversionOngoing>
 8003ce2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fdf6 	bl	80038dc <LL_ADC_INJ_IsConversionOngoing>
 8003cf0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 81d9 	bne.w	80040b0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 81d4 	bne.w	80040b0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d10:	d10f      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f7ff fd15 	bl	800374c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fccf 	bl	80036ce <LL_ADC_SetSamplingTimeCommonConfig>
 8003d30:	e00e      	b.n	8003d50 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f7ff fd04 	bl	800374c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fcbf 	bl	80036ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	08db      	lsrs	r3, r3, #3
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d022      	beq.n	8003db8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6919      	ldr	r1, [r3, #16]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d82:	f7ff fc19 	bl	80035b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6919      	ldr	r1, [r3, #16]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f7ff fc65 	bl	8003662 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6919      	ldr	r1, [r3, #16]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	7f1b      	ldrb	r3, [r3, #28]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d102      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x126>
 8003da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dac:	e000      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x128>
 8003dae:	2300      	movs	r3, #0
 8003db0:	461a      	mov	r2, r3
 8003db2:	f7ff fc71 	bl	8003698 <LL_ADC_SetOffsetSaturation>
 8003db6:	e17b      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fc1e 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x15c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fc13 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	0e9b      	lsrs	r3, r3, #26
 8003dde:	f003 021f 	and.w	r2, r3, #31
 8003de2:	e01e      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x19a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fc08 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e12:	2320      	movs	r3, #32
 8003e14:	e004      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d105      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x1b2>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	0e9b      	lsrs	r3, r3, #26
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	e018      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x1e4>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003e5e:	2320      	movs	r3, #32
 8003e60:	e004      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003e62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d106      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fbd7 	bl	800362c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fbbb 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x222>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fbb0 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	0e9b      	lsrs	r3, r3, #26
 8003ea4:	f003 021f 	and.w	r2, r3, #31
 8003ea8:	e01e      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x260>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fba5 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ec0:	fa93 f3a3 	rbit	r3, r3
 8003ec4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003ec8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003ed0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003ed8:	2320      	movs	r3, #32
 8003eda:	e004      	b.n	8003ee6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003edc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x278>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0e9b      	lsrs	r3, r3, #26
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	e018      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x2aa>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f24:	2320      	movs	r3, #32
 8003f26:	e004      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f2c:	fab3 f383 	clz	r3, r3
 8003f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d106      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fb74 	bl	800362c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fb58 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x2e8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fb4d 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8003f66:	4603      	mov	r3, r0
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	f003 021f 	and.w	r2, r3, #31
 8003f6e:	e01e      	b.n	8003fae <HAL_ADC_ConfigChannel+0x326>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2102      	movs	r1, #2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fb42 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	e004      	b.n	8003fac <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x33e>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	0e9b      	lsrs	r3, r3, #26
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	e016      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x36c>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003fe6:	2320      	movs	r3, #32
 8003fe8:	e004      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fee:	fab3 f383 	clz	r3, r3
 8003ff2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d106      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2102      	movs	r1, #2
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fb13 	bl	800362c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2103      	movs	r1, #3
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff faf7 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8004012:	4603      	mov	r3, r0
 8004014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x3aa>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2103      	movs	r1, #3
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff faec 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8004028:	4603      	mov	r3, r0
 800402a:	0e9b      	lsrs	r3, r3, #26
 800402c:	f003 021f 	and.w	r2, r3, #31
 8004030:	e017      	b.n	8004062 <HAL_ADC_ConfigChannel+0x3da>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2103      	movs	r1, #3
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fae1 	bl	8003600 <LL_ADC_GetOffsetChannel>
 800403e:	4603      	mov	r3, r0
 8004040:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800404a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800404c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800404e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004054:	2320      	movs	r3, #32
 8004056:	e003      	b.n	8004060 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <HAL_ADC_ConfigChannel+0x3f2>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	0e9b      	lsrs	r3, r3, #26
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	e011      	b.n	800409e <HAL_ADC_ConfigChannel+0x416>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800408a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004092:	2320      	movs	r3, #32
 8004094:	e003      	b.n	800409e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004098:	fab3 f383 	clz	r3, r3
 800409c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800409e:	429a      	cmp	r2, r3
 80040a0:	d106      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2200      	movs	r2, #0
 80040a8:	2103      	movs	r1, #3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fabe 	bl	800362c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fbeb 	bl	8003890 <LL_ADC_IsEnabled>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f040 813d 	bne.w	800433c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6819      	ldr	r1, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f7ff fb68 	bl	80037a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4aa2      	ldr	r2, [pc, #648]	; (8004364 <HAL_ADC_ConfigChannel+0x6dc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	f040 812e 	bne.w	800433c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x480>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2b09      	cmp	r3, #9
 80040fe:	bf94      	ite	ls
 8004100:	2301      	movls	r3, #1
 8004102:	2300      	movhi	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e019      	b.n	800413c <HAL_ADC_ConfigChannel+0x4b4>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004110:	fa93 f3a3 	rbit	r3, r3
 8004114:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004118:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800411a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004120:	2320      	movs	r3, #32
 8004122:	e003      	b.n	800412c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	3301      	adds	r3, #1
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2b09      	cmp	r3, #9
 8004134:	bf94      	ite	ls
 8004136:	2301      	movls	r3, #1
 8004138:	2300      	movhi	r3, #0
 800413a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800413c:	2b00      	cmp	r3, #0
 800413e:	d079      	beq.n	8004234 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004148:	2b00      	cmp	r3, #0
 800414a:	d107      	bne.n	800415c <HAL_ADC_ConfigChannel+0x4d4>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0e9b      	lsrs	r3, r3, #26
 8004152:	3301      	adds	r3, #1
 8004154:	069b      	lsls	r3, r3, #26
 8004156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415a:	e015      	b.n	8004188 <HAL_ADC_ConfigChannel+0x500>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800416a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800416e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e003      	b.n	8004180 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	3301      	adds	r3, #1
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x520>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0e9b      	lsrs	r3, r3, #26
 800419a:	3301      	adds	r3, #1
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	e017      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x550>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80041b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80041ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80041c0:	2320      	movs	r3, #32
 80041c2:	e003      	b.n	80041cc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80041c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	2101      	movs	r1, #1
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x576>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0e9b      	lsrs	r3, r3, #26
 80041ee:	3301      	adds	r3, #1
 80041f0:	f003 021f 	and.w	r2, r3, #31
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	051b      	lsls	r3, r3, #20
 80041fc:	e018      	b.n	8004230 <HAL_ADC_ConfigChannel+0x5a8>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800420c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004216:	2320      	movs	r3, #32
 8004218:	e003      	b.n	8004222 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800421a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421c:	fab3 f383 	clz	r3, r3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	3301      	adds	r3, #1
 8004224:	f003 021f 	and.w	r2, r3, #31
 8004228:	4613      	mov	r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	4413      	add	r3, r2
 800422e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004230:	430b      	orrs	r3, r1
 8004232:	e07e      	b.n	8004332 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	2b00      	cmp	r3, #0
 800423e:	d107      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x5c8>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	0e9b      	lsrs	r3, r3, #26
 8004246:	3301      	adds	r3, #1
 8004248:	069b      	lsls	r3, r3, #26
 800424a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800424e:	e015      	b.n	800427c <HAL_ADC_ConfigChannel+0x5f4>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	fa93 f3a3 	rbit	r3, r3
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004268:	2320      	movs	r3, #32
 800426a:	e003      	b.n	8004274 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3301      	adds	r3, #1
 8004276:	069b      	lsls	r3, r3, #26
 8004278:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_ADC_ConfigChannel+0x614>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0e9b      	lsrs	r3, r3, #26
 800428e:	3301      	adds	r3, #1
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2101      	movs	r1, #1
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	e017      	b.n	80042cc <HAL_ADC_ConfigChannel+0x644>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	61fb      	str	r3, [r7, #28]
  return result;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80042b4:	2320      	movs	r3, #32
 80042b6:	e003      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	3301      	adds	r3, #1
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2101      	movs	r1, #1
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	ea42 0103 	orr.w	r1, r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10d      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x670>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0e9b      	lsrs	r3, r3, #26
 80042e2:	3301      	adds	r3, #1
 80042e4:	f003 021f 	and.w	r2, r3, #31
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	3b1e      	subs	r3, #30
 80042f0:	051b      	lsls	r3, r3, #20
 80042f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042f6:	e01b      	b.n	8004330 <HAL_ADC_ConfigChannel+0x6a8>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	fa93 f3a3 	rbit	r3, r3
 8004304:	613b      	str	r3, [r7, #16]
  return result;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004310:	2320      	movs	r3, #32
 8004312:	e003      	b.n	800431c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	fab3 f383 	clz	r3, r3
 800431a:	b2db      	uxtb	r3, r3
 800431c:	3301      	adds	r3, #1
 800431e:	f003 021f 	and.w	r2, r3, #31
 8004322:	4613      	mov	r3, r2
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	4413      	add	r3, r2
 8004328:	3b1e      	subs	r3, #30
 800432a:	051b      	lsls	r3, r3, #20
 800432c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004330:	430b      	orrs	r3, r1
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	6892      	ldr	r2, [r2, #8]
 8004336:	4619      	mov	r1, r3
 8004338:	f7ff fa08 	bl	800374c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_ADC_ConfigChannel+0x6e0>)
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80be 	beq.w	80044c6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004352:	d004      	beq.n	800435e <HAL_ADC_ConfigChannel+0x6d6>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a04      	ldr	r2, [pc, #16]	; (800436c <HAL_ADC_ConfigChannel+0x6e4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d10a      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x6ec>
 800435e:	4b04      	ldr	r3, [pc, #16]	; (8004370 <HAL_ADC_ConfigChannel+0x6e8>)
 8004360:	e009      	b.n	8004376 <HAL_ADC_ConfigChannel+0x6ee>
 8004362:	bf00      	nop
 8004364:	407f0000 	.word	0x407f0000
 8004368:	80080000 	.word	0x80080000
 800436c:	50000100 	.word	0x50000100
 8004370:	50000300 	.word	0x50000300
 8004374:	4b59      	ldr	r3, [pc, #356]	; (80044dc <HAL_ADC_ConfigChannel+0x854>)
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff f910 	bl	800359c <LL_ADC_GetCommonPathInternalCh>
 800437c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_ADC_ConfigChannel+0x858>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_ADC_ConfigChannel+0x70c>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a55      	ldr	r2, [pc, #340]	; (80044e4 <HAL_ADC_ConfigChannel+0x85c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d13a      	bne.n	800440a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d134      	bne.n	800440a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043a8:	d005      	beq.n	80043b6 <HAL_ADC_ConfigChannel+0x72e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a4e      	ldr	r2, [pc, #312]	; (80044e8 <HAL_ADC_ConfigChannel+0x860>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f040 8085 	bne.w	80044c0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043be:	d004      	beq.n	80043ca <HAL_ADC_ConfigChannel+0x742>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a49      	ldr	r2, [pc, #292]	; (80044ec <HAL_ADC_ConfigChannel+0x864>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x746>
 80043ca:	4a49      	ldr	r2, [pc, #292]	; (80044f0 <HAL_ADC_ConfigChannel+0x868>)
 80043cc:	e000      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x748>
 80043ce:	4a43      	ldr	r2, [pc, #268]	; (80044dc <HAL_ADC_ConfigChannel+0x854>)
 80043d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f7ff f8cb 	bl	8003576 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043e0:	4b44      	ldr	r3, [pc, #272]	; (80044f4 <HAL_ADC_ConfigChannel+0x86c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	4a44      	ldr	r2, [pc, #272]	; (80044f8 <HAL_ADC_ConfigChannel+0x870>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043fa:	e002      	b.n	8004402 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3b01      	subs	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f9      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004408:	e05a      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a3b      	ldr	r2, [pc, #236]	; (80044fc <HAL_ADC_ConfigChannel+0x874>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d125      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x7d8>
 8004414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11f      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a31      	ldr	r2, [pc, #196]	; (80044ec <HAL_ADC_ConfigChannel+0x864>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d104      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x7ac>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a34      	ldr	r2, [pc, #208]	; (8004500 <HAL_ADC_ConfigChannel+0x878>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d047      	beq.n	80044c4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800443c:	d004      	beq.n	8004448 <HAL_ADC_ConfigChannel+0x7c0>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <HAL_ADC_ConfigChannel+0x864>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_ADC_ConfigChannel+0x7c4>
 8004448:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <HAL_ADC_ConfigChannel+0x868>)
 800444a:	e000      	b.n	800444e <HAL_ADC_ConfigChannel+0x7c6>
 800444c:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_ADC_ConfigChannel+0x854>)
 800444e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004456:	4619      	mov	r1, r3
 8004458:	4610      	mov	r0, r2
 800445a:	f7ff f88c 	bl	8003576 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800445e:	e031      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a27      	ldr	r2, [pc, #156]	; (8004504 <HAL_ADC_ConfigChannel+0x87c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d12d      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800446a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d127      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_ADC_ConfigChannel+0x864>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d022      	beq.n	80044c6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004488:	d004      	beq.n	8004494 <HAL_ADC_ConfigChannel+0x80c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a17      	ldr	r2, [pc, #92]	; (80044ec <HAL_ADC_ConfigChannel+0x864>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d101      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x810>
 8004494:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <HAL_ADC_ConfigChannel+0x868>)
 8004496:	e000      	b.n	800449a <HAL_ADC_ConfigChannel+0x812>
 8004498:	4a10      	ldr	r2, [pc, #64]	; (80044dc <HAL_ADC_ConfigChannel+0x854>)
 800449a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800449e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7ff f866 	bl	8003576 <LL_ADC_SetCommonPathInternalCh>
 80044aa:	e00c      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	f043 0220 	orr.w	r2, r3, #32
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80044be:	e002      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80044ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	37d8      	adds	r7, #216	; 0xd8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	50000700 	.word	0x50000700
 80044e0:	c3210000 	.word	0xc3210000
 80044e4:	90c00010 	.word	0x90c00010
 80044e8:	50000600 	.word	0x50000600
 80044ec:	50000100 	.word	0x50000100
 80044f0:	50000300 	.word	0x50000300
 80044f4:	20000000 	.word	0x20000000
 80044f8:	053e2d63 	.word	0x053e2d63
 80044fc:	c7520000 	.word	0xc7520000
 8004500:	50000500 	.word	0x50000500
 8004504:	cb840000 	.word	0xcb840000

08004508 <LL_ADC_IsEnabled>:
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <LL_ADC_IsEnabled+0x18>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <LL_ADC_IsEnabled+0x1a>
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_ADC_REG_IsConversionOngoing>:
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d101      	bne.n	8004546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b0a1      	sub	sp, #132	; 0x84
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800456e:	2302      	movs	r3, #2
 8004570:	e0e7      	b.n	8004742 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800457a:	2300      	movs	r3, #0
 800457c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800457e:	2300      	movs	r3, #0
 8004580:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800458a:	d102      	bne.n	8004592 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800458c:	4b6f      	ldr	r3, [pc, #444]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	e009      	b.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6e      	ldr	r2, [pc, #440]	; (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d102      	bne.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800459c:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	e001      	b.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0be      	b.n	8004742 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ffb1 	bl	800452e <LL_ADC_REG_IsConversionOngoing>
 80045cc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ffab 	bl	800452e <LL_ADC_REG_IsConversionOngoing>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 80a0 	bne.w	8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 809c 	bne.w	8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f0:	d004      	beq.n	80045fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a55      	ldr	r2, [pc, #340]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80045fc:	4b56      	ldr	r3, [pc, #344]	; (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80045fe:	e000      	b.n	8004602 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004600:	4b56      	ldr	r3, [pc, #344]	; (800475c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004602:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d04b      	beq.n	80046a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800460c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800461e:	035b      	lsls	r3, r3, #13
 8004620:	430b      	orrs	r3, r1
 8004622:	431a      	orrs	r2, r3
 8004624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004626:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004630:	d004      	beq.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a45      	ldr	r2, [pc, #276]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10f      	bne.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800463c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004640:	f7ff ff62 	bl	8004508 <LL_ADC_IsEnabled>
 8004644:	4604      	mov	r4, r0
 8004646:	4841      	ldr	r0, [pc, #260]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004648:	f7ff ff5e 	bl	8004508 <LL_ADC_IsEnabled>
 800464c:	4603      	mov	r3, r0
 800464e:	4323      	orrs	r3, r4
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e012      	b.n	8004682 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800465c:	483c      	ldr	r0, [pc, #240]	; (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800465e:	f7ff ff53 	bl	8004508 <LL_ADC_IsEnabled>
 8004662:	4604      	mov	r4, r0
 8004664:	483b      	ldr	r0, [pc, #236]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004666:	f7ff ff4f 	bl	8004508 <LL_ADC_IsEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	431c      	orrs	r4, r3
 800466e:	483c      	ldr	r0, [pc, #240]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004670:	f7ff ff4a 	bl	8004508 <LL_ADC_IsEnabled>
 8004674:	4603      	mov	r3, r0
 8004676:	4323      	orrs	r3, r4
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d056      	beq.n	8004734 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800468e:	f023 030f 	bic.w	r3, r3, #15
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	6811      	ldr	r1, [r2, #0]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	6892      	ldr	r2, [r2, #8]
 800469a:	430a      	orrs	r2, r1
 800469c:	431a      	orrs	r2, r3
 800469e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046a2:	e047      	b.n	8004734 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b8:	d004      	beq.n	80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10f      	bne.n	80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80046c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046c8:	f7ff ff1e 	bl	8004508 <LL_ADC_IsEnabled>
 80046cc:	4604      	mov	r4, r0
 80046ce:	481f      	ldr	r0, [pc, #124]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046d0:	f7ff ff1a 	bl	8004508 <LL_ADC_IsEnabled>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4323      	orrs	r3, r4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e012      	b.n	800470a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80046e4:	481a      	ldr	r0, [pc, #104]	; (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046e6:	f7ff ff0f 	bl	8004508 <LL_ADC_IsEnabled>
 80046ea:	4604      	mov	r4, r0
 80046ec:	4819      	ldr	r0, [pc, #100]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046ee:	f7ff ff0b 	bl	8004508 <LL_ADC_IsEnabled>
 80046f2:	4603      	mov	r3, r0
 80046f4:	431c      	orrs	r4, r3
 80046f6:	481a      	ldr	r0, [pc, #104]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80046f8:	f7ff ff06 	bl	8004508 <LL_ADC_IsEnabled>
 80046fc:	4603      	mov	r3, r0
 80046fe:	4323      	orrs	r3, r4
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d012      	beq.n	8004734 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800470e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004716:	f023 030f 	bic.w	r3, r3, #15
 800471a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800471c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800471e:	e009      	b.n	8004734 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004732:	e000      	b.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004734:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800473e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004742:	4618      	mov	r0, r3
 8004744:	3784      	adds	r7, #132	; 0x84
 8004746:	46bd      	mov	sp, r7
 8004748:	bd90      	pop	{r4, r7, pc}
 800474a:	bf00      	nop
 800474c:	50000100 	.word	0x50000100
 8004750:	50000400 	.word	0x50000400
 8004754:	50000500 	.word	0x50000500
 8004758:	50000300 	.word	0x50000300
 800475c:	50000700 	.word	0x50000700
 8004760:	50000600 	.word	0x50000600

08004764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800478c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	60d3      	str	r3, [r2, #12]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <__NVIC_GetPriorityGrouping+0x18>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f003 0307 	and.w	r3, r3, #7
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db0b      	blt.n	80047f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	f003 021f 	and.w	r2, r3, #31
 80047e0:	4907      	ldr	r1, [pc, #28]	; (8004800 <__NVIC_EnableIRQ+0x38>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2001      	movs	r0, #1
 80047ea:	fa00 f202 	lsl.w	r2, r0, r2
 80047ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e100 	.word	0xe000e100

08004804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004814:	2b00      	cmp	r3, #0
 8004816:	db0a      	blt.n	800482e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	490c      	ldr	r1, [pc, #48]	; (8004850 <__NVIC_SetPriority+0x4c>)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	0112      	lsls	r2, r2, #4
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	440b      	add	r3, r1
 8004828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800482c:	e00a      	b.n	8004844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4908      	ldr	r1, [pc, #32]	; (8004854 <__NVIC_SetPriority+0x50>)
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	3b04      	subs	r3, #4
 800483c:	0112      	lsls	r2, r2, #4
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	440b      	add	r3, r1
 8004842:	761a      	strb	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000e100 	.word	0xe000e100
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	; 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f1c3 0307 	rsb	r3, r3, #7
 8004872:	2b04      	cmp	r3, #4
 8004874:	bf28      	it	cs
 8004876:	2304      	movcs	r3, #4
 8004878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3304      	adds	r3, #4
 800487e:	2b06      	cmp	r3, #6
 8004880:	d902      	bls.n	8004888 <NVIC_EncodePriority+0x30>
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3b03      	subs	r3, #3
 8004886:	e000      	b.n	800488a <NVIC_EncodePriority+0x32>
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43da      	mvns	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	401a      	ands	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a0:	f04f 31ff 	mov.w	r1, #4294967295
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	43d9      	mvns	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b0:	4313      	orrs	r3, r2
         );
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	; 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048d0:	d301      	bcc.n	80048d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00f      	b.n	80048f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <SysTick_Config+0x40>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048de:	210f      	movs	r1, #15
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	f7ff ff8e 	bl	8004804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <SysTick_Config+0x40>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ee:	4b04      	ldr	r3, [pc, #16]	; (8004900 <SysTick_Config+0x40>)
 80048f0:	2207      	movs	r2, #7
 80048f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	e000e010 	.word	0xe000e010

08004904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff29 	bl	8004764 <__NVIC_SetPriorityGrouping>
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	4603      	mov	r3, r0
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004928:	f7ff ff40 	bl	80047ac <__NVIC_GetPriorityGrouping>
 800492c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7ff ff90 	bl	8004858 <NVIC_EncodePriority>
 8004938:	4602      	mov	r2, r0
 800493a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ff5f 	bl	8004804 <__NVIC_SetPriority>
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	4603      	mov	r3, r0
 8004956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff ff33 	bl	80047c8 <__NVIC_EnableIRQ>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff ffa4 	bl	80048c0 <SysTick_Config>
 8004978:	4603      	mov	r3, r0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e054      	b.n	8004a40 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	7f5b      	ldrb	r3, [r3, #29]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fc fd62 	bl	8001470 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	791b      	ldrb	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10c      	bne.n	80049d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a22      	ldr	r2, [pc, #136]	; (8004a48 <HAL_CRC_Init+0xc4>)
 80049c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0218 	bic.w	r2, r2, #24
 80049d0:	609a      	str	r2, [r3, #8]
 80049d2:	e00c      	b.n	80049ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6899      	ldr	r1, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	461a      	mov	r2, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f834 	bl	8004a4c <HAL_CRCEx_Polynomial_Set>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e028      	b.n	8004a40 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	795b      	ldrb	r3, [r3, #5]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d105      	bne.n	8004a02 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f04f 32ff 	mov.w	r2, #4294967295
 80049fe:	611a      	str	r2, [r3, #16]
 8004a00:	e004      	b.n	8004a0c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6912      	ldr	r2, [r2, #16]
 8004a0a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695a      	ldr	r2, [r3, #20]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699a      	ldr	r2, [r3, #24]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	04c11db7 	.word	0x04c11db7

08004a4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004a5c:	231f      	movs	r3, #31
 8004a5e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004a60:	bf00      	nop
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1e5a      	subs	r2, r3, #1
 8004a66:	613a      	str	r2, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <HAL_CRCEx_Polynomial_Set+0x34>
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b18      	cmp	r3, #24
 8004a84:	d846      	bhi.n	8004b14 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004b1b 	.word	0x08004b1b
 8004a90:	08004b15 	.word	0x08004b15
 8004a94:	08004b15 	.word	0x08004b15
 8004a98:	08004b15 	.word	0x08004b15
 8004a9c:	08004b15 	.word	0x08004b15
 8004aa0:	08004b15 	.word	0x08004b15
 8004aa4:	08004b15 	.word	0x08004b15
 8004aa8:	08004b15 	.word	0x08004b15
 8004aac:	08004b09 	.word	0x08004b09
 8004ab0:	08004b15 	.word	0x08004b15
 8004ab4:	08004b15 	.word	0x08004b15
 8004ab8:	08004b15 	.word	0x08004b15
 8004abc:	08004b15 	.word	0x08004b15
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004b15 	.word	0x08004b15
 8004ac8:	08004b15 	.word	0x08004b15
 8004acc:	08004afd 	.word	0x08004afd
 8004ad0:	08004b15 	.word	0x08004b15
 8004ad4:	08004b15 	.word	0x08004b15
 8004ad8:	08004b15 	.word	0x08004b15
 8004adc:	08004b15 	.word	0x08004b15
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b15 	.word	0x08004b15
 8004ae8:	08004b15 	.word	0x08004b15
 8004aec:	08004af1 	.word	0x08004af1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d913      	bls.n	8004b1e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004afa:	e010      	b.n	8004b1e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b07      	cmp	r3, #7
 8004b00:	d90f      	bls.n	8004b22 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b06:	e00c      	b.n	8004b22 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	d90b      	bls.n	8004b26 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b12:	e008      	b.n	8004b26 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
      break;
 8004b18:	e006      	b.n	8004b28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e004      	b.n	8004b28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e002      	b.n	8004b28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b22:	bf00      	nop
 8004b24:	e000      	b.n	8004b28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b26:	bf00      	nop
  }
  if (status == HAL_OK)
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10d      	bne.n	8004b4a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 0118 	bic.w	r1, r3, #24
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e014      	b.n	8004b94 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	791b      	ldrb	r3, [r3, #4]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fd0c 	bl	8001598 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb2:	d120      	bne.n	8004bf6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	d118      	bne.n	8004bf6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f043 0201 	orr.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f82d 	bl	8004c50 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c04:	d120      	bne.n	8004c48 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c14:	d118      	bne.n	8004c48 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f043 0202 	orr.w	r2, r3, #2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004c40:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f9b6 	bl	8004fb4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	795b      	ldrb	r3, [r3, #5]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_DAC_ConfigChannel+0x18>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e192      	b.n	8004fa2 <HAL_DAC_ConfigChannel+0x33e>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2202      	movs	r2, #2
 8004c86:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d174      	bne.n	8004d7a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c90:	f7fe fc30 	bl	80034f4 <HAL_GetTick>
 8004c94:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d134      	bne.n	8004d06 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c9c:	e011      	b.n	8004cc2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c9e:	f7fe fc29 	bl	80034f4 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d90a      	bls.n	8004cc2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f043 0208 	orr.w	r2, r3, #8
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2203      	movs	r2, #3
 8004cbc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e16f      	b.n	8004fa2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e6      	bne.n	8004c9e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f7fe fc1b 	bl	800350c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40
 8004ce0:	e01e      	b.n	8004d20 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ce2:	f7fe fc07 	bl	80034f4 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d90a      	bls.n	8004d06 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f043 0208 	orr.w	r2, r3, #8
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2203      	movs	r2, #3
 8004d00:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e14d      	b.n	8004fa2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dbe8      	blt.n	8004ce2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f7fe fbfb 	bl	800350c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	43db      	mvns	r3, r3
 8004d36:	ea02 0103 	and.w	r1, r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	409a      	lsls	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	21ff      	movs	r1, #255	; 0xff
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	ea02 0103 	and.w	r1, r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	409a      	lsls	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d11d      	bne.n	8004dbe <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	221f      	movs	r2, #31
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	4313      	orrs	r3, r2
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2207      	movs	r2, #7
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	623b      	str	r3, [r7, #32]
 8004de6:	e00f      	b.n	8004e08 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d102      	bne.n	8004df6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004df0:	2301      	movs	r3, #1
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	e008      	b.n	8004e08 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	623b      	str	r3, [r7, #32]
 8004e02:	e001      	b.n	8004e08 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	6a3a      	ldr	r2, [r7, #32]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43db      	mvns	r3, r3
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	791b      	ldrb	r3, [r3, #4]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d102      	bne.n	8004e3c <HAL_DAC_ConfigChannel+0x1d8>
 8004e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e3a:	e000      	b.n	8004e3e <HAL_DAC_ConfigChannel+0x1da>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43db      	mvns	r3, r3
 8004e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e56:	4013      	ands	r3, r2
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	795b      	ldrb	r3, [r3, #5]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d102      	bne.n	8004e68 <HAL_DAC_ConfigChannel+0x204>
 8004e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e66:	e000      	b.n	8004e6a <HAL_DAC_ConfigChannel+0x206>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d114      	bne.n	8004eaa <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004e80:	f003 fec6 	bl	8008c10 <HAL_RCC_GetHCLKFreq>
 8004e84:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	4a48      	ldr	r2, [pc, #288]	; (8004fac <HAL_DAC_ConfigChannel+0x348>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d904      	bls.n	8004e98 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
 8004e96:	e00f      	b.n	8004eb8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4a45      	ldr	r2, [pc, #276]	; (8004fb0 <HAL_DAC_ConfigChannel+0x34c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d90a      	bls.n	8004eb6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea8:	e006      	b.n	8004eb8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb4:	e000      	b.n	8004eb8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004eb6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43da      	mvns	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	400a      	ands	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f22:	4313      	orrs	r3, r2
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	22c0      	movs	r2, #192	; 0xc0
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	43da      	mvns	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	400a      	ands	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	089b      	lsrs	r3, r3, #2
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	089b      	lsrs	r3, r3, #2
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004f78:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	ea02 0103 	and.w	r1, r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	409a      	lsls	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3728      	adds	r7, #40	; 0x28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	09896800 	.word	0x09896800
 8004fb0:	04c4b400 	.word	0x04c4b400

08004fb4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e08d      	b.n	80050f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_DMA_Init+0x138>)
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d80f      	bhi.n	8005006 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b45      	ldr	r3, [pc, #276]	; (8005104 <HAL_DMA_Init+0x13c>)
 8004fee:	4413      	add	r3, r2
 8004ff0:	4a45      	ldr	r2, [pc, #276]	; (8005108 <HAL_DMA_Init+0x140>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	009a      	lsls	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a42      	ldr	r2, [pc, #264]	; (800510c <HAL_DMA_Init+0x144>)
 8005002:	641a      	str	r2, [r3, #64]	; 0x40
 8005004:	e00e      	b.n	8005024 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	4b40      	ldr	r3, [pc, #256]	; (8005110 <HAL_DMA_Init+0x148>)
 800500e:	4413      	add	r3, r2
 8005010:	4a3d      	ldr	r2, [pc, #244]	; (8005108 <HAL_DMA_Init+0x140>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	009a      	lsls	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a3c      	ldr	r2, [pc, #240]	; (8005114 <HAL_DMA_Init+0x14c>)
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8fe 	bl	8005278 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005084:	d102      	bne.n	800508c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d010      	beq.n	80050cc <HAL_DMA_Init+0x104>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d80c      	bhi.n	80050cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f91e 	bl	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	e008      	b.n	80050de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40020407 	.word	0x40020407
 8005104:	bffdfff8 	.word	0xbffdfff8
 8005108:	cccccccd 	.word	0xcccccccd
 800510c:	40020000 	.word	0x40020000
 8005110:	bffdfbf8 	.word	0xbffdfbf8
 8005114:	40020400 	.word	0x40020400

08005118 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	2204      	movs	r2, #4
 800513a:	409a      	lsls	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d026      	beq.n	8005192 <HAL_DMA_IRQHandler+0x7a>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b00      	cmp	r3, #0
 800514c:	d021      	beq.n	8005192 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d107      	bne.n	800516c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0204 	bic.w	r2, r2, #4
 800516a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	f003 021f 	and.w	r2, r3, #31
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	2104      	movs	r1, #4
 800517a:	fa01 f202 	lsl.w	r2, r1, r2
 800517e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	2b00      	cmp	r3, #0
 8005186:	d071      	beq.n	800526c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005190:	e06c      	b.n	800526c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	2202      	movs	r2, #2
 800519c:	409a      	lsls	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d02e      	beq.n	8005204 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d029      	beq.n	8005204 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 020a 	bic.w	r2, r2, #10
 80051cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	f003 021f 	and.w	r2, r3, #31
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2102      	movs	r1, #2
 80051e4:	fa01 f202 	lsl.w	r2, r1, r2
 80051e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d038      	beq.n	800526c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005202:	e033      	b.n	800526c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2208      	movs	r2, #8
 800520e:	409a      	lsls	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02a      	beq.n	800526e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d025      	beq.n	800526e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 020e 	bic.w	r2, r2, #14
 8005230:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	f003 021f 	and.w	r2, r3, #31
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2101      	movs	r1, #1
 8005240:	fa01 f202 	lsl.w	r2, r1, r2
 8005244:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005260:	2b00      	cmp	r3, #0
 8005262:	d004      	beq.n	800526e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800526c:	bf00      	nop
 800526e:	bf00      	nop
}
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	4b16      	ldr	r3, [pc, #88]	; (80052e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005288:	429a      	cmp	r2, r3
 800528a:	d802      	bhi.n	8005292 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800528c:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e001      	b.n	8005296 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005294:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	3b08      	subs	r3, #8
 80052a2:	4a12      	ldr	r2, [pc, #72]	; (80052ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	089b      	lsrs	r3, r3, #2
 80052b2:	009a      	lsls	r2, r3, #2
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a0b      	ldr	r2, [pc, #44]	; (80052f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80052c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	2201      	movs	r2, #1
 80052cc:	409a      	lsls	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40020407 	.word	0x40020407
 80052e4:	40020800 	.word	0x40020800
 80052e8:	40020820 	.word	0x40020820
 80052ec:	cccccccd 	.word	0xcccccccd
 80052f0:	40020880 	.word	0x40020880

080052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	461a      	mov	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a08      	ldr	r2, [pc, #32]	; (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005316:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3b01      	subs	r3, #1
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	2201      	movs	r2, #1
 8005322:	409a      	lsls	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	1000823f 	.word	0x1000823f
 8005338:	40020940 	.word	0x40020940

0800533c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e147      	b.n	80055de <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fc fa04 	bl	8001770 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0210 	bic.w	r2, r2, #16
 8005376:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005378:	f7fe f8bc 	bl	80034f4 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800537e:	e012      	b.n	80053a6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005380:	f7fe f8b8 	bl	80034f4 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b0a      	cmp	r3, #10
 800538c:	d90b      	bls.n	80053a6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005392:	f043 0201 	orr.w	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2203      	movs	r2, #3
 800539e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e11b      	b.n	80055de <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d0e5      	beq.n	8005380 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053c4:	f7fe f896 	bl	80034f4 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80053ca:	e012      	b.n	80053f2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80053cc:	f7fe f892 	bl	80034f4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b0a      	cmp	r3, #10
 80053d8:	d90b      	bls.n	80053f2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	f043 0201 	orr.w	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2203      	movs	r2, #3
 80053ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e0f5      	b.n	80055de <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0e5      	beq.n	80053cc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0202 	orr.w	r2, r2, #2
 800540e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a74      	ldr	r2, [pc, #464]	; (80055e8 <HAL_FDCAN_Init+0x2ac>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d103      	bne.n	8005422 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800541a:	4a74      	ldr	r2, [pc, #464]	; (80055ec <HAL_FDCAN_Init+0x2b0>)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7c1b      	ldrb	r3, [r3, #16]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d108      	bne.n	800543c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005438:	619a      	str	r2, [r3, #24]
 800543a:	e007      	b.n	800544c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	7c5b      	ldrb	r3, [r3, #17]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d108      	bne.n	8005466 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005462:	619a      	str	r2, [r3, #24]
 8005464:	e007      	b.n	8005476 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005474:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	7c9b      	ldrb	r3, [r3, #18]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d108      	bne.n	8005490 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699a      	ldr	r2, [r3, #24]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800548c:	619a      	str	r2, [r3, #24]
 800548e:	e007      	b.n	80054a0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800549e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80054c4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0210 	bic.w	r2, r2, #16
 80054d4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d108      	bne.n	80054f0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699a      	ldr	r2, [r3, #24]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0204 	orr.w	r2, r2, #4
 80054ec:	619a      	str	r2, [r3, #24]
 80054ee:	e02c      	b.n	800554a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d028      	beq.n	800554a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d01c      	beq.n	800553a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800550e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0210 	orr.w	r2, r2, #16
 800551e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d110      	bne.n	800554a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0220 	orr.w	r2, r2, #32
 8005536:	619a      	str	r2, [r3, #24]
 8005538:	e007      	b.n	800554a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0220 	orr.w	r2, r2, #32
 8005548:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	3b01      	subs	r3, #1
 8005550:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	3b01      	subs	r3, #1
 8005558:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800555a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005562:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	3b01      	subs	r3, #1
 800556c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005572:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005574:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557e:	d115      	bne.n	80055ac <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	3b01      	subs	r3, #1
 800558c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800558e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	3b01      	subs	r3, #1
 8005596:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005598:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	3b01      	subs	r3, #1
 80055a2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80055a8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80055aa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f814 	bl	80055f0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40006400 	.word	0x40006400
 80055ec:	40006500 	.word	0x40006500

080055f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80055f8:	4b30      	ldr	r3, [pc, #192]	; (80056bc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80055fa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d103      	bne.n	800560e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800560c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a2c      	ldr	r2, [pc, #176]	; (80056c4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d103      	bne.n	8005620 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800561e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800562e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	041a      	lsls	r2, r3, #16
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005654:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	061a      	lsls	r2, r3, #24
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e005      	b.n	80056a2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3304      	adds	r3, #4
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d3f3      	bcc.n	8005696 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	4000a400 	.word	0x4000a400
 80056c0:	40006800 	.word	0x40006800
 80056c4:	40006c00 	.word	0x40006c00

080056c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056d6:	e15a      	b.n	800598e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	2101      	movs	r1, #1
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 814c 	beq.w	8005988 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d005      	beq.n	8005708 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005704:	2b02      	cmp	r3, #2
 8005706:	d130      	bne.n	800576a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	2203      	movs	r2, #3
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4013      	ands	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800573e:	2201      	movs	r2, #1
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4013      	ands	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	f003 0201 	and.w	r2, r3, #1
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	2b03      	cmp	r3, #3
 8005774:	d017      	beq.n	80057a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	2203      	movs	r2, #3
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d123      	bne.n	80057fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	08da      	lsrs	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3208      	adds	r2, #8
 80057ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	220f      	movs	r2, #15
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4013      	ands	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	08da      	lsrs	r2, r3, #3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3208      	adds	r2, #8
 80057f4:	6939      	ldr	r1, [r7, #16]
 80057f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2203      	movs	r2, #3
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4013      	ands	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 0203 	and.w	r2, r3, #3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80a6 	beq.w	8005988 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583c:	4b5b      	ldr	r3, [pc, #364]	; (80059ac <HAL_GPIO_Init+0x2e4>)
 800583e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005840:	4a5a      	ldr	r2, [pc, #360]	; (80059ac <HAL_GPIO_Init+0x2e4>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6613      	str	r3, [r2, #96]	; 0x60
 8005848:	4b58      	ldr	r3, [pc, #352]	; (80059ac <HAL_GPIO_Init+0x2e4>)
 800584a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005854:	4a56      	ldr	r2, [pc, #344]	; (80059b0 <HAL_GPIO_Init+0x2e8>)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	3302      	adds	r3, #2
 800585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	220f      	movs	r2, #15
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4013      	ands	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800587e:	d01f      	beq.n	80058c0 <HAL_GPIO_Init+0x1f8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a4c      	ldr	r2, [pc, #304]	; (80059b4 <HAL_GPIO_Init+0x2ec>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d019      	beq.n	80058bc <HAL_GPIO_Init+0x1f4>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a4b      	ldr	r2, [pc, #300]	; (80059b8 <HAL_GPIO_Init+0x2f0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <HAL_GPIO_Init+0x1f0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a4a      	ldr	r2, [pc, #296]	; (80059bc <HAL_GPIO_Init+0x2f4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00d      	beq.n	80058b4 <HAL_GPIO_Init+0x1ec>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a49      	ldr	r2, [pc, #292]	; (80059c0 <HAL_GPIO_Init+0x2f8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <HAL_GPIO_Init+0x1e8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a48      	ldr	r2, [pc, #288]	; (80059c4 <HAL_GPIO_Init+0x2fc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d101      	bne.n	80058ac <HAL_GPIO_Init+0x1e4>
 80058a8:	2305      	movs	r3, #5
 80058aa:	e00a      	b.n	80058c2 <HAL_GPIO_Init+0x1fa>
 80058ac:	2306      	movs	r3, #6
 80058ae:	e008      	b.n	80058c2 <HAL_GPIO_Init+0x1fa>
 80058b0:	2304      	movs	r3, #4
 80058b2:	e006      	b.n	80058c2 <HAL_GPIO_Init+0x1fa>
 80058b4:	2303      	movs	r3, #3
 80058b6:	e004      	b.n	80058c2 <HAL_GPIO_Init+0x1fa>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e002      	b.n	80058c2 <HAL_GPIO_Init+0x1fa>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <HAL_GPIO_Init+0x1fa>
 80058c0:	2300      	movs	r3, #0
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	f002 0203 	and.w	r2, r2, #3
 80058c8:	0092      	lsls	r2, r2, #2
 80058ca:	4093      	lsls	r3, r2
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058d2:	4937      	ldr	r1, [pc, #220]	; (80059b0 <HAL_GPIO_Init+0x2e8>)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	089b      	lsrs	r3, r3, #2
 80058d8:	3302      	adds	r3, #2
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058e0:	4b39      	ldr	r3, [pc, #228]	; (80059c8 <HAL_GPIO_Init+0x300>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	43db      	mvns	r3, r3
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4013      	ands	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005904:	4a30      	ldr	r2, [pc, #192]	; (80059c8 <HAL_GPIO_Init+0x300>)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800590a:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <HAL_GPIO_Init+0x300>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	43db      	mvns	r3, r3
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4013      	ands	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800592e:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <HAL_GPIO_Init+0x300>)
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005934:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <HAL_GPIO_Init+0x300>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	43db      	mvns	r3, r3
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4013      	ands	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005958:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <HAL_GPIO_Init+0x300>)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800595e:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <HAL_GPIO_Init+0x300>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	43db      	mvns	r3, r3
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4013      	ands	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005982:	4a11      	ldr	r2, [pc, #68]	; (80059c8 <HAL_GPIO_Init+0x300>)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	3301      	adds	r3, #1
 800598c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	f47f ae9d 	bne.w	80056d8 <HAL_GPIO_Init+0x10>
  }
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	40021000 	.word	0x40021000
 80059b0:	40010000 	.word	0x40010000
 80059b4:	48000400 	.word	0x48000400
 80059b8:	48000800 	.word	0x48000800
 80059bc:	48000c00 	.word	0x48000c00
 80059c0:	48001000 	.word	0x48001000
 80059c4:	48001400 	.word	0x48001400
 80059c8:	40010400 	.word	0x40010400

080059cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	807b      	strh	r3, [r7, #2]
 80059d8:	4613      	mov	r3, r2
 80059da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059dc:	787b      	ldrb	r3, [r7, #1]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059e8:	e002      	b.n	80059f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059ea:	887a      	ldrh	r2, [r7, #2]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a06:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d006      	beq.n	8005a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a12:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f806 	bl	8005a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40010400 	.word	0x40010400

08005a2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e081      	b.n	8005b58 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d106      	bne.n	8005a6e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fc f977 	bl	8001d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2224      	movs	r2, #36	; 0x24
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aa2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d107      	bne.n	8005abc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	e006      	b.n	8005aca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ac8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d104      	bne.n	8005adc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ada:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005afe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69d9      	ldr	r1, [r3, #28]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0201 	orr.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	607a      	str	r2, [r7, #4]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	817b      	strh	r3, [r7, #10]
 8005b70:	4613      	mov	r3, r2
 8005b72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	f040 80da 	bne.w	8005d36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_I2C_Master_Transmit+0x30>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e0d3      	b.n	8005d38 <HAL_I2C_Master_Transmit+0x1d8>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b98:	f7fd fcac 	bl	80034f4 <HAL_GetTick>
 8005b9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	2319      	movs	r3, #25
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f9e6 	bl	8005f7c <I2C_WaitOnFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e0be      	b.n	8005d38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2221      	movs	r2, #33	; 0x21
 8005bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	893a      	ldrh	r2, [r7, #8]
 8005bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2bff      	cmp	r3, #255	; 0xff
 8005bea:	d90e      	bls.n	8005c0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	8979      	ldrh	r1, [r7, #10]
 8005bfa:	4b51      	ldr	r3, [pc, #324]	; (8005d40 <HAL_I2C_Master_Transmit+0x1e0>)
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fbdc 	bl	80063c0 <I2C_TransferConfig>
 8005c08:	e06c      	b.n	8005ce4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	8979      	ldrh	r1, [r7, #10]
 8005c1c:	4b48      	ldr	r3, [pc, #288]	; (8005d40 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fbcb 	bl	80063c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c2a:	e05b      	b.n	8005ce4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	6a39      	ldr	r1, [r7, #32]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f9e3 	bl	8005ffc <I2C_WaitOnTXISFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e07b      	b.n	8005d38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d034      	beq.n	8005ce4 <HAL_I2C_Master_Transmit+0x184>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d130      	bne.n	8005ce4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2180      	movs	r1, #128	; 0x80
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f975 	bl	8005f7c <I2C_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e04d      	b.n	8005d38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2bff      	cmp	r3, #255	; 0xff
 8005ca4:	d90e      	bls.n	8005cc4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	22ff      	movs	r2, #255	; 0xff
 8005caa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	8979      	ldrh	r1, [r7, #10]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fb7f 	bl	80063c0 <I2C_TransferConfig>
 8005cc2:	e00f      	b.n	8005ce4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	8979      	ldrh	r1, [r7, #10]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fb6e 	bl	80063c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d19e      	bne.n	8005c2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	6a39      	ldr	r1, [r7, #32]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f9c2 	bl	800607c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e01a      	b.n	8005d38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2220      	movs	r2, #32
 8005d08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6859      	ldr	r1, [r3, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <HAL_I2C_Master_Transmit+0x1e4>)
 8005d16:	400b      	ands	r3, r1
 8005d18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e000      	b.n	8005d38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	80002000 	.word	0x80002000
 8005d44:	fe00e800 	.word	0xfe00e800

08005d48 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	461a      	mov	r2, r3
 8005d54:	460b      	mov	r3, r1
 8005d56:	817b      	strh	r3, [r7, #10]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	f040 80db 	bne.w	8005f20 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_I2C_Master_Receive+0x30>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e0d4      	b.n	8005f22 <HAL_I2C_Master_Receive+0x1da>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d80:	f7fd fbb8 	bl	80034f4 <HAL_GetTick>
 8005d84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	2319      	movs	r3, #25
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f8f2 	bl	8005f7c <I2C_WaitOnFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e0bf      	b.n	8005f22 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2222      	movs	r2, #34	; 0x22
 8005da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2210      	movs	r2, #16
 8005dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	893a      	ldrh	r2, [r7, #8]
 8005dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2bff      	cmp	r3, #255	; 0xff
 8005dd2:	d90e      	bls.n	8005df2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	22ff      	movs	r2, #255	; 0xff
 8005dd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	8979      	ldrh	r1, [r7, #10]
 8005de2:	4b52      	ldr	r3, [pc, #328]	; (8005f2c <HAL_I2C_Master_Receive+0x1e4>)
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fae8 	bl	80063c0 <I2C_TransferConfig>
 8005df0:	e06d      	b.n	8005ece <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	8979      	ldrh	r1, [r7, #10]
 8005e04:	4b49      	ldr	r3, [pc, #292]	; (8005f2c <HAL_I2C_Master_Receive+0x1e4>)
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fad7 	bl	80063c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005e12:	e05c      	b.n	8005ece <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	6a39      	ldr	r1, [r7, #32]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f96b 	bl	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e07c      	b.n	8005f22 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d034      	beq.n	8005ece <HAL_I2C_Master_Receive+0x186>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d130      	bne.n	8005ece <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	2200      	movs	r2, #0
 8005e74:	2180      	movs	r1, #128	; 0x80
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f880 	bl	8005f7c <I2C_WaitOnFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e04d      	b.n	8005f22 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2bff      	cmp	r3, #255	; 0xff
 8005e8e:	d90e      	bls.n	8005eae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	22ff      	movs	r2, #255	; 0xff
 8005e94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	8979      	ldrh	r1, [r7, #10]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 fa8a 	bl	80063c0 <I2C_TransferConfig>
 8005eac:	e00f      	b.n	8005ece <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	8979      	ldrh	r1, [r7, #10]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fa79 	bl	80063c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d19d      	bne.n	8005e14 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	6a39      	ldr	r1, [r7, #32]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 f8cd 	bl	800607c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e01a      	b.n	8005f22 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6859      	ldr	r1, [r3, #4]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <HAL_I2C_Master_Receive+0x1e8>)
 8005f00:	400b      	ands	r3, r1
 8005f02:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e000      	b.n	8005f22 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f20:	2302      	movs	r3, #2
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	80002400 	.word	0x80002400
 8005f30:	fe00e800 	.word	0xfe00e800

08005f34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d103      	bne.n	8005f52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d007      	beq.n	8005f70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	619a      	str	r2, [r3, #24]
  }
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f8c:	e022      	b.n	8005fd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d01e      	beq.n	8005fd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f96:	f7fd faad 	bl	80034f4 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d302      	bcc.n	8005fac <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d113      	bne.n	8005fd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb0:	f043 0220 	orr.w	r2, r3, #32
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e00f      	b.n	8005ff4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d0cd      	beq.n	8005f8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006008:	e02c      	b.n	8006064 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f8ea 	bl	80061e8 <I2C_IsErrorOccurred>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e02a      	b.n	8006074 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d01e      	beq.n	8006064 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006026:	f7fd fa65 	bl	80034f4 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	429a      	cmp	r2, r3
 8006034:	d302      	bcc.n	800603c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d113      	bne.n	8006064 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006040:	f043 0220 	orr.w	r2, r3, #32
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e007      	b.n	8006074 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b02      	cmp	r3, #2
 8006070:	d1cb      	bne.n	800600a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006088:	e028      	b.n	80060dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f8aa 	bl	80061e8 <I2C_IsErrorOccurred>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e026      	b.n	80060ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609e:	f7fd fa29 	bl	80034f4 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d302      	bcc.n	80060b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d113      	bne.n	80060dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b8:	f043 0220 	orr.w	r2, r3, #32
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e007      	b.n	80060ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d1cf      	bne.n	800608a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006100:	e064      	b.n	80061cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f86e 	bl	80061e8 <I2C_IsErrorOccurred>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e062      	b.n	80061dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b20      	cmp	r3, #32
 8006122:	d138      	bne.n	8006196 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b04      	cmp	r3, #4
 8006130:	d105      	bne.n	800613e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e04e      	b.n	80061dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b10      	cmp	r3, #16
 800614a:	d107      	bne.n	800615c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2210      	movs	r2, #16
 8006152:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2204      	movs	r2, #4
 8006158:	645a      	str	r2, [r3, #68]	; 0x44
 800615a:	e002      	b.n	8006162 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2220      	movs	r2, #32
 8006168:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6859      	ldr	r1, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	4b1b      	ldr	r3, [pc, #108]	; (80061e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006176:	400b      	ands	r3, r1
 8006178:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e022      	b.n	80061dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006196:	f7fd f9ad 	bl	80034f4 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d302      	bcc.n	80061ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10f      	bne.n	80061cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e007      	b.n	80061dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d193      	bne.n	8006102 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	fe00e800 	.word	0xfe00e800

080061e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d075      	beq.n	8006300 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2210      	movs	r2, #16
 800621a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800621c:	e056      	b.n	80062cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d052      	beq.n	80062cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006226:	f7fd f965 	bl	80034f4 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	d302      	bcc.n	800623c <I2C_IsErrorOccurred+0x54>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d147      	bne.n	80062cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006246:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800624e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800625a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800625e:	d12e      	bne.n	80062be <I2C_IsErrorOccurred+0xd6>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006266:	d02a      	beq.n	80062be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006268:	7cfb      	ldrb	r3, [r7, #19]
 800626a:	2b20      	cmp	r3, #32
 800626c:	d027      	beq.n	80062be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800627c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800627e:	f7fd f939 	bl	80034f4 <HAL_GetTick>
 8006282:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006284:	e01b      	b.n	80062be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006286:	f7fd f935 	bl	80034f4 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b19      	cmp	r3, #25
 8006292:	d914      	bls.n	80062be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006298:	f043 0220 	orr.w	r2, r3, #32
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d1dc      	bne.n	8006286 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d003      	beq.n	80062e2 <I2C_IsErrorOccurred+0xfa>
 80062da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d09d      	beq.n	800621e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80062e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2220      	movs	r2, #32
 80062f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	f043 0304 	orr.w	r3, r3, #4
 80062f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006322:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	f043 0308 	orr.w	r3, r3, #8
 800633a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	f043 0302 	orr.w	r3, r3, #2
 800635c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006366:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800636e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01c      	beq.n	80063b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff fddc 	bl	8005f34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6859      	ldr	r1, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <I2C_IsErrorOccurred+0x1d4>)
 8006388:	400b      	ands	r3, r1
 800638a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	431a      	orrs	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80063b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3728      	adds	r7, #40	; 0x28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	fe00e800 	.word	0xfe00e800

080063c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	460b      	mov	r3, r1
 80063cc:	817b      	strh	r3, [r7, #10]
 80063ce:	4613      	mov	r3, r2
 80063d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063d2:	897b      	ldrh	r3, [r7, #10]
 80063d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063d8:	7a7b      	ldrb	r3, [r7, #9]
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063e0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	0d5b      	lsrs	r3, r3, #21
 80063fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80063fe:	4b08      	ldr	r3, [pc, #32]	; (8006420 <I2C_TransferConfig+0x60>)
 8006400:	430b      	orrs	r3, r1
 8006402:	43db      	mvns	r3, r3
 8006404:	ea02 0103 	and.w	r1, r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	03ff63ff 	.word	0x03ff63ff

08006424 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b20      	cmp	r3, #32
 8006438:	d138      	bne.n	80064ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006444:	2302      	movs	r3, #2
 8006446:	e032      	b.n	80064ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2224      	movs	r2, #36	; 0x24
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006476:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6819      	ldr	r1, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e000      	b.n	80064ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d139      	bne.n	8006544 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80064da:	2302      	movs	r3, #2
 80064dc:	e033      	b.n	8006546 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2224      	movs	r2, #36	; 0x24
 80064ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800650c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	e000      	b.n	8006546 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006544:	2302      	movs	r3, #2
  }
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006554:	b08b      	sub	sp, #44	; 0x2c
 8006556:	af06      	add	r7, sp, #24
 8006558:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e0d7      	b.n	8006714 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f009 fa55 	bl	800fa28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2203      	movs	r2, #3
 8006582:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f005 f99b 	bl	800b8c6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]
 8006594:	e04c      	b.n	8006630 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	440b      	add	r3, r1
 80065a6:	3301      	adds	r3, #1
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	440b      	add	r3, r1
 80065bc:	7bfa      	ldrb	r2, [r7, #15]
 80065be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80065c0:	7bfa      	ldrb	r2, [r7, #15]
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	b298      	uxth	r0, r3
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	440b      	add	r3, r1
 80065d2:	3336      	adds	r3, #54	; 0x36
 80065d4:	4602      	mov	r2, r0
 80065d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	440b      	add	r3, r1
 80065e8:	3303      	adds	r3, #3
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065ee:	7bfa      	ldrb	r2, [r7, #15]
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	440b      	add	r3, r1
 80065fc:	3338      	adds	r3, #56	; 0x38
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006602:	7bfa      	ldrb	r2, [r7, #15]
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	440b      	add	r3, r1
 8006610:	333c      	adds	r3, #60	; 0x3c
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006616:	7bfa      	ldrb	r2, [r7, #15]
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	440b      	add	r3, r1
 8006624:	3340      	adds	r3, #64	; 0x40
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	3301      	adds	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
 8006630:	7bfa      	ldrb	r2, [r7, #15]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d3ad      	bcc.n	8006596 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	e044      	b.n	80066ca <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006640:	7bfa      	ldrb	r2, [r7, #15]
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	440b      	add	r3, r1
 800664e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006656:	7bfa      	ldrb	r2, [r7, #15]
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	440b      	add	r3, r1
 8006664:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006668:	7bfa      	ldrb	r2, [r7, #15]
 800666a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800666c:	7bfa      	ldrb	r2, [r7, #15]
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	440b      	add	r3, r1
 800667a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800667e:	2200      	movs	r2, #0
 8006680:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006682:	7bfa      	ldrb	r2, [r7, #15]
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	440b      	add	r3, r1
 8006690:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006698:	7bfa      	ldrb	r2, [r7, #15]
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	440b      	add	r3, r1
 80066a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	440b      	add	r3, r1
 80066bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	3301      	adds	r3, #1
 80066c8:	73fb      	strb	r3, [r7, #15]
 80066ca:	7bfa      	ldrb	r2, [r7, #15]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d3b5      	bcc.n	8006640 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	687e      	ldr	r6, [r7, #4]
 80066dc:	466d      	mov	r5, sp
 80066de:	f106 0410 	add.w	r4, r6, #16
 80066e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	602b      	str	r3, [r5, #0]
 80066ea:	1d33      	adds	r3, r6, #4
 80066ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066ee:	6838      	ldr	r0, [r7, #0]
 80066f0:	f005 f904 	bl	800b8fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d102      	bne.n	8006712 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 fc29 	bl	8007f64 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800671c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_PCD_Start+0x16>
 800672e:	2302      	movs	r3, #2
 8006730:	e012      	b.n	8006758 <HAL_PCD_Start+0x3c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f005 f8aa 	bl	800b898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f007 fac3 	bl	800dcd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f007 fac8 	bl	800dd02 <USB_ReadInterrupts>
 8006772:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fb26 	bl	8006dd0 <PCD_EP_ISR_Handler>

    return;
 8006784:	e110      	b.n	80069a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800678c:	2b00      	cmp	r3, #0
 800678e:	d013      	beq.n	80067b8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006798:	b29a      	uxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a2:	b292      	uxth	r2, r2
 80067a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f009 f9ce 	bl	800fb4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80067ae:	2100      	movs	r1, #0
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f8fc 	bl	80069ae <HAL_PCD_SetAddress>

    return;
 80067b6:	e0f7      	b.n	80069a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00c      	beq.n	80067dc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067d4:	b292      	uxth	r2, r2
 80067d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80067da:	e0e5      	b.n	80069a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00c      	beq.n	8006800 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067f8:	b292      	uxth	r2, r2
 80067fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80067fe:	e0d3      	b.n	80069a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d034      	beq.n	8006874 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0204 	bic.w	r2, r2, #4
 800681c:	b292      	uxth	r2, r2
 800681e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800682a:	b29a      	uxth	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0208 	bic.w	r2, r2, #8
 8006834:	b292      	uxth	r2, r2
 8006836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006840:	2b01      	cmp	r3, #1
 8006842:	d107      	bne.n	8006854 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800684c:	2100      	movs	r1, #0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f009 fb70 	bl	800ff34 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f009 f9b1 	bl	800fbbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006862:	b29a      	uxth	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800686c:	b292      	uxth	r2, r2
 800686e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006872:	e099      	b.n	80069a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800687a:	2b00      	cmp	r3, #0
 800687c:	d027      	beq.n	80068ce <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006886:	b29a      	uxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0208 	orr.w	r2, r2, #8
 8006890:	b292      	uxth	r2, r2
 8006892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800689e:	b29a      	uxth	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068a8:	b292      	uxth	r2, r2
 80068aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0204 	orr.w	r2, r2, #4
 80068c0:	b292      	uxth	r2, r2
 80068c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f009 f95e 	bl	800fb88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80068cc:	e06c      	b.n	80069a8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d040      	beq.n	800695a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ea:	b292      	uxth	r2, r2
 80068ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d12b      	bne.n	8006952 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006902:	b29a      	uxth	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0204 	orr.w	r2, r2, #4
 800690c:	b292      	uxth	r2, r2
 800690e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800691a:	b29a      	uxth	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0208 	orr.w	r2, r2, #8
 8006924:	b292      	uxth	r2, r2
 8006926:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800693a:	b29b      	uxth	r3, r3
 800693c:	089b      	lsrs	r3, r3, #2
 800693e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006948:	2101      	movs	r1, #1
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f009 faf2 	bl	800ff34 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006950:	e02a      	b.n	80069a8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f009 f918 	bl	800fb88 <HAL_PCD_SuspendCallback>
    return;
 8006958:	e026      	b.n	80069a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00f      	beq.n	8006984 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800696c:	b29a      	uxth	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006976:	b292      	uxth	r2, r2
 8006978:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f009 f8d6 	bl	800fb2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006982:	e011      	b.n	80069a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006996:	b29a      	uxth	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069a0:	b292      	uxth	r2, r2
 80069a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80069a6:	bf00      	nop
  }
}
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_PCD_SetAddress+0x1a>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e013      	b.n	80069f0 <HAL_PCD_SetAddress+0x42>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f007 f963 	bl	800dcac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	4608      	mov	r0, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	461a      	mov	r2, r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	70fb      	strb	r3, [r7, #3]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	803b      	strh	r3, [r7, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da0e      	bge.n	8006a3c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4413      	add	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	705a      	strb	r2, [r3, #1]
 8006a3a:	e00e      	b.n	8006a5a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	f003 0207 	and.w	r2, r3, #7
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	4413      	add	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006a66:	883a      	ldrh	r2, [r7, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	78ba      	ldrb	r2, [r7, #2]
 8006a70:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d004      	beq.n	8006a84 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a84:	78bb      	ldrb	r3, [r7, #2]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d102      	bne.n	8006a90 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_PCD_EP_Open+0xa6>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e00e      	b.n	8006abc <HAL_PCD_EP_Open+0xc4>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f004 ff47 	bl	800b940 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006aba:	7afb      	ldrb	r3, [r7, #11]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	da0e      	bge.n	8006af6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	4413      	add	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	705a      	strb	r2, [r3, #1]
 8006af4:	e00e      	b.n	8006b14 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	f003 0207 	and.w	r2, r3, #7
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_PCD_EP_Close+0x6a>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e00e      	b.n	8006b4c <HAL_PCD_EP_Close+0x88>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68f9      	ldr	r1, [r7, #12]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f005 fa93 	bl	800c068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	460b      	mov	r3, r1
 8006b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b64:	7afb      	ldrb	r3, [r7, #11]
 8006b66:	f003 0207 	and.w	r2, r3, #7
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ba0:	7afb      	ldrb	r3, [r7, #11]
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6979      	ldr	r1, [r7, #20]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f005 fc46 	bl	800c442 <USB_EPStartXfer>
 8006bb6:	e005      	b.n	8006bc4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6979      	ldr	r1, [r7, #20]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f005 fc3f 	bl	800c442 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	f003 0207 	and.w	r2, r3, #7
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	440b      	add	r3, r1
 8006bec:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006bf0:	681b      	ldr	r3, [r3, #0]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b086      	sub	sp, #24
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4413      	add	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2200      	movs	r2, #0
 8006c42:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2201      	movs	r2, #1
 8006c48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c4a:	7afb      	ldrb	r3, [r7, #11]
 8006c4c:	f003 0307 	and.w	r3, r3, #7
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6979      	ldr	r1, [r7, #20]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f005 fbeb 	bl	800c442 <USB_EPStartXfer>
 8006c6c:	e005      	b.n	8006c7a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6979      	ldr	r1, [r7, #20]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f005 fbe4 	bl	800c442 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	f003 0207 	and.w	r2, r3, #7
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d901      	bls.n	8006ca2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e03e      	b.n	8006d20 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da0e      	bge.n	8006cc8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	705a      	strb	r2, [r3, #1]
 8006cc6:	e00c      	b.n	8006ce2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_PCD_EP_SetStall+0x7e>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e00e      	b.n	8006d20 <HAL_PCD_EP_SetStall+0x9c>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f006 fecc 	bl	800daae <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	f003 020f 	and.w	r2, r3, #15
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d901      	bls.n	8006d46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e040      	b.n	8006dc8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da0e      	bge.n	8006d6c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	4413      	add	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	705a      	strb	r2, [r3, #1]
 8006d6a:	e00e      	b.n	8006d8a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	f003 0207 	and.w	r2, r3, #7
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_PCD_EP_ClrStall+0x82>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e00e      	b.n	8006dc8 <HAL_PCD_EP_ClrStall+0xa0>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68f9      	ldr	r1, [r7, #12]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f006 fec9 	bl	800db50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b096      	sub	sp, #88	; 0x58
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006dd8:	e39c      	b.n	8007514 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006de2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006de6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006df4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f040 815e 	bne.w	80070ba <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006dfe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d150      	bne.n	8006eac <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	81fb      	strh	r3, [r7, #14]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	89fb      	ldrh	r3, [r7, #14]
 8006e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3328      	adds	r3, #40	; 0x28
 8006e32:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	4413      	add	r3, r2
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5e:	695a      	ldr	r2, [r3, #20]
 8006e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	441a      	add	r2, r3
 8006e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e68:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f008 fe44 	bl	800fafa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 834a 	beq.w	8007514 <PCD_EP_ISR_Handler+0x744>
 8006e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 8345 	bne.w	8007514 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	b292      	uxth	r2, r2
 8006e9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006eaa:	e333      	b.n	8007514 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006ebe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d032      	beq.n	8006f30 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f006 ff4e 	bl	800dda6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006f16:	4013      	ands	r3, r2
 8006f18:	823b      	strh	r3, [r7, #16]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	8a3a      	ldrh	r2, [r7, #16]
 8006f20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f24:	b292      	uxth	r2, r2
 8006f26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f008 fdb9 	bl	800faa0 <HAL_PCD_SetupStageCallback>
 8006f2e:	e2f1      	b.n	8007514 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f30:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f280 82ed 	bge.w	8007514 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006f46:	4013      	ands	r3, r2
 8006f48:	83fb      	strh	r3, [r7, #30]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	8bfa      	ldrh	r2, [r7, #30]
 8006f50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f54:	b292      	uxth	r2, r2
 8006f56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	4413      	add	r3, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	4413      	add	r3, r2
 8006f72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d019      	beq.n	8006fbc <PCD_EP_ISR_Handler+0x1ec>
 8006f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d015      	beq.n	8006fbc <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f96:	6959      	ldr	r1, [r3, #20]
 8006f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f006 ff00 	bl	800dda6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa8:	695a      	ldr	r2, [r3, #20]
 8006faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	441a      	add	r2, r3
 8006fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f008 fd84 	bl	800fac4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 82a3 	bne.w	8007514 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ff4:	d918      	bls.n	8007028 <PCD_EP_ISR_Handler+0x258>
 8006ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8006ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	2b00      	cmp	r3, #0
 8007008:	d102      	bne.n	8007010 <PCD_EP_ISR_Handler+0x240>
 800700a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800700c:	3b01      	subs	r3, #1
 800700e:	647b      	str	r3, [r7, #68]	; 0x44
 8007010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007012:	b29b      	uxth	r3, r3
 8007014:	029b      	lsls	r3, r3, #10
 8007016:	b29b      	uxth	r3, r3
 8007018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007020:	b29a      	uxth	r2, r3
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	e029      	b.n	800707c <PCD_EP_ISR_Handler+0x2ac>
 8007028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d112      	bne.n	8007056 <PCD_EP_ISR_Handler+0x286>
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800703a:	b29a      	uxth	r2, r3
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	801a      	strh	r2, [r3, #0]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704e:	b29a      	uxth	r2, r3
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	e012      	b.n	800707c <PCD_EP_ISR_Handler+0x2ac>
 8007056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	647b      	str	r3, [r7, #68]	; 0x44
 800705e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <PCD_EP_ISR_Handler+0x2a0>
 800706a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706c:	3301      	adds	r3, #1
 800706e:	647b      	str	r3, [r7, #68]	; 0x44
 8007070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007072:	b29b      	uxth	r3, r3
 8007074:	029b      	lsls	r3, r3, #10
 8007076:	b29a      	uxth	r2, r3
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708c:	827b      	strh	r3, [r7, #18]
 800708e:	8a7b      	ldrh	r3, [r7, #18]
 8007090:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007094:	827b      	strh	r3, [r7, #18]
 8007096:	8a7b      	ldrh	r3, [r7, #18]
 8007098:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800709c:	827b      	strh	r3, [r7, #18]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	8a7b      	ldrh	r3, [r7, #18]
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]
 80070b8:	e22c      	b.n	8007514 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80070ce:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f280 80f6 	bge.w	80072c4 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80070ee:	4013      	ands	r3, r2
 80070f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800710a:	b292      	uxth	r2, r2
 800710c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800710e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	4413      	add	r3, r2
 8007122:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007126:	7b1b      	ldrb	r3, [r3, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d123      	bne.n	8007174 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007134:	b29b      	uxth	r3, r3
 8007136:	461a      	mov	r2, r3
 8007138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	4413      	add	r3, r2
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	4413      	add	r3, r2
 8007146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007150:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8007154:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 808e 	beq.w	800727a <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007164:	6959      	ldr	r1, [r3, #20]
 8007166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007168:	88da      	ldrh	r2, [r3, #6]
 800716a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800716e:	f006 fe1a 	bl	800dda6 <USB_ReadPMA>
 8007172:	e082      	b.n	800727a <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007176:	78db      	ldrb	r3, [r3, #3]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d10a      	bne.n	8007192 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800717c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007180:	461a      	mov	r2, r3
 8007182:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f9d3 	bl	8007530 <HAL_PCD_EP_DB_Receive>
 800718a:	4603      	mov	r3, r0
 800718c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007190:	e073      	b.n	800727a <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	441a      	add	r2, r3
 80071be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80071c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d022      	beq.n	8007236 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	4413      	add	r3, r2
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	4413      	add	r3, r2
 800720a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007214:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8007218:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800721c:	2b00      	cmp	r3, #0
 800721e:	d02c      	beq.n	800727a <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007226:	6959      	ldr	r1, [r3, #20]
 8007228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800722a:	891a      	ldrh	r2, [r3, #8]
 800722c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007230:	f006 fdb9 	bl	800dda6 <USB_ReadPMA>
 8007234:	e021      	b.n	800727a <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4413      	add	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	4413      	add	r3, r2
 8007250:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800725a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800725e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726c:	6959      	ldr	r1, [r3, #20]
 800726e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007270:	895a      	ldrh	r2, [r3, #10]
 8007272:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007276:	f006 fd96 	bl	800dda6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800727a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727c:	69da      	ldr	r2, [r3, #28]
 800727e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007282:	441a      	add	r2, r3
 8007284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007286:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007290:	441a      	add	r2, r3
 8007292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007294:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <PCD_EP_ISR_Handler+0x4da>
 800729e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80072a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d206      	bcs.n	80072b8 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80072aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f008 fc07 	bl	800fac4 <HAL_PCD_DataOutStageCallback>
 80072b6:	e005      	b.n	80072c4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80072be:	4618      	mov	r0, r3
 80072c0:	f005 f8bf 	bl	800c442 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80072c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8121 	beq.w	8007514 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80072d2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	4413      	add	r3, r2
 80072e4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80072fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007300:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800731a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731e:	b29b      	uxth	r3, r3
 8007320:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8007322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007324:	78db      	ldrb	r3, [r3, #3]
 8007326:	2b02      	cmp	r3, #2
 8007328:	f000 80a2 	beq.w	8007470 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800732c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732e:	2200      	movs	r2, #0
 8007330:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007334:	7b1b      	ldrb	r3, [r3, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8093 	beq.w	8007462 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800733c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007344:	2b00      	cmp	r3, #0
 8007346:	d046      	beq.n	80073d6 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d126      	bne.n	800739e <PCD_EP_ISR_Handler+0x5ce>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735e:	b29b      	uxth	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	4413      	add	r3, r2
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
 8007368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	00da      	lsls	r2, r3, #3
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	4413      	add	r3, r2
 8007372:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007376:	623b      	str	r3, [r7, #32]
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007382:	b29a      	uxth	r2, r3
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007396:	b29a      	uxth	r2, r3
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e061      	b.n	8007462 <PCD_EP_ISR_Handler+0x692>
 800739e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a0:	785b      	ldrb	r3, [r3, #1]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d15d      	bne.n	8007462 <PCD_EP_ISR_Handler+0x692>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	4413      	add	r3, r2
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	00da      	lsls	r2, r3, #3
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	4413      	add	r3, r2
 80073c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2200      	movs	r2, #0
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	e045      	b.n	8007462 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d126      	bne.n	8007432 <PCD_EP_ISR_Handler+0x662>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f8:	4413      	add	r3, r2
 80073fa:	637b      	str	r3, [r7, #52]	; 0x34
 80073fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	00da      	lsls	r2, r3, #3
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	4413      	add	r3, r2
 8007406:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800740a:	633b      	str	r3, [r7, #48]	; 0x30
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007416:	b29a      	uxth	r2, r3
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	801a      	strh	r2, [r3, #0]
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742a:	b29a      	uxth	r2, r3
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e017      	b.n	8007462 <PCD_EP_ISR_Handler+0x692>
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d113      	bne.n	8007462 <PCD_EP_ISR_Handler+0x692>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007442:	b29b      	uxth	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007448:	4413      	add	r3, r2
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800744c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	00da      	lsls	r2, r3, #3
 8007452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007454:	4413      	add	r3, r2
 8007456:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800745a:	63bb      	str	r3, [r7, #56]	; 0x38
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	2200      	movs	r2, #0
 8007460:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f008 fb46 	bl	800fafa <HAL_PCD_DataInStageCallback>
 800746e:	e051      	b.n	8007514 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007470:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007478:	2b00      	cmp	r3, #0
 800747a:	d144      	bne.n	8007506 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007484:	b29b      	uxth	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	4413      	add	r3, r2
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	4413      	add	r3, r2
 8007496:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80074a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a6:	699a      	ldr	r2, [r3, #24]
 80074a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d907      	bls.n	80074c0 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80074b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b2:	699a      	ldr	r2, [r3, #24]
 80074b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80074b8:	1ad2      	subs	r2, r2, r3
 80074ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074bc:	619a      	str	r2, [r3, #24]
 80074be:	e002      	b.n	80074c6 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80074c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c2:	2200      	movs	r2, #0
 80074c4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80074c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f008 fb10 	bl	800fafa <HAL_PCD_DataInStageCallback>
 80074da:	e01b      	b.n	8007514 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80074dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074de:	695a      	ldr	r2, [r3, #20]
 80074e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80074e4:	441a      	add	r2, r3
 80074e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80074ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ec:	69da      	ldr	r2, [r3, #28]
 80074ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80074f2:	441a      	add	r2, r3
 80074f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80074fe:	4618      	mov	r0, r3
 8007500:	f004 ff9f 	bl	800c442 <USB_EPStartXfer>
 8007504:	e006      	b.n	8007514 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007506:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800750a:	461a      	mov	r2, r3
 800750c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f917 	bl	8007742 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800751c:	b29b      	uxth	r3, r3
 800751e:	b21b      	sxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	f6ff ac5a 	blt.w	8006dda <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3758      	adds	r7, #88	; 0x58
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d07c      	beq.n	8007642 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007550:	b29b      	uxth	r3, r3
 8007552:	461a      	mov	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	4413      	add	r3, r2
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	4413      	add	r3, r2
 8007562:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800756c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	8b7b      	ldrh	r3, [r7, #26]
 8007574:	429a      	cmp	r2, r3
 8007576:	d306      	bcc.n	8007586 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	699a      	ldr	r2, [r3, #24]
 800757c:	8b7b      	ldrh	r3, [r7, #26]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	619a      	str	r2, [r3, #24]
 8007584:	e002      	b.n	800758c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2200      	movs	r2, #0
 800758a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d123      	bne.n	80075dc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	833b      	strh	r3, [r7, #24]
 80075b0:	8b3b      	ldrh	r3, [r7, #24]
 80075b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075b6:	833b      	strh	r3, [r7, #24]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	441a      	add	r2, r3
 80075c6:	8b3b      	ldrh	r3, [r7, #24]
 80075c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d8:	b29b      	uxth	r3, r3
 80075da:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075dc:	88fb      	ldrh	r3, [r7, #6]
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01f      	beq.n	8007626 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007600:	82fb      	strh	r3, [r7, #22]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	8afb      	ldrh	r3, [r7, #22]
 8007612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007626:	8b7b      	ldrh	r3, [r7, #26]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 8085 	beq.w	8007738 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6959      	ldr	r1, [r3, #20]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	891a      	ldrh	r2, [r3, #8]
 800763a:	8b7b      	ldrh	r3, [r7, #26]
 800763c:	f006 fbb3 	bl	800dda6 <USB_ReadPMA>
 8007640:	e07a      	b.n	8007738 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764a:	b29b      	uxth	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	4413      	add	r3, r2
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	4413      	add	r3, r2
 800765c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007666:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	8b7b      	ldrh	r3, [r7, #26]
 800766e:	429a      	cmp	r2, r3
 8007670:	d306      	bcc.n	8007680 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	8b7b      	ldrh	r3, [r7, #26]
 8007678:	1ad2      	subs	r2, r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	619a      	str	r2, [r3, #24]
 800767e:	e002      	b.n	8007686 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2200      	movs	r2, #0
 8007684:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d123      	bne.n	80076d6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a8:	83fb      	strh	r3, [r7, #30]
 80076aa:	8bfb      	ldrh	r3, [r7, #30]
 80076ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076b0:	83fb      	strh	r3, [r7, #30]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	441a      	add	r2, r3
 80076c0:	8bfb      	ldrh	r3, [r7, #30]
 80076c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d11f      	bne.n	8007720 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fa:	83bb      	strh	r3, [r7, #28]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	441a      	add	r2, r3
 800770a:	8bbb      	ldrh	r3, [r7, #28]
 800770c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007718:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800771c:	b29b      	uxth	r3, r3
 800771e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007720:	8b7b      	ldrh	r3, [r7, #26]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	6959      	ldr	r1, [r3, #20]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	895a      	ldrh	r2, [r3, #10]
 8007732:	8b7b      	ldrh	r3, [r7, #26]
 8007734:	f006 fb37 	bl	800dda6 <USB_ReadPMA>
    }
  }

  return count;
 8007738:	8b7b      	ldrh	r3, [r7, #26]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b0a2      	sub	sp, #136	; 0x88
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	4613      	mov	r3, r2
 800774e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007750:	88fb      	ldrh	r3, [r7, #6]
 8007752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 81c5 	beq.w	8007ae6 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007764:	b29b      	uxth	r3, r3
 8007766:	461a      	mov	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	4413      	add	r3, r2
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	4413      	add	r3, r2
 8007776:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007780:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	699a      	ldr	r2, [r3, #24]
 8007788:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800778c:	429a      	cmp	r2, r3
 800778e:	d907      	bls.n	80077a0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007798:	1ad2      	subs	r2, r2, r3
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	619a      	str	r2, [r3, #24]
 800779e:	e002      	b.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2200      	movs	r2, #0
 80077a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f040 80b9 	bne.w	8007922 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d126      	bne.n	8007806 <HAL_PCD_EP_DB_Transmit+0xc4>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	4413      	add	r3, r2
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	00da      	lsls	r2, r3, #3
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	4413      	add	r3, r2
 80077da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	801a      	strh	r2, [r3, #0]
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077fe:	b29a      	uxth	r2, r3
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	801a      	strh	r2, [r3, #0]
 8007804:	e01a      	b.n	800783c <HAL_PCD_EP_DB_Transmit+0xfa>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d116      	bne.n	800783c <HAL_PCD_EP_DB_Transmit+0xfa>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	633b      	str	r3, [r7, #48]	; 0x30
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781c:	b29b      	uxth	r3, r3
 800781e:	461a      	mov	r2, r3
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	4413      	add	r3, r2
 8007824:	633b      	str	r3, [r7, #48]	; 0x30
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	00da      	lsls	r2, r3, #3
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	4413      	add	r3, r2
 8007830:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	2200      	movs	r2, #0
 800783a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	623b      	str	r3, [r7, #32]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d126      	bne.n	8007898 <HAL_PCD_EP_DB_Transmit+0x156>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	4413      	add	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	00da      	lsls	r2, r3, #3
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	4413      	add	r3, r2
 800786c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800787c:	b29a      	uxth	r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	801a      	strh	r2, [r3, #0]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007890:	b29a      	uxth	r2, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	e017      	b.n	80078c8 <HAL_PCD_EP_DB_Transmit+0x186>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d113      	bne.n	80078c8 <HAL_PCD_EP_DB_Transmit+0x186>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	4413      	add	r3, r2
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	00da      	lsls	r2, r3, #3
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	4413      	add	r3, r2
 80078bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078c0:	61fb      	str	r3, [r7, #28]
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	2200      	movs	r2, #0
 80078c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f008 f913 	bl	800fafa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 82d2 	beq.w	8007e84 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fa:	827b      	strh	r3, [r7, #18]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	441a      	add	r2, r3
 800790a:	8a7b      	ldrh	r3, [r7, #18]
 800790c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791c:	b29b      	uxth	r3, r3
 800791e:	8013      	strh	r3, [r2, #0]
 8007920:	e2b0      	b.n	8007e84 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d021      	beq.n	8007970 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007946:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	441a      	add	r2, r3
 8007958:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800795c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796c:	b29b      	uxth	r3, r3
 800796e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007976:	2b01      	cmp	r3, #1
 8007978:	f040 8284 	bne.w	8007e84 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	695a      	ldr	r2, [r3, #20]
 8007980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007984:	441a      	add	r2, r3
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	69da      	ldr	r2, [r3, #28]
 800798e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007992:	441a      	add	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	6a1a      	ldr	r2, [r3, #32]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d309      	bcc.n	80079b8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	6a1a      	ldr	r2, [r3, #32]
 80079ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b0:	1ad2      	subs	r2, r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	621a      	str	r2, [r3, #32]
 80079b6:	e015      	b.n	80079e4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d107      	bne.n	80079d0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80079c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80079ce:	e009      	b.n	80079e4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2200      	movs	r2, #0
 80079e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d155      	bne.n	8007a98 <HAL_PCD_EP_DB_Transmit+0x356>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	4413      	add	r3, r2
 8007a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	00da      	lsls	r2, r3, #3
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a12:	637b      	str	r3, [r7, #52]	; 0x34
 8007a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a16:	2b3e      	cmp	r3, #62	; 0x3e
 8007a18:	d916      	bls.n	8007a48 <HAL_PCD_EP_DB_Transmit+0x306>
 8007a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a1c:	095b      	lsrs	r3, r3, #5
 8007a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a22:	f003 031f 	and.w	r3, r3, #31
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	029b      	lsls	r3, r3, #10
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a44:	801a      	strh	r2, [r3, #0]
 8007a46:	e043      	b.n	8007ad0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d112      	bne.n	8007a74 <HAL_PCD_EP_DB_Transmit+0x332>
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	e02d      	b.n	8007ad0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <HAL_PCD_EP_DB_Transmit+0x348>
 8007a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a86:	3301      	adds	r3, #1
 8007a88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	029b      	lsls	r3, r3, #10
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a94:	801a      	strh	r2, [r3, #0]
 8007a96:	e01b      	b.n	8007ad0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	785b      	ldrb	r3, [r3, #1]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d117      	bne.n	8007ad0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab4:	4413      	add	r3, r2
 8007ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	00da      	lsls	r2, r3, #3
 8007abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ace:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6959      	ldr	r1, [r3, #20]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	891a      	ldrh	r2, [r3, #8]
 8007adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f006 f91f 	bl	800dd22 <USB_WritePMA>
 8007ae4:	e1ce      	b.n	8007e84 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4413      	add	r3, r2
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	4413      	add	r3, r2
 8007b00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d307      	bcc.n	8007b2a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b22:	1ad2      	subs	r2, r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	619a      	str	r2, [r3, #24]
 8007b28:	e002      	b.n	8007b30 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f040 80c4 	bne.w	8007cc2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d126      	bne.n	8007b90 <HAL_PCD_EP_DB_Transmit+0x44e>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b56:	4413      	add	r3, r2
 8007b58:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	00da      	lsls	r2, r3, #3
 8007b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b62:	4413      	add	r3, r2
 8007b64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b68:	667b      	str	r3, [r7, #100]	; 0x64
 8007b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b8c:	801a      	strh	r2, [r3, #0]
 8007b8e:	e01a      	b.n	8007bc6 <HAL_PCD_EP_DB_Transmit+0x484>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d116      	bne.n	8007bc6 <HAL_PCD_EP_DB_Transmit+0x484>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	673b      	str	r3, [r7, #112]	; 0x70
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bac:	4413      	add	r3, r2
 8007bae:	673b      	str	r3, [r7, #112]	; 0x70
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	00da      	lsls	r2, r3, #3
 8007bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bb8:	4413      	add	r3, r2
 8007bba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d12f      	bne.n	8007c34 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bec:	4413      	add	r3, r2
 8007bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	00da      	lsls	r2, r3, #3
 8007bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	e017      	b.n	8007c64 <HAL_PCD_EP_DB_Transmit+0x522>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d113      	bne.n	8007c64 <HAL_PCD_EP_DB_Transmit+0x522>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c4a:	4413      	add	r3, r2
 8007c4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	00da      	lsls	r2, r3, #3
 8007c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c56:	4413      	add	r3, r2
 8007c58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c60:	2200      	movs	r2, #0
 8007c62:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f007 ff45 	bl	800fafa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007c70:	88fb      	ldrh	r3, [r7, #6]
 8007c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 8104 	bne.w	8007e84 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	441a      	add	r2, r3
 8007ca8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	8013      	strh	r3, [r2, #0]
 8007cc0:	e0e0      	b.n	8007e84 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d121      	bne.n	8007d10 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	441a      	add	r2, r3
 8007cf8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	f040 80b4 	bne.w	8007e84 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	695a      	ldr	r2, [r3, #20]
 8007d20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d24:	441a      	add	r2, r3
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d32:	441a      	add	r2, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6a1a      	ldr	r2, [r3, #32]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d309      	bcc.n	8007d58 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6a1a      	ldr	r2, [r3, #32]
 8007d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d50:	1ad2      	subs	r2, r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	621a      	str	r2, [r3, #32]
 8007d56:	e015      	b.n	8007d84 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d107      	bne.n	8007d70 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007d60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007d6e:	e009      	b.n	8007d84 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	663b      	str	r3, [r7, #96]	; 0x60
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	785b      	ldrb	r3, [r3, #1]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d155      	bne.n	8007e3e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007da6:	4413      	add	r3, r2
 8007da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	00da      	lsls	r2, r3, #3
 8007db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007db2:	4413      	add	r3, r2
 8007db4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007db8:	657b      	str	r3, [r7, #84]	; 0x54
 8007dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8007dbe:	d916      	bls.n	8007dee <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	677b      	str	r3, [r7, #116]	; 0x74
 8007dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc8:	f003 031f 	and.w	r3, r3, #31
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d102      	bne.n	8007dd6 <HAL_PCD_EP_DB_Transmit+0x694>
 8007dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	677b      	str	r3, [r7, #116]	; 0x74
 8007dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	029b      	lsls	r3, r3, #10
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	e040      	b.n	8007e70 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d112      	bne.n	8007e1a <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e02:	801a      	strh	r2, [r3, #0]
 8007e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e16:	801a      	strh	r2, [r3, #0]
 8007e18:	e02a      	b.n	8007e70 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e1c:	085b      	lsrs	r3, r3, #1
 8007e1e:	677b      	str	r3, [r7, #116]	; 0x74
 8007e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	677b      	str	r3, [r7, #116]	; 0x74
 8007e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	029b      	lsls	r3, r3, #10
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e3a:	801a      	strh	r2, [r3, #0]
 8007e3c:	e018      	b.n	8007e70 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d114      	bne.n	8007e70 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e54:	4413      	add	r3, r2
 8007e56:	663b      	str	r3, [r7, #96]	; 0x60
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	00da      	lsls	r2, r3, #3
 8007e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e6e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6818      	ldr	r0, [r3, #0]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6959      	ldr	r1, [r3, #20]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	895a      	ldrh	r2, [r3, #10]
 8007e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f005 ff4f 	bl	800dd22 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9e:	823b      	strh	r3, [r7, #16]
 8007ea0:	8a3b      	ldrh	r3, [r7, #16]
 8007ea2:	f083 0310 	eor.w	r3, r3, #16
 8007ea6:	823b      	strh	r3, [r7, #16]
 8007ea8:	8a3b      	ldrh	r3, [r7, #16]
 8007eaa:	f083 0320 	eor.w	r3, r3, #32
 8007eae:	823b      	strh	r3, [r7, #16]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	441a      	add	r2, r3
 8007ebe:	8a3b      	ldrh	r3, [r7, #16]
 8007ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3788      	adds	r7, #136	; 0x88
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b087      	sub	sp, #28
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	607b      	str	r3, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	817b      	strh	r3, [r7, #10]
 8007eec:	4613      	mov	r3, r2
 8007eee:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007ef0:	897b      	ldrh	r3, [r7, #10]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007efc:	897b      	ldrh	r3, [r7, #10]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	e009      	b.n	8007f28 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f14:	897a      	ldrh	r2, [r7, #10]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007f28:	893b      	ldrh	r3, [r7, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d107      	bne.n	8007f3e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2200      	movs	r2, #0
 8007f32:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	80da      	strh	r2, [r3, #6]
 8007f3c:	e00b      	b.n	8007f56 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2201      	movs	r2, #1
 8007f42:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	0c1b      	lsrs	r3, r3, #16
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f043 0302 	orr.w	r3, r3, #2
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d141      	bne.n	800804a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007fc6:	4b4b      	ldr	r3, [pc, #300]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd2:	d131      	bne.n	8008038 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fd4:	4b47      	ldr	r3, [pc, #284]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fda:	4a46      	ldr	r2, [pc, #280]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fe0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fe4:	4b43      	ldr	r3, [pc, #268]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007fec:	4a41      	ldr	r2, [pc, #260]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ff2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ff4:	4b40      	ldr	r3, [pc, #256]	; (80080f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2232      	movs	r2, #50	; 0x32
 8007ffa:	fb02 f303 	mul.w	r3, r2, r3
 8007ffe:	4a3f      	ldr	r2, [pc, #252]	; (80080fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008000:	fba2 2303 	umull	r2, r3, r2, r3
 8008004:	0c9b      	lsrs	r3, r3, #18
 8008006:	3301      	adds	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800800a:	e002      	b.n	8008012 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3b01      	subs	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008012:	4b38      	ldr	r3, [pc, #224]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800801a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801e:	d102      	bne.n	8008026 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1f2      	bne.n	800800c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008026:	4b33      	ldr	r3, [pc, #204]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800802e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008032:	d158      	bne.n	80080e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e057      	b.n	80080e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008038:	4b2e      	ldr	r3, [pc, #184]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800803a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800803e:	4a2d      	ldr	r2, [pc, #180]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008044:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008048:	e04d      	b.n	80080e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008050:	d141      	bne.n	80080d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008052:	4b28      	ldr	r3, [pc, #160]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800805a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800805e:	d131      	bne.n	80080c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008060:	4b24      	ldr	r3, [pc, #144]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008066:	4a23      	ldr	r2, [pc, #140]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800806c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008070:	4b20      	ldr	r3, [pc, #128]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008078:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800807a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800807e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008080:	4b1d      	ldr	r3, [pc, #116]	; (80080f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2232      	movs	r2, #50	; 0x32
 8008086:	fb02 f303 	mul.w	r3, r2, r3
 800808a:	4a1c      	ldr	r2, [pc, #112]	; (80080fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800808c:	fba2 2303 	umull	r2, r3, r2, r3
 8008090:	0c9b      	lsrs	r3, r3, #18
 8008092:	3301      	adds	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008096:	e002      	b.n	800809e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3b01      	subs	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800809e:	4b15      	ldr	r3, [pc, #84]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080aa:	d102      	bne.n	80080b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f2      	bne.n	8008098 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80080b2:	4b10      	ldr	r3, [pc, #64]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080be:	d112      	bne.n	80080e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e011      	b.n	80080e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080c4:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ca:	4a0a      	ldr	r2, [pc, #40]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80080d4:	e007      	b.n	80080e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80080d6:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80080de:	4a05      	ldr	r2, [pc, #20]	; (80080f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	40007000 	.word	0x40007000
 80080f8:	20000000 	.word	0x20000000
 80080fc:	431bde83 	.word	0x431bde83

08008100 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008104:	4b05      	ldr	r3, [pc, #20]	; (800811c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	4a04      	ldr	r2, [pc, #16]	; (800811c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800810a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800810e:	6093      	str	r3, [r2, #8]
}
 8008110:	bf00      	nop
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	40007000 	.word	0x40007000

08008120 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af02      	add	r7, sp, #8
 8008126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008128:	f7fb f9e4 	bl	80034f4 <HAL_GetTick>
 800812c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e069      	b.n	800820c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10b      	bne.n	800815c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7f9 ffb5 	bl	80020bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008152:	f241 3188 	movw	r1, #5000	; 0x1388
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f85e 	bl	8008218 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	3b01      	subs	r3, #1
 800816c:	021a      	lsls	r2, r3, #8
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	2120      	movs	r1, #32
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f856 	bl	8008234 <QSPI_WaitFlagStateUntilTimeout>
 8008188:	4603      	mov	r3, r0
 800818a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800818c:	7afb      	ldrb	r3, [r7, #11]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d137      	bne.n	8008202 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800819c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6852      	ldr	r2, [r2, #4]
 80081a4:	0611      	lsls	r1, r2, #24
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	68d2      	ldr	r2, [r2, #12]
 80081aa:	4311      	orrs	r1, r2
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	69d2      	ldr	r2, [r2, #28]
 80081b0:	4311      	orrs	r1, r2
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	6a12      	ldr	r2, [r2, #32]
 80081b6:	4311      	orrs	r1, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	430b      	orrs	r3, r1
 80081be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	4b13      	ldr	r3, [pc, #76]	; (8008214 <HAL_QSPI_Init+0xf4>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6912      	ldr	r2, [r2, #16]
 80081ce:	0411      	lsls	r1, r2, #16
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6952      	ldr	r2, [r2, #20]
 80081d4:	4311      	orrs	r1, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6992      	ldr	r2, [r2, #24]
 80081da:	4311      	orrs	r1, r2
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6812      	ldr	r2, [r2, #0]
 80081e0:	430b      	orrs	r3, r1
 80081e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0201 	orr.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800820a:	7afb      	ldrb	r3, [r7, #11]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	ffe0f8fe 	.word	0xffe0f8fe

08008218 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008244:	e01a      	b.n	800827c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824c:	d016      	beq.n	800827c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800824e:	f7fb f951 	bl	80034f4 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	429a      	cmp	r2, r3
 800825c:	d302      	bcc.n	8008264 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10b      	bne.n	800827c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2204      	movs	r2, #4
 8008268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008270:	f043 0201 	orr.w	r2, r3, #1
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e00e      	b.n	800829a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	4013      	ands	r3, r2
 8008286:	2b00      	cmp	r3, #0
 8008288:	bf14      	ite	ne
 800828a:	2301      	movne	r3, #1
 800828c:	2300      	moveq	r3, #0
 800828e:	b2db      	uxtb	r3, r3
 8008290:	461a      	mov	r2, r3
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	429a      	cmp	r2, r3
 8008296:	d1d6      	bne.n	8008246 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e306      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d075      	beq.n	80083ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082c2:	4b97      	ldr	r3, [pc, #604]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 030c 	and.w	r3, r3, #12
 80082ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082cc:	4b94      	ldr	r3, [pc, #592]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	2b0c      	cmp	r3, #12
 80082da:	d102      	bne.n	80082e2 <HAL_RCC_OscConfig+0x3e>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d002      	beq.n	80082e8 <HAL_RCC_OscConfig+0x44>
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d10b      	bne.n	8008300 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e8:	4b8d      	ldr	r3, [pc, #564]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d05b      	beq.n	80083ac <HAL_RCC_OscConfig+0x108>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d157      	bne.n	80083ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e2e1      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008308:	d106      	bne.n	8008318 <HAL_RCC_OscConfig+0x74>
 800830a:	4b85      	ldr	r3, [pc, #532]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a84      	ldr	r2, [pc, #528]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	e01d      	b.n	8008354 <HAL_RCC_OscConfig+0xb0>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008320:	d10c      	bne.n	800833c <HAL_RCC_OscConfig+0x98>
 8008322:	4b7f      	ldr	r3, [pc, #508]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a7e      	ldr	r2, [pc, #504]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	4b7c      	ldr	r3, [pc, #496]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a7b      	ldr	r2, [pc, #492]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	e00b      	b.n	8008354 <HAL_RCC_OscConfig+0xb0>
 800833c:	4b78      	ldr	r3, [pc, #480]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a77      	ldr	r2, [pc, #476]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	4b75      	ldr	r3, [pc, #468]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a74      	ldr	r2, [pc, #464]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 800834e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d013      	beq.n	8008384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835c:	f7fb f8ca 	bl	80034f4 <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008364:	f7fb f8c6 	bl	80034f4 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b64      	cmp	r3, #100	; 0x64
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e2a6      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008376:	4b6a      	ldr	r3, [pc, #424]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0f0      	beq.n	8008364 <HAL_RCC_OscConfig+0xc0>
 8008382:	e014      	b.n	80083ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008384:	f7fb f8b6 	bl	80034f4 <HAL_GetTick>
 8008388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800838c:	f7fb f8b2 	bl	80034f4 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b64      	cmp	r3, #100	; 0x64
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e292      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800839e:	4b60      	ldr	r3, [pc, #384]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f0      	bne.n	800838c <HAL_RCC_OscConfig+0xe8>
 80083aa:	e000      	b.n	80083ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d075      	beq.n	80084a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083ba:	4b59      	ldr	r3, [pc, #356]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 030c 	and.w	r3, r3, #12
 80083c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083c4:	4b56      	ldr	r3, [pc, #344]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	2b0c      	cmp	r3, #12
 80083d2:	d102      	bne.n	80083da <HAL_RCC_OscConfig+0x136>
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d002      	beq.n	80083e0 <HAL_RCC_OscConfig+0x13c>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d11f      	bne.n	8008420 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083e0:	4b4f      	ldr	r3, [pc, #316]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <HAL_RCC_OscConfig+0x154>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e265      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f8:	4b49      	ldr	r3, [pc, #292]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	061b      	lsls	r3, r3, #24
 8008406:	4946      	ldr	r1, [pc, #280]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008408:	4313      	orrs	r3, r2
 800840a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800840c:	4b45      	ldr	r3, [pc, #276]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f7fb f823 	bl	800345c <HAL_InitTick>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d043      	beq.n	80084a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e251      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d023      	beq.n	8008470 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008428:	4b3d      	ldr	r3, [pc, #244]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a3c      	ldr	r2, [pc, #240]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 800842e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008434:	f7fb f85e 	bl	80034f4 <HAL_GetTick>
 8008438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800843c:	f7fb f85a 	bl	80034f4 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b02      	cmp	r3, #2
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e23a      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800844e:	4b34      	ldr	r3, [pc, #208]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f0      	beq.n	800843c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800845a:	4b31      	ldr	r3, [pc, #196]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	061b      	lsls	r3, r3, #24
 8008468:	492d      	ldr	r1, [pc, #180]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 800846a:	4313      	orrs	r3, r2
 800846c:	604b      	str	r3, [r1, #4]
 800846e:	e01a      	b.n	80084a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008470:	4b2b      	ldr	r3, [pc, #172]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a2a      	ldr	r2, [pc, #168]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800847a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847c:	f7fb f83a 	bl	80034f4 <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008484:	f7fb f836 	bl	80034f4 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e216      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008496:	4b22      	ldr	r3, [pc, #136]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1f0      	bne.n	8008484 <HAL_RCC_OscConfig+0x1e0>
 80084a2:	e000      	b.n	80084a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d041      	beq.n	8008536 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01c      	beq.n	80084f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084ba:	4b19      	ldr	r3, [pc, #100]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084c0:	4a17      	ldr	r2, [pc, #92]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084c2:	f043 0301 	orr.w	r3, r3, #1
 80084c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ca:	f7fb f813 	bl	80034f4 <HAL_GetTick>
 80084ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084d0:	e008      	b.n	80084e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084d2:	f7fb f80f 	bl	80034f4 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d901      	bls.n	80084e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e1ef      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084e4:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0ef      	beq.n	80084d2 <HAL_RCC_OscConfig+0x22e>
 80084f2:	e020      	b.n	8008536 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084f4:	4b0a      	ldr	r3, [pc, #40]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084fa:	4a09      	ldr	r2, [pc, #36]	; (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084fc:	f023 0301 	bic.w	r3, r3, #1
 8008500:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008504:	f7fa fff6 	bl	80034f4 <HAL_GetTick>
 8008508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800850a:	e00d      	b.n	8008528 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800850c:	f7fa fff2 	bl	80034f4 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d906      	bls.n	8008528 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e1d2      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
 800851e:	bf00      	nop
 8008520:	40021000 	.word	0x40021000
 8008524:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008528:	4b8c      	ldr	r3, [pc, #560]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 800852a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1ea      	bne.n	800850c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80a6 	beq.w	8008690 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008544:	2300      	movs	r3, #0
 8008546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008548:	4b84      	ldr	r3, [pc, #528]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 800854a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_RCC_OscConfig+0x2b4>
 8008554:	2301      	movs	r3, #1
 8008556:	e000      	b.n	800855a <HAL_RCC_OscConfig+0x2b6>
 8008558:	2300      	movs	r3, #0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00d      	beq.n	800857a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800855e:	4b7f      	ldr	r3, [pc, #508]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008562:	4a7e      	ldr	r2, [pc, #504]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008568:	6593      	str	r3, [r2, #88]	; 0x58
 800856a:	4b7c      	ldr	r3, [pc, #496]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 800856c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008576:	2301      	movs	r3, #1
 8008578:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800857a:	4b79      	ldr	r3, [pc, #484]	; (8008760 <HAL_RCC_OscConfig+0x4bc>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008582:	2b00      	cmp	r3, #0
 8008584:	d118      	bne.n	80085b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008586:	4b76      	ldr	r3, [pc, #472]	; (8008760 <HAL_RCC_OscConfig+0x4bc>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a75      	ldr	r2, [pc, #468]	; (8008760 <HAL_RCC_OscConfig+0x4bc>)
 800858c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008592:	f7fa ffaf 	bl	80034f4 <HAL_GetTick>
 8008596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008598:	e008      	b.n	80085ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800859a:	f7fa ffab 	bl	80034f4 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d901      	bls.n	80085ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e18b      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085ac:	4b6c      	ldr	r3, [pc, #432]	; (8008760 <HAL_RCC_OscConfig+0x4bc>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0f0      	beq.n	800859a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d108      	bne.n	80085d2 <HAL_RCC_OscConfig+0x32e>
 80085c0:	4b66      	ldr	r3, [pc, #408]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c6:	4a65      	ldr	r2, [pc, #404]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085c8:	f043 0301 	orr.w	r3, r3, #1
 80085cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085d0:	e024      	b.n	800861c <HAL_RCC_OscConfig+0x378>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d110      	bne.n	80085fc <HAL_RCC_OscConfig+0x358>
 80085da:	4b60      	ldr	r3, [pc, #384]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e0:	4a5e      	ldr	r2, [pc, #376]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085e2:	f043 0304 	orr.w	r3, r3, #4
 80085e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085ea:	4b5c      	ldr	r3, [pc, #368]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f0:	4a5a      	ldr	r2, [pc, #360]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085f2:	f043 0301 	orr.w	r3, r3, #1
 80085f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085fa:	e00f      	b.n	800861c <HAL_RCC_OscConfig+0x378>
 80085fc:	4b57      	ldr	r3, [pc, #348]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008602:	4a56      	ldr	r2, [pc, #344]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800860c:	4b53      	ldr	r3, [pc, #332]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008612:	4a52      	ldr	r2, [pc, #328]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008614:	f023 0304 	bic.w	r3, r3, #4
 8008618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d016      	beq.n	8008652 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008624:	f7fa ff66 	bl	80034f4 <HAL_GetTick>
 8008628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800862a:	e00a      	b.n	8008642 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862c:	f7fa ff62 	bl	80034f4 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	f241 3288 	movw	r2, #5000	; 0x1388
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e140      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008642:	4b46      	ldr	r3, [pc, #280]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0ed      	beq.n	800862c <HAL_RCC_OscConfig+0x388>
 8008650:	e015      	b.n	800867e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008652:	f7fa ff4f 	bl	80034f4 <HAL_GetTick>
 8008656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008658:	e00a      	b.n	8008670 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800865a:	f7fa ff4b 	bl	80034f4 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	f241 3288 	movw	r2, #5000	; 0x1388
 8008668:	4293      	cmp	r3, r2
 800866a:	d901      	bls.n	8008670 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e129      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008670:	4b3a      	ldr	r3, [pc, #232]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1ed      	bne.n	800865a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800867e:	7ffb      	ldrb	r3, [r7, #31]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d105      	bne.n	8008690 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008684:	4b35      	ldr	r3, [pc, #212]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008688:	4a34      	ldr	r2, [pc, #208]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 800868a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800868e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	d03c      	beq.n	8008716 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01c      	beq.n	80086de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086a4:	4b2d      	ldr	r3, [pc, #180]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086aa:	4a2c      	ldr	r2, [pc, #176]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b4:	f7fa ff1e 	bl	80034f4 <HAL_GetTick>
 80086b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086bc:	f7fa ff1a 	bl	80034f4 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e0fa      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086ce:	4b23      	ldr	r3, [pc, #140]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0ef      	beq.n	80086bc <HAL_RCC_OscConfig+0x418>
 80086dc:	e01b      	b.n	8008716 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086de:	4b1f      	ldr	r3, [pc, #124]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086e4:	4a1d      	ldr	r2, [pc, #116]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ee:	f7fa ff01 	bl	80034f4 <HAL_GetTick>
 80086f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086f4:	e008      	b.n	8008708 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086f6:	f7fa fefd 	bl	80034f4 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d901      	bls.n	8008708 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e0dd      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008708:	4b14      	ldr	r3, [pc, #80]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 800870a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1ef      	bne.n	80086f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 80d1 	beq.w	80088c2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008720:	4b0e      	ldr	r3, [pc, #56]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f003 030c 	and.w	r3, r3, #12
 8008728:	2b0c      	cmp	r3, #12
 800872a:	f000 808b 	beq.w	8008844 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d15e      	bne.n	80087f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008736:	4b09      	ldr	r3, [pc, #36]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a08      	ldr	r2, [pc, #32]	; (800875c <HAL_RCC_OscConfig+0x4b8>)
 800873c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008742:	f7fa fed7 	bl	80034f4 <HAL_GetTick>
 8008746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008748:	e00c      	b.n	8008764 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800874a:	f7fa fed3 	bl	80034f4 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d905      	bls.n	8008764 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e0b3      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
 800875c:	40021000 	.word	0x40021000
 8008760:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008764:	4b59      	ldr	r3, [pc, #356]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1ec      	bne.n	800874a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008770:	4b56      	ldr	r3, [pc, #344]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	4b56      	ldr	r3, [pc, #344]	; (80088d0 <HAL_RCC_OscConfig+0x62c>)
 8008776:	4013      	ands	r3, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6a11      	ldr	r1, [r2, #32]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008780:	3a01      	subs	r2, #1
 8008782:	0112      	lsls	r2, r2, #4
 8008784:	4311      	orrs	r1, r2
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800878a:	0212      	lsls	r2, r2, #8
 800878c:	4311      	orrs	r1, r2
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008792:	0852      	lsrs	r2, r2, #1
 8008794:	3a01      	subs	r2, #1
 8008796:	0552      	lsls	r2, r2, #21
 8008798:	4311      	orrs	r1, r2
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800879e:	0852      	lsrs	r2, r2, #1
 80087a0:	3a01      	subs	r2, #1
 80087a2:	0652      	lsls	r2, r2, #25
 80087a4:	4311      	orrs	r1, r2
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80087aa:	06d2      	lsls	r2, r2, #27
 80087ac:	430a      	orrs	r2, r1
 80087ae:	4947      	ldr	r1, [pc, #284]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087b4:	4b45      	ldr	r3, [pc, #276]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a44      	ldr	r2, [pc, #272]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 80087ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087c0:	4b42      	ldr	r3, [pc, #264]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	4a41      	ldr	r2, [pc, #260]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 80087c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087cc:	f7fa fe92 	bl	80034f4 <HAL_GetTick>
 80087d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087d2:	e008      	b.n	80087e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d4:	f7fa fe8e 	bl	80034f4 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e06e      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087e6:	4b39      	ldr	r3, [pc, #228]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0f0      	beq.n	80087d4 <HAL_RCC_OscConfig+0x530>
 80087f2:	e066      	b.n	80088c2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087f4:	4b35      	ldr	r3, [pc, #212]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a34      	ldr	r2, [pc, #208]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 80087fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087fe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008800:	4b32      	ldr	r3, [pc, #200]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	4a31      	ldr	r2, [pc, #196]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 8008806:	f023 0303 	bic.w	r3, r3, #3
 800880a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800880c:	4b2f      	ldr	r3, [pc, #188]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	4a2e      	ldr	r2, [pc, #184]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 8008812:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800881a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881c:	f7fa fe6a 	bl	80034f4 <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008824:	f7fa fe66 	bl	80034f4 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e046      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008836:	4b25      	ldr	r3, [pc, #148]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x580>
 8008842:	e03e      	b.n	80088c2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d101      	bne.n	8008850 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e039      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008850:	4b1e      	ldr	r3, [pc, #120]	; (80088cc <HAL_RCC_OscConfig+0x628>)
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f003 0203 	and.w	r2, r3, #3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	429a      	cmp	r2, r3
 8008862:	d12c      	bne.n	80088be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	3b01      	subs	r3, #1
 8008870:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008872:	429a      	cmp	r2, r3
 8008874:	d123      	bne.n	80088be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008880:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008882:	429a      	cmp	r2, r3
 8008884:	d11b      	bne.n	80088be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008892:	429a      	cmp	r2, r3
 8008894:	d113      	bne.n	80088be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a0:	085b      	lsrs	r3, r3, #1
 80088a2:	3b01      	subs	r3, #1
 80088a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d109      	bne.n	80088be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b4:	085b      	lsrs	r3, r3, #1
 80088b6:	3b01      	subs	r3, #1
 80088b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d001      	beq.n	80088c2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e000      	b.n	80088c4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3720      	adds	r7, #32
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40021000 	.word	0x40021000
 80088d0:	019f800c 	.word	0x019f800c

080088d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e11e      	b.n	8008b2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088ec:	4b91      	ldr	r3, [pc, #580]	; (8008b34 <HAL_RCC_ClockConfig+0x260>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d910      	bls.n	800891c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088fa:	4b8e      	ldr	r3, [pc, #568]	; (8008b34 <HAL_RCC_ClockConfig+0x260>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f023 020f 	bic.w	r2, r3, #15
 8008902:	498c      	ldr	r1, [pc, #560]	; (8008b34 <HAL_RCC_ClockConfig+0x260>)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	4313      	orrs	r3, r2
 8008908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800890a:	4b8a      	ldr	r3, [pc, #552]	; (8008b34 <HAL_RCC_ClockConfig+0x260>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d001      	beq.n	800891c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e106      	b.n	8008b2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	d073      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b03      	cmp	r3, #3
 800892e:	d129      	bne.n	8008984 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008930:	4b81      	ldr	r3, [pc, #516]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0f4      	b.n	8008b2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008940:	f000 f99e 	bl	8008c80 <RCC_GetSysClockFreqFromPLLSource>
 8008944:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	4a7c      	ldr	r2, [pc, #496]	; (8008b3c <HAL_RCC_ClockConfig+0x268>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d93f      	bls.n	80089ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800894e:	4b7a      	ldr	r3, [pc, #488]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d009      	beq.n	800896e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008962:	2b00      	cmp	r3, #0
 8008964:	d033      	beq.n	80089ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800896a:	2b00      	cmp	r3, #0
 800896c:	d12f      	bne.n	80089ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800896e:	4b72      	ldr	r3, [pc, #456]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008976:	4a70      	ldr	r2, [pc, #448]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800897e:	2380      	movs	r3, #128	; 0x80
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	e024      	b.n	80089ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b02      	cmp	r3, #2
 800898a:	d107      	bne.n	800899c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800898c:	4b6a      	ldr	r3, [pc, #424]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e0c6      	b.n	8008b2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800899c:	4b66      	ldr	r3, [pc, #408]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e0be      	b.n	8008b2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80089ac:	f000 f8ce 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 80089b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	4a61      	ldr	r2, [pc, #388]	; (8008b3c <HAL_RCC_ClockConfig+0x268>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d909      	bls.n	80089ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80089ba:	4b5f      	ldr	r3, [pc, #380]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089c2:	4a5d      	ldr	r2, [pc, #372]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 80089c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80089ca:	2380      	movs	r3, #128	; 0x80
 80089cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089ce:	4b5a      	ldr	r3, [pc, #360]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f023 0203 	bic.w	r2, r3, #3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	4957      	ldr	r1, [pc, #348]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e0:	f7fa fd88 	bl	80034f4 <HAL_GetTick>
 80089e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089e6:	e00a      	b.n	80089fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089e8:	f7fa fd84 	bl	80034f4 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d901      	bls.n	80089fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e095      	b.n	8008b2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089fe:	4b4e      	ldr	r3, [pc, #312]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f003 020c 	and.w	r2, r3, #12
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d1eb      	bne.n	80089e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d023      	beq.n	8008a64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a28:	4b43      	ldr	r3, [pc, #268]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	4a42      	ldr	r2, [pc, #264]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008a2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008a32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0308 	and.w	r3, r3, #8
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d007      	beq.n	8008a50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008a40:	4b3d      	ldr	r3, [pc, #244]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a48:	4a3b      	ldr	r2, [pc, #236]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008a4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a50:	4b39      	ldr	r3, [pc, #228]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	4936      	ldr	r1, [pc, #216]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	608b      	str	r3, [r1, #8]
 8008a62:	e008      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2b80      	cmp	r3, #128	; 0x80
 8008a68:	d105      	bne.n	8008a76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008a6a:	4b33      	ldr	r3, [pc, #204]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	4a32      	ldr	r2, [pc, #200]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a76:	4b2f      	ldr	r3, [pc, #188]	; (8008b34 <HAL_RCC_ClockConfig+0x260>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d21d      	bcs.n	8008ac0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a84:	4b2b      	ldr	r3, [pc, #172]	; (8008b34 <HAL_RCC_ClockConfig+0x260>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f023 020f 	bic.w	r2, r3, #15
 8008a8c:	4929      	ldr	r1, [pc, #164]	; (8008b34 <HAL_RCC_ClockConfig+0x260>)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a94:	f7fa fd2e 	bl	80034f4 <HAL_GetTick>
 8008a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9a:	e00a      	b.n	8008ab2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a9c:	f7fa fd2a 	bl	80034f4 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e03b      	b.n	8008b2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ab2:	4b20      	ldr	r3, [pc, #128]	; (8008b34 <HAL_RCC_ClockConfig+0x260>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 030f 	and.w	r3, r3, #15
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d1ed      	bne.n	8008a9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d008      	beq.n	8008ade <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008acc:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	4917      	ldr	r1, [pc, #92]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0308 	and.w	r3, r3, #8
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d009      	beq.n	8008afe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008aea:	4b13      	ldr	r3, [pc, #76]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	490f      	ldr	r1, [pc, #60]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008afe:	f000 f825 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 8008b02:	4602      	mov	r2, r0
 8008b04:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <HAL_RCC_ClockConfig+0x264>)
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	091b      	lsrs	r3, r3, #4
 8008b0a:	f003 030f 	and.w	r3, r3, #15
 8008b0e:	490c      	ldr	r1, [pc, #48]	; (8008b40 <HAL_RCC_ClockConfig+0x26c>)
 8008b10:	5ccb      	ldrb	r3, [r1, r3]
 8008b12:	f003 031f 	and.w	r3, r3, #31
 8008b16:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1a:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <HAL_RCC_ClockConfig+0x270>)
 8008b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008b1e:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <HAL_RCC_ClockConfig+0x274>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fa fc9a 	bl	800345c <HAL_InitTick>
 8008b28:	4603      	mov	r3, r0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40022000 	.word	0x40022000
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	04c4b400 	.word	0x04c4b400
 8008b40:	080103b8 	.word	0x080103b8
 8008b44:	20000000 	.word	0x20000000
 8008b48:	20000004 	.word	0x20000004

08008b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008b52:	4b2c      	ldr	r3, [pc, #176]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f003 030c 	and.w	r3, r3, #12
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d102      	bne.n	8008b64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b5e:	4b2a      	ldr	r3, [pc, #168]	; (8008c08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b60:	613b      	str	r3, [r7, #16]
 8008b62:	e047      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008b64:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 030c 	and.w	r3, r3, #12
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d102      	bne.n	8008b76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b70:	4b26      	ldr	r3, [pc, #152]	; (8008c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	e03e      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008b76:	4b23      	ldr	r3, [pc, #140]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	f003 030c 	and.w	r3, r3, #12
 8008b7e:	2b0c      	cmp	r3, #12
 8008b80:	d136      	bne.n	8008bf0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b82:	4b20      	ldr	r3, [pc, #128]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f003 0303 	and.w	r3, r3, #3
 8008b8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	091b      	lsrs	r3, r3, #4
 8008b92:	f003 030f 	and.w	r3, r3, #15
 8008b96:	3301      	adds	r3, #1
 8008b98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d10c      	bne.n	8008bba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ba0:	4a1a      	ldr	r2, [pc, #104]	; (8008c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba8:	4a16      	ldr	r2, [pc, #88]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008baa:	68d2      	ldr	r2, [r2, #12]
 8008bac:	0a12      	lsrs	r2, r2, #8
 8008bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008bb2:	fb02 f303 	mul.w	r3, r2, r3
 8008bb6:	617b      	str	r3, [r7, #20]
      break;
 8008bb8:	e00c      	b.n	8008bd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008bba:	4a13      	ldr	r2, [pc, #76]	; (8008c08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc2:	4a10      	ldr	r2, [pc, #64]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bc4:	68d2      	ldr	r2, [r2, #12]
 8008bc6:	0a12      	lsrs	r2, r2, #8
 8008bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
 8008bd0:	617b      	str	r3, [r7, #20]
      break;
 8008bd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	0e5b      	lsrs	r3, r3, #25
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	3301      	adds	r3, #1
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	e001      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008bf4:	693b      	ldr	r3, [r7, #16]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40021000 	.word	0x40021000
 8008c08:	00f42400 	.word	0x00f42400
 8008c0c:	007a1200 	.word	0x007a1200

08008c10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c10:	b480      	push	{r7}
 8008c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c14:	4b03      	ldr	r3, [pc, #12]	; (8008c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c16:	681b      	ldr	r3, [r3, #0]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	20000000 	.word	0x20000000

08008c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008c2c:	f7ff fff0 	bl	8008c10 <HAL_RCC_GetHCLKFreq>
 8008c30:	4602      	mov	r2, r0
 8008c32:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	0a1b      	lsrs	r3, r3, #8
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	4904      	ldr	r1, [pc, #16]	; (8008c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c3e:	5ccb      	ldrb	r3, [r1, r3]
 8008c40:	f003 031f 	and.w	r3, r3, #31
 8008c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	40021000 	.word	0x40021000
 8008c50:	080103c8 	.word	0x080103c8

08008c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008c58:	f7ff ffda 	bl	8008c10 <HAL_RCC_GetHCLKFreq>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	0adb      	lsrs	r3, r3, #11
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	4904      	ldr	r1, [pc, #16]	; (8008c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c6a:	5ccb      	ldrb	r3, [r1, r3]
 8008c6c:	f003 031f 	and.w	r3, r3, #31
 8008c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	40021000 	.word	0x40021000
 8008c7c:	080103c8 	.word	0x080103c8

08008c80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c86:	4b1e      	ldr	r3, [pc, #120]	; (8008d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c90:	4b1b      	ldr	r3, [pc, #108]	; (8008d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	091b      	lsrs	r3, r3, #4
 8008c96:	f003 030f 	and.w	r3, r3, #15
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d10c      	bne.n	8008cbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ca4:	4a17      	ldr	r2, [pc, #92]	; (8008d04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cac:	4a14      	ldr	r2, [pc, #80]	; (8008d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008cae:	68d2      	ldr	r2, [r2, #12]
 8008cb0:	0a12      	lsrs	r2, r2, #8
 8008cb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cb6:	fb02 f303 	mul.w	r3, r2, r3
 8008cba:	617b      	str	r3, [r7, #20]
    break;
 8008cbc:	e00c      	b.n	8008cd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008cbe:	4a12      	ldr	r2, [pc, #72]	; (8008d08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc6:	4a0e      	ldr	r2, [pc, #56]	; (8008d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008cc8:	68d2      	ldr	r2, [r2, #12]
 8008cca:	0a12      	lsrs	r2, r2, #8
 8008ccc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cd0:	fb02 f303 	mul.w	r3, r2, r3
 8008cd4:	617b      	str	r3, [r7, #20]
    break;
 8008cd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008cd8:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	0e5b      	lsrs	r3, r3, #25
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008cf2:	687b      	ldr	r3, [r7, #4]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	371c      	adds	r7, #28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	40021000 	.word	0x40021000
 8008d04:	007a1200 	.word	0x007a1200
 8008d08:	00f42400 	.word	0x00f42400

08008d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d14:	2300      	movs	r3, #0
 8008d16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d18:	2300      	movs	r3, #0
 8008d1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8098 	beq.w	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d2e:	4b43      	ldr	r3, [pc, #268]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10d      	bne.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d3a:	4b40      	ldr	r3, [pc, #256]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3e:	4a3f      	ldr	r2, [pc, #252]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d44:	6593      	str	r3, [r2, #88]	; 0x58
 8008d46:	4b3d      	ldr	r3, [pc, #244]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d4e:	60bb      	str	r3, [r7, #8]
 8008d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d52:	2301      	movs	r3, #1
 8008d54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d56:	4b3a      	ldr	r3, [pc, #232]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a39      	ldr	r2, [pc, #228]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d62:	f7fa fbc7 	bl	80034f4 <HAL_GetTick>
 8008d66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d68:	e009      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d6a:	f7fa fbc3 	bl	80034f4 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d902      	bls.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	74fb      	strb	r3, [r7, #19]
        break;
 8008d7c:	e005      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d7e:	4b30      	ldr	r3, [pc, #192]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0ef      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008d8a:	7cfb      	ldrb	r3, [r7, #19]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d159      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d90:	4b2a      	ldr	r3, [pc, #168]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d01e      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d019      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008dac:	4b23      	ldr	r3, [pc, #140]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008db6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008db8:	4b20      	ldr	r3, [pc, #128]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dbe:	4a1f      	ldr	r2, [pc, #124]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dc8:	4b1c      	ldr	r3, [pc, #112]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dce:	4a1b      	ldr	r2, [pc, #108]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008dd8:	4a18      	ldr	r2, [pc, #96]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d016      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dea:	f7fa fb83 	bl	80034f4 <HAL_GetTick>
 8008dee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008df0:	e00b      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008df2:	f7fa fb7f 	bl	80034f4 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d902      	bls.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	74fb      	strb	r3, [r7, #19]
            break;
 8008e08:	e006      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e0a:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0ec      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008e18:	7cfb      	ldrb	r3, [r7, #19]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10b      	bne.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e2c:	4903      	ldr	r1, [pc, #12]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008e34:	e008      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e36:	7cfb      	ldrb	r3, [r7, #19]
 8008e38:	74bb      	strb	r3, [r7, #18]
 8008e3a:	e005      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e44:	7cfb      	ldrb	r3, [r7, #19]
 8008e46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e48:	7c7b      	ldrb	r3, [r7, #17]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d105      	bne.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e4e:	4ba7      	ldr	r3, [pc, #668]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e52:	4aa6      	ldr	r2, [pc, #664]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e66:	4ba1      	ldr	r3, [pc, #644]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e6c:	f023 0203 	bic.w	r2, r3, #3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	499d      	ldr	r1, [pc, #628]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00a      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e88:	4b98      	ldr	r3, [pc, #608]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e8e:	f023 020c 	bic.w	r2, r3, #12
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	4995      	ldr	r1, [pc, #596]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008eaa:	4b90      	ldr	r3, [pc, #576]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	498c      	ldr	r1, [pc, #560]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0308 	and.w	r3, r3, #8
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ecc:	4b87      	ldr	r3, [pc, #540]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	4984      	ldr	r1, [pc, #528]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008eee:	4b7f      	ldr	r3, [pc, #508]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	497b      	ldr	r1, [pc, #492]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f10:	4b76      	ldr	r3, [pc, #472]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	4973      	ldr	r1, [pc, #460]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f32:	4b6e      	ldr	r3, [pc, #440]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	496a      	ldr	r1, [pc, #424]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f54:	4b65      	ldr	r3, [pc, #404]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	4962      	ldr	r1, [pc, #392]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f76:	4b5d      	ldr	r3, [pc, #372]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	4959      	ldr	r1, [pc, #356]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f98:	4b54      	ldr	r3, [pc, #336]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f9e:	f023 0203 	bic.w	r2, r3, #3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	4951      	ldr	r1, [pc, #324]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fba:	4b4c      	ldr	r3, [pc, #304]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	4948      	ldr	r1, [pc, #288]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d015      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fdc:	4b43      	ldr	r3, [pc, #268]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	4940      	ldr	r1, [pc, #256]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ffa:	d105      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ffc:	4b3b      	ldr	r3, [pc, #236]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	4a3a      	ldr	r2, [pc, #232]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009006:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009010:	2b00      	cmp	r3, #0
 8009012:	d015      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009014:	4b35      	ldr	r3, [pc, #212]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009022:	4932      	ldr	r1, [pc, #200]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009032:	d105      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009034:	4b2d      	ldr	r3, [pc, #180]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	4a2c      	ldr	r2, [pc, #176]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800903a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800903e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d015      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800904c:	4b27      	ldr	r3, [pc, #156]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800904e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009052:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	4924      	ldr	r1, [pc, #144]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800905c:	4313      	orrs	r3, r2
 800905e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009066:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800906a:	d105      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800906c:	4b1f      	ldr	r3, [pc, #124]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	4a1e      	ldr	r2, [pc, #120]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009076:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d015      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009084:	4b19      	ldr	r3, [pc, #100]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009092:	4916      	ldr	r1, [pc, #88]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009094:	4313      	orrs	r3, r2
 8009096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a2:	d105      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090a4:	4b11      	ldr	r3, [pc, #68]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	4a10      	ldr	r2, [pc, #64]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d019      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090bc:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	4908      	ldr	r1, [pc, #32]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090da:	d109      	bne.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090dc:	4b03      	ldr	r3, [pc, #12]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	4a02      	ldr	r2, [pc, #8]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090e6:	60d3      	str	r3, [r2, #12]
 80090e8:	e002      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80090ea:	bf00      	nop
 80090ec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d015      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80090fc:	4b29      	ldr	r3, [pc, #164]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009102:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800910a:	4926      	ldr	r1, [pc, #152]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800910c:	4313      	orrs	r3, r2
 800910e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800911a:	d105      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800911c:	4b21      	ldr	r3, [pc, #132]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	4a20      	ldr	r2, [pc, #128]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009126:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d015      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009134:	4b1b      	ldr	r3, [pc, #108]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009142:	4918      	ldr	r1, [pc, #96]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009144:	4313      	orrs	r3, r2
 8009146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800914e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009152:	d105      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009154:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	4a12      	ldr	r2, [pc, #72]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800915a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800915e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d015      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800916e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917a:	490a      	ldr	r1, [pc, #40]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800918a:	d105      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	4a04      	ldr	r2, [pc, #16]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009196:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009198:	7cbb      	ldrb	r3, [r7, #18]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3718      	adds	r7, #24
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	40021000 	.word	0x40021000

080091a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e09d      	b.n	80092f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d108      	bne.n	80091d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091ca:	d009      	beq.n	80091e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	61da      	str	r2, [r3, #28]
 80091d2:	e005      	b.n	80091e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7f9 f832 	bl	8002264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2202      	movs	r2, #2
 8009204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009216:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009220:	d902      	bls.n	8009228 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e002      	b.n	800922e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800922c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009236:	d007      	beq.n	8009248 <HAL_SPI_Init+0xa0>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009240:	d002      	beq.n	8009248 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009258:	431a      	orrs	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009280:	431a      	orrs	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928a:	ea42 0103 	orr.w	r1, r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	430a      	orrs	r2, r1
 800929c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	0c1b      	lsrs	r3, r3, #16
 80092a4:	f003 0204 	and.w	r2, r3, #4
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	431a      	orrs	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80092c4:	ea42 0103 	orr.w	r1, r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d101      	bne.n	8009314 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e038      	b.n	8009386 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d106      	bne.n	800932e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f7f8 fb41 	bl	80019b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3308      	adds	r3, #8
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f002 f951 	bl	800b5e0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	461a      	mov	r2, r3
 8009348:	68b9      	ldr	r1, [r7, #8]
 800934a:	f002 fa19 	bl	800b780 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6858      	ldr	r0, [r3, #4]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	689a      	ldr	r2, [r3, #8]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	f002 fa62 	bl	800b824 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	6892      	ldr	r2, [r2, #8]
 8009368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	6892      	ldr	r2, [r2, #8]
 8009374:	f041 0101 	orr.w	r1, r1, #1
 8009378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b082      	sub	sp, #8
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e049      	b.n	8009434 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d106      	bne.n	80093ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7f9 fb5f 	bl	8002a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2202      	movs	r2, #2
 80093be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f000 fc71 	bl	8009cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e049      	b.n	80094e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f841 	bl	80094ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3304      	adds	r3, #4
 8009478:	4619      	mov	r1, r3
 800947a:	4610      	mov	r0, r2
 800947c:	f000 fc1a 	bl	8009cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094f2:	bf00      	nop
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b082      	sub	sp, #8
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	f003 0302 	and.w	r3, r3, #2
 8009510:	2b02      	cmp	r3, #2
 8009512:	d122      	bne.n	800955a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b02      	cmp	r3, #2
 8009520:	d11b      	bne.n	800955a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f06f 0202 	mvn.w	r2, #2
 800952a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fb99 	bl	8009c78 <HAL_TIM_IC_CaptureCallback>
 8009546:	e005      	b.n	8009554 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fb8b 	bl	8009c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fb9c 	bl	8009c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b04      	cmp	r3, #4
 8009566:	d122      	bne.n	80095ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b04      	cmp	r3, #4
 8009574:	d11b      	bne.n	80095ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f06f 0204 	mvn.w	r2, #4
 800957e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fb6f 	bl	8009c78 <HAL_TIM_IC_CaptureCallback>
 800959a:	e005      	b.n	80095a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fb61 	bl	8009c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fb72 	bl	8009c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d122      	bne.n	8009602 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b08      	cmp	r3, #8
 80095c8:	d11b      	bne.n	8009602 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f06f 0208 	mvn.w	r2, #8
 80095d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2204      	movs	r2, #4
 80095d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	f003 0303 	and.w	r3, r3, #3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fb45 	bl	8009c78 <HAL_TIM_IC_CaptureCallback>
 80095ee:	e005      	b.n	80095fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fb37 	bl	8009c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fb48 	bl	8009c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	f003 0310 	and.w	r3, r3, #16
 800960c:	2b10      	cmp	r3, #16
 800960e:	d122      	bne.n	8009656 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f003 0310 	and.w	r3, r3, #16
 800961a:	2b10      	cmp	r3, #16
 800961c:	d11b      	bne.n	8009656 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f06f 0210 	mvn.w	r2, #16
 8009626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2208      	movs	r2, #8
 800962c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fb1b 	bl	8009c78 <HAL_TIM_IC_CaptureCallback>
 8009642:	e005      	b.n	8009650 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fb0d 	bl	8009c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fb1e 	bl	8009c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b01      	cmp	r3, #1
 8009662:	d10e      	bne.n	8009682 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b01      	cmp	r3, #1
 8009670:	d107      	bne.n	8009682 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f06f 0201 	mvn.w	r2, #1
 800967a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fae7 	bl	8009c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800968c:	2b80      	cmp	r3, #128	; 0x80
 800968e:	d10e      	bne.n	80096ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969a:	2b80      	cmp	r3, #128	; 0x80
 800969c:	d107      	bne.n	80096ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 f8c3 	bl	800a834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096bc:	d10e      	bne.n	80096dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c8:	2b80      	cmp	r3, #128	; 0x80
 80096ca:	d107      	bne.n	80096dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80096d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 f8b6 	bl	800a848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e6:	2b40      	cmp	r3, #64	; 0x40
 80096e8:	d10e      	bne.n	8009708 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f4:	2b40      	cmp	r3, #64	; 0x40
 80096f6:	d107      	bne.n	8009708 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 facc 	bl	8009ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b20      	cmp	r3, #32
 8009714:	d10e      	bne.n	8009734 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f003 0320 	and.w	r3, r3, #32
 8009720:	2b20      	cmp	r3, #32
 8009722:	d107      	bne.n	8009734 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f06f 0220 	mvn.w	r2, #32
 800972c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 f876 	bl	800a820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800973e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009742:	d10f      	bne.n	8009764 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800974e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009752:	d107      	bne.n	8009764 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800975c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f001 f87c 	bl	800a85c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800976e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009772:	d10f      	bne.n	8009794 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800977e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009782:	d107      	bne.n	8009794 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800978c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f001 f86e 	bl	800a870 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800979e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097a2:	d10f      	bne.n	80097c4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097b2:	d107      	bne.n	80097c4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80097bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f001 f860 	bl	800a884 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097d2:	d10f      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097e2:	d107      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80097ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f001 f852 	bl	800a898 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009812:	2b01      	cmp	r3, #1
 8009814:	d101      	bne.n	800981a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009816:	2302      	movs	r3, #2
 8009818:	e0ff      	b.n	8009a1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b14      	cmp	r3, #20
 8009826:	f200 80f0 	bhi.w	8009a0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800982a:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	08009885 	.word	0x08009885
 8009834:	08009a0b 	.word	0x08009a0b
 8009838:	08009a0b 	.word	0x08009a0b
 800983c:	08009a0b 	.word	0x08009a0b
 8009840:	080098c5 	.word	0x080098c5
 8009844:	08009a0b 	.word	0x08009a0b
 8009848:	08009a0b 	.word	0x08009a0b
 800984c:	08009a0b 	.word	0x08009a0b
 8009850:	08009907 	.word	0x08009907
 8009854:	08009a0b 	.word	0x08009a0b
 8009858:	08009a0b 	.word	0x08009a0b
 800985c:	08009a0b 	.word	0x08009a0b
 8009860:	08009947 	.word	0x08009947
 8009864:	08009a0b 	.word	0x08009a0b
 8009868:	08009a0b 	.word	0x08009a0b
 800986c:	08009a0b 	.word	0x08009a0b
 8009870:	08009989 	.word	0x08009989
 8009874:	08009a0b 	.word	0x08009a0b
 8009878:	08009a0b 	.word	0x08009a0b
 800987c:	08009a0b 	.word	0x08009a0b
 8009880:	080099c9 	.word	0x080099c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68b9      	ldr	r1, [r7, #8]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 faba 	bl	8009e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699a      	ldr	r2, [r3, #24]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0208 	orr.w	r2, r2, #8
 800989e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	699a      	ldr	r2, [r3, #24]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0204 	bic.w	r2, r2, #4
 80098ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6999      	ldr	r1, [r3, #24]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	691a      	ldr	r2, [r3, #16]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	430a      	orrs	r2, r1
 80098c0:	619a      	str	r2, [r3, #24]
      break;
 80098c2:	e0a5      	b.n	8009a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68b9      	ldr	r1, [r7, #8]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fb34 	bl	8009f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	699a      	ldr	r2, [r3, #24]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6999      	ldr	r1, [r3, #24]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	021a      	lsls	r2, r3, #8
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	430a      	orrs	r2, r1
 8009902:	619a      	str	r2, [r3, #24]
      break;
 8009904:	e084      	b.n	8009a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68b9      	ldr	r1, [r7, #8]
 800990c:	4618      	mov	r0, r3
 800990e:	f000 fba7 	bl	800a060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69da      	ldr	r2, [r3, #28]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f042 0208 	orr.w	r2, r2, #8
 8009920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	69da      	ldr	r2, [r3, #28]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 0204 	bic.w	r2, r2, #4
 8009930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69d9      	ldr	r1, [r3, #28]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	430a      	orrs	r2, r1
 8009942:	61da      	str	r2, [r3, #28]
      break;
 8009944:	e064      	b.n	8009a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fc19 	bl	800a184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69da      	ldr	r2, [r3, #28]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69d9      	ldr	r1, [r3, #28]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	021a      	lsls	r2, r3, #8
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	61da      	str	r2, [r3, #28]
      break;
 8009986:	e043      	b.n	8009a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68b9      	ldr	r1, [r7, #8]
 800998e:	4618      	mov	r0, r3
 8009990:	f000 fc8c 	bl	800a2ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f042 0208 	orr.w	r2, r2, #8
 80099a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f022 0204 	bic.w	r2, r2, #4
 80099b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	691a      	ldr	r2, [r3, #16]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80099c6:	e023      	b.n	8009a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fcd6 	bl	800a380 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	021a      	lsls	r2, r3, #8
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	430a      	orrs	r2, r1
 8009a06:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009a08:	e002      	b.n	8009a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop

08009a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <HAL_TIM_ConfigClockSource+0x1c>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	e0f6      	b.n	8009c2e <HAL_TIM_ConfigClockSource+0x20a>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a6f      	ldr	r2, [pc, #444]	; (8009c38 <HAL_TIM_ConfigClockSource+0x214>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	f000 80c1 	beq.w	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009a80:	4a6d      	ldr	r2, [pc, #436]	; (8009c38 <HAL_TIM_ConfigClockSource+0x214>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	f200 80c6 	bhi.w	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a88:	4a6c      	ldr	r2, [pc, #432]	; (8009c3c <HAL_TIM_ConfigClockSource+0x218>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	f000 80b9 	beq.w	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009a90:	4a6a      	ldr	r2, [pc, #424]	; (8009c3c <HAL_TIM_ConfigClockSource+0x218>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	f200 80be 	bhi.w	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a98:	4a69      	ldr	r2, [pc, #420]	; (8009c40 <HAL_TIM_ConfigClockSource+0x21c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	f000 80b1 	beq.w	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009aa0:	4a67      	ldr	r2, [pc, #412]	; (8009c40 <HAL_TIM_ConfigClockSource+0x21c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	f200 80b6 	bhi.w	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009aa8:	4a66      	ldr	r2, [pc, #408]	; (8009c44 <HAL_TIM_ConfigClockSource+0x220>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	f000 80a9 	beq.w	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009ab0:	4a64      	ldr	r2, [pc, #400]	; (8009c44 <HAL_TIM_ConfigClockSource+0x220>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	f200 80ae 	bhi.w	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ab8:	4a63      	ldr	r2, [pc, #396]	; (8009c48 <HAL_TIM_ConfigClockSource+0x224>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	f000 80a1 	beq.w	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009ac0:	4a61      	ldr	r2, [pc, #388]	; (8009c48 <HAL_TIM_ConfigClockSource+0x224>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	f200 80a6 	bhi.w	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ac8:	4a60      	ldr	r2, [pc, #384]	; (8009c4c <HAL_TIM_ConfigClockSource+0x228>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	f000 8099 	beq.w	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009ad0:	4a5e      	ldr	r2, [pc, #376]	; (8009c4c <HAL_TIM_ConfigClockSource+0x228>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	f200 809e 	bhi.w	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ad8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009adc:	f000 8091 	beq.w	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009ae0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ae4:	f200 8096 	bhi.w	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aec:	f000 8089 	beq.w	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009af4:	f200 808e 	bhi.w	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009afc:	d03e      	beq.n	8009b7c <HAL_TIM_ConfigClockSource+0x158>
 8009afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b02:	f200 8087 	bhi.w	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b0a:	f000 8086 	beq.w	8009c1a <HAL_TIM_ConfigClockSource+0x1f6>
 8009b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b12:	d87f      	bhi.n	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b14:	2b70      	cmp	r3, #112	; 0x70
 8009b16:	d01a      	beq.n	8009b4e <HAL_TIM_ConfigClockSource+0x12a>
 8009b18:	2b70      	cmp	r3, #112	; 0x70
 8009b1a:	d87b      	bhi.n	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b1c:	2b60      	cmp	r3, #96	; 0x60
 8009b1e:	d050      	beq.n	8009bc2 <HAL_TIM_ConfigClockSource+0x19e>
 8009b20:	2b60      	cmp	r3, #96	; 0x60
 8009b22:	d877      	bhi.n	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b24:	2b50      	cmp	r3, #80	; 0x50
 8009b26:	d03c      	beq.n	8009ba2 <HAL_TIM_ConfigClockSource+0x17e>
 8009b28:	2b50      	cmp	r3, #80	; 0x50
 8009b2a:	d873      	bhi.n	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b2c:	2b40      	cmp	r3, #64	; 0x40
 8009b2e:	d058      	beq.n	8009be2 <HAL_TIM_ConfigClockSource+0x1be>
 8009b30:	2b40      	cmp	r3, #64	; 0x40
 8009b32:	d86f      	bhi.n	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b34:	2b30      	cmp	r3, #48	; 0x30
 8009b36:	d064      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009b38:	2b30      	cmp	r3, #48	; 0x30
 8009b3a:	d86b      	bhi.n	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	d060      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009b40:	2b20      	cmp	r3, #32
 8009b42:	d867      	bhi.n	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d05c      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009b48:	2b10      	cmp	r3, #16
 8009b4a:	d05a      	beq.n	8009c02 <HAL_TIM_ConfigClockSource+0x1de>
 8009b4c:	e062      	b.n	8009c14 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6818      	ldr	r0, [r3, #0]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	6899      	ldr	r1, [r3, #8]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f000 fcf7 	bl	800a550 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	609a      	str	r2, [r3, #8]
      break;
 8009b7a:	e04f      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	6899      	ldr	r1, [r3, #8]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f000 fce0 	bl	800a550 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689a      	ldr	r2, [r3, #8]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b9e:	609a      	str	r2, [r3, #8]
      break;
 8009ba0:	e03c      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	6859      	ldr	r1, [r3, #4]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f000 fc52 	bl	800a458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2150      	movs	r1, #80	; 0x50
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fcab 	bl	800a516 <TIM_ITRx_SetConfig>
      break;
 8009bc0:	e02c      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	6859      	ldr	r1, [r3, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f000 fc71 	bl	800a4b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2160      	movs	r1, #96	; 0x60
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 fc9b 	bl	800a516 <TIM_ITRx_SetConfig>
      break;
 8009be0:	e01c      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	6859      	ldr	r1, [r3, #4]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f000 fc32 	bl	800a458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2140      	movs	r1, #64	; 0x40
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 fc8b 	bl	800a516 <TIM_ITRx_SetConfig>
      break;
 8009c00:	e00c      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	f000 fc82 	bl	800a516 <TIM_ITRx_SetConfig>
      break;
 8009c12:	e003      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	73fb      	strb	r3, [r7, #15]
      break;
 8009c18:	e000      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	00100070 	.word	0x00100070
 8009c3c:	00100060 	.word	0x00100060
 8009c40:	00100050 	.word	0x00100050
 8009c44:	00100040 	.word	0x00100040
 8009c48:	00100030 	.word	0x00100030
 8009c4c:	00100020 	.word	0x00100020

08009c50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a46      	ldr	r2, [pc, #280]	; (8009de0 <TIM_Base_SetConfig+0x12c>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d017      	beq.n	8009cfc <TIM_Base_SetConfig+0x48>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cd2:	d013      	beq.n	8009cfc <TIM_Base_SetConfig+0x48>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a43      	ldr	r2, [pc, #268]	; (8009de4 <TIM_Base_SetConfig+0x130>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d00f      	beq.n	8009cfc <TIM_Base_SetConfig+0x48>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a42      	ldr	r2, [pc, #264]	; (8009de8 <TIM_Base_SetConfig+0x134>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00b      	beq.n	8009cfc <TIM_Base_SetConfig+0x48>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a41      	ldr	r2, [pc, #260]	; (8009dec <TIM_Base_SetConfig+0x138>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d007      	beq.n	8009cfc <TIM_Base_SetConfig+0x48>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a40      	ldr	r2, [pc, #256]	; (8009df0 <TIM_Base_SetConfig+0x13c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d003      	beq.n	8009cfc <TIM_Base_SetConfig+0x48>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a3f      	ldr	r2, [pc, #252]	; (8009df4 <TIM_Base_SetConfig+0x140>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d108      	bne.n	8009d0e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a33      	ldr	r2, [pc, #204]	; (8009de0 <TIM_Base_SetConfig+0x12c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d023      	beq.n	8009d5e <TIM_Base_SetConfig+0xaa>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d1c:	d01f      	beq.n	8009d5e <TIM_Base_SetConfig+0xaa>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a30      	ldr	r2, [pc, #192]	; (8009de4 <TIM_Base_SetConfig+0x130>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d01b      	beq.n	8009d5e <TIM_Base_SetConfig+0xaa>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a2f      	ldr	r2, [pc, #188]	; (8009de8 <TIM_Base_SetConfig+0x134>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d017      	beq.n	8009d5e <TIM_Base_SetConfig+0xaa>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a2e      	ldr	r2, [pc, #184]	; (8009dec <TIM_Base_SetConfig+0x138>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d013      	beq.n	8009d5e <TIM_Base_SetConfig+0xaa>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a2d      	ldr	r2, [pc, #180]	; (8009df0 <TIM_Base_SetConfig+0x13c>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d00f      	beq.n	8009d5e <TIM_Base_SetConfig+0xaa>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a2d      	ldr	r2, [pc, #180]	; (8009df8 <TIM_Base_SetConfig+0x144>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d00b      	beq.n	8009d5e <TIM_Base_SetConfig+0xaa>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a2c      	ldr	r2, [pc, #176]	; (8009dfc <TIM_Base_SetConfig+0x148>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d007      	beq.n	8009d5e <TIM_Base_SetConfig+0xaa>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a2b      	ldr	r2, [pc, #172]	; (8009e00 <TIM_Base_SetConfig+0x14c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d003      	beq.n	8009d5e <TIM_Base_SetConfig+0xaa>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a26      	ldr	r2, [pc, #152]	; (8009df4 <TIM_Base_SetConfig+0x140>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d108      	bne.n	8009d70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	689a      	ldr	r2, [r3, #8]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a12      	ldr	r2, [pc, #72]	; (8009de0 <TIM_Base_SetConfig+0x12c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d013      	beq.n	8009dc4 <TIM_Base_SetConfig+0x110>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a14      	ldr	r2, [pc, #80]	; (8009df0 <TIM_Base_SetConfig+0x13c>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d00f      	beq.n	8009dc4 <TIM_Base_SetConfig+0x110>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a14      	ldr	r2, [pc, #80]	; (8009df8 <TIM_Base_SetConfig+0x144>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d00b      	beq.n	8009dc4 <TIM_Base_SetConfig+0x110>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a13      	ldr	r2, [pc, #76]	; (8009dfc <TIM_Base_SetConfig+0x148>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d007      	beq.n	8009dc4 <TIM_Base_SetConfig+0x110>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a12      	ldr	r2, [pc, #72]	; (8009e00 <TIM_Base_SetConfig+0x14c>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d003      	beq.n	8009dc4 <TIM_Base_SetConfig+0x110>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a0d      	ldr	r2, [pc, #52]	; (8009df4 <TIM_Base_SetConfig+0x140>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d103      	bne.n	8009dcc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	691a      	ldr	r2, [r3, #16]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	615a      	str	r2, [r3, #20]
}
 8009dd2:	bf00      	nop
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	40012c00 	.word	0x40012c00
 8009de4:	40000400 	.word	0x40000400
 8009de8:	40000800 	.word	0x40000800
 8009dec:	40000c00 	.word	0x40000c00
 8009df0:	40013400 	.word	0x40013400
 8009df4:	40015000 	.word	0x40015000
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40014400 	.word	0x40014400
 8009e00:	40014800 	.word	0x40014800

08009e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	f023 0201 	bic.w	r2, r3, #1
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f023 0303 	bic.w	r3, r3, #3
 8009e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f023 0302 	bic.w	r3, r3, #2
 8009e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a30      	ldr	r2, [pc, #192]	; (8009f20 <TIM_OC1_SetConfig+0x11c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d013      	beq.n	8009e8c <TIM_OC1_SetConfig+0x88>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a2f      	ldr	r2, [pc, #188]	; (8009f24 <TIM_OC1_SetConfig+0x120>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d00f      	beq.n	8009e8c <TIM_OC1_SetConfig+0x88>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a2e      	ldr	r2, [pc, #184]	; (8009f28 <TIM_OC1_SetConfig+0x124>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d00b      	beq.n	8009e8c <TIM_OC1_SetConfig+0x88>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a2d      	ldr	r2, [pc, #180]	; (8009f2c <TIM_OC1_SetConfig+0x128>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d007      	beq.n	8009e8c <TIM_OC1_SetConfig+0x88>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a2c      	ldr	r2, [pc, #176]	; (8009f30 <TIM_OC1_SetConfig+0x12c>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d003      	beq.n	8009e8c <TIM_OC1_SetConfig+0x88>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a2b      	ldr	r2, [pc, #172]	; (8009f34 <TIM_OC1_SetConfig+0x130>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d10c      	bne.n	8009ea6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f023 0308 	bic.w	r3, r3, #8
 8009e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f023 0304 	bic.w	r3, r3, #4
 8009ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a1d      	ldr	r2, [pc, #116]	; (8009f20 <TIM_OC1_SetConfig+0x11c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d013      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xd2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a1c      	ldr	r2, [pc, #112]	; (8009f24 <TIM_OC1_SetConfig+0x120>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00f      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xd2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	; (8009f28 <TIM_OC1_SetConfig+0x124>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d00b      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xd2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a1a      	ldr	r2, [pc, #104]	; (8009f2c <TIM_OC1_SetConfig+0x128>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d007      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xd2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a19      	ldr	r2, [pc, #100]	; (8009f30 <TIM_OC1_SetConfig+0x12c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d003      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xd2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a18      	ldr	r2, [pc, #96]	; (8009f34 <TIM_OC1_SetConfig+0x130>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d111      	bne.n	8009efa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	621a      	str	r2, [r3, #32]
}
 8009f14:	bf00      	nop
 8009f16:	371c      	adds	r7, #28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	40012c00 	.word	0x40012c00
 8009f24:	40013400 	.word	0x40013400
 8009f28:	40014000 	.word	0x40014000
 8009f2c:	40014400 	.word	0x40014400
 8009f30:	40014800 	.word	0x40014800
 8009f34:	40015000 	.word	0x40015000

08009f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	f023 0210 	bic.w	r2, r3, #16
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	021b      	lsls	r3, r3, #8
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f023 0320 	bic.w	r3, r3, #32
 8009f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	011b      	lsls	r3, r3, #4
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a2c      	ldr	r2, [pc, #176]	; (800a048 <TIM_OC2_SetConfig+0x110>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d007      	beq.n	8009fac <TIM_OC2_SetConfig+0x74>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a2b      	ldr	r2, [pc, #172]	; (800a04c <TIM_OC2_SetConfig+0x114>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d003      	beq.n	8009fac <TIM_OC2_SetConfig+0x74>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a2a      	ldr	r2, [pc, #168]	; (800a050 <TIM_OC2_SetConfig+0x118>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d10d      	bne.n	8009fc8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	011b      	lsls	r3, r3, #4
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a1f      	ldr	r2, [pc, #124]	; (800a048 <TIM_OC2_SetConfig+0x110>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d013      	beq.n	8009ff8 <TIM_OC2_SetConfig+0xc0>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	; (800a04c <TIM_OC2_SetConfig+0x114>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d00f      	beq.n	8009ff8 <TIM_OC2_SetConfig+0xc0>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a1e      	ldr	r2, [pc, #120]	; (800a054 <TIM_OC2_SetConfig+0x11c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d00b      	beq.n	8009ff8 <TIM_OC2_SetConfig+0xc0>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a1d      	ldr	r2, [pc, #116]	; (800a058 <TIM_OC2_SetConfig+0x120>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d007      	beq.n	8009ff8 <TIM_OC2_SetConfig+0xc0>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a1c      	ldr	r2, [pc, #112]	; (800a05c <TIM_OC2_SetConfig+0x124>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d003      	beq.n	8009ff8 <TIM_OC2_SetConfig+0xc0>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a17      	ldr	r2, [pc, #92]	; (800a050 <TIM_OC2_SetConfig+0x118>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d113      	bne.n	800a020 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	695b      	ldr	r3, [r3, #20]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	4313      	orrs	r3, r2
 800a012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	621a      	str	r2, [r3, #32]
}
 800a03a:	bf00      	nop
 800a03c:	371c      	adds	r7, #28
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	40012c00 	.word	0x40012c00
 800a04c:	40013400 	.word	0x40013400
 800a050:	40015000 	.word	0x40015000
 800a054:	40014000 	.word	0x40014000
 800a058:	40014400 	.word	0x40014400
 800a05c:	40014800 	.word	0x40014800

0800a060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a08e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f023 0303 	bic.w	r3, r3, #3
 800a09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a2b      	ldr	r2, [pc, #172]	; (800a16c <TIM_OC3_SetConfig+0x10c>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d007      	beq.n	800a0d2 <TIM_OC3_SetConfig+0x72>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a2a      	ldr	r2, [pc, #168]	; (800a170 <TIM_OC3_SetConfig+0x110>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d003      	beq.n	800a0d2 <TIM_OC3_SetConfig+0x72>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a29      	ldr	r2, [pc, #164]	; (800a174 <TIM_OC3_SetConfig+0x114>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d10d      	bne.n	800a0ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	021b      	lsls	r3, r3, #8
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a1e      	ldr	r2, [pc, #120]	; (800a16c <TIM_OC3_SetConfig+0x10c>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d013      	beq.n	800a11e <TIM_OC3_SetConfig+0xbe>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a1d      	ldr	r2, [pc, #116]	; (800a170 <TIM_OC3_SetConfig+0x110>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d00f      	beq.n	800a11e <TIM_OC3_SetConfig+0xbe>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a1d      	ldr	r2, [pc, #116]	; (800a178 <TIM_OC3_SetConfig+0x118>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d00b      	beq.n	800a11e <TIM_OC3_SetConfig+0xbe>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a1c      	ldr	r2, [pc, #112]	; (800a17c <TIM_OC3_SetConfig+0x11c>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d007      	beq.n	800a11e <TIM_OC3_SetConfig+0xbe>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a1b      	ldr	r2, [pc, #108]	; (800a180 <TIM_OC3_SetConfig+0x120>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d003      	beq.n	800a11e <TIM_OC3_SetConfig+0xbe>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a16      	ldr	r2, [pc, #88]	; (800a174 <TIM_OC3_SetConfig+0x114>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d113      	bne.n	800a146 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a12c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4313      	orrs	r3, r2
 800a138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	4313      	orrs	r3, r2
 800a144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	621a      	str	r2, [r3, #32]
}
 800a160:	bf00      	nop
 800a162:	371c      	adds	r7, #28
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	40012c00 	.word	0x40012c00
 800a170:	40013400 	.word	0x40013400
 800a174:	40015000 	.word	0x40015000
 800a178:	40014000 	.word	0x40014000
 800a17c:	40014400 	.word	0x40014400
 800a180:	40014800 	.word	0x40014800

0800a184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	031b      	lsls	r3, r3, #12
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a2c      	ldr	r2, [pc, #176]	; (800a294 <TIM_OC4_SetConfig+0x110>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d007      	beq.n	800a1f8 <TIM_OC4_SetConfig+0x74>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a2b      	ldr	r2, [pc, #172]	; (800a298 <TIM_OC4_SetConfig+0x114>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d003      	beq.n	800a1f8 <TIM_OC4_SetConfig+0x74>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a2a      	ldr	r2, [pc, #168]	; (800a29c <TIM_OC4_SetConfig+0x118>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d10d      	bne.n	800a214 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	031b      	lsls	r3, r3, #12
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	4313      	orrs	r3, r2
 800a20a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a212:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a1f      	ldr	r2, [pc, #124]	; (800a294 <TIM_OC4_SetConfig+0x110>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d013      	beq.n	800a244 <TIM_OC4_SetConfig+0xc0>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a1e      	ldr	r2, [pc, #120]	; (800a298 <TIM_OC4_SetConfig+0x114>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00f      	beq.n	800a244 <TIM_OC4_SetConfig+0xc0>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a1e      	ldr	r2, [pc, #120]	; (800a2a0 <TIM_OC4_SetConfig+0x11c>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00b      	beq.n	800a244 <TIM_OC4_SetConfig+0xc0>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a1d      	ldr	r2, [pc, #116]	; (800a2a4 <TIM_OC4_SetConfig+0x120>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d007      	beq.n	800a244 <TIM_OC4_SetConfig+0xc0>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a1c      	ldr	r2, [pc, #112]	; (800a2a8 <TIM_OC4_SetConfig+0x124>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_OC4_SetConfig+0xc0>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a17      	ldr	r2, [pc, #92]	; (800a29c <TIM_OC4_SetConfig+0x118>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d113      	bne.n	800a26c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a24a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a252:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	019b      	lsls	r3, r3, #6
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	019b      	lsls	r3, r3, #6
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4313      	orrs	r3, r2
 800a26a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	621a      	str	r2, [r3, #32]
}
 800a286:	bf00      	nop
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	40012c00 	.word	0x40012c00
 800a298:	40013400 	.word	0x40013400
 800a29c:	40015000 	.word	0x40015000
 800a2a0:	40014000 	.word	0x40014000
 800a2a4:	40014400 	.word	0x40014400
 800a2a8:	40014800 	.word	0x40014800

0800a2ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	041b      	lsls	r3, r3, #16
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a19      	ldr	r2, [pc, #100]	; (800a368 <TIM_OC5_SetConfig+0xbc>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d013      	beq.n	800a32e <TIM_OC5_SetConfig+0x82>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a18      	ldr	r2, [pc, #96]	; (800a36c <TIM_OC5_SetConfig+0xc0>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d00f      	beq.n	800a32e <TIM_OC5_SetConfig+0x82>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a17      	ldr	r2, [pc, #92]	; (800a370 <TIM_OC5_SetConfig+0xc4>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d00b      	beq.n	800a32e <TIM_OC5_SetConfig+0x82>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a16      	ldr	r2, [pc, #88]	; (800a374 <TIM_OC5_SetConfig+0xc8>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d007      	beq.n	800a32e <TIM_OC5_SetConfig+0x82>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a15      	ldr	r2, [pc, #84]	; (800a378 <TIM_OC5_SetConfig+0xcc>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d003      	beq.n	800a32e <TIM_OC5_SetConfig+0x82>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a14      	ldr	r2, [pc, #80]	; (800a37c <TIM_OC5_SetConfig+0xd0>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d109      	bne.n	800a342 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	021b      	lsls	r3, r3, #8
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	4313      	orrs	r3, r2
 800a340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	621a      	str	r2, [r3, #32]
}
 800a35c:	bf00      	nop
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	40012c00 	.word	0x40012c00
 800a36c:	40013400 	.word	0x40013400
 800a370:	40014000 	.word	0x40014000
 800a374:	40014400 	.word	0x40014400
 800a378:	40014800 	.word	0x40014800
 800a37c:	40015000 	.word	0x40015000

0800a380 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	021b      	lsls	r3, r3, #8
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	051b      	lsls	r3, r3, #20
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a1a      	ldr	r2, [pc, #104]	; (800a440 <TIM_OC6_SetConfig+0xc0>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d013      	beq.n	800a404 <TIM_OC6_SetConfig+0x84>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a19      	ldr	r2, [pc, #100]	; (800a444 <TIM_OC6_SetConfig+0xc4>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00f      	beq.n	800a404 <TIM_OC6_SetConfig+0x84>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a18      	ldr	r2, [pc, #96]	; (800a448 <TIM_OC6_SetConfig+0xc8>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00b      	beq.n	800a404 <TIM_OC6_SetConfig+0x84>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a17      	ldr	r2, [pc, #92]	; (800a44c <TIM_OC6_SetConfig+0xcc>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d007      	beq.n	800a404 <TIM_OC6_SetConfig+0x84>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a16      	ldr	r2, [pc, #88]	; (800a450 <TIM_OC6_SetConfig+0xd0>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d003      	beq.n	800a404 <TIM_OC6_SetConfig+0x84>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a15      	ldr	r2, [pc, #84]	; (800a454 <TIM_OC6_SetConfig+0xd4>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d109      	bne.n	800a418 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a40a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	029b      	lsls	r3, r3, #10
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	4313      	orrs	r3, r2
 800a416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685a      	ldr	r2, [r3, #4]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	621a      	str	r2, [r3, #32]
}
 800a432:	bf00      	nop
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	40012c00 	.word	0x40012c00
 800a444:	40013400 	.word	0x40013400
 800a448:	40014000 	.word	0x40014000
 800a44c:	40014400 	.word	0x40014400
 800a450:	40014800 	.word	0x40014800
 800a454:	40015000 	.word	0x40015000

0800a458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	f023 0201 	bic.w	r2, r3, #1
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f023 030a 	bic.w	r3, r3, #10
 800a494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	621a      	str	r2, [r3, #32]
}
 800a4aa:	bf00      	nop
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b087      	sub	sp, #28
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f023 0210 	bic.w	r2, r3, #16
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	031b      	lsls	r3, r3, #12
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	011b      	lsls	r3, r3, #4
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	621a      	str	r2, [r3, #32]
}
 800a50a:	bf00      	nop
 800a50c:	371c      	adds	r7, #28
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a516:	b480      	push	{r7}
 800a518:	b085      	sub	sp, #20
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a52c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4313      	orrs	r3, r2
 800a538:	f043 0307 	orr.w	r3, r3, #7
 800a53c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	609a      	str	r2, [r3, #8]
}
 800a544:	bf00      	nop
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a56a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	021a      	lsls	r2, r3, #8
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	431a      	orrs	r2, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	4313      	orrs	r3, r2
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	609a      	str	r2, [r3, #8]
}
 800a584:	bf00      	nop
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d101      	bne.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e074      	b.n	800a692 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a34      	ldr	r2, [pc, #208]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d009      	beq.n	800a5e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a33      	ldr	r2, [pc, #204]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d004      	beq.n	800a5e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a31      	ldr	r2, [pc, #196]	; (800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d108      	bne.n	800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a21      	ldr	r2, [pc, #132]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d022      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a628:	d01d      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a1f      	ldr	r2, [pc, #124]	; (800a6ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d018      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a1d      	ldr	r2, [pc, #116]	; (800a6b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d013      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a1c      	ldr	r2, [pc, #112]	; (800a6b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d00e      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a15      	ldr	r2, [pc, #84]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d009      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a18      	ldr	r2, [pc, #96]	; (800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d004      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a11      	ldr	r2, [pc, #68]	; (800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d10c      	bne.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a66c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	4313      	orrs	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	40012c00 	.word	0x40012c00
 800a6a4:	40013400 	.word	0x40013400
 800a6a8:	40015000 	.word	0x40015000
 800a6ac:	40000400 	.word	0x40000400
 800a6b0:	40000800 	.word	0x40000800
 800a6b4:	40000c00 	.word	0x40000c00
 800a6b8:	40014000 	.word	0x40014000

0800a6bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d101      	bne.n	800a6d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	e096      	b.n	800a806 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	4313      	orrs	r3, r2
 800a708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4313      	orrs	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	4313      	orrs	r3, r2
 800a724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	4313      	orrs	r3, r2
 800a732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73e:	4313      	orrs	r3, r2
 800a740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	041b      	lsls	r3, r3, #16
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a2f      	ldr	r2, [pc, #188]	; (800a814 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d009      	beq.n	800a770 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a2d      	ldr	r2, [pc, #180]	; (800a818 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d004      	beq.n	800a770 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a2c      	ldr	r2, [pc, #176]	; (800a81c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d106      	bne.n	800a77e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a24      	ldr	r2, [pc, #144]	; (800a814 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d009      	beq.n	800a79c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a22      	ldr	r2, [pc, #136]	; (800a818 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d004      	beq.n	800a79c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a21      	ldr	r2, [pc, #132]	; (800a81c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d12b      	bne.n	800a7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a6:	051b      	lsls	r3, r3, #20
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a11      	ldr	r2, [pc, #68]	; (800a814 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d009      	beq.n	800a7e6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a10      	ldr	r2, [pc, #64]	; (800a818 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d004      	beq.n	800a7e6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a0e      	ldr	r2, [pc, #56]	; (800a81c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d106      	bne.n	800a7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	40012c00 	.word	0x40012c00
 800a818:	40013400 	.word	0x40013400
 800a81c:	40015000 	.word	0x40015000

0800a820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e042      	b.n	800a944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d106      	bne.n	800a8d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7f8 fb6d 	bl	8002fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2224      	movs	r2, #36	; 0x24
 800a8da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f022 0201 	bic.w	r2, r2, #1
 800a8ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f8c2 	bl	800aa78 <UART_SetConfig>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d101      	bne.n	800a8fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e022      	b.n	800a944 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fbb2 	bl	800b070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	685a      	ldr	r2, [r3, #4]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a91a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689a      	ldr	r2, [r3, #8]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a92a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f042 0201 	orr.w	r2, r2, #1
 800a93a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fc39 	bl	800b1b4 <UART_CheckIdleState>
 800a942:	4603      	mov	r3, r0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08a      	sub	sp, #40	; 0x28
 800a950:	af02      	add	r7, sp, #8
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	4613      	mov	r3, r2
 800a95a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a962:	2b20      	cmp	r3, #32
 800a964:	f040 8083 	bne.w	800aa6e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <HAL_UART_Transmit+0x28>
 800a96e:	88fb      	ldrh	r3, [r7, #6]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e07b      	b.n	800aa70 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_UART_Transmit+0x3a>
 800a982:	2302      	movs	r3, #2
 800a984:	e074      	b.n	800aa70 <HAL_UART_Transmit+0x124>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2221      	movs	r2, #33	; 0x21
 800a99a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a99e:	f7f8 fda9 	bl	80034f4 <HAL_GetTick>
 800a9a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	88fa      	ldrh	r2, [r7, #6]
 800a9a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	88fa      	ldrh	r2, [r7, #6]
 800a9b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9bc:	d108      	bne.n	800a9d0 <HAL_UART_Transmit+0x84>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d104      	bne.n	800a9d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	61bb      	str	r3, [r7, #24]
 800a9ce:	e003      	b.n	800a9d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a9e0:	e02c      	b.n	800aa3c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	2180      	movs	r1, #128	; 0x80
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 fc2c 	bl	800b24a <UART_WaitOnFlagUntilTimeout>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e039      	b.n	800aa70 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10b      	bne.n	800aa1a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	3302      	adds	r3, #2
 800aa16:	61bb      	str	r3, [r7, #24]
 800aa18:	e007      	b.n	800aa2a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	3301      	adds	r3, #1
 800aa28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1cc      	bne.n	800a9e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2140      	movs	r1, #64	; 0x40
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f000 fbf9 	bl	800b24a <UART_WaitOnFlagUntilTimeout>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e006      	b.n	800aa70 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2220      	movs	r2, #32
 800aa66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e000      	b.n	800aa70 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aa6e:	2302      	movs	r3, #2
  }
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa7c:	b08c      	sub	sp, #48	; 0x30
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	689a      	ldr	r2, [r3, #8]
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	431a      	orrs	r2, r3
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	431a      	orrs	r2, r3
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	4baa      	ldr	r3, [pc, #680]	; (800ad50 <UART_SetConfig+0x2d8>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aab0:	430b      	orrs	r3, r1
 800aab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	68da      	ldr	r2, [r3, #12]
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	430a      	orrs	r2, r1
 800aac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a9f      	ldr	r2, [pc, #636]	; (800ad54 <UART_SetConfig+0x2dc>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d004      	beq.n	800aae4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aae0:	4313      	orrs	r3, r2
 800aae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800aaee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	6812      	ldr	r2, [r2, #0]
 800aaf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	f023 010f 	bic.w	r1, r3, #15
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a90      	ldr	r2, [pc, #576]	; (800ad58 <UART_SetConfig+0x2e0>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d125      	bne.n	800ab68 <UART_SetConfig+0xf0>
 800ab1c:	4b8f      	ldr	r3, [pc, #572]	; (800ad5c <UART_SetConfig+0x2e4>)
 800ab1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d81a      	bhi.n	800ab60 <UART_SetConfig+0xe8>
 800ab2a:	a201      	add	r2, pc, #4	; (adr r2, 800ab30 <UART_SetConfig+0xb8>)
 800ab2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab30:	0800ab41 	.word	0x0800ab41
 800ab34:	0800ab51 	.word	0x0800ab51
 800ab38:	0800ab49 	.word	0x0800ab49
 800ab3c:	0800ab59 	.word	0x0800ab59
 800ab40:	2301      	movs	r3, #1
 800ab42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab46:	e116      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab4e:	e112      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ab50:	2304      	movs	r3, #4
 800ab52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab56:	e10e      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ab58:	2308      	movs	r3, #8
 800ab5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab5e:	e10a      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ab60:	2310      	movs	r3, #16
 800ab62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab66:	e106      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a7c      	ldr	r2, [pc, #496]	; (800ad60 <UART_SetConfig+0x2e8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d138      	bne.n	800abe4 <UART_SetConfig+0x16c>
 800ab72:	4b7a      	ldr	r3, [pc, #488]	; (800ad5c <UART_SetConfig+0x2e4>)
 800ab74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab78:	f003 030c 	and.w	r3, r3, #12
 800ab7c:	2b0c      	cmp	r3, #12
 800ab7e:	d82d      	bhi.n	800abdc <UART_SetConfig+0x164>
 800ab80:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <UART_SetConfig+0x110>)
 800ab82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab86:	bf00      	nop
 800ab88:	0800abbd 	.word	0x0800abbd
 800ab8c:	0800abdd 	.word	0x0800abdd
 800ab90:	0800abdd 	.word	0x0800abdd
 800ab94:	0800abdd 	.word	0x0800abdd
 800ab98:	0800abcd 	.word	0x0800abcd
 800ab9c:	0800abdd 	.word	0x0800abdd
 800aba0:	0800abdd 	.word	0x0800abdd
 800aba4:	0800abdd 	.word	0x0800abdd
 800aba8:	0800abc5 	.word	0x0800abc5
 800abac:	0800abdd 	.word	0x0800abdd
 800abb0:	0800abdd 	.word	0x0800abdd
 800abb4:	0800abdd 	.word	0x0800abdd
 800abb8:	0800abd5 	.word	0x0800abd5
 800abbc:	2300      	movs	r3, #0
 800abbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abc2:	e0d8      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800abc4:	2302      	movs	r3, #2
 800abc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abca:	e0d4      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800abcc:	2304      	movs	r3, #4
 800abce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abd2:	e0d0      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800abd4:	2308      	movs	r3, #8
 800abd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abda:	e0cc      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800abdc:	2310      	movs	r3, #16
 800abde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abe2:	e0c8      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a5e      	ldr	r2, [pc, #376]	; (800ad64 <UART_SetConfig+0x2ec>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d125      	bne.n	800ac3a <UART_SetConfig+0x1c2>
 800abee:	4b5b      	ldr	r3, [pc, #364]	; (800ad5c <UART_SetConfig+0x2e4>)
 800abf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800abf8:	2b30      	cmp	r3, #48	; 0x30
 800abfa:	d016      	beq.n	800ac2a <UART_SetConfig+0x1b2>
 800abfc:	2b30      	cmp	r3, #48	; 0x30
 800abfe:	d818      	bhi.n	800ac32 <UART_SetConfig+0x1ba>
 800ac00:	2b20      	cmp	r3, #32
 800ac02:	d00a      	beq.n	800ac1a <UART_SetConfig+0x1a2>
 800ac04:	2b20      	cmp	r3, #32
 800ac06:	d814      	bhi.n	800ac32 <UART_SetConfig+0x1ba>
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <UART_SetConfig+0x19a>
 800ac0c:	2b10      	cmp	r3, #16
 800ac0e:	d008      	beq.n	800ac22 <UART_SetConfig+0x1aa>
 800ac10:	e00f      	b.n	800ac32 <UART_SetConfig+0x1ba>
 800ac12:	2300      	movs	r3, #0
 800ac14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac18:	e0ad      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac20:	e0a9      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac22:	2304      	movs	r3, #4
 800ac24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac28:	e0a5      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac2a:	2308      	movs	r3, #8
 800ac2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac30:	e0a1      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac32:	2310      	movs	r3, #16
 800ac34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac38:	e09d      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a4a      	ldr	r2, [pc, #296]	; (800ad68 <UART_SetConfig+0x2f0>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d125      	bne.n	800ac90 <UART_SetConfig+0x218>
 800ac44:	4b45      	ldr	r3, [pc, #276]	; (800ad5c <UART_SetConfig+0x2e4>)
 800ac46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ac4e:	2bc0      	cmp	r3, #192	; 0xc0
 800ac50:	d016      	beq.n	800ac80 <UART_SetConfig+0x208>
 800ac52:	2bc0      	cmp	r3, #192	; 0xc0
 800ac54:	d818      	bhi.n	800ac88 <UART_SetConfig+0x210>
 800ac56:	2b80      	cmp	r3, #128	; 0x80
 800ac58:	d00a      	beq.n	800ac70 <UART_SetConfig+0x1f8>
 800ac5a:	2b80      	cmp	r3, #128	; 0x80
 800ac5c:	d814      	bhi.n	800ac88 <UART_SetConfig+0x210>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <UART_SetConfig+0x1f0>
 800ac62:	2b40      	cmp	r3, #64	; 0x40
 800ac64:	d008      	beq.n	800ac78 <UART_SetConfig+0x200>
 800ac66:	e00f      	b.n	800ac88 <UART_SetConfig+0x210>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac6e:	e082      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac70:	2302      	movs	r3, #2
 800ac72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac76:	e07e      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac78:	2304      	movs	r3, #4
 800ac7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac7e:	e07a      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac80:	2308      	movs	r3, #8
 800ac82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac86:	e076      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac88:	2310      	movs	r3, #16
 800ac8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac8e:	e072      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a35      	ldr	r2, [pc, #212]	; (800ad6c <UART_SetConfig+0x2f4>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d12a      	bne.n	800acf0 <UART_SetConfig+0x278>
 800ac9a:	4b30      	ldr	r3, [pc, #192]	; (800ad5c <UART_SetConfig+0x2e4>)
 800ac9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aca8:	d01a      	beq.n	800ace0 <UART_SetConfig+0x268>
 800acaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acae:	d81b      	bhi.n	800ace8 <UART_SetConfig+0x270>
 800acb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acb4:	d00c      	beq.n	800acd0 <UART_SetConfig+0x258>
 800acb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acba:	d815      	bhi.n	800ace8 <UART_SetConfig+0x270>
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <UART_SetConfig+0x250>
 800acc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acc4:	d008      	beq.n	800acd8 <UART_SetConfig+0x260>
 800acc6:	e00f      	b.n	800ace8 <UART_SetConfig+0x270>
 800acc8:	2300      	movs	r3, #0
 800acca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acce:	e052      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800acd0:	2302      	movs	r3, #2
 800acd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acd6:	e04e      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800acd8:	2304      	movs	r3, #4
 800acda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acde:	e04a      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ace0:	2308      	movs	r3, #8
 800ace2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ace6:	e046      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ace8:	2310      	movs	r3, #16
 800acea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acee:	e042      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a17      	ldr	r2, [pc, #92]	; (800ad54 <UART_SetConfig+0x2dc>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d13a      	bne.n	800ad70 <UART_SetConfig+0x2f8>
 800acfa:	4b18      	ldr	r3, [pc, #96]	; (800ad5c <UART_SetConfig+0x2e4>)
 800acfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad08:	d01a      	beq.n	800ad40 <UART_SetConfig+0x2c8>
 800ad0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad0e:	d81b      	bhi.n	800ad48 <UART_SetConfig+0x2d0>
 800ad10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad14:	d00c      	beq.n	800ad30 <UART_SetConfig+0x2b8>
 800ad16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad1a:	d815      	bhi.n	800ad48 <UART_SetConfig+0x2d0>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d003      	beq.n	800ad28 <UART_SetConfig+0x2b0>
 800ad20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad24:	d008      	beq.n	800ad38 <UART_SetConfig+0x2c0>
 800ad26:	e00f      	b.n	800ad48 <UART_SetConfig+0x2d0>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad2e:	e022      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ad30:	2302      	movs	r3, #2
 800ad32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad36:	e01e      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ad38:	2304      	movs	r3, #4
 800ad3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad3e:	e01a      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ad40:	2308      	movs	r3, #8
 800ad42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad46:	e016      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ad48:	2310      	movs	r3, #16
 800ad4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad4e:	e012      	b.n	800ad76 <UART_SetConfig+0x2fe>
 800ad50:	cfff69f3 	.word	0xcfff69f3
 800ad54:	40008000 	.word	0x40008000
 800ad58:	40013800 	.word	0x40013800
 800ad5c:	40021000 	.word	0x40021000
 800ad60:	40004400 	.word	0x40004400
 800ad64:	40004800 	.word	0x40004800
 800ad68:	40004c00 	.word	0x40004c00
 800ad6c:	40005000 	.word	0x40005000
 800ad70:	2310      	movs	r3, #16
 800ad72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4aae      	ldr	r2, [pc, #696]	; (800b034 <UART_SetConfig+0x5bc>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	f040 8097 	bne.w	800aeb0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	d823      	bhi.n	800add2 <UART_SetConfig+0x35a>
 800ad8a:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <UART_SetConfig+0x318>)
 800ad8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad90:	0800adb5 	.word	0x0800adb5
 800ad94:	0800add3 	.word	0x0800add3
 800ad98:	0800adbd 	.word	0x0800adbd
 800ad9c:	0800add3 	.word	0x0800add3
 800ada0:	0800adc3 	.word	0x0800adc3
 800ada4:	0800add3 	.word	0x0800add3
 800ada8:	0800add3 	.word	0x0800add3
 800adac:	0800add3 	.word	0x0800add3
 800adb0:	0800adcb 	.word	0x0800adcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adb4:	f7fd ff38 	bl	8008c28 <HAL_RCC_GetPCLK1Freq>
 800adb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adba:	e010      	b.n	800adde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adbc:	4b9e      	ldr	r3, [pc, #632]	; (800b038 <UART_SetConfig+0x5c0>)
 800adbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800adc0:	e00d      	b.n	800adde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adc2:	f7fd fec3 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 800adc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adc8:	e009      	b.n	800adde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800add0:	e005      	b.n	800adde <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800addc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 8130 	beq.w	800b046 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adea:	4a94      	ldr	r2, [pc, #592]	; (800b03c <UART_SetConfig+0x5c4>)
 800adec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adf0:	461a      	mov	r2, r3
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800adf8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	685a      	ldr	r2, [r3, #4]
 800adfe:	4613      	mov	r3, r2
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	4413      	add	r3, r2
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d305      	bcc.n	800ae16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d903      	bls.n	800ae1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae1c:	e113      	b.n	800b046 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae20:	2200      	movs	r2, #0
 800ae22:	60bb      	str	r3, [r7, #8]
 800ae24:	60fa      	str	r2, [r7, #12]
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2a:	4a84      	ldr	r2, [pc, #528]	; (800b03c <UART_SetConfig+0x5c4>)
 800ae2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2200      	movs	r2, #0
 800ae34:	603b      	str	r3, [r7, #0]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae40:	f7f5 fe08 	bl	8000a54 <__aeabi_uldivmod>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	4610      	mov	r0, r2
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	f04f 0200 	mov.w	r2, #0
 800ae50:	f04f 0300 	mov.w	r3, #0
 800ae54:	020b      	lsls	r3, r1, #8
 800ae56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae5a:	0202      	lsls	r2, r0, #8
 800ae5c:	6979      	ldr	r1, [r7, #20]
 800ae5e:	6849      	ldr	r1, [r1, #4]
 800ae60:	0849      	lsrs	r1, r1, #1
 800ae62:	2000      	movs	r0, #0
 800ae64:	460c      	mov	r4, r1
 800ae66:	4605      	mov	r5, r0
 800ae68:	eb12 0804 	adds.w	r8, r2, r4
 800ae6c:	eb43 0905 	adc.w	r9, r3, r5
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	469a      	mov	sl, r3
 800ae78:	4693      	mov	fp, r2
 800ae7a:	4652      	mov	r2, sl
 800ae7c:	465b      	mov	r3, fp
 800ae7e:	4640      	mov	r0, r8
 800ae80:	4649      	mov	r1, r9
 800ae82:	f7f5 fde7 	bl	8000a54 <__aeabi_uldivmod>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae94:	d308      	bcc.n	800aea8 <UART_SetConfig+0x430>
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae9c:	d204      	bcs.n	800aea8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6a3a      	ldr	r2, [r7, #32]
 800aea4:	60da      	str	r2, [r3, #12]
 800aea6:	e0ce      	b.n	800b046 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aeae:	e0ca      	b.n	800b046 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeb8:	d166      	bne.n	800af88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800aeba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aebe:	2b08      	cmp	r3, #8
 800aec0:	d827      	bhi.n	800af12 <UART_SetConfig+0x49a>
 800aec2:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <UART_SetConfig+0x450>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800aeed 	.word	0x0800aeed
 800aecc:	0800aef5 	.word	0x0800aef5
 800aed0:	0800aefd 	.word	0x0800aefd
 800aed4:	0800af13 	.word	0x0800af13
 800aed8:	0800af03 	.word	0x0800af03
 800aedc:	0800af13 	.word	0x0800af13
 800aee0:	0800af13 	.word	0x0800af13
 800aee4:	0800af13 	.word	0x0800af13
 800aee8:	0800af0b 	.word	0x0800af0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeec:	f7fd fe9c 	bl	8008c28 <HAL_RCC_GetPCLK1Freq>
 800aef0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aef2:	e014      	b.n	800af1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aef4:	f7fd feae 	bl	8008c54 <HAL_RCC_GetPCLK2Freq>
 800aef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aefa:	e010      	b.n	800af1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aefc:	4b4e      	ldr	r3, [pc, #312]	; (800b038 <UART_SetConfig+0x5c0>)
 800aefe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af00:	e00d      	b.n	800af1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af02:	f7fd fe23 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 800af06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af08:	e009      	b.n	800af1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af10:	e005      	b.n	800af1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8090 	beq.w	800b046 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	4a44      	ldr	r2, [pc, #272]	; (800b03c <UART_SetConfig+0x5c4>)
 800af2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af30:	461a      	mov	r2, r3
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	fbb3 f3f2 	udiv	r3, r3, r2
 800af38:	005a      	lsls	r2, r3, #1
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	085b      	lsrs	r3, r3, #1
 800af40:	441a      	add	r2, r3
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	2b0f      	cmp	r3, #15
 800af50:	d916      	bls.n	800af80 <UART_SetConfig+0x508>
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af58:	d212      	bcs.n	800af80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	f023 030f 	bic.w	r3, r3, #15
 800af62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	085b      	lsrs	r3, r3, #1
 800af68:	b29b      	uxth	r3, r3
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	b29a      	uxth	r2, r3
 800af70:	8bfb      	ldrh	r3, [r7, #30]
 800af72:	4313      	orrs	r3, r2
 800af74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	8bfa      	ldrh	r2, [r7, #30]
 800af7c:	60da      	str	r2, [r3, #12]
 800af7e:	e062      	b.n	800b046 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800af86:	e05e      	b.n	800b046 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af8c:	2b08      	cmp	r3, #8
 800af8e:	d828      	bhi.n	800afe2 <UART_SetConfig+0x56a>
 800af90:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <UART_SetConfig+0x520>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afbd 	.word	0x0800afbd
 800af9c:	0800afc5 	.word	0x0800afc5
 800afa0:	0800afcd 	.word	0x0800afcd
 800afa4:	0800afe3 	.word	0x0800afe3
 800afa8:	0800afd3 	.word	0x0800afd3
 800afac:	0800afe3 	.word	0x0800afe3
 800afb0:	0800afe3 	.word	0x0800afe3
 800afb4:	0800afe3 	.word	0x0800afe3
 800afb8:	0800afdb 	.word	0x0800afdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afbc:	f7fd fe34 	bl	8008c28 <HAL_RCC_GetPCLK1Freq>
 800afc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afc2:	e014      	b.n	800afee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afc4:	f7fd fe46 	bl	8008c54 <HAL_RCC_GetPCLK2Freq>
 800afc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afca:	e010      	b.n	800afee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afcc:	4b1a      	ldr	r3, [pc, #104]	; (800b038 <UART_SetConfig+0x5c0>)
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800afd0:	e00d      	b.n	800afee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afd2:	f7fd fdbb 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 800afd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afd8:	e009      	b.n	800afee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800afe0:	e005      	b.n	800afee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800afe2:	2300      	movs	r3, #0
 800afe4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800afec:	bf00      	nop
    }

    if (pclk != 0U)
 800afee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d028      	beq.n	800b046 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	4a10      	ldr	r2, [pc, #64]	; (800b03c <UART_SetConfig+0x5c4>)
 800affa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800affe:	461a      	mov	r2, r3
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	fbb3 f2f2 	udiv	r2, r3, r2
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	085b      	lsrs	r3, r3, #1
 800b00c:	441a      	add	r2, r3
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	fbb2 f3f3 	udiv	r3, r2, r3
 800b016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	2b0f      	cmp	r3, #15
 800b01c:	d910      	bls.n	800b040 <UART_SetConfig+0x5c8>
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b024:	d20c      	bcs.n	800b040 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	b29a      	uxth	r2, r3
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	60da      	str	r2, [r3, #12]
 800b030:	e009      	b.n	800b046 <UART_SetConfig+0x5ce>
 800b032:	bf00      	nop
 800b034:	40008000 	.word	0x40008000
 800b038:	00f42400 	.word	0x00f42400
 800b03c:	080103d0 	.word	0x080103d0
      }
      else
      {
        ret = HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2201      	movs	r2, #1
 800b04a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2201      	movs	r2, #1
 800b052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2200      	movs	r2, #0
 800b05a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	2200      	movs	r2, #0
 800b060:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b062:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b066:	4618      	mov	r0, r3
 800b068:	3730      	adds	r7, #48	; 0x30
 800b06a:	46bd      	mov	sp, r7
 800b06c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00a      	beq.n	800b09a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00a      	beq.n	800b0bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	430a      	orrs	r2, r1
 800b0ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c0:	f003 0304 	and.w	r3, r3, #4
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00a      	beq.n	800b0de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e2:	f003 0308 	and.w	r3, r3, #8
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b104:	f003 0310 	and.w	r3, r3, #16
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	430a      	orrs	r2, r1
 800b120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b126:	f003 0320 	and.w	r3, r3, #32
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01a      	beq.n	800b186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	430a      	orrs	r2, r1
 800b164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b16a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b16e:	d10a      	bne.n	800b186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	605a      	str	r2, [r3, #4]
  }
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af02      	add	r7, sp, #8
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1c4:	f7f8 f996 	bl	80034f4 <HAL_GetTick>
 800b1c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0308 	and.w	r3, r3, #8
 800b1d4:	2b08      	cmp	r3, #8
 800b1d6:	d10e      	bne.n	800b1f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f82f 	bl	800b24a <UART_WaitOnFlagUntilTimeout>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	e025      	b.n	800b242 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0304 	and.w	r3, r3, #4
 800b200:	2b04      	cmp	r3, #4
 800b202:	d10e      	bne.n	800b222 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f819 	bl	800b24a <UART_WaitOnFlagUntilTimeout>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e00f      	b.n	800b242 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2220      	movs	r2, #32
 800b226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2220      	movs	r2, #32
 800b22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b09c      	sub	sp, #112	; 0x70
 800b24e:	af00      	add	r7, sp, #0
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	60b9      	str	r1, [r7, #8]
 800b254:	603b      	str	r3, [r7, #0]
 800b256:	4613      	mov	r3, r2
 800b258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b25a:	e0a9      	b.n	800b3b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b25c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b262:	f000 80a5 	beq.w	800b3b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b266:	f7f8 f945 	bl	80034f4 <HAL_GetTick>
 800b26a:	4602      	mov	r2, r0
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b272:	429a      	cmp	r2, r3
 800b274:	d302      	bcc.n	800b27c <UART_WaitOnFlagUntilTimeout+0x32>
 800b276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d140      	bne.n	800b2fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b284:	e853 3f00 	ldrex	r3, [r3]
 800b288:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b28c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b290:	667b      	str	r3, [r7, #100]	; 0x64
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b29a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b29c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2a2:	e841 2300 	strex	r3, r2, [r1]
 800b2a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b2a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1e6      	bne.n	800b27c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b8:	e853 3f00 	ldrex	r3, [r3]
 800b2bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	f023 0301 	bic.w	r3, r3, #1
 800b2c4:	663b      	str	r3, [r7, #96]	; 0x60
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3308      	adds	r3, #8
 800b2cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2d6:	e841 2300 	strex	r3, r2, [r1]
 800b2da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1e5      	bne.n	800b2ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2220      	movs	r2, #32
 800b2e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e069      	b.n	800b3d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 0304 	and.w	r3, r3, #4
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d051      	beq.n	800b3b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b31a:	d149      	bne.n	800b3b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b324:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32e:	e853 3f00 	ldrex	r3, [r3]
 800b332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b33a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	461a      	mov	r2, r3
 800b342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b344:	637b      	str	r3, [r7, #52]	; 0x34
 800b346:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b34a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b34c:	e841 2300 	strex	r3, r2, [r1]
 800b350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e6      	bne.n	800b326 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3308      	adds	r3, #8
 800b35e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	e853 3f00 	ldrex	r3, [r3]
 800b366:	613b      	str	r3, [r7, #16]
   return(result);
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	f023 0301 	bic.w	r3, r3, #1
 800b36e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3308      	adds	r3, #8
 800b376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b378:	623a      	str	r2, [r7, #32]
 800b37a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37c:	69f9      	ldr	r1, [r7, #28]
 800b37e:	6a3a      	ldr	r2, [r7, #32]
 800b380:	e841 2300 	strex	r3, r2, [r1]
 800b384:	61bb      	str	r3, [r7, #24]
   return(result);
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e5      	bne.n	800b358 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2220      	movs	r2, #32
 800b390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2220      	movs	r2, #32
 800b398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2220      	movs	r2, #32
 800b3a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e010      	b.n	800b3d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	69da      	ldr	r2, [r3, #28]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	bf0c      	ite	eq
 800b3c0:	2301      	moveq	r3, #1
 800b3c2:	2300      	movne	r3, #0
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	f43f af46 	beq.w	800b25c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3770      	adds	r7, #112	; 0x70
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b085      	sub	sp, #20
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d101      	bne.n	800b3f0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	e027      	b.n	800b440 <HAL_UARTEx_DisableFifoMode+0x66>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2224      	movs	r2, #36	; 0x24
 800b3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 0201 	bic.w	r2, r2, #1
 800b416:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b41e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d101      	bne.n	800b464 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b460:	2302      	movs	r3, #2
 800b462:	e02d      	b.n	800b4c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2224      	movs	r2, #36	; 0x24
 800b470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f022 0201 	bic.w	r2, r2, #1
 800b48a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	430a      	orrs	r2, r1
 800b49e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f84f 	bl	800b544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d101      	bne.n	800b4e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b4dc:	2302      	movs	r3, #2
 800b4de:	e02d      	b.n	800b53c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2224      	movs	r2, #36	; 0x24
 800b4ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f022 0201 	bic.w	r2, r2, #1
 800b506:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	430a      	orrs	r2, r1
 800b51a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f811 	bl	800b544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2220      	movs	r2, #32
 800b52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b550:	2b00      	cmp	r3, #0
 800b552:	d108      	bne.n	800b566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b564:	e031      	b.n	800b5ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b566:	2308      	movs	r3, #8
 800b568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b56a:	2308      	movs	r3, #8
 800b56c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	0e5b      	lsrs	r3, r3, #25
 800b576:	b2db      	uxtb	r3, r3
 800b578:	f003 0307 	and.w	r3, r3, #7
 800b57c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	0f5b      	lsrs	r3, r3, #29
 800b586:	b2db      	uxtb	r3, r3
 800b588:	f003 0307 	and.w	r3, r3, #7
 800b58c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	7b3a      	ldrb	r2, [r7, #12]
 800b592:	4911      	ldr	r1, [pc, #68]	; (800b5d8 <UARTEx_SetNbDataToProcess+0x94>)
 800b594:	5c8a      	ldrb	r2, [r1, r2]
 800b596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b59a:	7b3a      	ldrb	r2, [r7, #12]
 800b59c:	490f      	ldr	r1, [pc, #60]	; (800b5dc <UARTEx_SetNbDataToProcess+0x98>)
 800b59e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
 800b5ae:	7b7a      	ldrb	r2, [r7, #13]
 800b5b0:	4909      	ldr	r1, [pc, #36]	; (800b5d8 <UARTEx_SetNbDataToProcess+0x94>)
 800b5b2:	5c8a      	ldrb	r2, [r1, r2]
 800b5b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5b8:	7b7a      	ldrb	r2, [r7, #13]
 800b5ba:	4908      	ldr	r1, [pc, #32]	; (800b5dc <UARTEx_SetNbDataToProcess+0x98>)
 800b5bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5be:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b5ca:	bf00      	nop
 800b5cc:	3714      	adds	r7, #20
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	080103e8 	.word	0x080103e8
 800b5dc:	080103f0 	.word	0x080103f0

0800b5e0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f4:	683a      	ldr	r2, [r7, #0]
 800b5f6:	6812      	ldr	r2, [r2, #0]
 800b5f8:	f023 0101 	bic.w	r1, r3, #1
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	2b08      	cmp	r3, #8
 800b608:	d102      	bne.n	800b610 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b60a:	2340      	movs	r3, #64	; 0x40
 800b60c:	617b      	str	r3, [r7, #20]
 800b60e:	e001      	b.n	800b614 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b610:	2300      	movs	r3, #0
 800b612:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b620:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b626:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b62c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b632:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800b638:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800b63e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800b644:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800b64a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800b650:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800b656:	4313      	orrs	r3, r2
 800b658:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	4313      	orrs	r3, r2
 800b662:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	4313      	orrs	r3, r2
 800b676:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	4313      	orrs	r3, r2
 800b680:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800b682:	4b3e      	ldr	r3, [pc, #248]	; (800b77c <FMC_NORSRAM_Init+0x19c>)
 800b684:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b68c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b694:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800b69c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b6a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	43db      	mvns	r3, r3
 800b6b4:	ea02 0103 	and.w	r1, r2, r3
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	4319      	orrs	r1, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6ce:	d10c      	bne.n	800b6ea <FMC_NORSRAM_Init+0x10a>
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d008      	beq.n	800b6ea <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e4:	431a      	orrs	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d006      	beq.n	800b700 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b706:	2b01      	cmp	r3, #1
 800b708:	d12f      	bne.n	800b76a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	0c1b      	lsrs	r3, r3, #16
 800b710:	041b      	lsls	r3, r3, #16
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b716:	431a      	orrs	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b04      	cmp	r3, #4
 800b722:	d014      	beq.n	800b74e <FMC_NORSRAM_Init+0x16e>
 800b724:	2b04      	cmp	r3, #4
 800b726:	d819      	bhi.n	800b75c <FMC_NORSRAM_Init+0x17c>
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <FMC_NORSRAM_Init+0x152>
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d007      	beq.n	800b740 <FMC_NORSRAM_Init+0x160>
 800b730:	e014      	b.n	800b75c <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	621a      	str	r2, [r3, #32]
        break;
 800b73e:	e015      	b.n	800b76c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	621a      	str	r2, [r3, #32]
        break;
 800b74c:	e00e      	b.n	800b76c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	621a      	str	r2, [r3, #32]
        break;
 800b75a:	e007      	b.n	800b76c <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a1b      	ldr	r3, [r3, #32]
 800b760:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	621a      	str	r2, [r3, #32]
        break;
 800b768:	e000      	b.n	800b76c <FMC_NORSRAM_Init+0x18c>
    }
  }
 800b76a:	bf00      	nop

  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	0008fb7f 	.word	0x0008fb7f

0800b780 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b780:	b480      	push	{r7}
 800b782:	b087      	sub	sp, #28
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	1c5a      	adds	r2, r3, #1
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	011b      	lsls	r3, r3, #4
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	021b      	lsls	r3, r3, #8
 800b7a8:	431a      	orrs	r2, r3
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	079b      	lsls	r3, r3, #30
 800b7b0:	431a      	orrs	r2, r3
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	041b      	lsls	r3, r3, #16
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	051b      	lsls	r3, r3, #20
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	3b02      	subs	r3, #2
 800b7ca:	061b      	lsls	r3, r3, #24
 800b7cc:	ea42 0103 	orr.w	r1, r2, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	69db      	ldr	r3, [r3, #28]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	3201      	adds	r2, #1
 800b7d8:	4319      	orrs	r1, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7ec:	d113      	bne.n	800b816 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7f6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	051b      	lsls	r3, r3, #20
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	4313      	orrs	r3, r2
 800b804:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	431a      	orrs	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	371c      	adds	r7, #28
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
 800b830:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b838:	d121      	bne.n	800b87e <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b842:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	6819      	ldr	r1, [r3, #0]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	011b      	lsls	r3, r3, #4
 800b850:	4319      	orrs	r1, r3
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	021b      	lsls	r3, r3, #8
 800b858:	4319      	orrs	r1, r3
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	079b      	lsls	r3, r3, #30
 800b860:	4319      	orrs	r1, r3
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	69db      	ldr	r3, [r3, #28]
 800b866:	4319      	orrs	r1, r3
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	041b      	lsls	r3, r3, #16
 800b86e:	430b      	orrs	r3, r1
 800b870:	ea42 0103 	orr.w	r1, r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b87c:	e005      	b.n	800b88a <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b8a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b8ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b085      	sub	sp, #20
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b8ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b8d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	43db      	mvns	r3, r3
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	f107 0014 	add.w	r0, r7, #20
 800b90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b92e:	2300      	movs	r3, #0
}
 800b930:	4618      	mov	r0, r3
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	b004      	add	sp, #16
 800b93c:	4770      	bx	lr
	...

0800b940 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b940:	b480      	push	{r7}
 800b942:	b09d      	sub	sp, #116	; 0x74
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	881b      	ldrh	r3, [r3, #0]
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b966:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	78db      	ldrb	r3, [r3, #3]
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d81f      	bhi.n	800b9b2 <USB_ActivateEndpoint+0x72>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <USB_ActivateEndpoint+0x38>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b989 	.word	0x0800b989
 800b97c:	0800b9a5 	.word	0x0800b9a5
 800b980:	0800b9bb 	.word	0x0800b9bb
 800b984:	0800b997 	.word	0x0800b997
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b988:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b98c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b990:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b994:	e012      	b.n	800b9bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b996:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b99a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b99e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b9a2:	e00b      	b.n	800b9bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b9a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b9a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b9ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b9b0:	e004      	b.n	800b9bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b9b8:	e000      	b.n	800b9bc <USB_ActivateEndpoint+0x7c>
      break;
 800b9ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	441a      	add	r2, r3
 800b9c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b9ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	b21b      	sxth	r3, r3
 800b9ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f6:	b21a      	sxth	r2, r3
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	b21b      	sxth	r3, r3
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	b21b      	sxth	r3, r3
 800ba02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	441a      	add	r2, r3
 800ba10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ba14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	7b1b      	ldrb	r3, [r3, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f040 8149 	bne.w	800bcc4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	785b      	ldrb	r3, [r3, #1]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f000 8084 	beq.w	800bb44 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	61bb      	str	r3, [r7, #24]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	461a      	mov	r2, r3
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	61bb      	str	r3, [r7, #24]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	00da      	lsls	r2, r3, #3
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	4413      	add	r3, r2
 800ba5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba5e:	617b      	str	r3, [r7, #20]
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	88db      	ldrh	r3, [r3, #6]
 800ba64:	085b      	lsrs	r3, r3, #1
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	005b      	lsls	r3, r3, #1
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4413      	add	r3, r2
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	827b      	strh	r3, [r7, #18]
 800ba7e:	8a7b      	ldrh	r3, [r7, #18]
 800ba80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01b      	beq.n	800bac0 <USB_ActivateEndpoint+0x180>
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4413      	add	r3, r2
 800ba92:	881b      	ldrh	r3, [r3, #0]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba9e:	823b      	strh	r3, [r7, #16]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	441a      	add	r2, r3
 800baaa:	8a3b      	ldrh	r3, [r7, #16]
 800baac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800babc:	b29b      	uxth	r3, r3
 800babe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	78db      	ldrb	r3, [r3, #3]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d020      	beq.n	800bb0a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bade:	81bb      	strh	r3, [r7, #12]
 800bae0:	89bb      	ldrh	r3, [r7, #12]
 800bae2:	f083 0320 	eor.w	r3, r3, #32
 800bae6:	81bb      	strh	r3, [r7, #12]
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	441a      	add	r2, r3
 800baf2:	89bb      	ldrh	r3, [r7, #12]
 800baf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bafc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	8013      	strh	r3, [r2, #0]
 800bb08:	e2a6      	b.n	800c058 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4413      	add	r3, r2
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb20:	81fb      	strh	r3, [r7, #14]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	441a      	add	r2, r3
 800bb2c:	89fb      	ldrh	r3, [r7, #14]
 800bb2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	8013      	strh	r3, [r2, #0]
 800bb42:	e289      	b.n	800c058 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	633b      	str	r3, [r7, #48]	; 0x30
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	461a      	mov	r2, r3
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	4413      	add	r3, r2
 800bb56:	633b      	str	r3, [r7, #48]	; 0x30
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	00da      	lsls	r2, r3, #3
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	4413      	add	r3, r2
 800bb62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	88db      	ldrh	r3, [r3, #6]
 800bb6c:	085b      	lsrs	r3, r3, #1
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	005b      	lsls	r3, r3, #1
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	461a      	mov	r2, r3
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	4413      	add	r3, r2
 800bb8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	00da      	lsls	r2, r3, #3
 800bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb94:	4413      	add	r3, r2
 800bb96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	2b3e      	cmp	r3, #62	; 0x3e
 800bba2:	d918      	bls.n	800bbd6 <USB_ActivateEndpoint+0x296>
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	095b      	lsrs	r3, r3, #5
 800bbaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	f003 031f 	and.w	r3, r3, #31
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d102      	bne.n	800bbbe <USB_ActivateEndpoint+0x27e>
 800bbb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	029b      	lsls	r3, r3, #10
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	801a      	strh	r2, [r3, #0]
 800bbd4:	e029      	b.n	800bc2a <USB_ActivateEndpoint+0x2ea>
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d112      	bne.n	800bc04 <USB_ActivateEndpoint+0x2c4>
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbec:	801a      	strh	r2, [r3, #0]
 800bbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf0:	881b      	ldrh	r3, [r3, #0]
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	801a      	strh	r2, [r3, #0]
 800bc02:	e012      	b.n	800bc2a <USB_ActivateEndpoint+0x2ea>
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	085b      	lsrs	r3, r3, #1
 800bc0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d002      	beq.n	800bc1e <USB_ActivateEndpoint+0x2de>
 800bc18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	029b      	lsls	r3, r3, #10
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	881b      	ldrh	r3, [r3, #0]
 800bc36:	847b      	strh	r3, [r7, #34]	; 0x22
 800bc38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d01b      	beq.n	800bc7a <USB_ActivateEndpoint+0x33a>
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc58:	843b      	strh	r3, [r7, #32]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	441a      	add	r2, r3
 800bc64:	8c3b      	ldrh	r3, [r7, #32]
 800bc66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4413      	add	r3, r2
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc90:	83fb      	strh	r3, [r7, #30]
 800bc92:	8bfb      	ldrh	r3, [r7, #30]
 800bc94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc98:	83fb      	strh	r3, [r7, #30]
 800bc9a:	8bfb      	ldrh	r3, [r7, #30]
 800bc9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bca0:	83fb      	strh	r3, [r7, #30]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	441a      	add	r2, r3
 800bcac:	8bfb      	ldrh	r3, [r7, #30]
 800bcae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	8013      	strh	r3, [r2, #0]
 800bcc2:	e1c9      	b.n	800c058 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	78db      	ldrb	r3, [r3, #3]
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d11e      	bne.n	800bd0a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bce2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	441a      	add	r2, r3
 800bcf0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bcf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bd00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	8013      	strh	r3, [r2, #0]
 800bd08:	e01d      	b.n	800bd46 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bd1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	441a      	add	r2, r3
 800bd2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800bd32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	461a      	mov	r2, r3
 800bd54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd56:	4413      	add	r3, r2
 800bd58:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	00da      	lsls	r2, r3, #3
 800bd60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd62:	4413      	add	r3, r2
 800bd64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd68:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	891b      	ldrh	r3, [r3, #8]
 800bd6e:	085b      	lsrs	r3, r3, #1
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd78:	801a      	strh	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	657b      	str	r3, [r7, #84]	; 0x54
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	461a      	mov	r2, r3
 800bd88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd8a:	4413      	add	r3, r2
 800bd8c:	657b      	str	r3, [r7, #84]	; 0x54
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	00da      	lsls	r2, r3, #3
 800bd94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd96:	4413      	add	r3, r2
 800bd98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bd9c:	653b      	str	r3, [r7, #80]	; 0x50
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	895b      	ldrh	r3, [r3, #10]
 800bda2:	085b      	lsrs	r3, r3, #1
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f040 8093 	bne.w	800bede <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	881b      	ldrh	r3, [r3, #0]
 800bdc4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bdc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bdcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d01b      	beq.n	800be0c <USB_ActivateEndpoint+0x4cc>
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bde6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	441a      	add	r2, r3
 800bdf6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bdf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be08:	b29b      	uxth	r3, r3
 800be0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800be1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800be1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be20:	2b00      	cmp	r3, #0
 800be22:	d01b      	beq.n	800be5c <USB_ActivateEndpoint+0x51c>
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	b29b      	uxth	r3, r3
 800be32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	441a      	add	r2, r3
 800be46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be58:	b29b      	uxth	r3, r3
 800be5a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	b29b      	uxth	r3, r3
 800be6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be72:	873b      	strh	r3, [r7, #56]	; 0x38
 800be74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800be76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be7a:	873b      	strh	r3, [r7, #56]	; 0x38
 800be7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800be7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be82:	873b      	strh	r3, [r7, #56]	; 0x38
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	441a      	add	r2, r3
 800be8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800be90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beba:	86fb      	strh	r3, [r7, #54]	; 0x36
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	441a      	add	r2, r3
 800bec6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800becc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bed8:	b29b      	uxth	r3, r3
 800beda:	8013      	strh	r3, [r2, #0]
 800bedc:	e0bc      	b.n	800c058 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4413      	add	r3, r2
 800bee8:	881b      	ldrh	r3, [r3, #0]
 800beea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800beee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d01d      	beq.n	800bf36 <USB_ActivateEndpoint+0x5f6>
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4413      	add	r3, r2
 800bf04:	881b      	ldrh	r3, [r3, #0]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf10:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	441a      	add	r2, r3
 800bf1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bf22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bf2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bf46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bf4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d01d      	beq.n	800bf8e <USB_ActivateEndpoint+0x64e>
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	881b      	ldrh	r3, [r3, #0]
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf68:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	441a      	add	r2, r3
 800bf76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bf7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	78db      	ldrb	r3, [r3, #3]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d024      	beq.n	800bfe0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bfb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bfb4:	f083 0320 	eor.w	r3, r3, #32
 800bfb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	441a      	add	r2, r3
 800bfc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bfca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	8013      	strh	r3, [r2, #0]
 800bfde:	e01d      	b.n	800c01c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bff6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	441a      	add	r2, r3
 800c004:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c00c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c018:	b29b      	uxth	r3, r3
 800c01a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c032:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	441a      	add	r2, r3
 800c040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c04c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c054:	b29b      	uxth	r3, r3
 800c056:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c058:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3774      	adds	r7, #116	; 0x74
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c068:	b480      	push	{r7}
 800c06a:	b08d      	sub	sp, #52	; 0x34
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	7b1b      	ldrb	r3, [r3, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	f040 808e 	bne.w	800c198 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	785b      	ldrb	r3, [r3, #1]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d044      	beq.n	800c10e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	881b      	ldrh	r3, [r3, #0]
 800c090:	81bb      	strh	r3, [r7, #12]
 800c092:	89bb      	ldrh	r3, [r7, #12]
 800c094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d01b      	beq.n	800c0d4 <USB_DeactivateEndpoint+0x6c>
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0b2:	817b      	strh	r3, [r7, #10]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	441a      	add	r2, r3
 800c0be:	897b      	ldrh	r3, [r7, #10]
 800c0c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	4413      	add	r3, r2
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0ea:	813b      	strh	r3, [r7, #8]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	441a      	add	r2, r3
 800c0f6:	893b      	ldrh	r3, [r7, #8]
 800c0f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c108:	b29b      	uxth	r3, r3
 800c10a:	8013      	strh	r3, [r2, #0]
 800c10c:	e192      	b.n	800c434 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	827b      	strh	r3, [r7, #18]
 800c11c:	8a7b      	ldrh	r3, [r7, #18]
 800c11e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c122:	2b00      	cmp	r3, #0
 800c124:	d01b      	beq.n	800c15e <USB_DeactivateEndpoint+0xf6>
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	4413      	add	r3, r2
 800c130:	881b      	ldrh	r3, [r3, #0]
 800c132:	b29b      	uxth	r3, r3
 800c134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c13c:	823b      	strh	r3, [r7, #16]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	441a      	add	r2, r3
 800c148:	8a3b      	ldrh	r3, [r7, #16]
 800c14a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c14e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	4413      	add	r3, r2
 800c168:	881b      	ldrh	r3, [r3, #0]
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c174:	81fb      	strh	r3, [r7, #14]
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	441a      	add	r2, r3
 800c180:	89fb      	ldrh	r3, [r7, #14]
 800c182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c18a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c18e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c192:	b29b      	uxth	r3, r3
 800c194:	8013      	strh	r3, [r2, #0]
 800c196:	e14d      	b.n	800c434 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	785b      	ldrb	r3, [r3, #1]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f040 80a5 	bne.w	800c2ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	4413      	add	r3, r2
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	843b      	strh	r3, [r7, #32]
 800c1b0:	8c3b      	ldrh	r3, [r7, #32]
 800c1b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d01b      	beq.n	800c1f2 <USB_DeactivateEndpoint+0x18a>
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4413      	add	r3, r2
 800c1c4:	881b      	ldrh	r3, [r3, #0]
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1d0:	83fb      	strh	r3, [r7, #30]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	441a      	add	r2, r3
 800c1dc:	8bfb      	ldrh	r3, [r7, #30]
 800c1de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c1ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4413      	add	r3, r2
 800c1fc:	881b      	ldrh	r3, [r3, #0]
 800c1fe:	83bb      	strh	r3, [r7, #28]
 800c200:	8bbb      	ldrh	r3, [r7, #28]
 800c202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d01b      	beq.n	800c242 <USB_DeactivateEndpoint+0x1da>
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	b29b      	uxth	r3, r3
 800c218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c21c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c220:	837b      	strh	r3, [r7, #26]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	441a      	add	r2, r3
 800c22c:	8b7b      	ldrh	r3, [r7, #26]
 800c22e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c23a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c23e:	b29b      	uxth	r3, r3
 800c240:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	881b      	ldrh	r3, [r3, #0]
 800c24e:	b29b      	uxth	r3, r3
 800c250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c258:	833b      	strh	r3, [r7, #24]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	441a      	add	r2, r3
 800c264:	8b3b      	ldrh	r3, [r7, #24]
 800c266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c26a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c26e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c276:	b29b      	uxth	r3, r3
 800c278:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	881b      	ldrh	r3, [r3, #0]
 800c286:	b29b      	uxth	r3, r3
 800c288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c28c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c290:	82fb      	strh	r3, [r7, #22]
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	441a      	add	r2, r3
 800c29c:	8afb      	ldrh	r3, [r7, #22]
 800c29e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2c8:	82bb      	strh	r3, [r7, #20]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	441a      	add	r2, r3
 800c2d4:	8abb      	ldrh	r3, [r7, #20]
 800c2d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	8013      	strh	r3, [r2, #0]
 800c2ea:	e0a3      	b.n	800c434 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c2fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c2fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d01b      	beq.n	800c33c <USB_DeactivateEndpoint+0x2d4>
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	b29b      	uxth	r3, r3
 800c312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c31a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	441a      	add	r2, r3
 800c326:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c32c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c338:	b29b      	uxth	r3, r3
 800c33a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c34a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c350:	2b00      	cmp	r3, #0
 800c352:	d01b      	beq.n	800c38c <USB_DeactivateEndpoint+0x324>
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4413      	add	r3, r2
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	b29b      	uxth	r3, r3
 800c362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c36a:	853b      	strh	r3, [r7, #40]	; 0x28
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	441a      	add	r2, r3
 800c376:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c37c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c384:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c388:	b29b      	uxth	r3, r3
 800c38a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4413      	add	r3, r2
 800c396:	881b      	ldrh	r3, [r3, #0]
 800c398:	b29b      	uxth	r3, r3
 800c39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	441a      	add	r2, r3
 800c3ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4413      	add	r3, r2
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3da:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	441a      	add	r2, r3
 800c3e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	b29b      	uxth	r3, r3
 800c40a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c40e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c412:	847b      	strh	r3, [r7, #34]	; 0x22
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	441a      	add	r2, r3
 800c41e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c430:	b29b      	uxth	r3, r3
 800c432:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3734      	adds	r7, #52	; 0x34
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b0c2      	sub	sp, #264	; 0x108
 800c446:	af00      	add	r7, sp, #0
 800c448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c44c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c450:	6018      	str	r0, [r3, #0]
 800c452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c45a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	785b      	ldrb	r3, [r3, #1]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	f040 867b 	bne.w	800d164 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	699a      	ldr	r2, [r3, #24]
 800c47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	429a      	cmp	r2, r3
 800c488:	d908      	bls.n	800c49c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c48e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c49a:	e007      	b.n	800c4ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	7b1b      	ldrb	r3, [r3, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d13a      	bne.n	800c532 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	6959      	ldr	r1, [r3, #20]
 800c4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	88da      	ldrh	r2, [r3, #6]
 800c4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c4de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c4e2:	6800      	ldr	r0, [r0, #0]
 800c4e4:	f001 fc1d 	bl	800dd22 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	613b      	str	r3, [r7, #16]
 800c4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c502:	b29b      	uxth	r3, r3
 800c504:	461a      	mov	r2, r3
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	4413      	add	r3, r2
 800c50a:	613b      	str	r3, [r7, #16]
 800c50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	00da      	lsls	r2, r3, #3
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	4413      	add	r3, r2
 800c51e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c528:	b29a      	uxth	r2, r3
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	801a      	strh	r2, [r3, #0]
 800c52e:	f000 bde3 	b.w	800d0f8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	78db      	ldrb	r3, [r3, #3]
 800c53e:	2b02      	cmp	r3, #2
 800c540:	f040 843a 	bne.w	800cdb8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6a1a      	ldr	r2, [r3, #32]
 800c550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	f240 83b7 	bls.w	800ccd0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	4413      	add	r3, r2
 800c57c:	881b      	ldrh	r3, [r3, #0]
 800c57e:	b29b      	uxth	r3, r3
 800c580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c588:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	441a      	add	r2, r3
 800c5a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c5aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6a1a      	ldr	r2, [r3, #32]
 800c5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5ce:	1ad2      	subs	r2, r2, r3
 800c5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 81b3 	beq.w	800c96a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	633b      	str	r3, [r7, #48]	; 0x30
 800c610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	785b      	ldrb	r3, [r3, #1]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d16d      	bne.n	800c6fc <USB_EPStartXfer+0x2ba>
 800c620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	461a      	mov	r2, r3
 800c63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c640:	4413      	add	r3, r2
 800c642:	62bb      	str	r3, [r7, #40]	; 0x28
 800c644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	00da      	lsls	r2, r3, #3
 800c652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c654:	4413      	add	r3, r2
 800c656:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c65a:	627b      	str	r3, [r7, #36]	; 0x24
 800c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c660:	2b3e      	cmp	r3, #62	; 0x3e
 800c662:	d91c      	bls.n	800c69e <USB_EPStartXfer+0x25c>
 800c664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c668:	095b      	lsrs	r3, r3, #5
 800c66a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c672:	f003 031f 	and.w	r3, r3, #31
 800c676:	2b00      	cmp	r3, #0
 800c678:	d104      	bne.n	800c684 <USB_EPStartXfer+0x242>
 800c67a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c67e:	3b01      	subs	r3, #1
 800c680:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c684:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c688:	b29b      	uxth	r3, r3
 800c68a:	029b      	lsls	r3, r3, #10
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c696:	b29a      	uxth	r2, r3
 800c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69a:	801a      	strh	r2, [r3, #0]
 800c69c:	e053      	b.n	800c746 <USB_EPStartXfer+0x304>
 800c69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d112      	bne.n	800c6cc <USB_EPStartXfer+0x28a>
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b4:	801a      	strh	r2, [r3, #0]
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c8:	801a      	strh	r2, [r3, #0]
 800c6ca:	e03c      	b.n	800c746 <USB_EPStartXfer+0x304>
 800c6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6d0:	085b      	lsrs	r3, r3, #1
 800c6d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d004      	beq.n	800c6ec <USB_EPStartXfer+0x2aa>
 800c6e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c6ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	029b      	lsls	r3, r3, #10
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f8:	801a      	strh	r2, [r3, #0]
 800c6fa:	e024      	b.n	800c746 <USB_EPStartXfer+0x304>
 800c6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	785b      	ldrb	r3, [r3, #1]
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d11c      	bne.n	800c746 <USB_EPStartXfer+0x304>
 800c70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	461a      	mov	r2, r3
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	4413      	add	r3, r2
 800c722:	633b      	str	r3, [r7, #48]	; 0x30
 800c724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	00da      	lsls	r2, r3, #3
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	4413      	add	r3, r2
 800c736:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c73a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c740:	b29a      	uxth	r2, r3
 800c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c744:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c74a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	895b      	ldrh	r3, [r3, #10]
 800c752:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6959      	ldr	r1, [r3, #20]
 800c762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c766:	b29b      	uxth	r3, r3
 800c768:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c76c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c770:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c774:	6800      	ldr	r0, [r0, #0]
 800c776:	f001 fad4 	bl	800dd22 <USB_WritePMA>
            ep->xfer_buff += len;
 800c77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	695a      	ldr	r2, [r3, #20]
 800c786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c78a:	441a      	add	r2, r3
 800c78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c79c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	6a1a      	ldr	r2, [r3, #32]
 800c7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d90f      	bls.n	800c7d4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800c7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	6a1a      	ldr	r2, [r3, #32]
 800c7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7c4:	1ad2      	subs	r2, r2, r3
 800c7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	621a      	str	r2, [r3, #32]
 800c7d2:	e00e      	b.n	800c7f2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800c7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	6a1b      	ldr	r3, [r3, #32]
 800c7e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	785b      	ldrb	r3, [r3, #1]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d16d      	bne.n	800c8de <USB_EPStartXfer+0x49c>
 800c802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	61bb      	str	r3, [r7, #24]
 800c80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	461a      	mov	r2, r3
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	4413      	add	r3, r2
 800c824:	61bb      	str	r3, [r7, #24]
 800c826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c82a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	00da      	lsls	r2, r3, #3
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	4413      	add	r3, r2
 800c838:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c83c:	617b      	str	r3, [r7, #20]
 800c83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c842:	2b3e      	cmp	r3, #62	; 0x3e
 800c844:	d91c      	bls.n	800c880 <USB_EPStartXfer+0x43e>
 800c846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c84a:	095b      	lsrs	r3, r3, #5
 800c84c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c854:	f003 031f 	and.w	r3, r3, #31
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d104      	bne.n	800c866 <USB_EPStartXfer+0x424>
 800c85c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c860:	3b01      	subs	r3, #1
 800c862:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	029b      	lsls	r3, r3, #10
 800c86e:	b29b      	uxth	r3, r3
 800c870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c878:	b29a      	uxth	r2, r3
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	801a      	strh	r2, [r3, #0]
 800c87e:	e059      	b.n	800c934 <USB_EPStartXfer+0x4f2>
 800c880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c884:	2b00      	cmp	r3, #0
 800c886:	d112      	bne.n	800c8ae <USB_EPStartXfer+0x46c>
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c892:	b29a      	uxth	r2, r3
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	801a      	strh	r2, [r3, #0]
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	881b      	ldrh	r3, [r3, #0]
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	801a      	strh	r2, [r3, #0]
 800c8ac:	e042      	b.n	800c934 <USB_EPStartXfer+0x4f2>
 800c8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8b2:	085b      	lsrs	r3, r3, #1
 800c8b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d004      	beq.n	800c8ce <USB_EPStartXfer+0x48c>
 800c8c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c8ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	029b      	lsls	r3, r3, #10
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	801a      	strh	r2, [r3, #0]
 800c8dc:	e02a      	b.n	800c934 <USB_EPStartXfer+0x4f2>
 800c8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	785b      	ldrb	r3, [r3, #1]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d122      	bne.n	800c934 <USB_EPStartXfer+0x4f2>
 800c8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	623b      	str	r3, [r7, #32]
 800c8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c908:	b29b      	uxth	r3, r3
 800c90a:	461a      	mov	r2, r3
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	4413      	add	r3, r2
 800c910:	623b      	str	r3, [r7, #32]
 800c912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	00da      	lsls	r2, r3, #3
 800c920:	6a3b      	ldr	r3, [r7, #32]
 800c922:	4413      	add	r3, r2
 800c924:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c928:	61fb      	str	r3, [r7, #28]
 800c92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c92e:	b29a      	uxth	r2, r3
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	891b      	ldrh	r3, [r3, #8]
 800c940:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	6959      	ldr	r1, [r3, #20]
 800c950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c954:	b29b      	uxth	r3, r3
 800c956:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c95a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c95e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c962:	6800      	ldr	r0, [r0, #0]
 800c964:	f001 f9dd 	bl	800dd22 <USB_WritePMA>
 800c968:	e3c6      	b.n	800d0f8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c96a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c96e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	785b      	ldrb	r3, [r3, #1]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d16d      	bne.n	800ca56 <USB_EPStartXfer+0x614>
 800c97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c97e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	64bb      	str	r3, [r7, #72]	; 0x48
 800c986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c98a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c994:	b29b      	uxth	r3, r3
 800c996:	461a      	mov	r2, r3
 800c998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c99a:	4413      	add	r3, r2
 800c99c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	00da      	lsls	r2, r3, #3
 800c9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9b4:	647b      	str	r3, [r7, #68]	; 0x44
 800c9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ba:	2b3e      	cmp	r3, #62	; 0x3e
 800c9bc:	d91c      	bls.n	800c9f8 <USB_EPStartXfer+0x5b6>
 800c9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9c2:	095b      	lsrs	r3, r3, #5
 800c9c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9cc:	f003 031f 	and.w	r3, r3, #31
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d104      	bne.n	800c9de <USB_EPStartXfer+0x59c>
 800c9d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c9de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	029b      	lsls	r3, r3, #10
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9f4:	801a      	strh	r2, [r3, #0]
 800c9f6:	e059      	b.n	800caac <USB_EPStartXfer+0x66a>
 800c9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d112      	bne.n	800ca26 <USB_EPStartXfer+0x5e4>
 800ca00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca02:	881b      	ldrh	r3, [r3, #0]
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca0e:	801a      	strh	r2, [r3, #0]
 800ca10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca12:	881b      	ldrh	r3, [r3, #0]
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca22:	801a      	strh	r2, [r3, #0]
 800ca24:	e042      	b.n	800caac <USB_EPStartXfer+0x66a>
 800ca26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca2a:	085b      	lsrs	r3, r3, #1
 800ca2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ca30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca34:	f003 0301 	and.w	r3, r3, #1
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d004      	beq.n	800ca46 <USB_EPStartXfer+0x604>
 800ca3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca40:	3301      	adds	r3, #1
 800ca42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ca46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	029b      	lsls	r3, r3, #10
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca52:	801a      	strh	r2, [r3, #0]
 800ca54:	e02a      	b.n	800caac <USB_EPStartXfer+0x66a>
 800ca56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	785b      	ldrb	r3, [r3, #1]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d122      	bne.n	800caac <USB_EPStartXfer+0x66a>
 800ca66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	653b      	str	r3, [r7, #80]	; 0x50
 800ca72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	461a      	mov	r2, r3
 800ca84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca86:	4413      	add	r3, r2
 800ca88:	653b      	str	r3, [r7, #80]	; 0x50
 800ca8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	00da      	lsls	r2, r3, #3
 800ca98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800caa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caaa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800caac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	891b      	ldrh	r3, [r3, #8]
 800cab8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cabc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6959      	ldr	r1, [r3, #20]
 800cac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cacc:	b29b      	uxth	r3, r3
 800cace:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cad2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cad6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cada:	6800      	ldr	r0, [r0, #0]
 800cadc:	f001 f921 	bl	800dd22 <USB_WritePMA>
            ep->xfer_buff += len;
 800cae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	695a      	ldr	r2, [r3, #20]
 800caec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caf0:	441a      	add	r2, r3
 800caf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6a1a      	ldr	r2, [r3, #32]
 800cb0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d90f      	bls.n	800cb3a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800cb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6a1a      	ldr	r2, [r3, #32]
 800cb26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb2a:	1ad2      	subs	r2, r2, r3
 800cb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	621a      	str	r2, [r3, #32]
 800cb38:	e00e      	b.n	800cb58 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800cb3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cb4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2200      	movs	r2, #0
 800cb56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	643b      	str	r3, [r7, #64]	; 0x40
 800cb64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	785b      	ldrb	r3, [r3, #1]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d16d      	bne.n	800cc50 <USB_EPStartXfer+0x80e>
 800cb74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	461a      	mov	r2, r3
 800cb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb94:	4413      	add	r3, r2
 800cb96:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	00da      	lsls	r2, r3, #3
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	4413      	add	r3, r2
 800cbaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cbae:	637b      	str	r3, [r7, #52]	; 0x34
 800cbb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbb4:	2b3e      	cmp	r3, #62	; 0x3e
 800cbb6:	d91c      	bls.n	800cbf2 <USB_EPStartXfer+0x7b0>
 800cbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbbc:	095b      	lsrs	r3, r3, #5
 800cbbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cbc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbc6:	f003 031f 	and.w	r3, r3, #31
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d104      	bne.n	800cbd8 <USB_EPStartXfer+0x796>
 800cbce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	029b      	lsls	r3, r3, #10
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbee:	801a      	strh	r2, [r3, #0]
 800cbf0:	e053      	b.n	800cc9a <USB_EPStartXfer+0x858>
 800cbf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d112      	bne.n	800cc20 <USB_EPStartXfer+0x7de>
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	801a      	strh	r2, [r3, #0]
 800cc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0c:	881b      	ldrh	r3, [r3, #0]
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1c:	801a      	strh	r2, [r3, #0]
 800cc1e:	e03c      	b.n	800cc9a <USB_EPStartXfer+0x858>
 800cc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc24:	085b      	lsrs	r3, r3, #1
 800cc26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cc2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d004      	beq.n	800cc40 <USB_EPStartXfer+0x7fe>
 800cc36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cc40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	029b      	lsls	r3, r3, #10
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4c:	801a      	strh	r2, [r3, #0]
 800cc4e:	e024      	b.n	800cc9a <USB_EPStartXfer+0x858>
 800cc50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	785b      	ldrb	r3, [r3, #1]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d11c      	bne.n	800cc9a <USB_EPStartXfer+0x858>
 800cc60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	461a      	mov	r2, r3
 800cc72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc74:	4413      	add	r3, r2
 800cc76:	643b      	str	r3, [r7, #64]	; 0x40
 800cc78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	00da      	lsls	r2, r3, #3
 800cc86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc88:	4413      	add	r3, r2
 800cc8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cc9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	895b      	ldrh	r3, [r3, #10]
 800cca6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ccaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	6959      	ldr	r1, [r3, #20]
 800ccb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ccc0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ccc4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ccc8:	6800      	ldr	r0, [r0, #0]
 800ccca:	f001 f82a 	bl	800dd22 <USB_WritePMA>
 800ccce:	e213      	b.n	800d0f8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ccd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6a1b      	ldr	r3, [r3, #32]
 800ccdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4413      	add	r3, r2
 800ccfa:	881b      	ldrh	r3, [r3, #0]
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800cd02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd06:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800cd0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	441a      	add	r2, r3
 800cd24:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800cd28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cd3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd5c:	4413      	add	r3, r2
 800cd5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	00da      	lsls	r2, r3, #3
 800cd6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd70:	4413      	add	r3, r2
 800cd72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cd76:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cd82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	891b      	ldrh	r3, [r3, #8]
 800cd8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6959      	ldr	r1, [r3, #20]
 800cd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cda8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cdac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cdb0:	6800      	ldr	r0, [r0, #0]
 800cdb2:	f000 ffb6 	bl	800dd22 <USB_WritePMA>
 800cdb6:	e19f      	b.n	800d0f8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cdb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	6a1a      	ldr	r2, [r3, #32]
 800cdc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdc8:	1ad2      	subs	r2, r2, r3
 800cdca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cdd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cde4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4413      	add	r3, r2
 800cdf0:	881b      	ldrh	r3, [r3, #0]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f000 80bc 	beq.w	800cf76 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cdfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	673b      	str	r3, [r7, #112]	; 0x70
 800ce0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	785b      	ldrb	r3, [r3, #1]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d16d      	bne.n	800cef6 <USB_EPStartXfer+0xab4>
 800ce1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	461a      	mov	r2, r3
 800ce38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce3a:	4413      	add	r3, r2
 800ce3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	00da      	lsls	r2, r3, #3
 800ce4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce4e:	4413      	add	r3, r2
 800ce50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ce54:	667b      	str	r3, [r7, #100]	; 0x64
 800ce56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce5a:	2b3e      	cmp	r3, #62	; 0x3e
 800ce5c:	d91c      	bls.n	800ce98 <USB_EPStartXfer+0xa56>
 800ce5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce62:	095b      	lsrs	r3, r3, #5
 800ce64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ce68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce6c:	f003 031f 	and.w	r3, r3, #31
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d104      	bne.n	800ce7e <USB_EPStartXfer+0xa3c>
 800ce74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ce7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	029b      	lsls	r3, r3, #10
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce94:	801a      	strh	r2, [r3, #0]
 800ce96:	e053      	b.n	800cf40 <USB_EPStartXfer+0xafe>
 800ce98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d112      	bne.n	800cec6 <USB_EPStartXfer+0xa84>
 800cea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cea2:	881b      	ldrh	r3, [r3, #0]
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ceae:	801a      	strh	r2, [r3, #0]
 800ceb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cec2:	801a      	strh	r2, [r3, #0]
 800cec4:	e03c      	b.n	800cf40 <USB_EPStartXfer+0xafe>
 800cec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ceca:	085b      	lsrs	r3, r3, #1
 800cecc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ced0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d004      	beq.n	800cee6 <USB_EPStartXfer+0xaa4>
 800cedc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cee0:	3301      	adds	r3, #1
 800cee2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cee6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	029b      	lsls	r3, r3, #10
 800ceee:	b29a      	uxth	r2, r3
 800cef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cef2:	801a      	strh	r2, [r3, #0]
 800cef4:	e024      	b.n	800cf40 <USB_EPStartXfer+0xafe>
 800cef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cefa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	785b      	ldrb	r3, [r3, #1]
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d11c      	bne.n	800cf40 <USB_EPStartXfer+0xafe>
 800cf06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	461a      	mov	r2, r3
 800cf18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf1a:	4413      	add	r3, r2
 800cf1c:	673b      	str	r3, [r7, #112]	; 0x70
 800cf1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	00da      	lsls	r2, r3, #3
 800cf2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf2e:	4413      	add	r3, r2
 800cf30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cf34:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cf40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	895b      	ldrh	r3, [r3, #10]
 800cf4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6959      	ldr	r1, [r3, #20]
 800cf5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cf66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cf6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cf6e:	6800      	ldr	r0, [r0, #0]
 800cf70:	f000 fed7 	bl	800dd22 <USB_WritePMA>
 800cf74:	e0c0      	b.n	800d0f8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cf76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	785b      	ldrb	r3, [r3, #1]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d16d      	bne.n	800d062 <USB_EPStartXfer+0xc20>
 800cf86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cf92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfa6:	4413      	add	r3, r2
 800cfa8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cfaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	00da      	lsls	r2, r3, #3
 800cfb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfba:	4413      	add	r3, r2
 800cfbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cfc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800cfc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfc6:	2b3e      	cmp	r3, #62	; 0x3e
 800cfc8:	d91c      	bls.n	800d004 <USB_EPStartXfer+0xbc2>
 800cfca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfce:	095b      	lsrs	r3, r3, #5
 800cfd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cfd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfd8:	f003 031f 	and.w	r3, r3, #31
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d104      	bne.n	800cfea <USB_EPStartXfer+0xba8>
 800cfe0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cfea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	029b      	lsls	r3, r3, #10
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d000:	801a      	strh	r2, [r3, #0]
 800d002:	e05f      	b.n	800d0c4 <USB_EPStartXfer+0xc82>
 800d004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d112      	bne.n	800d032 <USB_EPStartXfer+0xbf0>
 800d00c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d00e:	881b      	ldrh	r3, [r3, #0]
 800d010:	b29b      	uxth	r3, r3
 800d012:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d016:	b29a      	uxth	r2, r3
 800d018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d01a:	801a      	strh	r2, [r3, #0]
 800d01c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	b29b      	uxth	r3, r3
 800d022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d02e:	801a      	strh	r2, [r3, #0]
 800d030:	e048      	b.n	800d0c4 <USB_EPStartXfer+0xc82>
 800d032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d036:	085b      	lsrs	r3, r3, #1
 800d038:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	2b00      	cmp	r3, #0
 800d046:	d004      	beq.n	800d052 <USB_EPStartXfer+0xc10>
 800d048:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d04c:	3301      	adds	r3, #1
 800d04e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d052:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d056:	b29b      	uxth	r3, r3
 800d058:	029b      	lsls	r3, r3, #10
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d05e:	801a      	strh	r2, [r3, #0]
 800d060:	e030      	b.n	800d0c4 <USB_EPStartXfer+0xc82>
 800d062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	785b      	ldrb	r3, [r3, #1]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d128      	bne.n	800d0c4 <USB_EPStartXfer+0xc82>
 800d072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d08e:	b29b      	uxth	r3, r3
 800d090:	461a      	mov	r2, r3
 800d092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d096:	4413      	add	r3, r2
 800d098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	00da      	lsls	r2, r3, #3
 800d0aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d0ae:	4413      	add	r3, r2
 800d0b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d0b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d0c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d0c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	891b      	ldrh	r3, [r3, #8]
 800d0d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6959      	ldr	r1, [r3, #20]
 800d0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d0ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d0ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d0f2:	6800      	ldr	r0, [r0, #0]
 800d0f4:	f000 fe15 	bl	800dd22 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4413      	add	r3, r2
 800d112:	881b      	ldrh	r3, [r3, #0]
 800d114:	b29b      	uxth	r3, r3
 800d116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d11a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d11e:	817b      	strh	r3, [r7, #10]
 800d120:	897b      	ldrh	r3, [r7, #10]
 800d122:	f083 0310 	eor.w	r3, r3, #16
 800d126:	817b      	strh	r3, [r7, #10]
 800d128:	897b      	ldrh	r3, [r7, #10]
 800d12a:	f083 0320 	eor.w	r3, r3, #32
 800d12e:	817b      	strh	r3, [r7, #10]
 800d130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d13e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	441a      	add	r2, r3
 800d14a:	897b      	ldrh	r3, [r7, #10]
 800d14c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	8013      	strh	r3, [r2, #0]
 800d160:	f000 bc9f 	b.w	800daa2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	7b1b      	ldrb	r3, [r3, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	f040 80ae 	bne.w	800d2d2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d17a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	699a      	ldr	r2, [r3, #24]
 800d182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d917      	bls.n	800d1c2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800d192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	699a      	ldr	r2, [r3, #24]
 800d1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1b2:	1ad2      	subs	r2, r2, r3
 800d1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	619a      	str	r2, [r3, #24]
 800d1c0:	e00e      	b.n	800d1e0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800d1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	461a      	mov	r2, r3
 800d200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d204:	4413      	add	r3, r2
 800d206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	00da      	lsls	r2, r3, #3
 800d218:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d21c:	4413      	add	r3, r2
 800d21e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d22a:	2b3e      	cmp	r3, #62	; 0x3e
 800d22c:	d91d      	bls.n	800d26a <USB_EPStartXfer+0xe28>
 800d22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d232:	095b      	lsrs	r3, r3, #5
 800d234:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d23c:	f003 031f 	and.w	r3, r3, #31
 800d240:	2b00      	cmp	r3, #0
 800d242:	d104      	bne.n	800d24e <USB_EPStartXfer+0xe0c>
 800d244:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d248:	3b01      	subs	r3, #1
 800d24a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d24e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d252:	b29b      	uxth	r3, r3
 800d254:	029b      	lsls	r3, r3, #10
 800d256:	b29b      	uxth	r3, r3
 800d258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d25c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d260:	b29a      	uxth	r2, r3
 800d262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d266:	801a      	strh	r2, [r3, #0]
 800d268:	e3e1      	b.n	800da2e <USB_EPStartXfer+0x15ec>
 800d26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d116      	bne.n	800d2a0 <USB_EPStartXfer+0xe5e>
 800d272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d276:	881b      	ldrh	r3, [r3, #0]
 800d278:	b29b      	uxth	r3, r3
 800d27a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d27e:	b29a      	uxth	r2, r3
 800d280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d284:	801a      	strh	r2, [r3, #0]
 800d286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d28a:	881b      	ldrh	r3, [r3, #0]
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d296:	b29a      	uxth	r2, r3
 800d298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d29c:	801a      	strh	r2, [r3, #0]
 800d29e:	e3c6      	b.n	800da2e <USB_EPStartXfer+0x15ec>
 800d2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2a4:	085b      	lsrs	r3, r3, #1
 800d2a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d004      	beq.n	800d2c0 <USB_EPStartXfer+0xe7e>
 800d2b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d2c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	029b      	lsls	r3, r3, #10
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2ce:	801a      	strh	r2, [r3, #0]
 800d2d0:	e3ad      	b.n	800da2e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	78db      	ldrb	r3, [r3, #3]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	f040 8200 	bne.w	800d6e4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	785b      	ldrb	r3, [r3, #1]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f040 8091 	bne.w	800d418 <USB_EPStartXfer+0xfd6>
 800d2f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d312:	b29b      	uxth	r3, r3
 800d314:	461a      	mov	r2, r3
 800d316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d31a:	4413      	add	r3, r2
 800d31c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	00da      	lsls	r2, r3, #3
 800d32e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d332:	4413      	add	r3, r2
 800d334:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	2b3e      	cmp	r3, #62	; 0x3e
 800d34a:	d925      	bls.n	800d398 <USB_EPStartXfer+0xf56>
 800d34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	095b      	lsrs	r3, r3, #5
 800d35a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	f003 031f 	and.w	r3, r3, #31
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d104      	bne.n	800d37c <USB_EPStartXfer+0xf3a>
 800d372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d376:	3b01      	subs	r3, #1
 800d378:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d380:	b29b      	uxth	r3, r3
 800d382:	029b      	lsls	r3, r3, #10
 800d384:	b29b      	uxth	r3, r3
 800d386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d38a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d38e:	b29a      	uxth	r2, r3
 800d390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d394:	801a      	strh	r2, [r3, #0]
 800d396:	e074      	b.n	800d482 <USB_EPStartXfer+0x1040>
 800d398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d39c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d116      	bne.n	800d3d6 <USB_EPStartXfer+0xf94>
 800d3a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3ac:	881b      	ldrh	r3, [r3, #0]
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3ba:	801a      	strh	r2, [r3, #0]
 800d3bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3d2:	801a      	strh	r2, [r3, #0]
 800d3d4:	e055      	b.n	800d482 <USB_EPStartXfer+0x1040>
 800d3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	085b      	lsrs	r3, r3, #1
 800d3e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	691b      	ldr	r3, [r3, #16]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d004      	beq.n	800d406 <USB_EPStartXfer+0xfc4>
 800d3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d400:	3301      	adds	r3, #1
 800d402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	029b      	lsls	r3, r3, #10
 800d40e:	b29a      	uxth	r2, r3
 800d410:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d414:	801a      	strh	r2, [r3, #0]
 800d416:	e034      	b.n	800d482 <USB_EPStartXfer+0x1040>
 800d418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d41c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	785b      	ldrb	r3, [r3, #1]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d12c      	bne.n	800d482 <USB_EPStartXfer+0x1040>
 800d428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d42c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d43a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d444:	b29b      	uxth	r3, r3
 800d446:	461a      	mov	r2, r3
 800d448:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d44c:	4413      	add	r3, r2
 800d44e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	00da      	lsls	r2, r3, #3
 800d460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d464:	4413      	add	r3, r2
 800d466:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d46a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d480:	801a      	strh	r2, [r3, #0]
 800d482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	785b      	ldrb	r3, [r3, #1]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f040 8091 	bne.w	800d5c4 <USB_EPStartXfer+0x1182>
 800d4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	00da      	lsls	r2, r3, #3
 800d4da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d4de:	4413      	add	r3, r2
 800d4e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d4e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	2b3e      	cmp	r3, #62	; 0x3e
 800d4f6:	d925      	bls.n	800d544 <USB_EPStartXfer+0x1102>
 800d4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	095b      	lsrs	r3, r3, #5
 800d506:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d50e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	f003 031f 	and.w	r3, r3, #31
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d104      	bne.n	800d528 <USB_EPStartXfer+0x10e6>
 800d51e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d522:	3b01      	subs	r3, #1
 800d524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	029b      	lsls	r3, r3, #10
 800d530:	b29b      	uxth	r3, r3
 800d532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d540:	801a      	strh	r2, [r3, #0]
 800d542:	e06d      	b.n	800d620 <USB_EPStartXfer+0x11de>
 800d544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	691b      	ldr	r3, [r3, #16]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d116      	bne.n	800d582 <USB_EPStartXfer+0x1140>
 800d554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d560:	b29a      	uxth	r2, r3
 800d562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d566:	801a      	strh	r2, [r3, #0]
 800d568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d56c:	881b      	ldrh	r3, [r3, #0]
 800d56e:	b29b      	uxth	r3, r3
 800d570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d578:	b29a      	uxth	r2, r3
 800d57a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d57e:	801a      	strh	r2, [r3, #0]
 800d580:	e04e      	b.n	800d620 <USB_EPStartXfer+0x11de>
 800d582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	085b      	lsrs	r3, r3, #1
 800d590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d004      	beq.n	800d5b2 <USB_EPStartXfer+0x1170>
 800d5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d5b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	029b      	lsls	r3, r3, #10
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5c0:	801a      	strh	r2, [r3, #0]
 800d5c2:	e02d      	b.n	800d620 <USB_EPStartXfer+0x11de>
 800d5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	785b      	ldrb	r3, [r3, #1]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d125      	bne.n	800d620 <USB_EPStartXfer+0x11de>
 800d5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	00da      	lsls	r2, r3, #3
 800d5fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d602:	4413      	add	r3, r2
 800d604:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	b29a      	uxth	r2, r3
 800d61a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d61e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	69db      	ldr	r3, [r3, #28]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 81fe 	beq.w	800da2e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4413      	add	r3, r2
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d652:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d005      	beq.n	800d66a <USB_EPStartXfer+0x1228>
 800d65e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10d      	bne.n	800d686 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d66a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d66e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d672:	2b00      	cmp	r3, #0
 800d674:	f040 81db 	bne.w	800da2e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d678:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d680:	2b00      	cmp	r3, #0
 800d682:	f040 81d4 	bne.w	800da2e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d68a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4413      	add	r3, r2
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6ac:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d6b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	441a      	add	r2, r3
 800d6ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d6ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	8013      	strh	r3, [r2, #0]
 800d6e2:	e1a4      	b.n	800da2e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	78db      	ldrb	r3, [r3, #3]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	f040 819a 	bne.w	800da2a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d6f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	699a      	ldr	r2, [r3, #24]
 800d702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d917      	bls.n	800d742 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800d712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	699a      	ldr	r2, [r3, #24]
 800d72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d732:	1ad2      	subs	r2, r2, r3
 800d734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	619a      	str	r2, [r3, #24]
 800d740:	e00e      	b.n	800d760 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800d742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	699b      	ldr	r3, [r3, #24]
 800d74e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2200      	movs	r2, #0
 800d75e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	785b      	ldrb	r3, [r3, #1]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d178      	bne.n	800d862 <USB_EPStartXfer+0x1420>
 800d770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	461a      	mov	r2, r3
 800d790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d794:	4413      	add	r3, r2
 800d796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d79e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	00da      	lsls	r2, r3, #3
 800d7a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d7b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7ba:	2b3e      	cmp	r3, #62	; 0x3e
 800d7bc:	d91d      	bls.n	800d7fa <USB_EPStartXfer+0x13b8>
 800d7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7c2:	095b      	lsrs	r3, r3, #5
 800d7c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7cc:	f003 031f 	and.w	r3, r3, #31
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d104      	bne.n	800d7de <USB_EPStartXfer+0x139c>
 800d7d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d7de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	029b      	lsls	r3, r3, #10
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d7f6:	801a      	strh	r2, [r3, #0]
 800d7f8:	e064      	b.n	800d8c4 <USB_EPStartXfer+0x1482>
 800d7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d116      	bne.n	800d830 <USB_EPStartXfer+0x13ee>
 800d802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	b29b      	uxth	r3, r3
 800d80a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d80e:	b29a      	uxth	r2, r3
 800d810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d814:	801a      	strh	r2, [r3, #0]
 800d816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d81a:	881b      	ldrh	r3, [r3, #0]
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d826:	b29a      	uxth	r2, r3
 800d828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d82c:	801a      	strh	r2, [r3, #0]
 800d82e:	e049      	b.n	800d8c4 <USB_EPStartXfer+0x1482>
 800d830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d834:	085b      	lsrs	r3, r3, #1
 800d836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d83e:	f003 0301 	and.w	r3, r3, #1
 800d842:	2b00      	cmp	r3, #0
 800d844:	d004      	beq.n	800d850 <USB_EPStartXfer+0x140e>
 800d846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d84a:	3301      	adds	r3, #1
 800d84c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d854:	b29b      	uxth	r3, r3
 800d856:	029b      	lsls	r3, r3, #10
 800d858:	b29a      	uxth	r2, r3
 800d85a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d85e:	801a      	strh	r2, [r3, #0]
 800d860:	e030      	b.n	800d8c4 <USB_EPStartXfer+0x1482>
 800d862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	785b      	ldrb	r3, [r3, #1]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d128      	bne.n	800d8c4 <USB_EPStartXfer+0x1482>
 800d872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d88e:	b29b      	uxth	r3, r3
 800d890:	461a      	mov	r2, r3
 800d892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d896:	4413      	add	r3, r2
 800d898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	00da      	lsls	r2, r3, #3
 800d8aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8ae:	4413      	add	r3, r2
 800d8b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d8b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d8c2:	801a      	strh	r2, [r3, #0]
 800d8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	785b      	ldrb	r3, [r3, #1]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d178      	bne.n	800d9d4 <USB_EPStartXfer+0x1592>
 800d8e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d8f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	461a      	mov	r2, r3
 800d902:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d906:	4413      	add	r3, r2
 800d908:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	00da      	lsls	r2, r3, #3
 800d91a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d91e:	4413      	add	r3, r2
 800d920:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d92c:	2b3e      	cmp	r3, #62	; 0x3e
 800d92e:	d91d      	bls.n	800d96c <USB_EPStartXfer+0x152a>
 800d930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d934:	095b      	lsrs	r3, r3, #5
 800d936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d93e:	f003 031f 	and.w	r3, r3, #31
 800d942:	2b00      	cmp	r3, #0
 800d944:	d104      	bne.n	800d950 <USB_EPStartXfer+0x150e>
 800d946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d94a:	3b01      	subs	r3, #1
 800d94c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d954:	b29b      	uxth	r3, r3
 800d956:	029b      	lsls	r3, r3, #10
 800d958:	b29b      	uxth	r3, r3
 800d95a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d95e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d962:	b29a      	uxth	r2, r3
 800d964:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d968:	801a      	strh	r2, [r3, #0]
 800d96a:	e060      	b.n	800da2e <USB_EPStartXfer+0x15ec>
 800d96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d970:	2b00      	cmp	r3, #0
 800d972:	d116      	bne.n	800d9a2 <USB_EPStartXfer+0x1560>
 800d974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d980:	b29a      	uxth	r2, r3
 800d982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d986:	801a      	strh	r2, [r3, #0]
 800d988:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d98c:	881b      	ldrh	r3, [r3, #0]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d998:	b29a      	uxth	r2, r3
 800d99a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d99e:	801a      	strh	r2, [r3, #0]
 800d9a0:	e045      	b.n	800da2e <USB_EPStartXfer+0x15ec>
 800d9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9a6:	085b      	lsrs	r3, r3, #1
 800d9a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d004      	beq.n	800d9c2 <USB_EPStartXfer+0x1580>
 800d9b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9bc:	3301      	adds	r3, #1
 800d9be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d9c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	029b      	lsls	r3, r3, #10
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d9d0:	801a      	strh	r2, [r3, #0]
 800d9d2:	e02c      	b.n	800da2e <USB_EPStartXfer+0x15ec>
 800d9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	785b      	ldrb	r3, [r3, #1]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d124      	bne.n	800da2e <USB_EPStartXfer+0x15ec>
 800d9e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d9fa:	4413      	add	r3, r2
 800d9fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800da00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	00da      	lsls	r2, r3, #3
 800da0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800da12:	4413      	add	r3, r2
 800da14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800da18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da20:	b29a      	uxth	r2, r3
 800da22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800da26:	801a      	strh	r2, [r3, #0]
 800da28:	e001      	b.n	800da2e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	e03a      	b.n	800daa4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800da2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	009b      	lsls	r3, r3, #2
 800da46:	4413      	add	r3, r2
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800da58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800da5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800da60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800da64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800da68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800da6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800da70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	441a      	add	r2, r3
 800da8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800da8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800daae:	b480      	push	{r7}
 800dab0:	b085      	sub	sp, #20
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	785b      	ldrb	r3, [r3, #1]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d020      	beq.n	800db02 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	b29b      	uxth	r3, r3
 800dace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dad6:	81bb      	strh	r3, [r7, #12]
 800dad8:	89bb      	ldrh	r3, [r7, #12]
 800dada:	f083 0310 	eor.w	r3, r3, #16
 800dade:	81bb      	strh	r3, [r7, #12]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	441a      	add	r2, r3
 800daea:	89bb      	ldrh	r3, [r7, #12]
 800daec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800daf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800daf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800daf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	8013      	strh	r3, [r2, #0]
 800db00:	e01f      	b.n	800db42 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	881b      	ldrh	r3, [r3, #0]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db18:	81fb      	strh	r3, [r7, #14]
 800db1a:	89fb      	ldrh	r3, [r7, #14]
 800db1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800db20:	81fb      	strh	r3, [r7, #14]
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	441a      	add	r2, r3
 800db2c:	89fb      	ldrh	r3, [r7, #14]
 800db2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db3e:	b29b      	uxth	r3, r3
 800db40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800db42:	2300      	movs	r3, #0
}
 800db44:	4618      	mov	r0, r3
 800db46:	3714      	adds	r7, #20
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800db50:	b480      	push	{r7}
 800db52:	b087      	sub	sp, #28
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	7b1b      	ldrb	r3, [r3, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f040 809d 	bne.w	800dc9e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	785b      	ldrb	r3, [r3, #1]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d04c      	beq.n	800dc06 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	823b      	strh	r3, [r7, #16]
 800db7a:	8a3b      	ldrh	r3, [r7, #16]
 800db7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db80:	2b00      	cmp	r3, #0
 800db82:	d01b      	beq.n	800dbbc <USB_EPClearStall+0x6c>
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	4413      	add	r3, r2
 800db8e:	881b      	ldrh	r3, [r3, #0]
 800db90:	b29b      	uxth	r3, r3
 800db92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db9a:	81fb      	strh	r3, [r7, #14]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	441a      	add	r2, r3
 800dba6:	89fb      	ldrh	r3, [r7, #14]
 800dba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	78db      	ldrb	r3, [r3, #3]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d06c      	beq.n	800dc9e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4413      	add	r3, r2
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbda:	81bb      	strh	r3, [r7, #12]
 800dbdc:	89bb      	ldrh	r3, [r7, #12]
 800dbde:	f083 0320 	eor.w	r3, r3, #32
 800dbe2:	81bb      	strh	r3, [r7, #12]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	441a      	add	r2, r3
 800dbee:	89bb      	ldrh	r3, [r7, #12]
 800dbf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	8013      	strh	r3, [r2, #0]
 800dc04:	e04b      	b.n	800dc9e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	82fb      	strh	r3, [r7, #22]
 800dc14:	8afb      	ldrh	r3, [r7, #22]
 800dc16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d01b      	beq.n	800dc56 <USB_EPClearStall+0x106>
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	009b      	lsls	r3, r3, #2
 800dc26:	4413      	add	r3, r2
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc34:	82bb      	strh	r3, [r7, #20]
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	441a      	add	r2, r3
 800dc40:	8abb      	ldrh	r3, [r7, #20]
 800dc42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dc4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	4413      	add	r3, r2
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc6c:	827b      	strh	r3, [r7, #18]
 800dc6e:	8a7b      	ldrh	r3, [r7, #18]
 800dc70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dc74:	827b      	strh	r3, [r7, #18]
 800dc76:	8a7b      	ldrh	r3, [r7, #18]
 800dc78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dc7c:	827b      	strh	r3, [r7, #18]
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	441a      	add	r2, r3
 800dc88:	8a7b      	ldrh	r3, [r7, #18]
 800dc8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	371c      	adds	r7, #28
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800dcb8:	78fb      	ldrb	r3, [r7, #3]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d103      	bne.n	800dcc6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2280      	movs	r2, #128	; 0x80
 800dcc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800dd02:	b480      	push	{r7}
 800dd04:	b085      	sub	sp, #20
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dd14:	68fb      	ldr	r3, [r7, #12]
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dd22:	b480      	push	{r7}
 800dd24:	b08d      	sub	sp, #52	; 0x34
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	60f8      	str	r0, [r7, #12]
 800dd2a:	60b9      	str	r1, [r7, #8]
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	461a      	mov	r2, r3
 800dd30:	460b      	mov	r3, r1
 800dd32:	80fb      	strh	r3, [r7, #6]
 800dd34:	4613      	mov	r3, r2
 800dd36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800dd38:	88bb      	ldrh	r3, [r7, #4]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	085b      	lsrs	r3, r3, #1
 800dd3e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dd48:	88fa      	ldrh	r2, [r7, #6]
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd52:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd58:	e01b      	b.n	800dd92 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd62:	3301      	adds	r3, #1
 800dd64:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	021b      	lsls	r3, r3, #8
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	461a      	mov	r2, r3
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd82:	3302      	adds	r3, #2
 800dd84:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	3301      	adds	r3, #1
 800dd8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800dd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d1e0      	bne.n	800dd5a <USB_WritePMA+0x38>
  }
}
 800dd98:	bf00      	nop
 800dd9a:	bf00      	nop
 800dd9c:	3734      	adds	r7, #52	; 0x34
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dda6:	b480      	push	{r7}
 800dda8:	b08b      	sub	sp, #44	; 0x2c
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	60f8      	str	r0, [r7, #12]
 800ddae:	60b9      	str	r1, [r7, #8]
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	80fb      	strh	r3, [r7, #6]
 800ddb8:	4613      	mov	r3, r2
 800ddba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ddbc:	88bb      	ldrh	r3, [r7, #4]
 800ddbe:	085b      	lsrs	r3, r3, #1
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ddcc:	88fa      	ldrh	r2, [r7, #6]
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ddd6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	627b      	str	r3, [r7, #36]	; 0x24
 800dddc:	e018      	b.n	800de10 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ddde:	6a3b      	ldr	r3, [r7, #32]
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800dde6:	6a3b      	ldr	r3, [r7, #32]
 800dde8:	3302      	adds	r3, #2
 800ddea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	b2da      	uxtb	r2, r3
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	0a1b      	lsrs	r3, r3, #8
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	3301      	adds	r3, #1
 800de08:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	3b01      	subs	r3, #1
 800de0e:	627b      	str	r3, [r7, #36]	; 0x24
 800de10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1e3      	bne.n	800ddde <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800de16:	88bb      	ldrh	r3, [r7, #4]
 800de18:	f003 0301 	and.w	r3, r3, #1
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d007      	beq.n	800de32 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	881b      	ldrh	r3, [r3, #0]
 800de26:	b29b      	uxth	r3, r3
 800de28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	b2da      	uxtb	r2, r3
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	701a      	strb	r2, [r3, #0]
  }
}
 800de32:	bf00      	nop
 800de34:	372c      	adds	r7, #44	; 0x2c
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b084      	sub	sp, #16
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
 800de46:	460b      	mov	r3, r1
 800de48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de4a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800de4e:	f002 f8a7 	bl	800ffa0 <USBD_static_malloc>
 800de52:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d105      	bne.n	800de66 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800de62:	2302      	movs	r3, #2
 800de64:	e066      	b.n	800df34 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	7c1b      	ldrb	r3, [r3, #16]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d119      	bne.n	800deaa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800de76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de7a:	2202      	movs	r2, #2
 800de7c:	2181      	movs	r1, #129	; 0x81
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f001 ff33 	bl	800fcea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2201      	movs	r2, #1
 800de88:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800de8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de8e:	2202      	movs	r2, #2
 800de90:	2101      	movs	r1, #1
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f001 ff29 	bl	800fcea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2210      	movs	r2, #16
 800dea4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800dea8:	e016      	b.n	800ded8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800deaa:	2340      	movs	r3, #64	; 0x40
 800deac:	2202      	movs	r2, #2
 800deae:	2181      	movs	r1, #129	; 0x81
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f001 ff1a 	bl	800fcea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2201      	movs	r2, #1
 800deba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800debc:	2340      	movs	r3, #64	; 0x40
 800debe:	2202      	movs	r2, #2
 800dec0:	2101      	movs	r1, #1
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f001 ff11 	bl	800fcea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2210      	movs	r2, #16
 800ded4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ded8:	2308      	movs	r3, #8
 800deda:	2203      	movs	r2, #3
 800dedc:	2182      	movs	r1, #130	; 0x82
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f001 ff03 	bl	800fcea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2200      	movs	r2, #0
 800df02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	7c1b      	ldrb	r3, [r3, #16]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d109      	bne.n	800df22 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df18:	2101      	movs	r1, #1
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f001 ffd5 	bl	800feca <USBD_LL_PrepareReceive>
 800df20:	e007      	b.n	800df32 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df28:	2340      	movs	r3, #64	; 0x40
 800df2a:	2101      	movs	r1, #1
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f001 ffcc 	bl	800feca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	460b      	mov	r3, r1
 800df46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800df48:	2181      	movs	r1, #129	; 0x81
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f001 fef3 	bl	800fd36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800df56:	2101      	movs	r1, #1
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f001 feec 	bl	800fd36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800df66:	2182      	movs	r1, #130	; 0x82
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f001 fee4 	bl	800fd36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00e      	beq.n	800dfa6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df98:	4618      	mov	r0, r3
 800df9a:	f002 f80f 	bl	800ffbc <USBD_static_free>
    pdev->pClassData = NULL;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800dfd4:	2303      	movs	r3, #3
 800dfd6:	e0af      	b.n	800e138 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d03f      	beq.n	800e064 <USBD_CDC_Setup+0xb4>
 800dfe4:	2b20      	cmp	r3, #32
 800dfe6:	f040 809f 	bne.w	800e128 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	88db      	ldrh	r3, [r3, #6]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d02e      	beq.n	800e050 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	b25b      	sxtb	r3, r3
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	da16      	bge.n	800e02a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	683a      	ldr	r2, [r7, #0]
 800e006:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e008:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e00a:	683a      	ldr	r2, [r7, #0]
 800e00c:	88d2      	ldrh	r2, [r2, #6]
 800e00e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	88db      	ldrh	r3, [r3, #6]
 800e014:	2b07      	cmp	r3, #7
 800e016:	bf28      	it	cs
 800e018:	2307      	movcs	r3, #7
 800e01a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	89fa      	ldrh	r2, [r7, #14]
 800e020:	4619      	mov	r1, r3
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f001 fa9f 	bl	800f566 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e028:	e085      	b.n	800e136 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	785a      	ldrb	r2, [r3, #1]
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	88db      	ldrh	r3, [r3, #6]
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e040:	6939      	ldr	r1, [r7, #16]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	88db      	ldrh	r3, [r3, #6]
 800e046:	461a      	mov	r2, r3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f001 fab8 	bl	800f5be <USBD_CtlPrepareRx>
      break;
 800e04e:	e072      	b.n	800e136 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	7850      	ldrb	r0, [r2, #1]
 800e05c:	2200      	movs	r2, #0
 800e05e:	6839      	ldr	r1, [r7, #0]
 800e060:	4798      	blx	r3
      break;
 800e062:	e068      	b.n	800e136 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	785b      	ldrb	r3, [r3, #1]
 800e068:	2b0b      	cmp	r3, #11
 800e06a:	d852      	bhi.n	800e112 <USBD_CDC_Setup+0x162>
 800e06c:	a201      	add	r2, pc, #4	; (adr r2, 800e074 <USBD_CDC_Setup+0xc4>)
 800e06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e072:	bf00      	nop
 800e074:	0800e0a5 	.word	0x0800e0a5
 800e078:	0800e121 	.word	0x0800e121
 800e07c:	0800e113 	.word	0x0800e113
 800e080:	0800e113 	.word	0x0800e113
 800e084:	0800e113 	.word	0x0800e113
 800e088:	0800e113 	.word	0x0800e113
 800e08c:	0800e113 	.word	0x0800e113
 800e090:	0800e113 	.word	0x0800e113
 800e094:	0800e113 	.word	0x0800e113
 800e098:	0800e113 	.word	0x0800e113
 800e09c:	0800e0cf 	.word	0x0800e0cf
 800e0a0:	0800e0f9 	.word	0x0800e0f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	2b03      	cmp	r3, #3
 800e0ae:	d107      	bne.n	800e0c0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e0b0:	f107 030a 	add.w	r3, r7, #10
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f001 fa54 	bl	800f566 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e0be:	e032      	b.n	800e126 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f001 f9de 	bl	800f484 <USBD_CtlError>
            ret = USBD_FAIL;
 800e0c8:	2303      	movs	r3, #3
 800e0ca:	75fb      	strb	r3, [r7, #23]
          break;
 800e0cc:	e02b      	b.n	800e126 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b03      	cmp	r3, #3
 800e0d8:	d107      	bne.n	800e0ea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e0da:	f107 030d 	add.w	r3, r7, #13
 800e0de:	2201      	movs	r2, #1
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f001 fa3f 	bl	800f566 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e0e8:	e01d      	b.n	800e126 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e0ea:	6839      	ldr	r1, [r7, #0]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f001 f9c9 	bl	800f484 <USBD_CtlError>
            ret = USBD_FAIL;
 800e0f2:	2303      	movs	r3, #3
 800e0f4:	75fb      	strb	r3, [r7, #23]
          break;
 800e0f6:	e016      	b.n	800e126 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	2b03      	cmp	r3, #3
 800e102:	d00f      	beq.n	800e124 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f001 f9bc 	bl	800f484 <USBD_CtlError>
            ret = USBD_FAIL;
 800e10c:	2303      	movs	r3, #3
 800e10e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e110:	e008      	b.n	800e124 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f001 f9b5 	bl	800f484 <USBD_CtlError>
          ret = USBD_FAIL;
 800e11a:	2303      	movs	r3, #3
 800e11c:	75fb      	strb	r3, [r7, #23]
          break;
 800e11e:	e002      	b.n	800e126 <USBD_CDC_Setup+0x176>
          break;
 800e120:	bf00      	nop
 800e122:	e008      	b.n	800e136 <USBD_CDC_Setup+0x186>
          break;
 800e124:	bf00      	nop
      }
      break;
 800e126:	e006      	b.n	800e136 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f001 f9aa 	bl	800f484 <USBD_CtlError>
      ret = USBD_FAIL;
 800e130:	2303      	movs	r3, #3
 800e132:	75fb      	strb	r3, [r7, #23]
      break;
 800e134:	bf00      	nop
  }

  return (uint8_t)ret;
 800e136:	7dfb      	ldrb	r3, [r7, #23]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3718      	adds	r7, #24
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	460b      	mov	r3, r1
 800e14a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e152:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d101      	bne.n	800e162 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e15e:	2303      	movs	r3, #3
 800e160:	e04f      	b.n	800e202 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e168:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e16a:	78fa      	ldrb	r2, [r7, #3]
 800e16c:	6879      	ldr	r1, [r7, #4]
 800e16e:	4613      	mov	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	440b      	add	r3, r1
 800e178:	3318      	adds	r3, #24
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d029      	beq.n	800e1d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e180:	78fa      	ldrb	r2, [r7, #3]
 800e182:	6879      	ldr	r1, [r7, #4]
 800e184:	4613      	mov	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4413      	add	r3, r2
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	440b      	add	r3, r1
 800e18e:	3318      	adds	r3, #24
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	78f9      	ldrb	r1, [r7, #3]
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	460b      	mov	r3, r1
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	440b      	add	r3, r1
 800e19c:	00db      	lsls	r3, r3, #3
 800e19e:	4403      	add	r3, r0
 800e1a0:	3338      	adds	r3, #56	; 0x38
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e1a8:	fb01 f303 	mul.w	r3, r1, r3
 800e1ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d110      	bne.n	800e1d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e1b2:	78fa      	ldrb	r2, [r7, #3]
 800e1b4:	6879      	ldr	r1, [r7, #4]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4413      	add	r3, r2
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	440b      	add	r3, r1
 800e1c0:	3318      	adds	r3, #24
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e1c6:	78f9      	ldrb	r1, [r7, #3]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f001 fe5b 	bl	800fe88 <USBD_LL_Transmit>
 800e1d2:	e015      	b.n	800e200 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1e2:	691b      	ldr	r3, [r3, #16]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00b      	beq.n	800e200 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	68ba      	ldr	r2, [r7, #8]
 800e1f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e1f6:	68ba      	ldr	r2, [r7, #8]
 800e1f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e1fc:	78fa      	ldrb	r2, [r7, #3]
 800e1fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b084      	sub	sp, #16
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
 800e212:	460b      	mov	r3, r1
 800e214:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e21c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e224:	2b00      	cmp	r3, #0
 800e226:	d101      	bne.n	800e22c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e228:	2303      	movs	r3, #3
 800e22a:	e015      	b.n	800e258 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e22c:	78fb      	ldrb	r3, [r7, #3]
 800e22e:	4619      	mov	r1, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f001 fe6b 	bl	800ff0c <USBD_LL_GetRxDataSize>
 800e236:	4602      	mov	r2, r0
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	68fa      	ldr	r2, [r7, #12]
 800e248:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e252:	4611      	mov	r1, r2
 800e254:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3710      	adds	r7, #16
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e26e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e276:	2303      	movs	r3, #3
 800e278:	e01b      	b.n	800e2b2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d015      	beq.n	800e2b0 <USBD_CDC_EP0_RxReady+0x50>
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e28a:	2bff      	cmp	r3, #255	; 0xff
 800e28c:	d010      	beq.n	800e2b0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e29c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e2a4:	b292      	uxth	r2, r2
 800e2a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	22ff      	movs	r2, #255	; 0xff
 800e2ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
	...

0800e2bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2243      	movs	r2, #67	; 0x43
 800e2c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e2ca:	4b03      	ldr	r3, [pc, #12]	; (800e2d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	20000094 	.word	0x20000094

0800e2dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2243      	movs	r2, #67	; 0x43
 800e2e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e2ea:	4b03      	ldr	r3, [pc, #12]	; (800e2f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	20000050 	.word	0x20000050

0800e2fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2243      	movs	r2, #67	; 0x43
 800e308:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e30a:	4b03      	ldr	r3, [pc, #12]	; (800e318 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr
 800e318:	200000d8 	.word	0x200000d8

0800e31c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	220a      	movs	r2, #10
 800e328:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e32a:	4b03      	ldr	r3, [pc, #12]	; (800e338 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr
 800e338:	2000000c 	.word	0x2000000c

0800e33c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d101      	bne.n	800e350 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e34c:	2303      	movs	r3, #3
 800e34e:	e004      	b.n	800e35a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	683a      	ldr	r2, [r7, #0]
 800e354:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	370c      	adds	r7, #12
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr

0800e366 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e366:	b480      	push	{r7}
 800e368:	b087      	sub	sp, #28
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	60f8      	str	r0, [r7, #12]
 800e36e:	60b9      	str	r1, [r7, #8]
 800e370:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e378:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e380:	2303      	movs	r3, #3
 800e382:	e008      	b.n	800e396 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	68ba      	ldr	r2, [r7, #8]
 800e388:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	371c      	adds	r7, #28
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr

0800e3a2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e3a2:	b480      	push	{r7}
 800e3a4:	b085      	sub	sp, #20
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
 800e3aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d101      	bne.n	800e3be <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e3ba:	2303      	movs	r3, #3
 800e3bc:	e004      	b.n	800e3c8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3714      	adds	r7, #20
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d101      	bne.n	800e3f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e3ee:	2303      	movs	r3, #3
 800e3f0:	e016      	b.n	800e420 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	7c1b      	ldrb	r3, [r3, #16]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d109      	bne.n	800e40e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e400:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e404:	2101      	movs	r1, #1
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f001 fd5f 	bl	800feca <USBD_LL_PrepareReceive>
 800e40c:	e007      	b.n	800e41e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e414:	2340      	movs	r3, #64	; 0x40
 800e416:	2101      	movs	r1, #1
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f001 fd56 	bl	800feca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e41e:	2300      	movs	r3, #0
}
 800e420:	4618      	mov	r0, r3
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b086      	sub	sp, #24
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	4613      	mov	r3, r2
 800e434:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d101      	bne.n	800e440 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e43c:	2303      	movs	r3, #3
 800e43e:	e01f      	b.n	800e480 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2200      	movs	r2, #0
 800e444:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d003      	beq.n	800e466 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2201      	movs	r2, #1
 800e46a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	79fa      	ldrb	r2, [r7, #7]
 800e472:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f001 fbbd 	bl	800fbf4 <USBD_LL_Init>
 800e47a:	4603      	mov	r3, r0
 800e47c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e480:	4618      	mov	r0, r3
 800e482:	3718      	adds	r7, #24
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e492:	2300      	movs	r3, #0
 800e494:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d101      	bne.n	800e4a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e49c:	2303      	movs	r3, #3
 800e49e:	e016      	b.n	800e4ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d00b      	beq.n	800e4cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4bc:	f107 020e 	add.w	r2, r7, #14
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	4798      	blx	r3
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b082      	sub	sp, #8
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f001 fbe8 	bl	800fcb4 <USBD_LL_Start>
 800e4e4:	4603      	mov	r3, r0
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e4ee:	b480      	push	{r7}
 800e4f0:	b083      	sub	sp, #12
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	460b      	mov	r3, r1
 800e50e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e510:	2303      	movs	r3, #3
 800e512:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d009      	beq.n	800e532 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	78fa      	ldrb	r2, [r7, #3]
 800e528:	4611      	mov	r1, r2
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	4798      	blx	r3
 800e52e:	4603      	mov	r3, r0
 800e530:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e532:	7bfb      	ldrb	r3, [r7, #15]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	460b      	mov	r3, r1
 800e546:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d007      	beq.n	800e562 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	78fa      	ldrb	r2, [r7, #3]
 800e55c:	4611      	mov	r1, r2
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	4798      	blx	r3
  }

  return USBD_OK;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 ff46 	bl	800f410 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e592:	461a      	mov	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e5a0:	f003 031f 	and.w	r3, r3, #31
 800e5a4:	2b02      	cmp	r3, #2
 800e5a6:	d01a      	beq.n	800e5de <USBD_LL_SetupStage+0x72>
 800e5a8:	2b02      	cmp	r3, #2
 800e5aa:	d822      	bhi.n	800e5f2 <USBD_LL_SetupStage+0x86>
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d002      	beq.n	800e5b6 <USBD_LL_SetupStage+0x4a>
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d00a      	beq.n	800e5ca <USBD_LL_SetupStage+0x5e>
 800e5b4:	e01d      	b.n	800e5f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f9ee 	bl	800e9a0 <USBD_StdDevReq>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800e5c8:	e020      	b.n	800e60c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 fa52 	bl	800ea7c <USBD_StdItfReq>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	73fb      	strb	r3, [r7, #15]
      break;
 800e5dc:	e016      	b.n	800e60c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 fa91 	bl	800eb0e <USBD_StdEPReq>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e5f0:	e00c      	b.n	800e60c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e5f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	4619      	mov	r1, r3
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f001 fbb7 	bl	800fd74 <USBD_LL_StallEP>
 800e606:	4603      	mov	r3, r0
 800e608:	73fb      	strb	r3, [r7, #15]
      break;
 800e60a:	bf00      	nop
  }

  return ret;
 800e60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b086      	sub	sp, #24
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	60f8      	str	r0, [r7, #12]
 800e61e:	460b      	mov	r3, r1
 800e620:	607a      	str	r2, [r7, #4]
 800e622:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e624:	7afb      	ldrb	r3, [r7, #11]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d138      	bne.n	800e69c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e630:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e638:	2b03      	cmp	r3, #3
 800e63a:	d14a      	bne.n	800e6d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	689a      	ldr	r2, [r3, #8]
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	429a      	cmp	r2, r3
 800e646:	d913      	bls.n	800e670 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	689a      	ldr	r2, [r3, #8]
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	1ad2      	subs	r2, r2, r3
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	68da      	ldr	r2, [r3, #12]
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	4293      	cmp	r3, r2
 800e660:	bf28      	it	cs
 800e662:	4613      	movcs	r3, r2
 800e664:	461a      	mov	r2, r3
 800e666:	6879      	ldr	r1, [r7, #4]
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f000 ffc5 	bl	800f5f8 <USBD_CtlContinueRx>
 800e66e:	e030      	b.n	800e6d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e676:	b2db      	uxtb	r3, r3
 800e678:	2b03      	cmp	r3, #3
 800e67a:	d10b      	bne.n	800e694 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e682:	691b      	ldr	r3, [r3, #16]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d005      	beq.n	800e694 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e68e:	691b      	ldr	r3, [r3, #16]
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f000 ffc0 	bl	800f61a <USBD_CtlSendStatus>
 800e69a:	e01a      	b.n	800e6d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	d114      	bne.n	800e6d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ae:	699b      	ldr	r3, [r3, #24]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d00e      	beq.n	800e6d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ba:	699b      	ldr	r3, [r3, #24]
 800e6bc:	7afa      	ldrb	r2, [r7, #11]
 800e6be:	4611      	mov	r1, r2
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	4798      	blx	r3
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e6c8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e6ce:	7dfb      	ldrb	r3, [r7, #23]
 800e6d0:	e000      	b.n	800e6d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3718      	adds	r7, #24
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b086      	sub	sp, #24
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	607a      	str	r2, [r7, #4]
 800e6e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e6ea:	7afb      	ldrb	r3, [r7, #11]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d16b      	bne.n	800e7c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	3314      	adds	r3, #20
 800e6f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d156      	bne.n	800e7ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	689a      	ldr	r2, [r3, #8]
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d914      	bls.n	800e736 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	689a      	ldr	r2, [r3, #8]
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	1ad2      	subs	r2, r2, r3
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	461a      	mov	r2, r3
 800e720:	6879      	ldr	r1, [r7, #4]
 800e722:	68f8      	ldr	r0, [r7, #12]
 800e724:	f000 ff3a 	bl	800f59c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e728:	2300      	movs	r3, #0
 800e72a:	2200      	movs	r2, #0
 800e72c:	2100      	movs	r1, #0
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f001 fbcb 	bl	800feca <USBD_LL_PrepareReceive>
 800e734:	e03b      	b.n	800e7ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	68da      	ldr	r2, [r3, #12]
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d11c      	bne.n	800e77c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	685a      	ldr	r2, [r3, #4]
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d316      	bcc.n	800e77c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	685a      	ldr	r2, [r3, #4]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e758:	429a      	cmp	r2, r3
 800e75a:	d20f      	bcs.n	800e77c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e75c:	2200      	movs	r2, #0
 800e75e:	2100      	movs	r1, #0
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f000 ff1b 	bl	800f59c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e76e:	2300      	movs	r3, #0
 800e770:	2200      	movs	r2, #0
 800e772:	2100      	movs	r1, #0
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	f001 fba8 	bl	800feca <USBD_LL_PrepareReceive>
 800e77a:	e018      	b.n	800e7ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e782:	b2db      	uxtb	r3, r3
 800e784:	2b03      	cmp	r3, #3
 800e786:	d10b      	bne.n	800e7a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d005      	beq.n	800e7a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7a0:	2180      	movs	r1, #128	; 0x80
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f001 fae6 	bl	800fd74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f000 ff49 	bl	800f640 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d122      	bne.n	800e7fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f7ff fe98 	bl	800e4ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e7c6:	e01a      	b.n	800e7fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	2b03      	cmp	r3, #3
 800e7d2:	d114      	bne.n	800e7fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7da:	695b      	ldr	r3, [r3, #20]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d00e      	beq.n	800e7fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e6:	695b      	ldr	r3, [r3, #20]
 800e7e8:	7afa      	ldrb	r2, [r7, #11]
 800e7ea:	4611      	mov	r1, r2
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	4798      	blx	r3
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e7f4:	7dfb      	ldrb	r3, [r7, #23]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	e000      	b.n	800e800 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3718      	adds	r7, #24
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e834:	2b00      	cmp	r3, #0
 800e836:	d101      	bne.n	800e83c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e838:	2303      	movs	r3, #3
 800e83a:	e02f      	b.n	800e89c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00f      	beq.n	800e866 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d009      	beq.n	800e866 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	6852      	ldr	r2, [r2, #4]
 800e85e:	b2d2      	uxtb	r2, r2
 800e860:	4611      	mov	r1, r2
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e866:	2340      	movs	r3, #64	; 0x40
 800e868:	2200      	movs	r2, #0
 800e86a:	2100      	movs	r1, #0
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f001 fa3c 	bl	800fcea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2201      	movs	r2, #1
 800e876:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2240      	movs	r2, #64	; 0x40
 800e87e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e882:	2340      	movs	r3, #64	; 0x40
 800e884:	2200      	movs	r2, #0
 800e886:	2180      	movs	r1, #128	; 0x80
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f001 fa2e 	bl	800fcea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2201      	movs	r2, #1
 800e892:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2240      	movs	r2, #64	; 0x40
 800e898:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	78fa      	ldrb	r2, [r7, #3]
 800e8b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	370c      	adds	r7, #12
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8d2:	b2da      	uxtb	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2204      	movs	r2, #4
 800e8de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e8e2:	2300      	movs	r3, #0
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	2b04      	cmp	r3, #4
 800e902:	d106      	bne.n	800e912 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d101      	bne.n	800e936 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e932:	2303      	movs	r3, #3
 800e934:	e012      	b.n	800e95c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	2b03      	cmp	r3, #3
 800e940:	d10b      	bne.n	800e95a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e948:	69db      	ldr	r3, [r3, #28]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d005      	beq.n	800e95a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e954:	69db      	ldr	r3, [r3, #28]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e95a:	2300      	movs	r3, #0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e964:	b480      	push	{r7}
 800e966:	b087      	sub	sp, #28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	3301      	adds	r3, #1
 800e97a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e982:	8a3b      	ldrh	r3, [r7, #16]
 800e984:	021b      	lsls	r3, r3, #8
 800e986:	b21a      	sxth	r2, r3
 800e988:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e98c:	4313      	orrs	r3, r2
 800e98e:	b21b      	sxth	r3, r3
 800e990:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e992:	89fb      	ldrh	r3, [r7, #14]
}
 800e994:	4618      	mov	r0, r3
 800e996:	371c      	adds	r7, #28
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9b6:	2b40      	cmp	r3, #64	; 0x40
 800e9b8:	d005      	beq.n	800e9c6 <USBD_StdDevReq+0x26>
 800e9ba:	2b40      	cmp	r3, #64	; 0x40
 800e9bc:	d853      	bhi.n	800ea66 <USBD_StdDevReq+0xc6>
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00b      	beq.n	800e9da <USBD_StdDevReq+0x3a>
 800e9c2:	2b20      	cmp	r3, #32
 800e9c4:	d14f      	bne.n	800ea66 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	6839      	ldr	r1, [r7, #0]
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	4798      	blx	r3
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	73fb      	strb	r3, [r7, #15]
      break;
 800e9d8:	e04a      	b.n	800ea70 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	785b      	ldrb	r3, [r3, #1]
 800e9de:	2b09      	cmp	r3, #9
 800e9e0:	d83b      	bhi.n	800ea5a <USBD_StdDevReq+0xba>
 800e9e2:	a201      	add	r2, pc, #4	; (adr r2, 800e9e8 <USBD_StdDevReq+0x48>)
 800e9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e8:	0800ea3d 	.word	0x0800ea3d
 800e9ec:	0800ea51 	.word	0x0800ea51
 800e9f0:	0800ea5b 	.word	0x0800ea5b
 800e9f4:	0800ea47 	.word	0x0800ea47
 800e9f8:	0800ea5b 	.word	0x0800ea5b
 800e9fc:	0800ea1b 	.word	0x0800ea1b
 800ea00:	0800ea11 	.word	0x0800ea11
 800ea04:	0800ea5b 	.word	0x0800ea5b
 800ea08:	0800ea33 	.word	0x0800ea33
 800ea0c:	0800ea25 	.word	0x0800ea25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ea10:	6839      	ldr	r1, [r7, #0]
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f9de 	bl	800edd4 <USBD_GetDescriptor>
          break;
 800ea18:	e024      	b.n	800ea64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 fb6d 	bl	800f0fc <USBD_SetAddress>
          break;
 800ea22:	e01f      	b.n	800ea64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ea24:	6839      	ldr	r1, [r7, #0]
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 fbac 	bl	800f184 <USBD_SetConfig>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	73fb      	strb	r3, [r7, #15]
          break;
 800ea30:	e018      	b.n	800ea64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ea32:	6839      	ldr	r1, [r7, #0]
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 fc4b 	bl	800f2d0 <USBD_GetConfig>
          break;
 800ea3a:	e013      	b.n	800ea64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ea3c:	6839      	ldr	r1, [r7, #0]
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 fc7c 	bl	800f33c <USBD_GetStatus>
          break;
 800ea44:	e00e      	b.n	800ea64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ea46:	6839      	ldr	r1, [r7, #0]
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fcab 	bl	800f3a4 <USBD_SetFeature>
          break;
 800ea4e:	e009      	b.n	800ea64 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ea50:	6839      	ldr	r1, [r7, #0]
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 fcba 	bl	800f3cc <USBD_ClrFeature>
          break;
 800ea58:	e004      	b.n	800ea64 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 fd11 	bl	800f484 <USBD_CtlError>
          break;
 800ea62:	bf00      	nop
      }
      break;
 800ea64:	e004      	b.n	800ea70 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 fd0b 	bl	800f484 <USBD_CtlError>
      break;
 800ea6e:	bf00      	nop
  }

  return ret;
 800ea70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3710      	adds	r7, #16
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop

0800ea7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea86:	2300      	movs	r3, #0
 800ea88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea92:	2b40      	cmp	r3, #64	; 0x40
 800ea94:	d005      	beq.n	800eaa2 <USBD_StdItfReq+0x26>
 800ea96:	2b40      	cmp	r3, #64	; 0x40
 800ea98:	d82f      	bhi.n	800eafa <USBD_StdItfReq+0x7e>
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d001      	beq.n	800eaa2 <USBD_StdItfReq+0x26>
 800ea9e:	2b20      	cmp	r3, #32
 800eaa0:	d12b      	bne.n	800eafa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaa8:	b2db      	uxtb	r3, r3
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	d81d      	bhi.n	800eaec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	889b      	ldrh	r3, [r3, #4]
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d813      	bhi.n	800eae2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	6839      	ldr	r1, [r7, #0]
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	4798      	blx	r3
 800eac8:	4603      	mov	r3, r0
 800eaca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	88db      	ldrh	r3, [r3, #6]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d110      	bne.n	800eaf6 <USBD_StdItfReq+0x7a>
 800ead4:	7bfb      	ldrb	r3, [r7, #15]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d10d      	bne.n	800eaf6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 fd9d 	bl	800f61a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eae0:	e009      	b.n	800eaf6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800eae2:	6839      	ldr	r1, [r7, #0]
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 fccd 	bl	800f484 <USBD_CtlError>
          break;
 800eaea:	e004      	b.n	800eaf6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800eaec:	6839      	ldr	r1, [r7, #0]
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 fcc8 	bl	800f484 <USBD_CtlError>
          break;
 800eaf4:	e000      	b.n	800eaf8 <USBD_StdItfReq+0x7c>
          break;
 800eaf6:	bf00      	nop
      }
      break;
 800eaf8:	e004      	b.n	800eb04 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800eafa:	6839      	ldr	r1, [r7, #0]
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 fcc1 	bl	800f484 <USBD_CtlError>
      break;
 800eb02:	bf00      	nop
  }

  return ret;
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b084      	sub	sp, #16
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	889b      	ldrh	r3, [r3, #4]
 800eb20:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb2a:	2b40      	cmp	r3, #64	; 0x40
 800eb2c:	d007      	beq.n	800eb3e <USBD_StdEPReq+0x30>
 800eb2e:	2b40      	cmp	r3, #64	; 0x40
 800eb30:	f200 8145 	bhi.w	800edbe <USBD_StdEPReq+0x2b0>
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00c      	beq.n	800eb52 <USBD_StdEPReq+0x44>
 800eb38:	2b20      	cmp	r3, #32
 800eb3a:	f040 8140 	bne.w	800edbe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	6839      	ldr	r1, [r7, #0]
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	4798      	blx	r3
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	73fb      	strb	r3, [r7, #15]
      break;
 800eb50:	e13a      	b.n	800edc8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	785b      	ldrb	r3, [r3, #1]
 800eb56:	2b03      	cmp	r3, #3
 800eb58:	d007      	beq.n	800eb6a <USBD_StdEPReq+0x5c>
 800eb5a:	2b03      	cmp	r3, #3
 800eb5c:	f300 8129 	bgt.w	800edb2 <USBD_StdEPReq+0x2a4>
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d07f      	beq.n	800ec64 <USBD_StdEPReq+0x156>
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d03c      	beq.n	800ebe2 <USBD_StdEPReq+0xd4>
 800eb68:	e123      	b.n	800edb2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d002      	beq.n	800eb7c <USBD_StdEPReq+0x6e>
 800eb76:	2b03      	cmp	r3, #3
 800eb78:	d016      	beq.n	800eba8 <USBD_StdEPReq+0x9a>
 800eb7a:	e02c      	b.n	800ebd6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb7c:	7bbb      	ldrb	r3, [r7, #14]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00d      	beq.n	800eb9e <USBD_StdEPReq+0x90>
 800eb82:	7bbb      	ldrb	r3, [r7, #14]
 800eb84:	2b80      	cmp	r3, #128	; 0x80
 800eb86:	d00a      	beq.n	800eb9e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb88:	7bbb      	ldrb	r3, [r7, #14]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f001 f8f1 	bl	800fd74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb92:	2180      	movs	r1, #128	; 0x80
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f001 f8ed 	bl	800fd74 <USBD_LL_StallEP>
 800eb9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb9c:	e020      	b.n	800ebe0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800eb9e:	6839      	ldr	r1, [r7, #0]
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f000 fc6f 	bl	800f484 <USBD_CtlError>
              break;
 800eba6:	e01b      	b.n	800ebe0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	885b      	ldrh	r3, [r3, #2]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10e      	bne.n	800ebce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ebb0:	7bbb      	ldrb	r3, [r7, #14]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00b      	beq.n	800ebce <USBD_StdEPReq+0xc0>
 800ebb6:	7bbb      	ldrb	r3, [r7, #14]
 800ebb8:	2b80      	cmp	r3, #128	; 0x80
 800ebba:	d008      	beq.n	800ebce <USBD_StdEPReq+0xc0>
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	88db      	ldrh	r3, [r3, #6]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d104      	bne.n	800ebce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebc4:	7bbb      	ldrb	r3, [r7, #14]
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f001 f8d3 	bl	800fd74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 fd23 	bl	800f61a <USBD_CtlSendStatus>

              break;
 800ebd4:	e004      	b.n	800ebe0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ebd6:	6839      	ldr	r1, [r7, #0]
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 fc53 	bl	800f484 <USBD_CtlError>
              break;
 800ebde:	bf00      	nop
          }
          break;
 800ebe0:	e0ec      	b.n	800edbc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	d002      	beq.n	800ebf4 <USBD_StdEPReq+0xe6>
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d016      	beq.n	800ec20 <USBD_StdEPReq+0x112>
 800ebf2:	e030      	b.n	800ec56 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebf4:	7bbb      	ldrb	r3, [r7, #14]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d00d      	beq.n	800ec16 <USBD_StdEPReq+0x108>
 800ebfa:	7bbb      	ldrb	r3, [r7, #14]
 800ebfc:	2b80      	cmp	r3, #128	; 0x80
 800ebfe:	d00a      	beq.n	800ec16 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec00:	7bbb      	ldrb	r3, [r7, #14]
 800ec02:	4619      	mov	r1, r3
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f001 f8b5 	bl	800fd74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec0a:	2180      	movs	r1, #128	; 0x80
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f001 f8b1 	bl	800fd74 <USBD_LL_StallEP>
 800ec12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec14:	e025      	b.n	800ec62 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ec16:	6839      	ldr	r1, [r7, #0]
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 fc33 	bl	800f484 <USBD_CtlError>
              break;
 800ec1e:	e020      	b.n	800ec62 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	885b      	ldrh	r3, [r3, #2]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d11b      	bne.n	800ec60 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ec28:	7bbb      	ldrb	r3, [r7, #14]
 800ec2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d004      	beq.n	800ec3c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ec32:	7bbb      	ldrb	r3, [r7, #14]
 800ec34:	4619      	mov	r1, r3
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f001 f8bb 	bl	800fdb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 fcec 	bl	800f61a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	6839      	ldr	r1, [r7, #0]
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	4798      	blx	r3
 800ec50:	4603      	mov	r3, r0
 800ec52:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ec54:	e004      	b.n	800ec60 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ec56:	6839      	ldr	r1, [r7, #0]
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f000 fc13 	bl	800f484 <USBD_CtlError>
              break;
 800ec5e:	e000      	b.n	800ec62 <USBD_StdEPReq+0x154>
              break;
 800ec60:	bf00      	nop
          }
          break;
 800ec62:	e0ab      	b.n	800edbc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	2b02      	cmp	r3, #2
 800ec6e:	d002      	beq.n	800ec76 <USBD_StdEPReq+0x168>
 800ec70:	2b03      	cmp	r3, #3
 800ec72:	d032      	beq.n	800ecda <USBD_StdEPReq+0x1cc>
 800ec74:	e097      	b.n	800eda6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec76:	7bbb      	ldrb	r3, [r7, #14]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d007      	beq.n	800ec8c <USBD_StdEPReq+0x17e>
 800ec7c:	7bbb      	ldrb	r3, [r7, #14]
 800ec7e:	2b80      	cmp	r3, #128	; 0x80
 800ec80:	d004      	beq.n	800ec8c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 fbfd 	bl	800f484 <USBD_CtlError>
                break;
 800ec8a:	e091      	b.n	800edb0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	da0b      	bge.n	800ecac <USBD_StdEPReq+0x19e>
 800ec94:	7bbb      	ldrb	r3, [r7, #14]
 800ec96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4413      	add	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	3310      	adds	r3, #16
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	4413      	add	r3, r2
 800eca8:	3304      	adds	r3, #4
 800ecaa:	e00b      	b.n	800ecc4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ecac:	7bbb      	ldrb	r3, [r7, #14]
 800ecae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	4413      	add	r3, r2
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	2202      	movs	r2, #2
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 fc47 	bl	800f566 <USBD_CtlSendData>
              break;
 800ecd8:	e06a      	b.n	800edb0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ecda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	da11      	bge.n	800ed06 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ece2:	7bbb      	ldrb	r3, [r7, #14]
 800ece4:	f003 020f 	and.w	r2, r3, #15
 800ece8:	6879      	ldr	r1, [r7, #4]
 800ecea:	4613      	mov	r3, r2
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	4413      	add	r3, r2
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	440b      	add	r3, r1
 800ecf4:	3324      	adds	r3, #36	; 0x24
 800ecf6:	881b      	ldrh	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d117      	bne.n	800ed2c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ecfc:	6839      	ldr	r1, [r7, #0]
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f000 fbc0 	bl	800f484 <USBD_CtlError>
                  break;
 800ed04:	e054      	b.n	800edb0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed06:	7bbb      	ldrb	r3, [r7, #14]
 800ed08:	f003 020f 	and.w	r2, r3, #15
 800ed0c:	6879      	ldr	r1, [r7, #4]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4413      	add	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	440b      	add	r3, r1
 800ed18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d104      	bne.n	800ed2c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ed22:	6839      	ldr	r1, [r7, #0]
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 fbad 	bl	800f484 <USBD_CtlError>
                  break;
 800ed2a:	e041      	b.n	800edb0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	da0b      	bge.n	800ed4c <USBD_StdEPReq+0x23e>
 800ed34:	7bbb      	ldrb	r3, [r7, #14]
 800ed36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4413      	add	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	3310      	adds	r3, #16
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	4413      	add	r3, r2
 800ed48:	3304      	adds	r3, #4
 800ed4a:	e00b      	b.n	800ed64 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed4c:	7bbb      	ldrb	r3, [r7, #14]
 800ed4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed52:	4613      	mov	r3, r2
 800ed54:	009b      	lsls	r3, r3, #2
 800ed56:	4413      	add	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	4413      	add	r3, r2
 800ed62:	3304      	adds	r3, #4
 800ed64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed66:	7bbb      	ldrb	r3, [r7, #14]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <USBD_StdEPReq+0x264>
 800ed6c:	7bbb      	ldrb	r3, [r7, #14]
 800ed6e:	2b80      	cmp	r3, #128	; 0x80
 800ed70:	d103      	bne.n	800ed7a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]
 800ed78:	e00e      	b.n	800ed98 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed7a:	7bbb      	ldrb	r3, [r7, #14]
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f001 f836 	bl	800fdf0 <USBD_LL_IsStallEP>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d003      	beq.n	800ed92 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	601a      	str	r2, [r3, #0]
 800ed90:	e002      	b.n	800ed98 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	2200      	movs	r2, #0
 800ed96:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	2202      	movs	r2, #2
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 fbe1 	bl	800f566 <USBD_CtlSendData>
              break;
 800eda4:	e004      	b.n	800edb0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800eda6:	6839      	ldr	r1, [r7, #0]
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 fb6b 	bl	800f484 <USBD_CtlError>
              break;
 800edae:	bf00      	nop
          }
          break;
 800edb0:	e004      	b.n	800edbc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800edb2:	6839      	ldr	r1, [r7, #0]
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 fb65 	bl	800f484 <USBD_CtlError>
          break;
 800edba:	bf00      	nop
      }
      break;
 800edbc:	e004      	b.n	800edc8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800edbe:	6839      	ldr	r1, [r7, #0]
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 fb5f 	bl	800f484 <USBD_CtlError>
      break;
 800edc6:	bf00      	nop
  }

  return ret;
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
	...

0800edd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800edde:	2300      	movs	r3, #0
 800ede0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ede2:	2300      	movs	r3, #0
 800ede4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ede6:	2300      	movs	r3, #0
 800ede8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	885b      	ldrh	r3, [r3, #2]
 800edee:	0a1b      	lsrs	r3, r3, #8
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	3b01      	subs	r3, #1
 800edf4:	2b0e      	cmp	r3, #14
 800edf6:	f200 8152 	bhi.w	800f09e <USBD_GetDescriptor+0x2ca>
 800edfa:	a201      	add	r2, pc, #4	; (adr r2, 800ee00 <USBD_GetDescriptor+0x2c>)
 800edfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee00:	0800ee71 	.word	0x0800ee71
 800ee04:	0800ee89 	.word	0x0800ee89
 800ee08:	0800eec9 	.word	0x0800eec9
 800ee0c:	0800f09f 	.word	0x0800f09f
 800ee10:	0800f09f 	.word	0x0800f09f
 800ee14:	0800f03f 	.word	0x0800f03f
 800ee18:	0800f06b 	.word	0x0800f06b
 800ee1c:	0800f09f 	.word	0x0800f09f
 800ee20:	0800f09f 	.word	0x0800f09f
 800ee24:	0800f09f 	.word	0x0800f09f
 800ee28:	0800f09f 	.word	0x0800f09f
 800ee2c:	0800f09f 	.word	0x0800f09f
 800ee30:	0800f09f 	.word	0x0800f09f
 800ee34:	0800f09f 	.word	0x0800f09f
 800ee38:	0800ee3d 	.word	0x0800ee3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee42:	69db      	ldr	r3, [r3, #28]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00b      	beq.n	800ee60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee4e:	69db      	ldr	r3, [r3, #28]
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	7c12      	ldrb	r2, [r2, #16]
 800ee54:	f107 0108 	add.w	r1, r7, #8
 800ee58:	4610      	mov	r0, r2
 800ee5a:	4798      	blx	r3
 800ee5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee5e:	e126      	b.n	800f0ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ee60:	6839      	ldr	r1, [r7, #0]
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 fb0e 	bl	800f484 <USBD_CtlError>
        err++;
 800ee68:	7afb      	ldrb	r3, [r7, #11]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	72fb      	strb	r3, [r7, #11]
      break;
 800ee6e:	e11e      	b.n	800f0ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	7c12      	ldrb	r2, [r2, #16]
 800ee7c:	f107 0108 	add.w	r1, r7, #8
 800ee80:	4610      	mov	r0, r2
 800ee82:	4798      	blx	r3
 800ee84:	60f8      	str	r0, [r7, #12]
      break;
 800ee86:	e112      	b.n	800f0ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	7c1b      	ldrb	r3, [r3, #16]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d10d      	bne.n	800eeac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee98:	f107 0208 	add.w	r2, r7, #8
 800ee9c:	4610      	mov	r0, r2
 800ee9e:	4798      	blx	r3
 800eea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	3301      	adds	r3, #1
 800eea6:	2202      	movs	r2, #2
 800eea8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800eeaa:	e100      	b.n	800f0ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb4:	f107 0208 	add.w	r2, r7, #8
 800eeb8:	4610      	mov	r0, r2
 800eeba:	4798      	blx	r3
 800eebc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	3301      	adds	r3, #1
 800eec2:	2202      	movs	r2, #2
 800eec4:	701a      	strb	r2, [r3, #0]
      break;
 800eec6:	e0f2      	b.n	800f0ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	885b      	ldrh	r3, [r3, #2]
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	2b05      	cmp	r3, #5
 800eed0:	f200 80ac 	bhi.w	800f02c <USBD_GetDescriptor+0x258>
 800eed4:	a201      	add	r2, pc, #4	; (adr r2, 800eedc <USBD_GetDescriptor+0x108>)
 800eed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeda:	bf00      	nop
 800eedc:	0800eef5 	.word	0x0800eef5
 800eee0:	0800ef29 	.word	0x0800ef29
 800eee4:	0800ef5d 	.word	0x0800ef5d
 800eee8:	0800ef91 	.word	0x0800ef91
 800eeec:	0800efc5 	.word	0x0800efc5
 800eef0:	0800eff9 	.word	0x0800eff9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00b      	beq.n	800ef18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	7c12      	ldrb	r2, [r2, #16]
 800ef0c:	f107 0108 	add.w	r1, r7, #8
 800ef10:	4610      	mov	r0, r2
 800ef12:	4798      	blx	r3
 800ef14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef16:	e091      	b.n	800f03c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef18:	6839      	ldr	r1, [r7, #0]
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fab2 	bl	800f484 <USBD_CtlError>
            err++;
 800ef20:	7afb      	ldrb	r3, [r7, #11]
 800ef22:	3301      	adds	r3, #1
 800ef24:	72fb      	strb	r3, [r7, #11]
          break;
 800ef26:	e089      	b.n	800f03c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00b      	beq.n	800ef4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	7c12      	ldrb	r2, [r2, #16]
 800ef40:	f107 0108 	add.w	r1, r7, #8
 800ef44:	4610      	mov	r0, r2
 800ef46:	4798      	blx	r3
 800ef48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef4a:	e077      	b.n	800f03c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef4c:	6839      	ldr	r1, [r7, #0]
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 fa98 	bl	800f484 <USBD_CtlError>
            err++;
 800ef54:	7afb      	ldrb	r3, [r7, #11]
 800ef56:	3301      	adds	r3, #1
 800ef58:	72fb      	strb	r3, [r7, #11]
          break;
 800ef5a:	e06f      	b.n	800f03c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00b      	beq.n	800ef80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	7c12      	ldrb	r2, [r2, #16]
 800ef74:	f107 0108 	add.w	r1, r7, #8
 800ef78:	4610      	mov	r0, r2
 800ef7a:	4798      	blx	r3
 800ef7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef7e:	e05d      	b.n	800f03c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef80:	6839      	ldr	r1, [r7, #0]
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 fa7e 	bl	800f484 <USBD_CtlError>
            err++;
 800ef88:	7afb      	ldrb	r3, [r7, #11]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ef8e:	e055      	b.n	800f03c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef96:	691b      	ldr	r3, [r3, #16]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00b      	beq.n	800efb4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	7c12      	ldrb	r2, [r2, #16]
 800efa8:	f107 0108 	add.w	r1, r7, #8
 800efac:	4610      	mov	r0, r2
 800efae:	4798      	blx	r3
 800efb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efb2:	e043      	b.n	800f03c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efb4:	6839      	ldr	r1, [r7, #0]
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 fa64 	bl	800f484 <USBD_CtlError>
            err++;
 800efbc:	7afb      	ldrb	r3, [r7, #11]
 800efbe:	3301      	adds	r3, #1
 800efc0:	72fb      	strb	r3, [r7, #11]
          break;
 800efc2:	e03b      	b.n	800f03c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efca:	695b      	ldr	r3, [r3, #20]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00b      	beq.n	800efe8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efd6:	695b      	ldr	r3, [r3, #20]
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	7c12      	ldrb	r2, [r2, #16]
 800efdc:	f107 0108 	add.w	r1, r7, #8
 800efe0:	4610      	mov	r0, r2
 800efe2:	4798      	blx	r3
 800efe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efe6:	e029      	b.n	800f03c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efe8:	6839      	ldr	r1, [r7, #0]
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 fa4a 	bl	800f484 <USBD_CtlError>
            err++;
 800eff0:	7afb      	ldrb	r3, [r7, #11]
 800eff2:	3301      	adds	r3, #1
 800eff4:	72fb      	strb	r3, [r7, #11]
          break;
 800eff6:	e021      	b.n	800f03c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800effe:	699b      	ldr	r3, [r3, #24]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00b      	beq.n	800f01c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f00a:	699b      	ldr	r3, [r3, #24]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	7c12      	ldrb	r2, [r2, #16]
 800f010:	f107 0108 	add.w	r1, r7, #8
 800f014:	4610      	mov	r0, r2
 800f016:	4798      	blx	r3
 800f018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f01a:	e00f      	b.n	800f03c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f01c:	6839      	ldr	r1, [r7, #0]
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 fa30 	bl	800f484 <USBD_CtlError>
            err++;
 800f024:	7afb      	ldrb	r3, [r7, #11]
 800f026:	3301      	adds	r3, #1
 800f028:	72fb      	strb	r3, [r7, #11]
          break;
 800f02a:	e007      	b.n	800f03c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 fa28 	bl	800f484 <USBD_CtlError>
          err++;
 800f034:	7afb      	ldrb	r3, [r7, #11]
 800f036:	3301      	adds	r3, #1
 800f038:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f03a:	bf00      	nop
      }
      break;
 800f03c:	e037      	b.n	800f0ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	7c1b      	ldrb	r3, [r3, #16]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d109      	bne.n	800f05a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f04e:	f107 0208 	add.w	r2, r7, #8
 800f052:	4610      	mov	r0, r2
 800f054:	4798      	blx	r3
 800f056:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f058:	e029      	b.n	800f0ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f05a:	6839      	ldr	r1, [r7, #0]
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 fa11 	bl	800f484 <USBD_CtlError>
        err++;
 800f062:	7afb      	ldrb	r3, [r7, #11]
 800f064:	3301      	adds	r3, #1
 800f066:	72fb      	strb	r3, [r7, #11]
      break;
 800f068:	e021      	b.n	800f0ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	7c1b      	ldrb	r3, [r3, #16]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10d      	bne.n	800f08e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f07a:	f107 0208 	add.w	r2, r7, #8
 800f07e:	4610      	mov	r0, r2
 800f080:	4798      	blx	r3
 800f082:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	3301      	adds	r3, #1
 800f088:	2207      	movs	r2, #7
 800f08a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f08c:	e00f      	b.n	800f0ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 f9f7 	bl	800f484 <USBD_CtlError>
        err++;
 800f096:	7afb      	ldrb	r3, [r7, #11]
 800f098:	3301      	adds	r3, #1
 800f09a:	72fb      	strb	r3, [r7, #11]
      break;
 800f09c:	e007      	b.n	800f0ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f09e:	6839      	ldr	r1, [r7, #0]
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 f9ef 	bl	800f484 <USBD_CtlError>
      err++;
 800f0a6:	7afb      	ldrb	r3, [r7, #11]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	72fb      	strb	r3, [r7, #11]
      break;
 800f0ac:	bf00      	nop
  }

  if (err != 0U)
 800f0ae:	7afb      	ldrb	r3, [r7, #11]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d11e      	bne.n	800f0f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	88db      	ldrh	r3, [r3, #6]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d016      	beq.n	800f0ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f0bc:	893b      	ldrh	r3, [r7, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00e      	beq.n	800f0e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	88da      	ldrh	r2, [r3, #6]
 800f0c6:	893b      	ldrh	r3, [r7, #8]
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	bf28      	it	cs
 800f0cc:	4613      	movcs	r3, r2
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f0d2:	893b      	ldrh	r3, [r7, #8]
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	68f9      	ldr	r1, [r7, #12]
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 fa44 	bl	800f566 <USBD_CtlSendData>
 800f0de:	e009      	b.n	800f0f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f0e0:	6839      	ldr	r1, [r7, #0]
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 f9ce 	bl	800f484 <USBD_CtlError>
 800f0e8:	e004      	b.n	800f0f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 fa95 	bl	800f61a <USBD_CtlSendStatus>
 800f0f0:	e000      	b.n	800f0f4 <USBD_GetDescriptor+0x320>
    return;
 800f0f2:	bf00      	nop
  }
}
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop

0800f0fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	889b      	ldrh	r3, [r3, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d131      	bne.n	800f172 <USBD_SetAddress+0x76>
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	88db      	ldrh	r3, [r3, #6]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d12d      	bne.n	800f172 <USBD_SetAddress+0x76>
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	885b      	ldrh	r3, [r3, #2]
 800f11a:	2b7f      	cmp	r3, #127	; 0x7f
 800f11c:	d829      	bhi.n	800f172 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	885b      	ldrh	r3, [r3, #2]
 800f122:	b2db      	uxtb	r3, r3
 800f124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f128:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f130:	b2db      	uxtb	r3, r3
 800f132:	2b03      	cmp	r3, #3
 800f134:	d104      	bne.n	800f140 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f9a3 	bl	800f484 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f13e:	e01d      	b.n	800f17c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	7bfa      	ldrb	r2, [r7, #15]
 800f144:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f148:	7bfb      	ldrb	r3, [r7, #15]
 800f14a:	4619      	mov	r1, r3
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 fe7c 	bl	800fe4a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 fa61 	bl	800f61a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f158:	7bfb      	ldrb	r3, [r7, #15]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d004      	beq.n	800f168 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2202      	movs	r2, #2
 800f162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f166:	e009      	b.n	800f17c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f170:	e004      	b.n	800f17c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 f985 	bl	800f484 <USBD_CtlError>
  }
}
 800f17a:	bf00      	nop
 800f17c:	bf00      	nop
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	885b      	ldrh	r3, [r3, #2]
 800f196:	b2da      	uxtb	r2, r3
 800f198:	4b4c      	ldr	r3, [pc, #304]	; (800f2cc <USBD_SetConfig+0x148>)
 800f19a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f19c:	4b4b      	ldr	r3, [pc, #300]	; (800f2cc <USBD_SetConfig+0x148>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d905      	bls.n	800f1b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f1a4:	6839      	ldr	r1, [r7, #0]
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 f96c 	bl	800f484 <USBD_CtlError>
    return USBD_FAIL;
 800f1ac:	2303      	movs	r3, #3
 800f1ae:	e088      	b.n	800f2c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	2b02      	cmp	r3, #2
 800f1ba:	d002      	beq.n	800f1c2 <USBD_SetConfig+0x3e>
 800f1bc:	2b03      	cmp	r3, #3
 800f1be:	d025      	beq.n	800f20c <USBD_SetConfig+0x88>
 800f1c0:	e071      	b.n	800f2a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f1c2:	4b42      	ldr	r3, [pc, #264]	; (800f2cc <USBD_SetConfig+0x148>)
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d01c      	beq.n	800f204 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f1ca:	4b40      	ldr	r3, [pc, #256]	; (800f2cc <USBD_SetConfig+0x148>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f1d4:	4b3d      	ldr	r3, [pc, #244]	; (800f2cc <USBD_SetConfig+0x148>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	4619      	mov	r1, r3
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f7ff f992 	bl	800e504 <USBD_SetClassConfig>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f1e4:	7bfb      	ldrb	r3, [r7, #15]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d004      	beq.n	800f1f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f1ea:	6839      	ldr	r1, [r7, #0]
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 f949 	bl	800f484 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f1f2:	e065      	b.n	800f2c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fa10 	bl	800f61a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2203      	movs	r2, #3
 800f1fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f202:	e05d      	b.n	800f2c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 fa08 	bl	800f61a <USBD_CtlSendStatus>
      break;
 800f20a:	e059      	b.n	800f2c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f20c:	4b2f      	ldr	r3, [pc, #188]	; (800f2cc <USBD_SetConfig+0x148>)
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d112      	bne.n	800f23a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2202      	movs	r2, #2
 800f218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f21c:	4b2b      	ldr	r3, [pc, #172]	; (800f2cc <USBD_SetConfig+0x148>)
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	461a      	mov	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f226:	4b29      	ldr	r3, [pc, #164]	; (800f2cc <USBD_SetConfig+0x148>)
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	4619      	mov	r1, r3
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f7ff f985 	bl	800e53c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f9f1 	bl	800f61a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f238:	e042      	b.n	800f2c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f23a:	4b24      	ldr	r3, [pc, #144]	; (800f2cc <USBD_SetConfig+0x148>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	461a      	mov	r2, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	429a      	cmp	r2, r3
 800f246:	d02a      	beq.n	800f29e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	4619      	mov	r1, r3
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f7ff f973 	bl	800e53c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f256:	4b1d      	ldr	r3, [pc, #116]	; (800f2cc <USBD_SetConfig+0x148>)
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	461a      	mov	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f260:	4b1a      	ldr	r3, [pc, #104]	; (800f2cc <USBD_SetConfig+0x148>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	4619      	mov	r1, r3
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7ff f94c 	bl	800e504 <USBD_SetClassConfig>
 800f26c:	4603      	mov	r3, r0
 800f26e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f270:	7bfb      	ldrb	r3, [r7, #15]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00f      	beq.n	800f296 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f276:	6839      	ldr	r1, [r7, #0]
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 f903 	bl	800f484 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	b2db      	uxtb	r3, r3
 800f284:	4619      	mov	r1, r3
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7ff f958 	bl	800e53c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2202      	movs	r2, #2
 800f290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f294:	e014      	b.n	800f2c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 f9bf 	bl	800f61a <USBD_CtlSendStatus>
      break;
 800f29c:	e010      	b.n	800f2c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f9bb 	bl	800f61a <USBD_CtlSendStatus>
      break;
 800f2a4:	e00c      	b.n	800f2c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 f8eb 	bl	800f484 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f2ae:	4b07      	ldr	r3, [pc, #28]	; (800f2cc <USBD_SetConfig+0x148>)
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7ff f941 	bl	800e53c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800f2be:	bf00      	nop
  }

  return ret;
 800f2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	20000abc 	.word	0x20000abc

0800f2d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	88db      	ldrh	r3, [r3, #6]
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	d004      	beq.n	800f2ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f2e2:	6839      	ldr	r1, [r7, #0]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 f8cd 	bl	800f484 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f2ea:	e023      	b.n	800f334 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	2b02      	cmp	r3, #2
 800f2f6:	dc02      	bgt.n	800f2fe <USBD_GetConfig+0x2e>
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	dc03      	bgt.n	800f304 <USBD_GetConfig+0x34>
 800f2fc:	e015      	b.n	800f32a <USBD_GetConfig+0x5a>
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d00b      	beq.n	800f31a <USBD_GetConfig+0x4a>
 800f302:	e012      	b.n	800f32a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	3308      	adds	r3, #8
 800f30e:	2201      	movs	r2, #1
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 f927 	bl	800f566 <USBD_CtlSendData>
        break;
 800f318:	e00c      	b.n	800f334 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	3304      	adds	r3, #4
 800f31e:	2201      	movs	r2, #1
 800f320:	4619      	mov	r1, r3
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f91f 	bl	800f566 <USBD_CtlSendData>
        break;
 800f328:	e004      	b.n	800f334 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f32a:	6839      	ldr	r1, [r7, #0]
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 f8a9 	bl	800f484 <USBD_CtlError>
        break;
 800f332:	bf00      	nop
}
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	3b01      	subs	r3, #1
 800f350:	2b02      	cmp	r3, #2
 800f352:	d81e      	bhi.n	800f392 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	88db      	ldrh	r3, [r3, #6]
 800f358:	2b02      	cmp	r3, #2
 800f35a:	d004      	beq.n	800f366 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f35c:	6839      	ldr	r1, [r7, #0]
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 f890 	bl	800f484 <USBD_CtlError>
        break;
 800f364:	e01a      	b.n	800f39c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2201      	movs	r2, #1
 800f36a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f372:	2b00      	cmp	r3, #0
 800f374:	d005      	beq.n	800f382 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	f043 0202 	orr.w	r2, r3, #2
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	330c      	adds	r3, #12
 800f386:	2202      	movs	r2, #2
 800f388:	4619      	mov	r1, r3
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f8eb 	bl	800f566 <USBD_CtlSendData>
      break;
 800f390:	e004      	b.n	800f39c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 f875 	bl	800f484 <USBD_CtlError>
      break;
 800f39a:	bf00      	nop
  }
}
 800f39c:	bf00      	nop
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	885b      	ldrh	r3, [r3, #2]
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d106      	bne.n	800f3c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 f92b 	bl	800f61a <USBD_CtlSendStatus>
  }
}
 800f3c4:	bf00      	nop
 800f3c6:	3708      	adds	r7, #8
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	3b01      	subs	r3, #1
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	d80b      	bhi.n	800f3fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	885b      	ldrh	r3, [r3, #2]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d10c      	bne.n	800f406 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 f910 	bl	800f61a <USBD_CtlSendStatus>
      }
      break;
 800f3fa:	e004      	b.n	800f406 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f840 	bl	800f484 <USBD_CtlError>
      break;
 800f404:	e000      	b.n	800f408 <USBD_ClrFeature+0x3c>
      break;
 800f406:	bf00      	nop
  }
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	781a      	ldrb	r2, [r3, #0]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	3301      	adds	r3, #1
 800f42a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	781a      	ldrb	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	3301      	adds	r3, #1
 800f438:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f7ff fa92 	bl	800e964 <SWAPBYTE>
 800f440:	4603      	mov	r3, r0
 800f442:	461a      	mov	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	3301      	adds	r3, #1
 800f44c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	3301      	adds	r3, #1
 800f452:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f7ff fa85 	bl	800e964 <SWAPBYTE>
 800f45a:	4603      	mov	r3, r0
 800f45c:	461a      	mov	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3301      	adds	r3, #1
 800f466:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	3301      	adds	r3, #1
 800f46c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f7ff fa78 	bl	800e964 <SWAPBYTE>
 800f474:	4603      	mov	r3, r0
 800f476:	461a      	mov	r2, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	80da      	strh	r2, [r3, #6]
}
 800f47c:	bf00      	nop
 800f47e:	3710      	adds	r7, #16
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}

0800f484 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f48e:	2180      	movs	r1, #128	; 0x80
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 fc6f 	bl	800fd74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f496:	2100      	movs	r1, #0
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 fc6b 	bl	800fd74 <USBD_LL_StallEP>
}
 800f49e:	bf00      	nop
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b086      	sub	sp, #24
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	60f8      	str	r0, [r7, #12]
 800f4ae:	60b9      	str	r1, [r7, #8]
 800f4b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d036      	beq.n	800f52a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f4c0:	6938      	ldr	r0, [r7, #16]
 800f4c2:	f000 f836 	bl	800f532 <USBD_GetLen>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	005b      	lsls	r3, r3, #1
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f4d4:	7dfb      	ldrb	r3, [r7, #23]
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	4413      	add	r3, r2
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	7812      	ldrb	r2, [r2, #0]
 800f4de:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4e0:	7dfb      	ldrb	r3, [r7, #23]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f4e6:	7dfb      	ldrb	r3, [r7, #23]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	2203      	movs	r2, #3
 800f4ee:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4f0:	7dfb      	ldrb	r3, [r7, #23]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f4f6:	e013      	b.n	800f520 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f4f8:	7dfb      	ldrb	r3, [r7, #23]
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	693a      	ldr	r2, [r7, #16]
 800f500:	7812      	ldrb	r2, [r2, #0]
 800f502:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	3301      	adds	r3, #1
 800f508:	613b      	str	r3, [r7, #16]
    idx++;
 800f50a:	7dfb      	ldrb	r3, [r7, #23]
 800f50c:	3301      	adds	r3, #1
 800f50e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f510:	7dfb      	ldrb	r3, [r7, #23]
 800f512:	68ba      	ldr	r2, [r7, #8]
 800f514:	4413      	add	r3, r2
 800f516:	2200      	movs	r2, #0
 800f518:	701a      	strb	r2, [r3, #0]
    idx++;
 800f51a:	7dfb      	ldrb	r3, [r7, #23]
 800f51c:	3301      	adds	r3, #1
 800f51e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d1e7      	bne.n	800f4f8 <USBD_GetString+0x52>
 800f528:	e000      	b.n	800f52c <USBD_GetString+0x86>
    return;
 800f52a:	bf00      	nop
  }
}
 800f52c:	3718      	adds	r7, #24
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f532:	b480      	push	{r7}
 800f534:	b085      	sub	sp, #20
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f53a:	2300      	movs	r3, #0
 800f53c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f542:	e005      	b.n	800f550 <USBD_GetLen+0x1e>
  {
    len++;
 800f544:	7bfb      	ldrb	r3, [r7, #15]
 800f546:	3301      	adds	r3, #1
 800f548:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	3301      	adds	r3, #1
 800f54e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1f5      	bne.n	800f544 <USBD_GetLen+0x12>
  }

  return len;
 800f558:	7bfb      	ldrb	r3, [r7, #15]
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3714      	adds	r7, #20
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr

0800f566 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b084      	sub	sp, #16
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	60f8      	str	r0, [r7, #12]
 800f56e:	60b9      	str	r1, [r7, #8]
 800f570:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2202      	movs	r2, #2
 800f576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	68ba      	ldr	r2, [r7, #8]
 800f58a:	2100      	movs	r1, #0
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f000 fc7b 	bl	800fe88 <USBD_LL_Transmit>

  return USBD_OK;
 800f592:	2300      	movs	r3, #0
}
 800f594:	4618      	mov	r0, r3
 800f596:	3710      	adds	r7, #16
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	68ba      	ldr	r2, [r7, #8]
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f000 fc6a 	bl	800fe88 <USBD_LL_Transmit>

  return USBD_OK;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b084      	sub	sp, #16
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	60f8      	str	r0, [r7, #12]
 800f5c6:	60b9      	str	r1, [r7, #8]
 800f5c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2203      	movs	r2, #3
 800f5ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f000 fc6e 	bl	800feca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5ee:	2300      	movs	r3, #0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3710      	adds	r7, #16
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	68ba      	ldr	r2, [r7, #8]
 800f608:	2100      	movs	r1, #0
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f000 fc5d 	bl	800feca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b082      	sub	sp, #8
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2204      	movs	r2, #4
 800f626:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f62a:	2300      	movs	r3, #0
 800f62c:	2200      	movs	r2, #0
 800f62e:	2100      	movs	r1, #0
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 fc29 	bl	800fe88 <USBD_LL_Transmit>

  return USBD_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2205      	movs	r2, #5
 800f64c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f650:	2300      	movs	r3, #0
 800f652:	2200      	movs	r2, #0
 800f654:	2100      	movs	r1, #0
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f000 fc37 	bl	800feca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3708      	adds	r7, #8
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
	...

0800f668 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f66c:	2200      	movs	r2, #0
 800f66e:	4912      	ldr	r1, [pc, #72]	; (800f6b8 <MX_USB_Device_Init+0x50>)
 800f670:	4812      	ldr	r0, [pc, #72]	; (800f6bc <MX_USB_Device_Init+0x54>)
 800f672:	f7fe fed9 	bl	800e428 <USBD_Init>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d001      	beq.n	800f680 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800f67c:	f7f2 fcec 	bl	8002058 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f680:	490f      	ldr	r1, [pc, #60]	; (800f6c0 <MX_USB_Device_Init+0x58>)
 800f682:	480e      	ldr	r0, [pc, #56]	; (800f6bc <MX_USB_Device_Init+0x54>)
 800f684:	f7fe ff00 	bl	800e488 <USBD_RegisterClass>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d001      	beq.n	800f692 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800f68e:	f7f2 fce3 	bl	8002058 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f692:	490c      	ldr	r1, [pc, #48]	; (800f6c4 <MX_USB_Device_Init+0x5c>)
 800f694:	4809      	ldr	r0, [pc, #36]	; (800f6bc <MX_USB_Device_Init+0x54>)
 800f696:	f7fe fe51 	bl	800e33c <USBD_CDC_RegisterInterface>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800f6a0:	f7f2 fcda 	bl	8002058 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f6a4:	4805      	ldr	r0, [pc, #20]	; (800f6bc <MX_USB_Device_Init+0x54>)
 800f6a6:	f7fe ff16 	bl	800e4d6 <USBD_Start>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800f6b0:	f7f2 fcd2 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f6b4:	bf00      	nop
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	20000130 	.word	0x20000130
 800f6bc:	20000ac0 	.word	0x20000ac0
 800f6c0:	20000018 	.word	0x20000018
 800f6c4:	2000011c 	.word	0x2000011c

0800f6c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	4905      	ldr	r1, [pc, #20]	; (800f6e4 <CDC_Init_FS+0x1c>)
 800f6d0:	4805      	ldr	r0, [pc, #20]	; (800f6e8 <CDC_Init_FS+0x20>)
 800f6d2:	f7fe fe48 	bl	800e366 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f6d6:	4905      	ldr	r1, [pc, #20]	; (800f6ec <CDC_Init_FS+0x24>)
 800f6d8:	4803      	ldr	r0, [pc, #12]	; (800f6e8 <CDC_Init_FS+0x20>)
 800f6da:	f7fe fe62 	bl	800e3a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f6de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	20001590 	.word	0x20001590
 800f6e8:	20000ac0 	.word	0x20000ac0
 800f6ec:	20000d90 	.word	0x20000d90

0800f6f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f6f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f700:	b480      	push	{r7}
 800f702:	b083      	sub	sp, #12
 800f704:	af00      	add	r7, sp, #0
 800f706:	4603      	mov	r3, r0
 800f708:	6039      	str	r1, [r7, #0]
 800f70a:	71fb      	strb	r3, [r7, #7]
 800f70c:	4613      	mov	r3, r2
 800f70e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f710:	79fb      	ldrb	r3, [r7, #7]
 800f712:	2b23      	cmp	r3, #35	; 0x23
 800f714:	d84a      	bhi.n	800f7ac <CDC_Control_FS+0xac>
 800f716:	a201      	add	r2, pc, #4	; (adr r2, 800f71c <CDC_Control_FS+0x1c>)
 800f718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f71c:	0800f7ad 	.word	0x0800f7ad
 800f720:	0800f7ad 	.word	0x0800f7ad
 800f724:	0800f7ad 	.word	0x0800f7ad
 800f728:	0800f7ad 	.word	0x0800f7ad
 800f72c:	0800f7ad 	.word	0x0800f7ad
 800f730:	0800f7ad 	.word	0x0800f7ad
 800f734:	0800f7ad 	.word	0x0800f7ad
 800f738:	0800f7ad 	.word	0x0800f7ad
 800f73c:	0800f7ad 	.word	0x0800f7ad
 800f740:	0800f7ad 	.word	0x0800f7ad
 800f744:	0800f7ad 	.word	0x0800f7ad
 800f748:	0800f7ad 	.word	0x0800f7ad
 800f74c:	0800f7ad 	.word	0x0800f7ad
 800f750:	0800f7ad 	.word	0x0800f7ad
 800f754:	0800f7ad 	.word	0x0800f7ad
 800f758:	0800f7ad 	.word	0x0800f7ad
 800f75c:	0800f7ad 	.word	0x0800f7ad
 800f760:	0800f7ad 	.word	0x0800f7ad
 800f764:	0800f7ad 	.word	0x0800f7ad
 800f768:	0800f7ad 	.word	0x0800f7ad
 800f76c:	0800f7ad 	.word	0x0800f7ad
 800f770:	0800f7ad 	.word	0x0800f7ad
 800f774:	0800f7ad 	.word	0x0800f7ad
 800f778:	0800f7ad 	.word	0x0800f7ad
 800f77c:	0800f7ad 	.word	0x0800f7ad
 800f780:	0800f7ad 	.word	0x0800f7ad
 800f784:	0800f7ad 	.word	0x0800f7ad
 800f788:	0800f7ad 	.word	0x0800f7ad
 800f78c:	0800f7ad 	.word	0x0800f7ad
 800f790:	0800f7ad 	.word	0x0800f7ad
 800f794:	0800f7ad 	.word	0x0800f7ad
 800f798:	0800f7ad 	.word	0x0800f7ad
 800f79c:	0800f7ad 	.word	0x0800f7ad
 800f7a0:	0800f7ad 	.word	0x0800f7ad
 800f7a4:	0800f7ad 	.word	0x0800f7ad
 800f7a8:	0800f7ad 	.word	0x0800f7ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f7ac:	bf00      	nop
  }

  return (USBD_OK);
 800f7ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f7c6:	6879      	ldr	r1, [r7, #4]
 800f7c8:	4805      	ldr	r0, [pc, #20]	; (800f7e0 <CDC_Receive_FS+0x24>)
 800f7ca:	f7fe fdea 	bl	800e3a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f7ce:	4804      	ldr	r0, [pc, #16]	; (800f7e0 <CDC_Receive_FS+0x24>)
 800f7d0:	f7fe fe00 	bl	800e3d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f7d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	20000ac0 	.word	0x20000ac0

0800f7e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b087      	sub	sp, #28
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f7f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	371c      	adds	r7, #28
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr
	...

0800f808 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	4603      	mov	r3, r0
 800f810:	6039      	str	r1, [r7, #0]
 800f812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	2212      	movs	r2, #18
 800f818:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f81a:	4b03      	ldr	r3, [pc, #12]	; (800f828 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr
 800f828:	20000150 	.word	0x20000150

0800f82c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	6039      	str	r1, [r7, #0]
 800f836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	2204      	movs	r2, #4
 800f83c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f83e:	4b03      	ldr	r3, [pc, #12]	; (800f84c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f840:	4618      	mov	r0, r3
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	20000164 	.word	0x20000164

0800f850 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	4603      	mov	r3, r0
 800f858:	6039      	str	r1, [r7, #0]
 800f85a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f85c:	79fb      	ldrb	r3, [r7, #7]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d105      	bne.n	800f86e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	4907      	ldr	r1, [pc, #28]	; (800f884 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f866:	4808      	ldr	r0, [pc, #32]	; (800f888 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f868:	f7ff fe1d 	bl	800f4a6 <USBD_GetString>
 800f86c:	e004      	b.n	800f878 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f86e:	683a      	ldr	r2, [r7, #0]
 800f870:	4904      	ldr	r1, [pc, #16]	; (800f884 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f872:	4805      	ldr	r0, [pc, #20]	; (800f888 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f874:	f7ff fe17 	bl	800f4a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f878:	4b02      	ldr	r3, [pc, #8]	; (800f884 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	20001d90 	.word	0x20001d90
 800f888:	08010370 	.word	0x08010370

0800f88c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	4603      	mov	r3, r0
 800f894:	6039      	str	r1, [r7, #0]
 800f896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f898:	683a      	ldr	r2, [r7, #0]
 800f89a:	4904      	ldr	r1, [pc, #16]	; (800f8ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f89c:	4804      	ldr	r0, [pc, #16]	; (800f8b0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f89e:	f7ff fe02 	bl	800f4a6 <USBD_GetString>
  return USBD_StrDesc;
 800f8a2:	4b02      	ldr	r3, [pc, #8]	; (800f8ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3708      	adds	r7, #8
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	20001d90 	.word	0x20001d90
 800f8b0:	08010388 	.word	0x08010388

0800f8b4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	6039      	str	r1, [r7, #0]
 800f8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	221a      	movs	r2, #26
 800f8c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f8c6:	f000 f843 	bl	800f950 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f8ca:	4b02      	ldr	r3, [pc, #8]	; (800f8d4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	20000168 	.word	0x20000168

0800f8d8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	4603      	mov	r3, r0
 800f8e0:	6039      	str	r1, [r7, #0]
 800f8e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f8e4:	79fb      	ldrb	r3, [r7, #7]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d105      	bne.n	800f8f6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f8ea:	683a      	ldr	r2, [r7, #0]
 800f8ec:	4907      	ldr	r1, [pc, #28]	; (800f90c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f8ee:	4808      	ldr	r0, [pc, #32]	; (800f910 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f8f0:	f7ff fdd9 	bl	800f4a6 <USBD_GetString>
 800f8f4:	e004      	b.n	800f900 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f8f6:	683a      	ldr	r2, [r7, #0]
 800f8f8:	4904      	ldr	r1, [pc, #16]	; (800f90c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f8fa:	4805      	ldr	r0, [pc, #20]	; (800f910 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f8fc:	f7ff fdd3 	bl	800f4a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f900:	4b02      	ldr	r3, [pc, #8]	; (800f90c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	20001d90 	.word	0x20001d90
 800f910:	0801039c 	.word	0x0801039c

0800f914 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	4603      	mov	r3, r0
 800f91c:	6039      	str	r1, [r7, #0]
 800f91e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f920:	79fb      	ldrb	r3, [r7, #7]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d105      	bne.n	800f932 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f926:	683a      	ldr	r2, [r7, #0]
 800f928:	4907      	ldr	r1, [pc, #28]	; (800f948 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f92a:	4808      	ldr	r0, [pc, #32]	; (800f94c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f92c:	f7ff fdbb 	bl	800f4a6 <USBD_GetString>
 800f930:	e004      	b.n	800f93c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	4904      	ldr	r1, [pc, #16]	; (800f948 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f936:	4805      	ldr	r0, [pc, #20]	; (800f94c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f938:	f7ff fdb5 	bl	800f4a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f93c:	4b02      	ldr	r3, [pc, #8]	; (800f948 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	20001d90 	.word	0x20001d90
 800f94c:	080103a8 	.word	0x080103a8

0800f950 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f956:	4b0f      	ldr	r3, [pc, #60]	; (800f994 <Get_SerialNum+0x44>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f95c:	4b0e      	ldr	r3, [pc, #56]	; (800f998 <Get_SerialNum+0x48>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f962:	4b0e      	ldr	r3, [pc, #56]	; (800f99c <Get_SerialNum+0x4c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4413      	add	r3, r2
 800f96e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d009      	beq.n	800f98a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f976:	2208      	movs	r2, #8
 800f978:	4909      	ldr	r1, [pc, #36]	; (800f9a0 <Get_SerialNum+0x50>)
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f000 f814 	bl	800f9a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f980:	2204      	movs	r2, #4
 800f982:	4908      	ldr	r1, [pc, #32]	; (800f9a4 <Get_SerialNum+0x54>)
 800f984:	68b8      	ldr	r0, [r7, #8]
 800f986:	f000 f80f 	bl	800f9a8 <IntToUnicode>
  }
}
 800f98a:	bf00      	nop
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	1fff7590 	.word	0x1fff7590
 800f998:	1fff7594 	.word	0x1fff7594
 800f99c:	1fff7598 	.word	0x1fff7598
 800f9a0:	2000016a 	.word	0x2000016a
 800f9a4:	2000017a 	.word	0x2000017a

0800f9a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b087      	sub	sp, #28
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	75fb      	strb	r3, [r7, #23]
 800f9be:	e027      	b.n	800fa10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	0f1b      	lsrs	r3, r3, #28
 800f9c4:	2b09      	cmp	r3, #9
 800f9c6:	d80b      	bhi.n	800f9e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	0f1b      	lsrs	r3, r3, #28
 800f9cc:	b2da      	uxtb	r2, r3
 800f9ce:	7dfb      	ldrb	r3, [r7, #23]
 800f9d0:	005b      	lsls	r3, r3, #1
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	440b      	add	r3, r1
 800f9d8:	3230      	adds	r2, #48	; 0x30
 800f9da:	b2d2      	uxtb	r2, r2
 800f9dc:	701a      	strb	r2, [r3, #0]
 800f9de:	e00a      	b.n	800f9f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	0f1b      	lsrs	r3, r3, #28
 800f9e4:	b2da      	uxtb	r2, r3
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	005b      	lsls	r3, r3, #1
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	440b      	add	r3, r1
 800f9f0:	3237      	adds	r2, #55	; 0x37
 800f9f2:	b2d2      	uxtb	r2, r2
 800f9f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	011b      	lsls	r3, r3, #4
 800f9fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
 800f9fe:	005b      	lsls	r3, r3, #1
 800fa00:	3301      	adds	r3, #1
 800fa02:	68ba      	ldr	r2, [r7, #8]
 800fa04:	4413      	add	r3, r2
 800fa06:	2200      	movs	r2, #0
 800fa08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa0a:	7dfb      	ldrb	r3, [r7, #23]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	75fb      	strb	r3, [r7, #23]
 800fa10:	7dfa      	ldrb	r2, [r7, #23]
 800fa12:	79fb      	ldrb	r3, [r7, #7]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d3d3      	bcc.n	800f9c0 <IntToUnicode+0x18>
  }
}
 800fa18:	bf00      	nop
 800fa1a:	bf00      	nop
 800fa1c:	371c      	adds	r7, #28
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
	...

0800fa28 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b098      	sub	sp, #96	; 0x60
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fa30:	f107 030c 	add.w	r3, r7, #12
 800fa34:	2254      	movs	r2, #84	; 0x54
 800fa36:	2100      	movs	r1, #0
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f000 fc81 	bl	8010340 <memset>
  if(pcdHandle->Instance==USB)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a15      	ldr	r2, [pc, #84]	; (800fa98 <HAL_PCD_MspInit+0x70>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d123      	bne.n	800fa90 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fa48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800fa4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa52:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fa54:	f107 030c 	add.w	r3, r7, #12
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7f9 f957 	bl	8008d0c <HAL_RCCEx_PeriphCLKConfig>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d001      	beq.n	800fa68 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800fa64:	f7f2 faf8 	bl	8002058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800fa68:	4b0c      	ldr	r3, [pc, #48]	; (800fa9c <HAL_PCD_MspInit+0x74>)
 800fa6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa6c:	4a0b      	ldr	r2, [pc, #44]	; (800fa9c <HAL_PCD_MspInit+0x74>)
 800fa6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fa72:	6593      	str	r3, [r2, #88]	; 0x58
 800fa74:	4b09      	ldr	r3, [pc, #36]	; (800fa9c <HAL_PCD_MspInit+0x74>)
 800fa76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa7c:	60bb      	str	r3, [r7, #8]
 800fa7e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800fa80:	2200      	movs	r2, #0
 800fa82:	2100      	movs	r1, #0
 800fa84:	2014      	movs	r0, #20
 800fa86:	f7f4 ff48 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800fa8a:	2014      	movs	r0, #20
 800fa8c:	f7f4 ff5f 	bl	800494e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800fa90:	bf00      	nop
 800fa92:	3760      	adds	r7, #96	; 0x60
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	40005c00 	.word	0x40005c00
 800fa9c:	40021000 	.word	0x40021000

0800faa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800fab4:	4619      	mov	r1, r3
 800fab6:	4610      	mov	r0, r2
 800fab8:	f7fe fd58 	bl	800e56c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800fabc:	bf00      	nop
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	460b      	mov	r3, r1
 800face:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800fad6:	78fa      	ldrb	r2, [r7, #3]
 800fad8:	6879      	ldr	r1, [r7, #4]
 800fada:	4613      	mov	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	4413      	add	r3, r2
 800fae0:	00db      	lsls	r3, r3, #3
 800fae2:	440b      	add	r3, r1
 800fae4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	78fb      	ldrb	r3, [r7, #3]
 800faec:	4619      	mov	r1, r3
 800faee:	f7fe fd92 	bl	800e616 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800faf2:	bf00      	nop
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b082      	sub	sp, #8
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	460b      	mov	r3, r1
 800fb04:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800fb0c:	78fa      	ldrb	r2, [r7, #3]
 800fb0e:	6879      	ldr	r1, [r7, #4]
 800fb10:	4613      	mov	r3, r2
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	4413      	add	r3, r2
 800fb16:	00db      	lsls	r3, r3, #3
 800fb18:	440b      	add	r3, r1
 800fb1a:	333c      	adds	r3, #60	; 0x3c
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	78fb      	ldrb	r3, [r7, #3]
 800fb20:	4619      	mov	r1, r3
 800fb22:	f7fe fddb 	bl	800e6dc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b082      	sub	sp, #8
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fe feef 	bl	800e920 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800fb42:	bf00      	nop
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b084      	sub	sp, #16
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fb52:	2301      	movs	r3, #1
 800fb54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d001      	beq.n	800fb62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fb5e:	f7f2 fa7b 	bl	8002058 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fb68:	7bfa      	ldrb	r2, [r7, #15]
 800fb6a:	4611      	mov	r1, r2
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fe fe99 	bl	800e8a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fe fe45 	bl	800e808 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800fb7e:	bf00      	nop
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
	...

0800fb88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fe fe94 	bl	800e8c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d005      	beq.n	800fbb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fba4:	4b04      	ldr	r3, [pc, #16]	; (800fbb8 <HAL_PCD_SuspendCallback+0x30>)
 800fba6:	691b      	ldr	r3, [r3, #16]
 800fba8:	4a03      	ldr	r2, [pc, #12]	; (800fbb8 <HAL_PCD_SuspendCallback+0x30>)
 800fbaa:	f043 0306 	orr.w	r3, r3, #6
 800fbae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800fbb0:	bf00      	nop
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	e000ed00 	.word	0xe000ed00

0800fbbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	699b      	ldr	r3, [r3, #24]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d007      	beq.n	800fbdc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fbcc:	4b08      	ldr	r3, [pc, #32]	; (800fbf0 <HAL_PCD_ResumeCallback+0x34>)
 800fbce:	691b      	ldr	r3, [r3, #16]
 800fbd0:	4a07      	ldr	r2, [pc, #28]	; (800fbf0 <HAL_PCD_ResumeCallback+0x34>)
 800fbd2:	f023 0306 	bic.w	r3, r3, #6
 800fbd6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fbd8:	f000 f9fa 	bl	800ffd0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7fe fe84 	bl	800e8f0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800fbe8:	bf00      	nop
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	e000ed00 	.word	0xe000ed00

0800fbf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800fbfc:	4a2b      	ldr	r2, [pc, #172]	; (800fcac <USBD_LL_Init+0xb8>)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	4a29      	ldr	r2, [pc, #164]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800fc0c:	4b27      	ldr	r3, [pc, #156]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc0e:	4a28      	ldr	r2, [pc, #160]	; (800fcb0 <USBD_LL_Init+0xbc>)
 800fc10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fc12:	4b26      	ldr	r3, [pc, #152]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc14:	2208      	movs	r2, #8
 800fc16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fc18:	4b24      	ldr	r3, [pc, #144]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc1a:	2202      	movs	r2, #2
 800fc1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fc1e:	4b23      	ldr	r3, [pc, #140]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc20:	2202      	movs	r2, #2
 800fc22:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fc24:	4b21      	ldr	r3, [pc, #132]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc26:	2200      	movs	r2, #0
 800fc28:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fc2a:	4b20      	ldr	r3, [pc, #128]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800fc30:	4b1e      	ldr	r3, [pc, #120]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800fc36:	4b1d      	ldr	r3, [pc, #116]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc38:	2200      	movs	r2, #0
 800fc3a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fc3c:	481b      	ldr	r0, [pc, #108]	; (800fcac <USBD_LL_Init+0xb8>)
 800fc3e:	f7f6 fc88 	bl	8006552 <HAL_PCD_Init>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800fc48:	f7f2 fa06 	bl	8002058 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc52:	2318      	movs	r3, #24
 800fc54:	2200      	movs	r2, #0
 800fc56:	2100      	movs	r1, #0
 800fc58:	f7f8 f941 	bl	8007ede <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc62:	2358      	movs	r3, #88	; 0x58
 800fc64:	2200      	movs	r2, #0
 800fc66:	2180      	movs	r1, #128	; 0x80
 800fc68:	f7f8 f939 	bl	8007ede <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc72:	23c0      	movs	r3, #192	; 0xc0
 800fc74:	2200      	movs	r2, #0
 800fc76:	2181      	movs	r1, #129	; 0x81
 800fc78:	f7f8 f931 	bl	8007ede <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc82:	f44f 7388 	mov.w	r3, #272	; 0x110
 800fc86:	2200      	movs	r2, #0
 800fc88:	2101      	movs	r1, #1
 800fc8a:	f7f8 f928 	bl	8007ede <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc98:	2200      	movs	r2, #0
 800fc9a:	2182      	movs	r1, #130	; 0x82
 800fc9c:	f7f8 f91f 	bl	8007ede <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3708      	adds	r7, #8
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	20001f90 	.word	0x20001f90
 800fcb0:	40005c00 	.word	0x40005c00

0800fcb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7f6 fd26 	bl	800671c <HAL_PCD_Start>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcd4:	7bfb      	ldrb	r3, [r7, #15]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f000 f980 	bl	800ffdc <USBD_Get_USB_Status>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fce0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}

0800fcea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fcea:	b580      	push	{r7, lr}
 800fcec:	b084      	sub	sp, #16
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	70fb      	strb	r3, [r7, #3]
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	70bb      	strb	r3, [r7, #2]
 800fd00:	4613      	mov	r3, r2
 800fd02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd04:	2300      	movs	r3, #0
 800fd06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fd12:	78bb      	ldrb	r3, [r7, #2]
 800fd14:	883a      	ldrh	r2, [r7, #0]
 800fd16:	78f9      	ldrb	r1, [r7, #3]
 800fd18:	f7f6 fe6e 	bl	80069f8 <HAL_PCD_EP_Open>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f000 f95a 	bl	800ffdc <USBD_Get_USB_Status>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3710      	adds	r7, #16
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}

0800fd36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b084      	sub	sp, #16
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
 800fd3e:	460b      	mov	r3, r1
 800fd40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd42:	2300      	movs	r3, #0
 800fd44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd46:	2300      	movs	r3, #0
 800fd48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fd50:	78fa      	ldrb	r2, [r7, #3]
 800fd52:	4611      	mov	r1, r2
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7f6 feb5 	bl	8006ac4 <HAL_PCD_EP_Close>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd5e:	7bfb      	ldrb	r3, [r7, #15]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f000 f93b 	bl	800ffdc <USBD_Get_USB_Status>
 800fd66:	4603      	mov	r3, r0
 800fd68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3710      	adds	r7, #16
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd80:	2300      	movs	r3, #0
 800fd82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd84:	2300      	movs	r3, #0
 800fd86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fd8e:	78fa      	ldrb	r2, [r7, #3]
 800fd90:	4611      	mov	r1, r2
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7f6 ff76 	bl	8006c84 <HAL_PCD_EP_SetStall>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd9c:	7bfb      	ldrb	r3, [r7, #15]
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f000 f91c 	bl	800ffdc <USBD_Get_USB_Status>
 800fda4:	4603      	mov	r3, r0
 800fda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b084      	sub	sp, #16
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	460b      	mov	r3, r1
 800fdbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fdcc:	78fa      	ldrb	r2, [r7, #3]
 800fdce:	4611      	mov	r1, r2
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7f6 ffa9 	bl	8006d28 <HAL_PCD_EP_ClrStall>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdda:	7bfb      	ldrb	r3, [r7, #15]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f000 f8fd 	bl	800ffdc <USBD_Get_USB_Status>
 800fde2:	4603      	mov	r3, r0
 800fde4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fde6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3710      	adds	r7, #16
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b085      	sub	sp, #20
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fe02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fe04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	da0c      	bge.n	800fe26 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fe0c:	78fb      	ldrb	r3, [r7, #3]
 800fe0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe12:	68f9      	ldr	r1, [r7, #12]
 800fe14:	1c5a      	adds	r2, r3, #1
 800fe16:	4613      	mov	r3, r2
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4413      	add	r3, r2
 800fe1c:	00db      	lsls	r3, r3, #3
 800fe1e:	440b      	add	r3, r1
 800fe20:	3302      	adds	r3, #2
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	e00b      	b.n	800fe3e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fe26:	78fb      	ldrb	r3, [r7, #3]
 800fe28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe2c:	68f9      	ldr	r1, [r7, #12]
 800fe2e:	4613      	mov	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	00db      	lsls	r3, r3, #3
 800fe36:	440b      	add	r3, r1
 800fe38:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800fe3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3714      	adds	r7, #20
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr

0800fe4a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fe4a:	b580      	push	{r7, lr}
 800fe4c:	b084      	sub	sp, #16
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	6078      	str	r0, [r7, #4]
 800fe52:	460b      	mov	r3, r1
 800fe54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe56:	2300      	movs	r3, #0
 800fe58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fe64:	78fa      	ldrb	r2, [r7, #3]
 800fe66:	4611      	mov	r1, r2
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7f6 fda0 	bl	80069ae <HAL_PCD_SetAddress>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe72:	7bfb      	ldrb	r3, [r7, #15]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f000 f8b1 	bl	800ffdc <USBD_Get_USB_Status>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3710      	adds	r7, #16
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b086      	sub	sp, #24
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	607a      	str	r2, [r7, #4]
 800fe92:	603b      	str	r3, [r7, #0]
 800fe94:	460b      	mov	r3, r1
 800fe96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fea6:	7af9      	ldrb	r1, [r7, #11]
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	f7f6 fea7 	bl	8006bfe <HAL_PCD_EP_Transmit>
 800feb0:	4603      	mov	r3, r0
 800feb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800feb4:	7dfb      	ldrb	r3, [r7, #23]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f000 f890 	bl	800ffdc <USBD_Get_USB_Status>
 800febc:	4603      	mov	r3, r0
 800febe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fec0:	7dbb      	ldrb	r3, [r7, #22]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3718      	adds	r7, #24
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}

0800feca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800feca:	b580      	push	{r7, lr}
 800fecc:	b086      	sub	sp, #24
 800fece:	af00      	add	r7, sp, #0
 800fed0:	60f8      	str	r0, [r7, #12]
 800fed2:	607a      	str	r2, [r7, #4]
 800fed4:	603b      	str	r3, [r7, #0]
 800fed6:	460b      	mov	r3, r1
 800fed8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800feda:	2300      	movs	r3, #0
 800fedc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fede:	2300      	movs	r3, #0
 800fee0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fee8:	7af9      	ldrb	r1, [r7, #11]
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	687a      	ldr	r2, [r7, #4]
 800feee:	f7f6 fe31 	bl	8006b54 <HAL_PCD_EP_Receive>
 800fef2:	4603      	mov	r3, r0
 800fef4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fef6:	7dfb      	ldrb	r3, [r7, #23]
 800fef8:	4618      	mov	r0, r3
 800fefa:	f000 f86f 	bl	800ffdc <USBD_Get_USB_Status>
 800fefe:	4603      	mov	r3, r0
 800ff00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff02:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3718      	adds	r7, #24
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	460b      	mov	r3, r1
 800ff16:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff1e:	78fa      	ldrb	r2, [r7, #3]
 800ff20:	4611      	mov	r1, r2
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7f6 fe53 	bl	8006bce <HAL_PCD_EP_GetRxCount>
 800ff28:	4603      	mov	r3, r0
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
	...

0800ff34 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ff40:	78fb      	ldrb	r3, [r7, #3]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d002      	beq.n	800ff4c <HAL_PCDEx_LPM_Callback+0x18>
 800ff46:	2b01      	cmp	r3, #1
 800ff48:	d013      	beq.n	800ff72 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ff4a:	e023      	b.n	800ff94 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	699b      	ldr	r3, [r3, #24]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d007      	beq.n	800ff64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ff54:	f000 f83c 	bl	800ffd0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ff58:	4b10      	ldr	r3, [pc, #64]	; (800ff9c <HAL_PCDEx_LPM_Callback+0x68>)
 800ff5a:	691b      	ldr	r3, [r3, #16]
 800ff5c:	4a0f      	ldr	r2, [pc, #60]	; (800ff9c <HAL_PCDEx_LPM_Callback+0x68>)
 800ff5e:	f023 0306 	bic.w	r3, r3, #6
 800ff62:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7fe fcc0 	bl	800e8f0 <USBD_LL_Resume>
    break;
 800ff70:	e010      	b.n	800ff94 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7fe fca3 	bl	800e8c4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	699b      	ldr	r3, [r3, #24]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d005      	beq.n	800ff92 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ff86:	4b05      	ldr	r3, [pc, #20]	; (800ff9c <HAL_PCDEx_LPM_Callback+0x68>)
 800ff88:	691b      	ldr	r3, [r3, #16]
 800ff8a:	4a04      	ldr	r2, [pc, #16]	; (800ff9c <HAL_PCDEx_LPM_Callback+0x68>)
 800ff8c:	f043 0306 	orr.w	r3, r3, #6
 800ff90:	6113      	str	r3, [r2, #16]
    break;
 800ff92:	bf00      	nop
}
 800ff94:	bf00      	nop
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	e000ed00 	.word	0xe000ed00

0800ffa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ffa8:	4b03      	ldr	r3, [pc, #12]	; (800ffb8 <USBD_static_malloc+0x18>)
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	370c      	adds	r7, #12
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	20002284 	.word	0x20002284

0800ffbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]

}
 800ffc4:	bf00      	nop
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ffd4:	f7f1 fff6 	bl	8001fc4 <SystemClock_Config>
}
 800ffd8:	bf00      	nop
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b085      	sub	sp, #20
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ffea:	79fb      	ldrb	r3, [r7, #7]
 800ffec:	2b03      	cmp	r3, #3
 800ffee:	d817      	bhi.n	8010020 <USBD_Get_USB_Status+0x44>
 800fff0:	a201      	add	r2, pc, #4	; (adr r2, 800fff8 <USBD_Get_USB_Status+0x1c>)
 800fff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff6:	bf00      	nop
 800fff8:	08010009 	.word	0x08010009
 800fffc:	0801000f 	.word	0x0801000f
 8010000:	08010015 	.word	0x08010015
 8010004:	0801001b 	.word	0x0801001b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010008:	2300      	movs	r3, #0
 801000a:	73fb      	strb	r3, [r7, #15]
    break;
 801000c:	e00b      	b.n	8010026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801000e:	2303      	movs	r3, #3
 8010010:	73fb      	strb	r3, [r7, #15]
    break;
 8010012:	e008      	b.n	8010026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010014:	2301      	movs	r3, #1
 8010016:	73fb      	strb	r3, [r7, #15]
    break;
 8010018:	e005      	b.n	8010026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801001a:	2303      	movs	r3, #3
 801001c:	73fb      	strb	r3, [r7, #15]
    break;
 801001e:	e002      	b.n	8010026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010020:	2303      	movs	r3, #3
 8010022:	73fb      	strb	r3, [r7, #15]
    break;
 8010024:	bf00      	nop
  }
  return usb_status;
 8010026:	7bfb      	ldrb	r3, [r7, #15]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3714      	adds	r7, #20
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <pca9685_write_u8>:


// -------------- Public function implementations --------------

HAL_StatusTypeDef pca9685_write_u8(pca9685_handle_t *handle, uint8_t address, uint8_t value)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b086      	sub	sp, #24
 8010038:	af02      	add	r7, sp, #8
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	460b      	mov	r3, r1
 801003e:	70fb      	strb	r3, [r7, #3]
 8010040:	4613      	mov	r3, r2
 8010042:	70bb      	strb	r3, [r7, #2]
	uint8_t data[] = {address, value};
 8010044:	78fb      	ldrb	r3, [r7, #3]
 8010046:	733b      	strb	r3, [r7, #12]
 8010048:	78bb      	ldrb	r3, [r7, #2]
 801004a:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA_I2C_TIMEOUT);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6818      	ldr	r0, [r3, #0]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	8899      	ldrh	r1, [r3, #4]
 8010054:	f107 020c 	add.w	r2, r7, #12
 8010058:	2301      	movs	r3, #1
 801005a:	9300      	str	r3, [sp, #0]
 801005c:	2302      	movs	r3, #2
 801005e:	f7f5 fd7f 	bl	8005b60 <HAL_I2C_Master_Transmit>
 8010062:	4603      	mov	r3, r0
}
 8010064:	4618      	mov	r0, r3
 8010066:	3710      	adds	r7, #16
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <pca9685_read_u8>:

HAL_StatusTypeDef pca9685_read_u8(pca9685_handle_t *handle, uint8_t address, uint8_t *data)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b086      	sub	sp, #24
 8010070:	af02      	add	r7, sp, #8
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	460b      	mov	r3, r1
 8010076:	607a      	str	r2, [r7, #4]
 8010078:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &address, 1, PCA_I2C_TIMEOUT);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6818      	ldr	r0, [r3, #0]
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	8899      	ldrh	r1, [r3, #4]
 8010082:	f107 020b 	add.w	r2, r7, #11
 8010086:	2301      	movs	r3, #1
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	2301      	movs	r3, #1
 801008c:	f7f5 fd68 	bl	8005b60 <HAL_I2C_Master_Transmit>
	return HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, data, 1, PCA_I2C_TIMEOUT);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6818      	ldr	r0, [r3, #0]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	8899      	ldrh	r1, [r3, #4]
 8010098:	2301      	movs	r3, #1
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	2301      	movs	r3, #1
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	f7f5 fe52 	bl	8005d48 <HAL_I2C_Master_Receive>
 80100a4:	4603      	mov	r3, r0
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
	...

080100b0 <pca9685_init>:

void pca9685_init(pca9685_handle_t *handle){
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]

	//assert(handle->i2c_handle != NULL);
	pca9685_reset(handle);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 f811 	bl	80100e0 <pca9685_reset>
	pca9685_setPrescaleFreq(handle, 1000);
 80100be:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80100d8 <pca9685_init+0x28>
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 f81c 	bl	8010100 <pca9685_setPrescaleFreq>
	pca9685_setOscFreq(handle, 25000000);
 80100c8:	4904      	ldr	r1, [pc, #16]	; (80100dc <pca9685_init+0x2c>)
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f000 f8c4 	bl	8010258 <pca9685_setOscFreq>
}
 80100d0:	bf00      	nop
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	447a0000 	.word	0x447a0000
 80100dc:	017d7840 	.word	0x017d7840

080100e0 <pca9685_reset>:

void pca9685_reset(pca9685_handle_t *handle) {
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
	pca9685_write_u8(handle, PCA_REG_MODE1, 0x80);
 80100e8:	2280      	movs	r2, #128	; 0x80
 80100ea:	2100      	movs	r1, #0
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f7ff ffa1 	bl	8010034 <pca9685_write_u8>
	HAL_Delay(10);
 80100f2:	200a      	movs	r0, #10
 80100f4:	f7f3 fa0a 	bl	800350c <HAL_Delay>
}
 80100f8:	bf00      	nop
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <pca9685_setPrescaleFreq>:
  pca9685_read_u8(handle, PCA_REG_MODE1, &sleep);
  uint8_t wakeup = sleep & ~(0x10); // set sleep bit low
  pca9685_write_u8(handle, PCA_REG_MODE1, wakeup);
}

void pca9685_setPrescaleFreq(pca9685_handle_t *handle, float freq) {
 8010100:	b5b0      	push	{r4, r5, r7, lr}
 8010102:	b086      	sub	sp, #24
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	ed87 0a02 	vstr	s0, [r7, #8]

  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
 801010c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011c:	d502      	bpl.n	8010124 <pca9685_setPrescaleFreq+0x24>
    freq = 1;
 801011e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010122:	60bb      	str	r3, [r7, #8]
  if (freq > 3500)
 8010124:	edd7 7a02 	vldr	s15, [r7, #8]
 8010128:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8010238 <pca9685_setPrescaleFreq+0x138>
 801012c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010134:	dd01      	ble.n	801013a <pca9685_setPrescaleFreq+0x3a>
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
 8010136:	4b41      	ldr	r3, [pc, #260]	; (801023c <pca9685_setPrescaleFreq+0x13c>)
 8010138:	60bb      	str	r3, [r7, #8]

  float prescalevel = ((handle->osc_freq / (freq * 4096.0)) + 0.5) - 1;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	689b      	ldr	r3, [r3, #8]
 801013e:	4618      	mov	r0, r3
 8010140:	f7f0 f9ac 	bl	800049c <__aeabi_ui2d>
 8010144:	4604      	mov	r4, r0
 8010146:	460d      	mov	r5, r1
 8010148:	68b8      	ldr	r0, [r7, #8]
 801014a:	f7f0 f9c9 	bl	80004e0 <__aeabi_f2d>
 801014e:	f04f 0200 	mov.w	r2, #0
 8010152:	4b3b      	ldr	r3, [pc, #236]	; (8010240 <pca9685_setPrescaleFreq+0x140>)
 8010154:	f7f0 fa1c 	bl	8000590 <__aeabi_dmul>
 8010158:	4602      	mov	r2, r0
 801015a:	460b      	mov	r3, r1
 801015c:	4620      	mov	r0, r4
 801015e:	4629      	mov	r1, r5
 8010160:	f7f0 fb40 	bl	80007e4 <__aeabi_ddiv>
 8010164:	4602      	mov	r2, r0
 8010166:	460b      	mov	r3, r1
 8010168:	4610      	mov	r0, r2
 801016a:	4619      	mov	r1, r3
 801016c:	f04f 0200 	mov.w	r2, #0
 8010170:	4b34      	ldr	r3, [pc, #208]	; (8010244 <pca9685_setPrescaleFreq+0x144>)
 8010172:	f7f0 f857 	bl	8000224 <__adddf3>
 8010176:	4602      	mov	r2, r0
 8010178:	460b      	mov	r3, r1
 801017a:	4610      	mov	r0, r2
 801017c:	4619      	mov	r1, r3
 801017e:	f04f 0200 	mov.w	r2, #0
 8010182:	4b31      	ldr	r3, [pc, #196]	; (8010248 <pca9685_setPrescaleFreq+0x148>)
 8010184:	f7f0 f84c 	bl	8000220 <__aeabi_dsub>
 8010188:	4602      	mov	r2, r0
 801018a:	460b      	mov	r3, r1
 801018c:	4610      	mov	r0, r2
 801018e:	4619      	mov	r1, r3
 8010190:	f7f0 fc10 	bl	80009b4 <__aeabi_d2f>
 8010194:	4603      	mov	r3, r0
 8010196:	617b      	str	r3, [r7, #20]
  if (prescalevel < 3)
 8010198:	edd7 7a05 	vldr	s15, [r7, #20]
 801019c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80101a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a8:	d501      	bpl.n	80101ae <pca9685_setPrescaleFreq+0xae>
    prescalevel = 3;
 80101aa:	4b28      	ldr	r3, [pc, #160]	; (801024c <pca9685_setPrescaleFreq+0x14c>)
 80101ac:	617b      	str	r3, [r7, #20]
  if (prescalevel > 255)
 80101ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80101b2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8010250 <pca9685_setPrescaleFreq+0x150>
 80101b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101be:	dd01      	ble.n	80101c4 <pca9685_setPrescaleFreq+0xc4>
    prescalevel = 255;
 80101c0:	4b24      	ldr	r3, [pc, #144]	; (8010254 <pca9685_setPrescaleFreq+0x154>)
 80101c2:	617b      	str	r3, [r7, #20]
  uint8_t prescale = (uint8_t)prescalevel;
 80101c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80101c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80101d0:	793b      	ldrb	r3, [r7, #4]
 80101d2:	74fb      	strb	r3, [r7, #19]


  uint8_t oldmode;
  pca9685_read_u8(handle, PCA_REG_MODE1, &oldmode);
 80101d4:	f107 0311 	add.w	r3, r7, #17
 80101d8:	461a      	mov	r2, r3
 80101da:	2100      	movs	r1, #0
 80101dc:	68f8      	ldr	r0, [r7, #12]
 80101de:	f7ff ff45 	bl	801006c <pca9685_read_u8>
  uint8_t newmode = (oldmode & ~0x80) | 0x10; // sleep
 80101e2:	7c7b      	ldrb	r3, [r7, #17]
 80101e4:	b25b      	sxtb	r3, r3
 80101e6:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80101ea:	b25b      	sxtb	r3, r3
 80101ec:	f043 0310 	orr.w	r3, r3, #16
 80101f0:	b25b      	sxtb	r3, r3
 80101f2:	74bb      	strb	r3, [r7, #18]
  pca9685_write_u8(handle, PCA_REG_MODE1, newmode);                             // go to sleep
 80101f4:	7cbb      	ldrb	r3, [r7, #18]
 80101f6:	461a      	mov	r2, r3
 80101f8:	2100      	movs	r1, #0
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f7ff ff1a 	bl	8010034 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_PRESCALE, prescale); // set the prescaler
 8010200:	7cfb      	ldrb	r3, [r7, #19]
 8010202:	461a      	mov	r2, r3
 8010204:	21fe      	movs	r1, #254	; 0xfe
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f7ff ff14 	bl	8010034 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_REG_MODE1, oldmode);
 801020c:	7c7b      	ldrb	r3, [r7, #17]
 801020e:	461a      	mov	r2, r3
 8010210:	2100      	movs	r1, #0
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f7ff ff0e 	bl	8010034 <pca9685_write_u8>
  HAL_Delay(10);
 8010218:	200a      	movs	r0, #10
 801021a:	f7f3 f977 	bl	800350c <HAL_Delay>
  // This sets the MODE1 register to turn on auto increment.
  pca9685_write_u8(handle, PCA_REG_MODE1, oldmode | 0x80 | 0x20);
 801021e:	7c7b      	ldrb	r3, [r7, #17]
 8010220:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8010224:	b2db      	uxtb	r3, r3
 8010226:	461a      	mov	r2, r3
 8010228:	2100      	movs	r1, #0
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f7ff ff02 	bl	8010034 <pca9685_write_u8>

}
 8010230:	bf00      	nop
 8010232:	3718      	adds	r7, #24
 8010234:	46bd      	mov	sp, r7
 8010236:	bdb0      	pop	{r4, r5, r7, pc}
 8010238:	455ac000 	.word	0x455ac000
 801023c:	455ac000 	.word	0x455ac000
 8010240:	40b00000 	.word	0x40b00000
 8010244:	3fe00000 	.word	0x3fe00000
 8010248:	3ff00000 	.word	0x3ff00000
 801024c:	40400000 	.word	0x40400000
 8010250:	437f0000 	.word	0x437f0000
 8010254:	437f0000 	.word	0x437f0000

08010258 <pca9685_setOscFreq>:

void pca9685_setOscFreq(pca9685_handle_t *handle, uint32_t freq) {
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
	handle->osc_freq = freq;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	683a      	ldr	r2, [r7, #0]
 8010266:	609a      	str	r2, [r3, #8]
}
 8010268:	bf00      	nop
 801026a:	370c      	adds	r7, #12
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr

08010274 <pca9685_setPWM>:

void pca9685_setPWM(pca9685_handle_t *handle, uint8_t num, uint16_t on, uint16_t off) {
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	4608      	mov	r0, r1
 801027e:	4611      	mov	r1, r2
 8010280:	461a      	mov	r2, r3
 8010282:	4603      	mov	r3, r0
 8010284:	72fb      	strb	r3, [r7, #11]
 8010286:	460b      	mov	r3, r1
 8010288:	813b      	strh	r3, [r7, #8]
 801028a:	4613      	mov	r3, r2
 801028c:	80fb      	strh	r3, [r7, #6]

  pca9685_write_u8(handle, PCA_LEDx_REG_START+ 4*num, on);
 801028e:	7afb      	ldrb	r3, [r7, #11]
 8010290:	009b      	lsls	r3, r3, #2
 8010292:	b2db      	uxtb	r3, r3
 8010294:	3306      	adds	r3, #6
 8010296:	b2db      	uxtb	r3, r3
 8010298:	893a      	ldrh	r2, [r7, #8]
 801029a:	b2d2      	uxtb	r2, r2
 801029c:	4619      	mov	r1, r3
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f7ff fec8 	bl	8010034 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_LEDx_REG_START+1+ 4*num, on >> 8);
 80102a4:	7afb      	ldrb	r3, [r7, #11]
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	3307      	adds	r3, #7
 80102ac:	b2d9      	uxtb	r1, r3
 80102ae:	893b      	ldrh	r3, [r7, #8]
 80102b0:	0a1b      	lsrs	r3, r3, #8
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	461a      	mov	r2, r3
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f7ff febb 	bl	8010034 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_LEDx_REG_START+2+ 4*num, off);
 80102be:	7afb      	ldrb	r3, [r7, #11]
 80102c0:	3302      	adds	r3, #2
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	88fa      	ldrh	r2, [r7, #6]
 80102ca:	b2d2      	uxtb	r2, r2
 80102cc:	4619      	mov	r1, r3
 80102ce:	68f8      	ldr	r0, [r7, #12]
 80102d0:	f7ff feb0 	bl	8010034 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_LEDx_REG_START+3+ 4*num, off >> 8);
 80102d4:	7afb      	ldrb	r3, [r7, #11]
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	3309      	adds	r3, #9
 80102dc:	b2d9      	uxtb	r1, r3
 80102de:	88fb      	ldrh	r3, [r7, #6]
 80102e0:	0a1b      	lsrs	r3, r3, #8
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	b2db      	uxtb	r3, r3
 80102e6:	461a      	mov	r2, r3
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	f7ff fea3 	bl	8010034 <pca9685_write_u8>
}
 80102ee:	bf00      	nop
 80102f0:	3710      	adds	r7, #16
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
	...

080102f8 <__libc_init_array>:
 80102f8:	b570      	push	{r4, r5, r6, lr}
 80102fa:	4d0d      	ldr	r5, [pc, #52]	; (8010330 <__libc_init_array+0x38>)
 80102fc:	4c0d      	ldr	r4, [pc, #52]	; (8010334 <__libc_init_array+0x3c>)
 80102fe:	1b64      	subs	r4, r4, r5
 8010300:	10a4      	asrs	r4, r4, #2
 8010302:	2600      	movs	r6, #0
 8010304:	42a6      	cmp	r6, r4
 8010306:	d109      	bne.n	801031c <__libc_init_array+0x24>
 8010308:	4d0b      	ldr	r5, [pc, #44]	; (8010338 <__libc_init_array+0x40>)
 801030a:	4c0c      	ldr	r4, [pc, #48]	; (801033c <__libc_init_array+0x44>)
 801030c:	f000 f820 	bl	8010350 <_init>
 8010310:	1b64      	subs	r4, r4, r5
 8010312:	10a4      	asrs	r4, r4, #2
 8010314:	2600      	movs	r6, #0
 8010316:	42a6      	cmp	r6, r4
 8010318:	d105      	bne.n	8010326 <__libc_init_array+0x2e>
 801031a:	bd70      	pop	{r4, r5, r6, pc}
 801031c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010320:	4798      	blx	r3
 8010322:	3601      	adds	r6, #1
 8010324:	e7ee      	b.n	8010304 <__libc_init_array+0xc>
 8010326:	f855 3b04 	ldr.w	r3, [r5], #4
 801032a:	4798      	blx	r3
 801032c:	3601      	adds	r6, #1
 801032e:	e7f2      	b.n	8010316 <__libc_init_array+0x1e>
 8010330:	08010400 	.word	0x08010400
 8010334:	08010400 	.word	0x08010400
 8010338:	08010400 	.word	0x08010400
 801033c:	08010404 	.word	0x08010404

08010340 <memset>:
 8010340:	4402      	add	r2, r0
 8010342:	4603      	mov	r3, r0
 8010344:	4293      	cmp	r3, r2
 8010346:	d100      	bne.n	801034a <memset+0xa>
 8010348:	4770      	bx	lr
 801034a:	f803 1b01 	strb.w	r1, [r3], #1
 801034e:	e7f9      	b.n	8010344 <memset+0x4>

08010350 <_init>:
 8010350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010352:	bf00      	nop
 8010354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010356:	bc08      	pop	{r3}
 8010358:	469e      	mov	lr, r3
 801035a:	4770      	bx	lr

0801035c <_fini>:
 801035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035e:	bf00      	nop
 8010360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010362:	bc08      	pop	{r3}
 8010364:	469e      	mov	lr, r3
 8010366:	4770      	bx	lr
