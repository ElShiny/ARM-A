
ARM-A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013920  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08013b00  08013b00  00014b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080145e8  080145e8  00017974  2**0
                  CONTENTS
  4 .ARM          00000008  080145e8  080145e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080145f0  080145f0  00017974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080145f0  080145f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080145f4  080145f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001974  20000000  080145f8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  20001974  08015f6c  00017974  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a08  08015f6c  00017a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017974  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c04a  00000000  00000000  000179a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006168  00000000  00000000  000439ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029f0  00000000  00000000  00049b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000205c  00000000  00000000  0004c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034ad8  00000000  00000000  0004e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003206c  00000000  00000000  0008307c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00140b89  00000000  00000000  000b50e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f5c71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c9d0  00000000  00000000  001f5cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00202684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001974 	.word	0x20001974
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013ae8 	.word	0x08013ae8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001978 	.word	0x20001978
 800021c:	08013ae8 	.word	0x08013ae8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	@ (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d02e      	beq.n	800112a <LL_TIM_OC_DisableFast+0x6e>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d029      	beq.n	8001126 <LL_TIM_OC_DisableFast+0x6a>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b10      	cmp	r3, #16
 80010d6:	d024      	beq.n	8001122 <LL_TIM_OC_DisableFast+0x66>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b40      	cmp	r3, #64	@ 0x40
 80010dc:	d01f      	beq.n	800111e <LL_TIM_OC_DisableFast+0x62>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010e4:	d019      	beq.n	800111a <LL_TIM_OC_DisableFast+0x5e>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ec:	d013      	beq.n	8001116 <LL_TIM_OC_DisableFast+0x5a>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010f4:	d00d      	beq.n	8001112 <LL_TIM_OC_DisableFast+0x56>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80010fc:	d007      	beq.n	800110e <LL_TIM_OC_DisableFast+0x52>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001104:	d101      	bne.n	800110a <LL_TIM_OC_DisableFast+0x4e>
 8001106:	2308      	movs	r3, #8
 8001108:	e010      	b.n	800112c <LL_TIM_OC_DisableFast+0x70>
 800110a:	2309      	movs	r3, #9
 800110c:	e00e      	b.n	800112c <LL_TIM_OC_DisableFast+0x70>
 800110e:	2307      	movs	r3, #7
 8001110:	e00c      	b.n	800112c <LL_TIM_OC_DisableFast+0x70>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <LL_TIM_OC_DisableFast+0x70>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <LL_TIM_OC_DisableFast+0x70>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <LL_TIM_OC_DisableFast+0x70>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <LL_TIM_OC_DisableFast+0x70>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <LL_TIM_OC_DisableFast+0x70>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <LL_TIM_OC_DisableFast+0x70>
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3318      	adds	r3, #24
 8001132:	4619      	mov	r1, r3
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <LL_TIM_OC_DisableFast+0xa8>)
 8001138:	5cd3      	ldrb	r3, [r2, r3]
 800113a:	440b      	add	r3, r1
 800113c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	4908      	ldr	r1, [pc, #32]	@ (8001168 <LL_TIM_OC_DisableFast+0xac>)
 8001146:	5ccb      	ldrb	r3, [r1, r3]
 8001148:	4619      	mov	r1, r3
 800114a:	2304      	movs	r3, #4
 800114c:	408b      	lsls	r3, r1
 800114e:	43db      	mvns	r3, r3
 8001150:	401a      	ands	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	601a      	str	r2, [r3, #0]

}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	08013dc4 	.word	0x08013dc4
 8001168:	08013dd0 	.word	0x08013dd0

0800116c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d02e      	beq.n	80011da <LL_TIM_OC_EnablePreload+0x6e>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b04      	cmp	r3, #4
 8001180:	d029      	beq.n	80011d6 <LL_TIM_OC_EnablePreload+0x6a>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b10      	cmp	r3, #16
 8001186:	d024      	beq.n	80011d2 <LL_TIM_OC_EnablePreload+0x66>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b40      	cmp	r3, #64	@ 0x40
 800118c:	d01f      	beq.n	80011ce <LL_TIM_OC_EnablePreload+0x62>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001194:	d019      	beq.n	80011ca <LL_TIM_OC_EnablePreload+0x5e>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800119c:	d013      	beq.n	80011c6 <LL_TIM_OC_EnablePreload+0x5a>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011a4:	d00d      	beq.n	80011c2 <LL_TIM_OC_EnablePreload+0x56>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80011ac:	d007      	beq.n	80011be <LL_TIM_OC_EnablePreload+0x52>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b4:	d101      	bne.n	80011ba <LL_TIM_OC_EnablePreload+0x4e>
 80011b6:	2308      	movs	r3, #8
 80011b8:	e010      	b.n	80011dc <LL_TIM_OC_EnablePreload+0x70>
 80011ba:	2309      	movs	r3, #9
 80011bc:	e00e      	b.n	80011dc <LL_TIM_OC_EnablePreload+0x70>
 80011be:	2307      	movs	r3, #7
 80011c0:	e00c      	b.n	80011dc <LL_TIM_OC_EnablePreload+0x70>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <LL_TIM_OC_EnablePreload+0x70>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <LL_TIM_OC_EnablePreload+0x70>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <LL_TIM_OC_EnablePreload+0x70>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <LL_TIM_OC_EnablePreload+0x70>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <LL_TIM_OC_EnablePreload+0x70>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <LL_TIM_OC_EnablePreload+0x70>
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3318      	adds	r3, #24
 80011e2:	4619      	mov	r1, r3
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <LL_TIM_OC_EnablePreload+0xa4>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	440b      	add	r3, r1
 80011ec:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4907      	ldr	r1, [pc, #28]	@ (8001214 <LL_TIM_OC_EnablePreload+0xa8>)
 80011f6:	5ccb      	ldrb	r3, [r1, r3]
 80011f8:	4619      	mov	r1, r3
 80011fa:	2308      	movs	r3, #8
 80011fc:	408b      	lsls	r3, r1
 80011fe:	431a      	orrs	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	08013dc4 	.word	0x08013dc4
 8001214:	08013dd0 	.word	0x08013dd0

08001218 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800122a:	f023 0307 	bic.w	r3, r3, #7
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	609a      	str	r2, [r3, #8]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	605a      	str	r2, [r3, #4]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	605a      	str	r2, [r3, #4]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	601a      	str	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b089      	sub	sp, #36	@ 0x24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3308      	adds	r3, #8
 8001300:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	e853 3f00 	ldrex	r3, [r3]
 8001308:	60bb      	str	r3, [r7, #8]
   return(result);
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	075b      	lsls	r3, r3, #29
 8001314:	4313      	orrs	r3, r2
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3308      	adds	r3, #8
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	61ba      	str	r2, [r7, #24]
 8001320:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001322:	6979      	ldr	r1, [r7, #20]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	e841 2300 	strex	r3, r2, [r1]
 800132a:	613b      	str	r3, [r7, #16]
   return(result);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1e4      	bne.n	80012fc <LL_USART_SetTXFIFOThreshold+0xa>
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3724      	adds	r7, #36	@ 0x24
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	@ 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3308      	adds	r3, #8
 800134e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	e853 3f00 	ldrex	r3, [r3]
 8001356:	60bb      	str	r3, [r7, #8]
   return(result);
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	065b      	lsls	r3, r3, #25
 8001362:	4313      	orrs	r3, r2
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3308      	adds	r3, #8
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	61ba      	str	r2, [r7, #24]
 800136e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001370:	6979      	ldr	r1, [r7, #20]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	e841 2300 	strex	r3, r2, [r1]
 8001378:	613b      	str	r3, [r7, #16]
   return(result);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e4      	bne.n	800134a <LL_USART_SetRXFIFOThreshold+0xa>
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	609a      	str	r2, [r3, #8]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80013ce:	d101      	bne.n	80013d4 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013f6:	d101      	bne.n	80013fc <LL_USART_IsActiveFlag_REACK+0x1a>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <LL_USART_IsActiveFlag_REACK+0x1c>
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8001416:	4a18      	ldr	r2, [pc, #96]	@ (8001478 <LL_SYSCFG_SetEXTISource+0x6c>)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	3302      	adds	r3, #2
 8001420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	0c1b      	lsrs	r3, r3, #16
 8001428:	43db      	mvns	r3, r3
 800142a:	ea02 0103 	and.w	r1, r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	0c1b      	lsrs	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	60fb      	str	r3, [r7, #12]
  return result;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <LL_SYSCFG_SetEXTISource+0x3e>
    return 32U;
 8001446:	2320      	movs	r3, #32
 8001448:	e003      	b.n	8001452 <LL_SYSCFG_SetEXTISource+0x46>
  return __builtin_clz(value);
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fab3 f383 	clz	r3, r3
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	409a      	lsls	r2, r3
 800145a:	4807      	ldr	r0, [pc, #28]	@ (8001478 <LL_SYSCFG_SetEXTISource+0x6c>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	430a      	orrs	r2, r1
 8001464:	3302      	adds	r3, #2
 8001466:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800146a:	bf00      	nop
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40010000 	.word	0x40010000

0800147c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800147c:	b480      	push	{r7}
 800147e:	b08b      	sub	sp, #44	@ 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	613b      	str	r3, [r7, #16]
  return result;
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80014a2:	2320      	movs	r3, #32
 80014a4:	e003      	b.n	80014ae <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2103      	movs	r1, #3
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	401a      	ands	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	61fb      	str	r3, [r7, #28]
  return result;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80014d0:	2320      	movs	r3, #32
 80014d2:	e003      	b.n	80014dc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80014d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	431a      	orrs	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	601a      	str	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	372c      	adds	r7, #44	@ 0x2c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b08b      	sub	sp, #44	@ 0x2c
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa93 f3a3 	rbit	r3, r3
 8001510:	613b      	str	r3, [r7, #16]
  return result;
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800151c:	2320      	movs	r3, #32
 800151e:	e003      	b.n	8001528 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2103      	movs	r1, #3
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	61fb      	str	r3, [r7, #28]
  return result;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800154a:	2320      	movs	r3, #32
 800154c:	e003      	b.n	8001556 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	fab3 f383 	clz	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	431a      	orrs	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	60da      	str	r2, [r3, #12]
}
 8001564:	bf00      	nop
 8001566:	372c      	adds	r7, #44	@ 0x2c
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	619a      	str	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015b4:	4907      	ldr	r1, [pc, #28]	@ (80015d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4013      	ands	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000

080015d8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015e4:	4907      	ldr	r1, [pc, #28]	@ (8001604 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4013      	ands	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40021000 	.word	0x40021000

08001608 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001612:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001614:	4907      	ldr	r1, [pc, #28]	@ (8001634 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4313      	orrs	r3, r2
 800161a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <LL_APB2_GRP1_EnableClock+0x2c>)
 800161e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4013      	ands	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163c:	f002 fc5f 	bl	8003efe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001640:	f000 f84c 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001644:	f001 f8ee 	bl	8002824 <MX_GPIO_Init>
  MX_FMC_Init();
 8001648:	f001 f884 	bl	8002754 <MX_FMC_Init>
  MX_I2C2_Init();
 800164c:	f000 f9a2 	bl	8001994 <MX_I2C2_Init>
  MX_UART4_Init();
 8001650:	f000 fe60 	bl	8002314 <MX_UART4_Init>
  MX_UART5_Init();
 8001654:	f000 feaa 	bl	80023ac <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001658:	f000 fef4 	bl	8002444 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800165c:	f000 ff3e 	bl	80024dc <MX_USART2_UART_Init>
  MX_QUADSPI1_Init();
 8001660:	f000 f9d8 	bl	8001a14 <MX_QUADSPI1_Init>
  MX_SPI1_Init();
 8001664:	f000 fa02 	bl	8001a6c <MX_SPI1_Init>
  MX_TIM5_Init();
 8001668:	f000 fb12 	bl	8001c90 <MX_TIM5_Init>
  MX_TIM8_Init();
 800166c:	f000 fbda 	bl	8001e24 <MX_TIM8_Init>
  MX_TIM20_Init();
 8001670:	f000 fd72 	bl	8002158 <MX_TIM20_Init>
  MX_FDCAN2_Init();
 8001674:	f000 f908 	bl	8001888 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001678:	f000 f94c 	bl	8001914 <MX_I2C1_Init>
  MX_TIM15_Init();
 800167c:	f000 fcc8 	bl	8002010 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8001680:	f000 ff78 	bl	8002574 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001684:	f001 f81c 	bl	80026c0 <MX_DMA_Init>
  MX_TIM6_Init();
 8001688:	f000 fb96 	bl	8001db8 <MX_TIM6_Init>
  MX_CORDIC_Init();
 800168c:	f000 f8e8 	bl	8001860 <MX_CORDIC_Init>
  MX_TIM1_Init();
 8001690:	f000 fa2a 	bl	8001ae8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001694:	f000 fa7c 	bl	8001b90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MX_ADC4_Init();
 8001698:	f000 f86a 	bl	8001770 <MX_ADC4_Init>
  MX_SPI1_Init();
 800169c:	f000 f9e6 	bl	8001a6c <MX_SPI1_Init>

  LED_init();
 80016a0:	f00b fffa 	bl	800d698 <LED_init>
  KBD_init();
 80016a4:	f00c fa04 	bl	800dab0 <KBD_init>
  SCI_init();
 80016a8:	f00c f8b4 	bl	800d814 <SCI_init>
  SCI_demo_Hello_world();
 80016ac:	f00c f944 	bl	800d938 <SCI_demo_Hello_world>
  LCD_BKLT_init();
 80016b0:	f00c fcde 	bl	800e070 <LCD_BKLT_init>
  LCD_Init();
 80016b4:	f00c fc5f 	bl	800df76 <LCD_Init>
  PSERV_init();
 80016b8:	f00e f8d6 	bl	800f868 <PSERV_init>
  PSERV_enable();
 80016bc:	f00e f8e4 	bl	800f888 <PSERV_enable>
  MCP_init();
 80016c0:	f00d fa84 	bl	800ebcc <MCP_init>
  MPU6050_Init();
 80016c4:	f00d fcb0 	bl	800f028 <MPU6050_Init>

  MPU6050_Calc_Offsets(1, 1);
 80016c8:	2101      	movs	r1, #1
 80016ca:	2001      	movs	r0, #1
 80016cc:	f00d fe16 	bl	800f2fc <MPU6050_Calc_Offsets>
  MCP3464_Calibrate();
 80016d0:	f00d fb4e 	bl	800ed70 <MCP3464_Calibrate>





  Init_3D();
 80016d4:	f00a fe48 	bl	800c368 <Init_3D>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <main+0xa0>

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	@ 0x50
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 0318 	add.w	r3, r7, #24
 80016e6:	2238      	movs	r2, #56	@ 0x38
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f010 fb6e 	bl	8011dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001702:	f005 f8ab 	bl	800685c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001706:	2301      	movs	r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800170a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800170e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001710:	2302      	movs	r3, #2
 8001712:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001714:	2303      	movs	r3, #3
 8001716:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001718:	2302      	movs	r3, #2
 800171a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800171c:	2348      	movs	r3, #72	@ 0x48
 800171e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001720:	2302      	movs	r3, #2
 8001722:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001724:	2306      	movs	r3, #6
 8001726:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	4618      	mov	r0, r3
 8001732:	f005 fa09 	bl	8006b48 <HAL_RCC_OscConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800173c:	f001 fb5c 	bl	8002df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	230f      	movs	r3, #15
 8001742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001744:	2303      	movs	r3, #3
 8001746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2104      	movs	r1, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fd0d 	bl	8007178 <HAL_RCC_ClockConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001764:	f001 fb48 	bl	8002df8 <Error_Handler>
  }
}
 8001768:	bf00      	nop
 800176a:	3750      	adds	r7, #80	@ 0x50
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001776:	463b      	mov	r3, r7
 8001778:	2220      	movs	r2, #32
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f010 fb25 	bl	8011dcc <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001782:	4b33      	ldr	r3, [pc, #204]	@ (8001850 <MX_ADC4_Init+0xe0>)
 8001784:	4a33      	ldr	r2, [pc, #204]	@ (8001854 <MX_ADC4_Init+0xe4>)
 8001786:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001788:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <MX_ADC4_Init+0xe0>)
 800178a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800178e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001790:	4b2f      	ldr	r3, [pc, #188]	@ (8001850 <MX_ADC4_Init+0xe0>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001796:	4b2e      	ldr	r3, [pc, #184]	@ (8001850 <MX_ADC4_Init+0xe0>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800179c:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <MX_ADC4_Init+0xe0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017a8:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017aa:	2204      	movs	r2, #4
 80017ac:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80017b4:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 2;
 80017ba:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017bc:	2202      	movs	r2, #2
 80017be:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80017c0:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017ca:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80017ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80017ee:	4818      	ldr	r0, [pc, #96]	@ (8001850 <MX_ADC4_Init+0xe0>)
 80017f0:	f002 fdf2 	bl	80043d8 <HAL_ADC_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 80017fa:	f001 fafd 	bl	8002df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017fe:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <MX_ADC4_Init+0xe8>)
 8001800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001802:	2306      	movs	r3, #6
 8001804:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001806:	2307      	movs	r3, #7
 8001808:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800180a:	237f      	movs	r3, #127	@ 0x7f
 800180c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800180e:	2304      	movs	r3, #4
 8001810:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	4619      	mov	r1, r3
 800181a:	480d      	ldr	r0, [pc, #52]	@ (8001850 <MX_ADC4_Init+0xe0>)
 800181c:	f002 ff9e 	bl	800475c <HAL_ADC_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 8001826:	f001 fae7 	bl	8002df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <MX_ADC4_Init+0xec>)
 800182c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800182e:	230c      	movs	r3, #12
 8001830:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	@ (8001850 <MX_ADC4_Init+0xe0>)
 8001838:	f002 ff90 	bl	800475c <HAL_ADC_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_ADC4_Init+0xd6>
  {
    Error_Handler();
 8001842:	f001 fad9 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000226c 	.word	0x2000226c
 8001854:	50000500 	.word	0x50000500
 8001858:	10c00010 	.word	0x10c00010
 800185c:	14f00020 	.word	0x14f00020

08001860 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_CORDIC_Init+0x20>)
 8001866:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <MX_CORDIC_Init+0x24>)
 8001868:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	@ (8001880 <MX_CORDIC_Init+0x20>)
 800186c:	f003 fbb6 	bl	8004fdc <HAL_CORDIC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001876:	f001 fabf 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20002028 	.word	0x20002028
 8001884:	40020c00 	.word	0x40020c00

08001888 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_FDCAN2_Init+0x84>)
 800188e:	4a20      	ldr	r2, [pc, #128]	@ (8001910 <MX_FDCAN2_Init+0x88>)
 8001890:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_FDCAN2_Init+0x84>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001898:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_FDCAN2_Init+0x84>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80018aa:	4b18      	ldr	r3, [pc, #96]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80018bc:	4b13      	ldr	r3, [pc, #76]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018be:	2201      	movs	r2, #1
 80018c0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018c4:	2202      	movs	r2, #2
 80018c6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018ca:	2202      	movs	r2, #2
 80018cc:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018dc:	2201      	movs	r2, #1
 80018de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <MX_FDCAN2_Init+0x84>)
 80018fa:	f003 fe6b 	bl	80055d4 <HAL_FDCAN_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001904:	f001 fa78 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	2000247c 	.word	0x2000247c
 8001910:	40006800 	.word	0x40006800

08001914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <MX_I2C1_Init+0x74>)
 800191a:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <MX_I2C1_Init+0x78>)
 800191c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0D9FF;
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_I2C1_Init+0x74>)
 8001920:	4a1b      	ldr	r2, [pc, #108]	@ (8001990 <MX_I2C1_Init+0x7c>)
 8001922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <MX_I2C1_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_I2C1_Init+0x74>)
 800192c:	2201      	movs	r2, #1
 800192e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <MX_I2C1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_I2C1_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_I2C1_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_I2C1_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_I2C1_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800194e:	480e      	ldr	r0, [pc, #56]	@ (8001988 <MX_I2C1_Init+0x74>)
 8001950:	f004 f988 	bl	8005c64 <HAL_I2C_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800195a:	f001 fa4d 	bl	8002df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800195e:	2100      	movs	r1, #0
 8001960:	4809      	ldr	r0, [pc, #36]	@ (8001988 <MX_I2C1_Init+0x74>)
 8001962:	f004 fee3 	bl	800672c <HAL_I2CEx_ConfigAnalogFilter>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800196c:	f001 fa44 	bl	8002df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001970:	2100      	movs	r1, #0
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_I2C1_Init+0x74>)
 8001974:	f004 ff25 	bl	80067c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800197e:	f001 fa3b 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20001bdc 	.word	0x20001bdc
 800198c:	40005400 	.word	0x40005400
 8001990:	20b0d9ff 	.word	0x20b0d9ff

08001994 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <MX_I2C2_Init+0x74>)
 800199a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <MX_I2C2_Init+0x78>)
 800199c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00E057FD;
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <MX_I2C2_Init+0x7c>)
 80019a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019ce:	480e      	ldr	r0, [pc, #56]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019d0:	f004 f948 	bl	8005c64 <HAL_I2C_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019da:	f001 fa0d 	bl	8002df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019de:	2100      	movs	r1, #0
 80019e0:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019e2:	f004 fea3 	bl	800672c <HAL_I2CEx_ConfigAnalogFilter>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80019ec:	f001 fa04 	bl	8002df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80019f0:	2100      	movs	r1, #0
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <MX_I2C2_Init+0x74>)
 80019f4:	f004 fee5 	bl	80067c2 <HAL_I2CEx_ConfigDigitalFilter>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80019fe:	f001 f9fb 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20001c74 	.word	0x20001c74
 8001a0c:	40005800 	.word	0x40005800
 8001a10:	00e057fd 	.word	0x00e057fd

08001a14 <MX_QUADSPI1_Init>:
  * @brief QUADSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  /* QUADSPI1 parameter configuration*/
  hqspi1.Instance = QUADSPI;
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a1a:	4a13      	ldr	r2, [pc, #76]	@ (8001a68 <MX_QUADSPI1_Init+0x54>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 255;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a20:	22ff      	movs	r2, #255	@ 0xff
 8001a22:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 4;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a26:	2204      	movs	r2, #4
 8001a28:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 23;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a32:	2217      	movs	r2, #23
 8001a34:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a38:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001a3c:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 8001a44:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <MX_QUADSPI1_Init+0x50>)
 8001a52:	f004 ffb7 	bl	80069c4 <HAL_QSPI_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_QUADSPI1_Init+0x4c>
  {
    Error_Handler();
 8001a5c:	f001 f9cc 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20001db0 	.word	0x20001db0
 8001a68:	a0001000 	.word	0xa0001000

08001a6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001a72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae4 <MX_SPI1_Init+0x78>)
 8001a74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001a78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a84:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001a86:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a92:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001aa2:	2228      	movs	r2, #40	@ 0x28
 8001aa4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001aba:	2207      	movs	r2, #7
 8001abc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <MX_SPI1_Init+0x74>)
 8001acc:	f005 ffbe 	bl	8007a4c <HAL_SPI_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ad6:	f001 f98f 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20002178 	.word	0x20002178
 8001ae4:	40013000 	.word	0x40013000

08001ae8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b08:	4a20      	ldr	r2, [pc, #128]	@ (8001b8c <MX_TIM1_Init+0xa4>)
 8001b0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 144;
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b0e:	2290      	movs	r2, #144	@ 0x90
 8001b10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b1a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b26:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b32:	4815      	ldr	r0, [pc, #84]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b34:	f006 fd62 	bl	80085fc <HAL_TIM_Base_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b3e:	f001 f95b 	bl	8002df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480e      	ldr	r0, [pc, #56]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b50:	f007 f8a0 	bl	8008c94 <HAL_TIM_ConfigClockSource>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b5a:	f001 f94d 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <MX_TIM1_Init+0xa0>)
 8001b70:	f007 fe46 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b7a:	f001 f93d 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000209c 	.word	0x2000209c
 8001b8c:	40012c00 	.word	0x40012c00

08001b90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08e      	sub	sp, #56	@ 0x38
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
 8001bbe:	615a      	str	r2, [r3, #20]
 8001bc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc2:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001bc4:	4a31      	ldr	r2, [pc, #196]	@ (8001c8c <MX_TIM4_Init+0xfc>)
 8001bc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14399;
 8001bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001bca:	f643 023f 	movw	r2, #14399	@ 0x383f
 8001bce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001bd8:	2263      	movs	r2, #99	@ 0x63
 8001bda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be8:	4827      	ldr	r0, [pc, #156]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001bea:	f006 fd07 	bl	80085fc <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001bf4:	f001 f900 	bl	8002df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4820      	ldr	r0, [pc, #128]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001c06:	f007 f845 	bl	8008c94 <HAL_TIM_ConfigClockSource>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001c10:	f001 f8f2 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c14:	481c      	ldr	r0, [pc, #112]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001c16:	f006 fd48 	bl	80086aa <HAL_TIM_PWM_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001c20:	f001 f8ea 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	4619      	mov	r1, r3
 8001c32:	4815      	ldr	r0, [pc, #84]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001c34:	f007 fde4 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001c3e:	f001 f8db 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c42:	2360      	movs	r3, #96	@ 0x60
 8001c44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001c46:	2332      	movs	r3, #50	@ 0x32
 8001c48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c52:	463b      	mov	r3, r7
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	480b      	ldr	r0, [pc, #44]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001c5a:	f006 ff07 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001c64:	f001 f8c8 	bl	8002df8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0208 	bic.w	r2, r2, #8
 8001c76:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c78:	4803      	ldr	r0, [pc, #12]	@ (8001c88 <MX_TIM4_Init+0xf8>)
 8001c7a:	f001 fc63 	bl	8003544 <HAL_TIM_MspPostInit>

}
 8001c7e:	bf00      	nop
 8001c80:	3738      	adds	r7, #56	@ 0x38
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20001b90 	.word	0x20001b90
 8001c8c:	40000800 	.word	0x40000800

08001c90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08e      	sub	sp, #56	@ 0x38
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8001db4 <MX_TIM5_Init+0x124>)
 8001cc6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10;
 8001cc8:	4b39      	ldr	r3, [pc, #228]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001cca:	220a      	movs	r2, #10
 8001ccc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b38      	ldr	r3, [pc, #224]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8001cd4:	4b36      	ldr	r3, [pc, #216]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001cd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001cda:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cdc:	4b34      	ldr	r3, [pc, #208]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ce2:	4b33      	ldr	r3, [pc, #204]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001ce4:	2280      	movs	r2, #128	@ 0x80
 8001ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ce8:	4831      	ldr	r0, [pc, #196]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001cea:	f006 fc87 	bl	80085fc <HAL_TIM_Base_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001cf4:	f001 f880 	bl	8002df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d02:	4619      	mov	r1, r3
 8001d04:	482a      	ldr	r0, [pc, #168]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001d06:	f006 ffc5 	bl	8008c94 <HAL_TIM_ConfigClockSource>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001d10:	f001 f872 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001d14:	4826      	ldr	r0, [pc, #152]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001d16:	f006 fcc8 	bl	80086aa <HAL_TIM_PWM_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001d20:	f001 f86a 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	481f      	ldr	r0, [pc, #124]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001d34:	f007 fd64 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001d3e:	f001 f85b 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d42:	2360      	movs	r3, #96	@ 0x60
 8001d44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 8001d46:	23c8      	movs	r3, #200	@ 0xc8
 8001d48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d52:	463b      	mov	r3, r7
 8001d54:	2204      	movs	r2, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4815      	ldr	r0, [pc, #84]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001d5a:	f006 fe87 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001d64:	f001 f848 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8001d68:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001d6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	2208      	movs	r2, #8
 8001d72:	4619      	mov	r1, r3
 8001d74:	480e      	ldr	r0, [pc, #56]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001d76:	f006 fe79 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM5_Init+0xf4>
  {
    Error_Handler();
 8001d80:	f001 f83a 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8001d84:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001d88:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	220c      	movs	r2, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4807      	ldr	r0, [pc, #28]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001d92:	f006 fe6b 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8001d9c:	f001 f82c 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001da0:	4803      	ldr	r0, [pc, #12]	@ (8001db0 <MX_TIM5_Init+0x120>)
 8001da2:	f001 fbcf 	bl	8003544 <HAL_TIM_MspPostInit>

}
 8001da6:	bf00      	nop
 8001da8:	3738      	adds	r7, #56	@ 0x38
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20001cc0 	.word	0x20001cc0
 8001db4:	40000c00 	.word	0x40000c00

08001db8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <MX_TIM6_Init+0x64>)
 8001dca:	4a15      	ldr	r2, [pc, #84]	@ (8001e20 <MX_TIM6_Init+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <MX_TIM6_Init+0x64>)
 8001dd0:	22aa      	movs	r2, #170	@ 0xaa
 8001dd2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <MX_TIM6_Init+0x64>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <MX_TIM6_Init+0x64>)
 8001ddc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001de0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <MX_TIM6_Init+0x64>)
 8001de4:	2280      	movs	r2, #128	@ 0x80
 8001de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001de8:	480c      	ldr	r0, [pc, #48]	@ (8001e1c <MX_TIM6_Init+0x64>)
 8001dea:	f006 fc07 	bl	80085fc <HAL_TIM_Base_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001df4:	f001 f800 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <MX_TIM6_Init+0x64>)
 8001e06:	f007 fcfb 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e10:	f000 fff2 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20002050 	.word	0x20002050
 8001e20:	40001000 	.word	0x40001000

08001e24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0a0      	sub	sp, #128	@ 0x80
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e2a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001e3a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e3e:	2220      	movs	r2, #32
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f00f ffc2 	bl	8011dcc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2230      	movs	r2, #48	@ 0x30
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f00f ffbb 	bl	8011dcc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
 8001e64:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8001e66:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e6a:	f7ff fbcd 	bl	8001608 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 14399;
 8001e6e:	f643 033f 	movw	r3, #14399	@ 0x383f
 8001e72:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e76:	2300      	movs	r3, #0
 8001e78:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.Autoreload = 99;
 8001e7a:	2363      	movs	r3, #99	@ 0x63
 8001e7c:	677b      	str	r3, [r7, #116]	@ 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	67bb      	str	r3, [r7, #120]	@ 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8001e86:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	485e      	ldr	r0, [pc, #376]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001e8e:	f009 fcbb 	bl	800b808 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8001e92:	485d      	ldr	r0, [pc, #372]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001e94:	f7ff f901 	bl	800109a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM8, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	485b      	ldr	r0, [pc, #364]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001e9c:	f7ff f9bc 	bl	8001218 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH2);
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	4859      	ldr	r0, [pc, #356]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001ea4:	f7ff f962 	bl	800116c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001ea8:	2360      	movs	r3, #96	@ 0x60
 8001eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.CompareValue = 2000;
 8001eb4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	667b      	str	r3, [r7, #100]	@ 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001eca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	484d      	ldr	r0, [pc, #308]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001ed4:	f009 fd3a 	bl	800b94c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH2);
 8001ed8:	2110      	movs	r1, #16
 8001eda:	484b      	ldr	r0, [pc, #300]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001edc:	f7ff f8ee 	bl	80010bc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH3);
 8001ee0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ee4:	4848      	ldr	r0, [pc, #288]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001ee6:	f7ff f941 	bl	800116c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 4000;
 8001eea:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001eee:	65bb      	str	r3, [r7, #88]	@ 0x58
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001ef0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001efa:	4843      	ldr	r0, [pc, #268]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001efc:	f009 fd26 	bl	800b94c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH3);
 8001f00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f04:	4840      	ldr	r0, [pc, #256]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001f06:	f7ff f8d9 	bl	80010bc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH4);
 8001f0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f0e:	483e      	ldr	r0, [pc, #248]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001f10:	f7ff f92c 	bl	800116c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 8000;
 8001f14:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001f18:	65bb      	str	r3, [r7, #88]	@ 0x58
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001f1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f24:	4838      	ldr	r0, [pc, #224]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001f26:	f009 fd11 	bl	800b94c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH4);
 8001f2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f2e:	4836      	ldr	r0, [pc, #216]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001f30:	f7ff f8c4 	bl	80010bc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8001f34:	2100      	movs	r1, #0
 8001f36:	4834      	ldr	r0, [pc, #208]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001f38:	f7ff f983 	bl	8001242 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4832      	ldr	r0, [pc, #200]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001f40:	f7ff f994 	bl	800126c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8001f44:	4830      	ldr	r0, [pc, #192]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001f46:	f7ff f9a4 	bl	8001292 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001f60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8001f66:	2300      	movs	r3, #0
 8001f68:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8001f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	481f      	ldr	r0, [pc, #124]	@ (8002008 <MX_TIM8_Init+0x1e4>)
 8001f8c:	f009 fd3e 	bl	800ba0c <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001f90:	2004      	movs	r0, #4
 8001f92:	f7ff fb09 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
  /**TIM8 GPIO Configuration
  PC7   ------> TIM8_CH2
  PC8   ------> TIM8_CH3
  PC9   ------> TIM8_CH4
  */
  GPIO_InitStruct.Pin = PWM11_Pin;
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001faa:	2304      	movs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PWM11_GPIO_Port, &GPIO_InitStruct);
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4816      	ldr	r0, [pc, #88]	@ (800200c <MX_TIM8_Init+0x1e8>)
 8001fb4:	f009 f881 	bl	800b0ba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM12_Pin;
 8001fb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PWM12_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480d      	ldr	r0, [pc, #52]	@ (800200c <MX_TIM8_Init+0x1e8>)
 8001fd8:	f009 f86f 	bl	800b0ba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM13_Pin;
 8001fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PWM13_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4804      	ldr	r0, [pc, #16]	@ (800200c <MX_TIM8_Init+0x1e8>)
 8001ffc:	f009 f85d 	bl	800b0ba <LL_GPIO_Init>

}
 8002000:	bf00      	nop
 8002002:	3780      	adds	r7, #128	@ 0x80
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40013400 	.word	0x40013400
 800200c:	48000800 	.word	0x48000800

08002010 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b09c      	sub	sp, #112	@ 0x70
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002030:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	615a      	str	r2, [r3, #20]
 8002042:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2234      	movs	r2, #52	@ 0x34
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f00f febe 	bl	8011dcc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002050:	4b3f      	ldr	r3, [pc, #252]	@ (8002150 <MX_TIM15_Init+0x140>)
 8002052:	4a40      	ldr	r2, [pc, #256]	@ (8002154 <MX_TIM15_Init+0x144>)
 8002054:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002056:	4b3e      	ldr	r3, [pc, #248]	@ (8002150 <MX_TIM15_Init+0x140>)
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b3c      	ldr	r3, [pc, #240]	@ (8002150 <MX_TIM15_Init+0x140>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 32768;
 8002062:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <MX_TIM15_Init+0x140>)
 8002064:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002068:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b39      	ldr	r3, [pc, #228]	@ (8002150 <MX_TIM15_Init+0x140>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002070:	4b37      	ldr	r3, [pc, #220]	@ (8002150 <MX_TIM15_Init+0x140>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <MX_TIM15_Init+0x140>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800207c:	4834      	ldr	r0, [pc, #208]	@ (8002150 <MX_TIM15_Init+0x140>)
 800207e:	f006 fabd 	bl	80085fc <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002088:	f000 feb6 	bl	8002df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002090:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002096:	4619      	mov	r1, r3
 8002098:	482d      	ldr	r0, [pc, #180]	@ (8002150 <MX_TIM15_Init+0x140>)
 800209a:	f006 fdfb 	bl	8008c94 <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80020a4:	f000 fea8 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80020a8:	4829      	ldr	r0, [pc, #164]	@ (8002150 <MX_TIM15_Init+0x140>)
 80020aa:	f006 fafe 	bl	80086aa <HAL_TIM_PWM_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80020b4:	f000 fea0 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80020c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020c4:	4619      	mov	r1, r3
 80020c6:	4822      	ldr	r0, [pc, #136]	@ (8002150 <MX_TIM15_Init+0x140>)
 80020c8:	f007 fb9a 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80020d2:	f000 fe91 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d6:	2360      	movs	r3, #96	@ 0x60
 80020d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 16000;
 80020da:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 80020de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e0:	2300      	movs	r3, #0
 80020e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020e4:	2300      	movs	r3, #0
 80020e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020f8:	2204      	movs	r2, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4814      	ldr	r0, [pc, #80]	@ (8002150 <MX_TIM15_Init+0x140>)
 80020fe:	f006 fcb5 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8002108:	f000 fe76 	bl	8002df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002120:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002124:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4807      	ldr	r0, [pc, #28]	@ (8002150 <MX_TIM15_Init+0x140>)
 8002134:	f007 fbfa 	bl	800992c <HAL_TIMEx_ConfigBreakDeadTime>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800213e:	f000 fe5b 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002142:	4803      	ldr	r0, [pc, #12]	@ (8002150 <MX_TIM15_Init+0x140>)
 8002144:	f001 f9fe 	bl	8003544 <HAL_TIM_MspPostInit>

}
 8002148:	bf00      	nop
 800214a:	3770      	adds	r7, #112	@ 0x70
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20001c28 	.word	0x20001c28
 8002154:	40014000 	.word	0x40014000

08002158 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b09c      	sub	sp, #112	@ 0x70
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002178:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	615a      	str	r2, [r3, #20]
 800218a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	2234      	movs	r2, #52	@ 0x34
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f00f fe1a 	bl	8011dcc <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002198:	4b5c      	ldr	r3, [pc, #368]	@ (800230c <MX_TIM20_Init+0x1b4>)
 800219a:	4a5d      	ldr	r2, [pc, #372]	@ (8002310 <MX_TIM20_Init+0x1b8>)
 800219c:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 800219e:	4b5b      	ldr	r3, [pc, #364]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b59      	ldr	r3, [pc, #356]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 16000;
 80021aa:	4b58      	ldr	r3, [pc, #352]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80021ac:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80021b0:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	4b56      	ldr	r3, [pc, #344]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80021b8:	4b54      	ldr	r3, [pc, #336]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b53      	ldr	r3, [pc, #332]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80021c4:	4851      	ldr	r0, [pc, #324]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80021c6:	f006 fa19 	bl	80085fc <HAL_TIM_Base_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 80021d0:	f000 fe12 	bl	8002df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80021da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021de:	4619      	mov	r1, r3
 80021e0:	484a      	ldr	r0, [pc, #296]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80021e2:	f006 fd57 	bl	8008c94 <HAL_TIM_ConfigClockSource>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80021ec:	f000 fe04 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80021f0:	4846      	ldr	r0, [pc, #280]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80021f2:	f006 fa5a 	bl	80086aa <HAL_TIM_PWM_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 80021fc:	f000 fdfc 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800220c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002210:	4619      	mov	r1, r3
 8002212:	483e      	ldr	r0, [pc, #248]	@ (800230c <MX_TIM20_Init+0x1b4>)
 8002214:	f007 faf4 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 800221e:	f000 fdeb 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002222:	2360      	movs	r3, #96	@ 0x60
 8002224:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 8000;
 8002226:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800222a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222c:	2300      	movs	r3, #0
 800222e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002230:	2300      	movs	r3, #0
 8002232:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002240:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002244:	2200      	movs	r2, #0
 8002246:	4619      	mov	r1, r3
 8002248:	4830      	ldr	r0, [pc, #192]	@ (800230c <MX_TIM20_Init+0x1b4>)
 800224a:	f006 fc0f 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM20_Init+0x100>
  {
    Error_Handler();
 8002254:	f000 fdd0 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.Pulse = 10000;
 8002258:	f242 7310 	movw	r3, #10000	@ 0x2710
 800225c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800225e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002262:	2204      	movs	r2, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4829      	ldr	r0, [pc, #164]	@ (800230c <MX_TIM20_Init+0x1b4>)
 8002268:	f006 fc00 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM20_Init+0x11e>
  {
    Error_Handler();
 8002272:	f000 fdc1 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.Pulse = 12000;
 8002276:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800227a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800227c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002280:	2208      	movs	r2, #8
 8002282:	4619      	mov	r1, r3
 8002284:	4821      	ldr	r0, [pc, #132]	@ (800230c <MX_TIM20_Init+0x1b4>)
 8002286:	f006 fbf1 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM20_Init+0x13c>
  {
    Error_Handler();
 8002290:	f000 fdb2 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.Pulse = 15000;
 8002294:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8002298:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800229a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800229e:	220c      	movs	r2, #12
 80022a0:	4619      	mov	r1, r3
 80022a2:	481a      	ldr	r0, [pc, #104]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80022a4:	f006 fbe2 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM20_Init+0x15a>
  {
    Error_Handler();
 80022ae:	f000 fda3 	bl	8002df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80022e2:	2300      	movs	r3, #0
 80022e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4807      	ldr	r0, [pc, #28]	@ (800230c <MX_TIM20_Init+0x1b4>)
 80022f0:	f007 fb1c 	bl	800992c <HAL_TIMEx_ConfigBreakDeadTime>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM20_Init+0x1a6>
  {
    Error_Handler();
 80022fa:	f000 fd7d 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80022fe:	4803      	ldr	r0, [pc, #12]	@ (800230c <MX_TIM20_Init+0x1b4>)
 8002300:	f001 f920 	bl	8003544 <HAL_TIM_MspPostInit>

}
 8002304:	bf00      	nop
 8002306:	3770      	adds	r7, #112	@ 0x70
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20001d64 	.word	0x20001d64
 8002310:	40015000 	.word	0x40015000

08002314 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002318:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <MX_UART4_Init+0x90>)
 800231a:	4a23      	ldr	r2, [pc, #140]	@ (80023a8 <MX_UART4_Init+0x94>)
 800231c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800231e:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002324:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002326:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800232c:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <MX_UART4_Init+0x90>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002332:	4b1c      	ldr	r3, [pc, #112]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002338:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <MX_UART4_Init+0x90>)
 800233a:	220c      	movs	r2, #12
 800233c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233e:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002344:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800234a:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <MX_UART4_Init+0x90>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002350:	4b14      	ldr	r3, [pc, #80]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002356:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002358:	2200      	movs	r2, #0
 800235a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800235c:	4811      	ldr	r0, [pc, #68]	@ (80023a4 <MX_UART4_Init+0x90>)
 800235e:	f007 fbdd 	bl	8009b1c <HAL_UART_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002368:	f000 fd46 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800236c:	2100      	movs	r1, #0
 800236e:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002370:	f008 f90e 	bl	800a590 <HAL_UARTEx_SetTxFifoThreshold>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800237a:	f000 fd3d 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800237e:	2100      	movs	r1, #0
 8002380:	4808      	ldr	r0, [pc, #32]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002382:	f008 f943 	bl	800a60c <HAL_UARTEx_SetRxFifoThreshold>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800238c:	f000 fd34 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002390:	4804      	ldr	r0, [pc, #16]	@ (80023a4 <MX_UART4_Init+0x90>)
 8002392:	f008 f8c4 	bl	800a51e <HAL_UARTEx_DisableFifoMode>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800239c:	f000 fd2c 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200020e8 	.word	0x200020e8
 80023a8:	40004c00 	.word	0x40004c00

080023ac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80023b0:	4b22      	ldr	r3, [pc, #136]	@ (800243c <MX_UART5_Init+0x90>)
 80023b2:	4a23      	ldr	r2, [pc, #140]	@ (8002440 <MX_UART5_Init+0x94>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80023b6:	4b21      	ldr	r3, [pc, #132]	@ (800243c <MX_UART5_Init+0x90>)
 80023b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023bc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <MX_UART5_Init+0x90>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <MX_UART5_Init+0x90>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <MX_UART5_Init+0x90>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <MX_UART5_Init+0x90>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b19      	ldr	r3, [pc, #100]	@ (800243c <MX_UART5_Init+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b17      	ldr	r3, [pc, #92]	@ (800243c <MX_UART5_Init+0x90>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e2:	4b16      	ldr	r3, [pc, #88]	@ (800243c <MX_UART5_Init+0x90>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023e8:	4b14      	ldr	r3, [pc, #80]	@ (800243c <MX_UART5_Init+0x90>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ee:	4b13      	ldr	r3, [pc, #76]	@ (800243c <MX_UART5_Init+0x90>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80023f4:	4811      	ldr	r0, [pc, #68]	@ (800243c <MX_UART5_Init+0x90>)
 80023f6:	f007 fb91 	bl	8009b1c <HAL_UART_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002400:	f000 fcfa 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002404:	2100      	movs	r1, #0
 8002406:	480d      	ldr	r0, [pc, #52]	@ (800243c <MX_UART5_Init+0x90>)
 8002408:	f008 f8c2 	bl	800a590 <HAL_UARTEx_SetTxFifoThreshold>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002412:	f000 fcf1 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002416:	2100      	movs	r1, #0
 8002418:	4808      	ldr	r0, [pc, #32]	@ (800243c <MX_UART5_Init+0x90>)
 800241a:	f008 f8f7 	bl	800a60c <HAL_UARTEx_SetRxFifoThreshold>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002424:	f000 fce8 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002428:	4804      	ldr	r0, [pc, #16]	@ (800243c <MX_UART5_Init+0x90>)
 800242a:	f008 f878 	bl	800a51e <HAL_UARTEx_DisableFifoMode>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002434:	f000 fce0 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20001e5c 	.word	0x20001e5c
 8002440:	40005000 	.word	0x40005000

08002444 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002448:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 800244a:	4a23      	ldr	r2, [pc, #140]	@ (80024d8 <MX_USART1_UART_Init+0x94>)
 800244c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800244e:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 8002450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002462:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246e:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002474:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800247a:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 800247c:	2200      	movs	r2, #0
 800247e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002480:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002486:	4b13      	ldr	r3, [pc, #76]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800248c:	4811      	ldr	r0, [pc, #68]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 800248e:	f007 fb45 	bl	8009b1c <HAL_UART_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002498:	f000 fcae 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800249c:	2100      	movs	r1, #0
 800249e:	480d      	ldr	r0, [pc, #52]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 80024a0:	f008 f876 	bl	800a590 <HAL_UARTEx_SetTxFifoThreshold>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80024aa:	f000 fca5 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ae:	2100      	movs	r1, #0
 80024b0:	4808      	ldr	r0, [pc, #32]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 80024b2:	f008 f8ab 	bl	800a60c <HAL_UARTEx_SetRxFifoThreshold>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024bc:	f000 fc9c 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024c0:	4804      	ldr	r0, [pc, #16]	@ (80024d4 <MX_USART1_UART_Init+0x90>)
 80024c2:	f008 f82c 	bl	800a51e <HAL_UARTEx_DisableFifoMode>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80024cc:	f000 fc94 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20001f98 	.word	0x20001f98
 80024d8:	40013800 	.word	0x40013800

080024dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024e0:	4b22      	ldr	r3, [pc, #136]	@ (800256c <MX_USART2_UART_Init+0x90>)
 80024e2:	4a23      	ldr	r2, [pc, #140]	@ (8002570 <MX_USART2_UART_Init+0x94>)
 80024e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024e6:	4b21      	ldr	r3, [pc, #132]	@ (800256c <MX_USART2_UART_Init+0x90>)
 80024e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ee:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <MX_USART2_UART_Init+0x90>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024f4:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <MX_USART2_UART_Init+0x90>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024fa:	4b1c      	ldr	r3, [pc, #112]	@ (800256c <MX_USART2_UART_Init+0x90>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002500:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <MX_USART2_UART_Init+0x90>)
 8002502:	220c      	movs	r2, #12
 8002504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002506:	4b19      	ldr	r3, [pc, #100]	@ (800256c <MX_USART2_UART_Init+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800250c:	4b17      	ldr	r3, [pc, #92]	@ (800256c <MX_USART2_UART_Init+0x90>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002512:	4b16      	ldr	r3, [pc, #88]	@ (800256c <MX_USART2_UART_Init+0x90>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <MX_USART2_UART_Init+0x90>)
 800251a:	2200      	movs	r2, #0
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800251e:	4b13      	ldr	r3, [pc, #76]	@ (800256c <MX_USART2_UART_Init+0x90>)
 8002520:	2200      	movs	r2, #0
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002524:	4811      	ldr	r0, [pc, #68]	@ (800256c <MX_USART2_UART_Init+0x90>)
 8002526:	f007 faf9 	bl	8009b1c <HAL_UART_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002530:	f000 fc62 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002534:	2100      	movs	r1, #0
 8002536:	480d      	ldr	r0, [pc, #52]	@ (800256c <MX_USART2_UART_Init+0x90>)
 8002538:	f008 f82a 	bl	800a590 <HAL_UARTEx_SetTxFifoThreshold>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002542:	f000 fc59 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002546:	2100      	movs	r1, #0
 8002548:	4808      	ldr	r0, [pc, #32]	@ (800256c <MX_USART2_UART_Init+0x90>)
 800254a:	f008 f85f 	bl	800a60c <HAL_UARTEx_SetRxFifoThreshold>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002554:	f000 fc50 	bl	8002df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	@ (800256c <MX_USART2_UART_Init+0x90>)
 800255a:	f007 ffe0 	bl	800a51e <HAL_UARTEx_DisableFifoMode>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002564:	f000 fc48 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200021dc 	.word	0x200021dc
 8002570:	40004400 	.word	0x40004400

08002574 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b0a4      	sub	sp, #144	@ 0x90
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800257a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800257e:	2220      	movs	r2, #32
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f00f fc22 	bl	8011dcc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
 8002598:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2254      	movs	r2, #84	@ 0x54
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f00f fc13 	bl	8011dcc <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025a6:	2304      	movs	r3, #4
 80025a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 fffd 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_USART3_UART_Init+0x4c>
  {
    Error_Handler();
 80025bc:	f000 fc1c 	bl	8002df8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80025c0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80025c4:	f7ff f808 	bl	80015d8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7fe ffed 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB8-BOOT0   ------> USART3_RX
  PB9   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80025ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025d4:	2302      	movs	r3, #2
 80025d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025e0:	2300      	movs	r3, #0
 80025e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80025e4:	2307      	movs	r3, #7
 80025e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80025ec:	4619      	mov	r1, r3
 80025ee:	4832      	ldr	r0, [pc, #200]	@ (80026b8 <MX_USART3_UART_Init+0x144>)
 80025f0:	f008 fd63 	bl	800b0ba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80025f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025fa:	2302      	movs	r3, #2
 80025fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002606:	2300      	movs	r3, #0
 8002608:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800260a:	2307      	movs	r3, #7
 800260c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002612:	4619      	mov	r1, r3
 8002614:	4828      	ldr	r0, [pc, #160]	@ (80026b8 <MX_USART3_UART_Init+0x144>)
 8002616:	f008 fd50 	bl	800b0ba <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800261a:	f7fe fcb5 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 800261e:	4603      	mov	r3, r0
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fd05 	bl	8001034 <NVIC_EncodePriority>
 800262a:	4603      	mov	r3, r0
 800262c:	4619      	mov	r1, r3
 800262e:	2027      	movs	r0, #39	@ 0x27
 8002630:	f7fe fcd6 	bl	8000fe0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002634:	2027      	movs	r0, #39	@ 0x27
 8002636:	f7fe fcb5 	bl	8000fa4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	673b      	str	r3, [r7, #112]	@ 0x70
  USART_InitStruct.BaudRate = 115200;
 800263e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002642:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002644:	2300      	movs	r3, #0
 8002646:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002648:	2300      	movs	r3, #0
 800264a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002652:	230c      	movs	r3, #12
 8002654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  LL_USART_Init(USART3, &USART_InitStruct);
 8002664:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002668:	4619      	mov	r1, r3
 800266a:	4814      	ldr	r0, [pc, #80]	@ (80026bc <MX_USART3_UART_Init+0x148>)
 800266c:	f009 fdf6 	bl	800c25c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8002670:	2100      	movs	r1, #0
 8002672:	4812      	ldr	r0, [pc, #72]	@ (80026bc <MX_USART3_UART_Init+0x148>)
 8002674:	f7fe fe3d 	bl	80012f2 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8002678:	2100      	movs	r1, #0
 800267a:	4810      	ldr	r0, [pc, #64]	@ (80026bc <MX_USART3_UART_Init+0x148>)
 800267c:	f7fe fe60 	bl	8001340 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 8002680:	480e      	ldr	r0, [pc, #56]	@ (80026bc <MX_USART3_UART_Init+0x148>)
 8002682:	f7fe fe26 	bl	80012d2 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART3);
 8002686:	480d      	ldr	r0, [pc, #52]	@ (80026bc <MX_USART3_UART_Init+0x148>)
 8002688:	f7fe fe81 	bl	800138e <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */

  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 800268c:	480b      	ldr	r0, [pc, #44]	@ (80026bc <MX_USART3_UART_Init+0x148>)
 800268e:	f7fe fe10 	bl	80012b2 <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 8002692:	bf00      	nop
 8002694:	4809      	ldr	r0, [pc, #36]	@ (80026bc <MX_USART3_UART_Init+0x148>)
 8002696:	f7fe fe90 	bl	80013ba <LL_USART_IsActiveFlag_TEACK>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f9      	beq.n	8002694 <MX_USART3_UART_Init+0x120>
 80026a0:	4806      	ldr	r0, [pc, #24]	@ (80026bc <MX_USART3_UART_Init+0x148>)
 80026a2:	f7fe fe9e 	bl	80013e2 <LL_USART_IsActiveFlag_REACK>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f3      	beq.n	8002694 <MX_USART3_UART_Init+0x120>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3790      	adds	r7, #144	@ 0x90
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	48000400 	.word	0x48000400
 80026bc:	40004800 	.word	0x40004800

080026c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80026c6:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <MX_DMA_Init+0x90>)
 80026c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ca:	4a21      	ldr	r2, [pc, #132]	@ (8002750 <MX_DMA_Init+0x90>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80026d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002750 <MX_DMA_Init+0x90>)
 80026d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026de:	4b1c      	ldr	r3, [pc, #112]	@ (8002750 <MX_DMA_Init+0x90>)
 80026e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002750 <MX_DMA_Init+0x90>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80026ea:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <MX_DMA_Init+0x90>)
 80026ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	200b      	movs	r0, #11
 80026fc:	f002 fd7b 	bl	80051f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002700:	200b      	movs	r0, #11
 8002702:	f002 fd92 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	200c      	movs	r0, #12
 800270c:	f002 fd73 	bl	80051f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002710:	200c      	movs	r0, #12
 8002712:	f002 fd8a 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	200d      	movs	r0, #13
 800271c:	f002 fd6b 	bl	80051f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002720:	200d      	movs	r0, #13
 8002722:	f002 fd82 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	200e      	movs	r0, #14
 800272c:	f002 fd63 	bl	80051f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002730:	200e      	movs	r0, #14
 8002732:	f002 fd7a 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	200f      	movs	r0, #15
 800273c:	f002 fd5b 	bl	80051f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002740:	200f      	movs	r0, #15
 8002742:	f002 fd72 	bl	800522a <HAL_NVIC_EnableIRQ>

}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000

08002754 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800275a:	463b      	mov	r3, r7
 800275c:	2220      	movs	r2, #32
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f00f fb33 	bl	8011dcc <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002766:	4b2d      	ldr	r3, [pc, #180]	@ (800281c <MX_FMC_Init+0xc8>)
 8002768:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800276c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800276e:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <MX_FMC_Init+0xc8>)
 8002770:	4a2b      	ldr	r2, [pc, #172]	@ (8002820 <MX_FMC_Init+0xcc>)
 8002772:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002774:	4b29      	ldr	r3, [pc, #164]	@ (800281c <MX_FMC_Init+0xc8>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800277a:	4b28      	ldr	r3, [pc, #160]	@ (800281c <MX_FMC_Init+0xc8>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8002780:	4b26      	ldr	r3, [pc, #152]	@ (800281c <MX_FMC_Init+0xc8>)
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002786:	4b25      	ldr	r3, [pc, #148]	@ (800281c <MX_FMC_Init+0xc8>)
 8002788:	2210      	movs	r2, #16
 800278a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800278c:	4b23      	ldr	r3, [pc, #140]	@ (800281c <MX_FMC_Init+0xc8>)
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002792:	4b22      	ldr	r3, [pc, #136]	@ (800281c <MX_FMC_Init+0xc8>)
 8002794:	2200      	movs	r2, #0
 8002796:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002798:	4b20      	ldr	r3, [pc, #128]	@ (800281c <MX_FMC_Init+0xc8>)
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800279e:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <MX_FMC_Init+0xc8>)
 80027a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <MX_FMC_Init+0xc8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <MX_FMC_Init+0xc8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <MX_FMC_Init+0xc8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80027b8:	4b18      	ldr	r3, [pc, #96]	@ (800281c <MX_FMC_Init+0xc8>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <MX_FMC_Init+0xc8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80027c4:	4b15      	ldr	r3, [pc, #84]	@ (800281c <MX_FMC_Init+0xc8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80027ca:	4b14      	ldr	r3, [pc, #80]	@ (800281c <MX_FMC_Init+0xc8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <MX_FMC_Init+0xc8>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <MX_FMC_Init+0xc8>)
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  /* Timing */
  Timing.AddressSetupTime = 3;
 80027de:	2303      	movs	r3, #3
 80027e0:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80027e2:	230f      	movs	r3, #15
 80027e4:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 80027e6:	2303      	movs	r3, #3
 80027e8:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 80027ea:	2303      	movs	r3, #3
 80027ec:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 3;
 80027ee:	2303      	movs	r3, #3
 80027f0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80027f2:	2310      	movs	r3, #16
 80027f4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80027f6:	2311      	movs	r3, #17
 80027f8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80027fe:	463b      	mov	r3, r7
 8002800:	2200      	movs	r2, #0
 8002802:	4619      	mov	r1, r3
 8002804:	4805      	ldr	r0, [pc, #20]	@ (800281c <MX_FMC_Init+0xc8>)
 8002806:	f005 feb1 	bl	800856c <HAL_SRAM_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 8002810:	f000 faf2 	bl	8002df8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002814:	bf00      	nop
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20001d0c 	.word	0x20001d0c
 8002820:	a0000104 	.word	0xa0000104

08002824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
 8002844:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8002846:	2010      	movs	r0, #16
 8002848:	f7fe feae 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800284c:	2004      	movs	r0, #4
 800284e:	f7fe feab 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8002852:	2020      	movs	r0, #32
 8002854:	f7fe fea8 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002858:	2001      	movs	r0, #1
 800285a:	f7fe fea5 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800285e:	2002      	movs	r0, #2
 8002860:	f7fe fea2 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8002864:	2008      	movs	r0, #8
 8002866:	f7fe fe9f 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 800286a:	2040      	movs	r0, #64	@ 0x40
 800286c:	f7fe fe9c 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8002870:	2108      	movs	r1, #8
 8002872:	48bf      	ldr	r0, [pc, #764]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 8002874:	f7fe fe8a 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8002878:	2110      	movs	r1, #16
 800287a:	48bd      	ldr	r0, [pc, #756]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 800287c:	f7fe fe86 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 8002880:	2120      	movs	r1, #32
 8002882:	48bb      	ldr	r0, [pc, #748]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 8002884:	f7fe fe82 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8002888:	2101      	movs	r1, #1
 800288a:	48ba      	ldr	r0, [pc, #744]	@ (8002b74 <MX_GPIO_Init+0x350>)
 800288c:	f7fe fe7e 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED5_GPIO_Port, LED5_Pin);
 8002890:	2102      	movs	r1, #2
 8002892:	48b8      	ldr	r0, [pc, #736]	@ (8002b74 <MX_GPIO_Init+0x350>)
 8002894:	f7fe fe7a 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED6_GPIO_Port, LED6_Pin);
 8002898:	2104      	movs	r1, #4
 800289a:	48b6      	ldr	r0, [pc, #728]	@ (8002b74 <MX_GPIO_Init+0x350>)
 800289c:	f7fe fe76 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED7_GPIO_Port, LED7_Pin);
 80028a0:	2108      	movs	r1, #8
 80028a2:	48b4      	ldr	r0, [pc, #720]	@ (8002b74 <MX_GPIO_Init+0x350>)
 80028a4:	f7fe fe72 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 80028a8:	2104      	movs	r1, #4
 80028aa:	48b1      	ldr	r0, [pc, #708]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 80028ac:	f7fe fe6e 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80028b0:	2110      	movs	r1, #16
 80028b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b6:	f7fe fe69 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80028ba:	2140      	movs	r1, #64	@ 0x40
 80028bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028c0:	f7fe fe64 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ARDUINO_CS_GPIO_Port, ARDUINO_CS_Pin);
 80028c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028c8:	48a9      	ldr	r0, [pc, #676]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 80028ca:	f7fe fe5f 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CAN_STBY_GPIO_Port, CAN_STBY_Pin);
 80028ce:	2180      	movs	r1, #128	@ 0x80
 80028d0:	48a9      	ldr	r0, [pc, #676]	@ (8002b78 <MX_GPIO_Init+0x354>)
 80028d2:	f7fe fe5b 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_RST_GPIO_Port, LCD_RST_Pin);
 80028d6:	2108      	movs	r1, #8
 80028d8:	48a8      	ldr	r0, [pc, #672]	@ (8002b7c <MX_GPIO_Init+0x358>)
 80028da:	f7fe fe57 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LIN_SLP_GPIO_Port, LIN_SLP_Pin);
 80028de:	2120      	movs	r1, #32
 80028e0:	48a7      	ldr	r0, [pc, #668]	@ (8002b80 <MX_GPIO_Init+0x35c>)
 80028e2:	f7fe fe53 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 80028e6:	2101      	movs	r1, #1
 80028e8:	48a6      	ldr	r0, [pc, #664]	@ (8002b84 <MX_GPIO_Init+0x360>)
 80028ea:	f7fe fe4f 	bl	800158c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin);
 80028ee:	2102      	movs	r1, #2
 80028f0:	48a4      	ldr	r0, [pc, #656]	@ (8002b84 <MX_GPIO_Init+0x360>)
 80028f2:	f7fe fe3d 	bl	8001570 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 80028f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002900:	2301      	movs	r3, #1
 8002902:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	4619      	mov	r1, r3
 8002908:	489a      	ldr	r0, [pc, #616]	@ (8002b74 <MX_GPIO_Init+0x350>)
 800290a:	f008 fbd6 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_OK_Pin;
 800290e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002912:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002918:	2301      	movs	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_OK_GPIO_Port, &GPIO_InitStruct);
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4894      	ldr	r0, [pc, #592]	@ (8002b74 <MX_GPIO_Init+0x350>)
 8002922:	f008 fbca 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8002926:	2308      	movs	r3, #8
 8002928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800292a:	2301      	movs	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	4619      	mov	r1, r3
 800293e:	488c      	ldr	r0, [pc, #560]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 8002940:	f008 fbbb 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8002944:	2310      	movs	r3, #16
 8002946:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002948:	2301      	movs	r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	4619      	mov	r1, r3
 800295c:	4884      	ldr	r0, [pc, #528]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 800295e:	f008 fbac 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8002962:	2320      	movs	r3, #32
 8002964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002966:	2301      	movs	r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	4619      	mov	r1, r3
 800297a:	487d      	ldr	r0, [pc, #500]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 800297c:	f008 fb9d 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = AD5_Pin;
 8002980:	2302      	movs	r3, #2
 8002982:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002984:	2303      	movs	r3, #3
 8002986:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4877      	ldr	r0, [pc, #476]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 8002992:	f008 fb92 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8002996:	2301      	movs	r3, #1
 8002998:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800299a:	2301      	movs	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4871      	ldr	r0, [pc, #452]	@ (8002b74 <MX_GPIO_Init+0x350>)
 80029b0:	f008 fb83 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED5_Pin;
 80029b4:	2302      	movs	r3, #2
 80029b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80029b8:	2301      	movs	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4869      	ldr	r0, [pc, #420]	@ (8002b74 <MX_GPIO_Init+0x350>)
 80029ce:	f008 fb74 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED6_Pin;
 80029d2:	2304      	movs	r3, #4
 80029d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80029d6:	2301      	movs	r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4862      	ldr	r0, [pc, #392]	@ (8002b74 <MX_GPIO_Init+0x350>)
 80029ec:	f008 fb65 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED7_Pin;
 80029f0:	2308      	movs	r3, #8
 80029f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80029f4:	2301      	movs	r3, #1
 80029f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	485a      	ldr	r0, [pc, #360]	@ (8002b74 <MX_GPIO_Init+0x350>)
 8002a0a:	f008 fb56 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a12:	2301      	movs	r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4852      	ldr	r0, [pc, #328]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 8002a28:	f008 fb47 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = AD2_Pin;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a30:	2303      	movs	r3, #3
 8002a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(AD2_GPIO_Port, &GPIO_InitStruct);
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a40:	f008 fb3b 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = AD3_Pin;
 8002a44:	2308      	movs	r3, #8
 8002a46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(AD3_GPIO_Port, &GPIO_InitStruct);
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	4619      	mov	r1, r3
 8002a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a58:	f008 fb2f 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a60:	2301      	movs	r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a78:	f008 fb1f 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = AD8_Pin;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a80:	2303      	movs	r3, #3
 8002a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a90:	f008 fb13 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002a94:	2340      	movs	r3, #64	@ 0x40
 8002a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab0:	f008 fb03 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = AD4_Pin;
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(AD4_GPIO_Port, &GPIO_InitStruct);
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	482b      	ldr	r0, [pc, #172]	@ (8002b74 <MX_GPIO_Init+0x350>)
 8002ac6:	f008 faf8 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = AD6_Pin;
 8002aca:	2320      	movs	r3, #32
 8002acc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(AD6_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4826      	ldr	r0, [pc, #152]	@ (8002b74 <MX_GPIO_Init+0x350>)
 8002adc:	f008 faed 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARDUINO_CS_Pin;
 8002ae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ae4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARDUINO_CS_GPIO_Port, &GPIO_InitStruct);
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	481d      	ldr	r0, [pc, #116]	@ (8002b70 <MX_GPIO_Init+0x34c>)
 8002afc:	f008 fadd 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = AD9_Pin;
 8002b00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002b06:	2303      	movs	r3, #3
 8002b08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(AD9_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	481a      	ldr	r0, [pc, #104]	@ (8002b7c <MX_GPIO_Init+0x358>)
 8002b14:	f008 fad1 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = AD10_Pin;
 8002b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(AD10_GPIO_Port, &GPIO_InitStruct);
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4814      	ldr	r0, [pc, #80]	@ (8002b7c <MX_GPIO_Init+0x358>)
 8002b2c:	f008 fac5 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = AD11_Pin;
 8002b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002b36:	2303      	movs	r3, #3
 8002b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(AD11_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	480e      	ldr	r0, [pc, #56]	@ (8002b7c <MX_GPIO_Init+0x358>)
 8002b44:	f008 fab9 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_UP_Pin;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_UP_GPIO_Port, &GPIO_InitStruct);
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4807      	ldr	r0, [pc, #28]	@ (8002b78 <MX_GPIO_Init+0x354>)
 8002b5a:	f008 faae 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_DOWN_Pin;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002b66:	2301      	movs	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_DOWN_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	e00b      	b.n	8002b88 <MX_GPIO_Init+0x364>
 8002b70:	48001400 	.word	0x48001400
 8002b74:	48000800 	.word	0x48000800
 8002b78:	48001800 	.word	0x48001800
 8002b7c:	48000c00 	.word	0x48000c00
 8002b80:	48000400 	.word	0x48000400
 8002b84:	48001000 	.word	0x48001000
 8002b88:	4894      	ldr	r0, [pc, #592]	@ (8002ddc <MX_GPIO_Init+0x5b8>)
 8002b8a:	f008 fa96 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8002b8e:	2340      	movs	r3, #64	@ 0x40
 8002b90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	488f      	ldr	r0, [pc, #572]	@ (8002ddc <MX_GPIO_Init+0x5b8>)
 8002ba0:	f008 fa8b 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4887      	ldr	r0, [pc, #540]	@ (8002ddc <MX_GPIO_Init+0x5b8>)
 8002bbe:	f008 fa7c 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8002bc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4881      	ldr	r0, [pc, #516]	@ (8002ddc <MX_GPIO_Init+0x5b8>)
 8002bd6:	f008 fa70 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002bda:	2308      	movs	r3, #8
 8002bdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002bde:	2301      	movs	r3, #1
 8002be0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	487b      	ldr	r0, [pc, #492]	@ (8002de0 <MX_GPIO_Init+0x5bc>)
 8002bf4:	f008 fa61 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIN_SLP_Pin;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LIN_SLP_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4874      	ldr	r0, [pc, #464]	@ (8002de4 <MX_GPIO_Init+0x5c0>)
 8002c12:	f008 fa52 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8002c16:	2301      	movs	r3, #1
 8002c18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	486e      	ldr	r0, [pc, #440]	@ (8002de8 <MX_GPIO_Init+0x5c4>)
 8002c30:	f008 fa43 	bl	800b0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002c34:	2302      	movs	r3, #2
 8002c36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002c44:	2301      	movs	r3, #1
 8002c46:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4866      	ldr	r0, [pc, #408]	@ (8002de8 <MX_GPIO_Init+0x5c4>)
 8002c4e:	f008 fa34 	bl	800b0ba <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8002c52:	4966      	ldr	r1, [pc, #408]	@ (8002dec <MX_GPIO_Init+0x5c8>)
 8002c54:	2002      	movs	r0, #2
 8002c56:	f7fe fbd9 	bl	800140c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8002c5a:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fe fbd4 	bl	800140c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE1);
 8002c64:	f44f 0170 	mov.w	r1, #15728640	@ 0xf00000
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fe fbcf 	bl	800140c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE6);
 8002c6e:	4960      	ldr	r1, [pc, #384]	@ (8002df0 <MX_GPIO_Init+0x5cc>)
 8002c70:	2003      	movs	r0, #3
 8002c72:	f7fe fbcb 	bl	800140c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8002c76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c7a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	4618      	mov	r0, r3
 8002c94:	f007 fe76 	bl	800a984 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002cae:	f107 031c 	add.w	r3, r7, #28
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f007 fe66 	bl	800a984 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002cce:	f107 031c 	add.w	r3, r7, #28
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f007 fe56 	bl	800a984 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8002cd8:	2340      	movs	r3, #64	@ 0x40
 8002cda:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f007 fe46 	bl	800a984 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN_ESC_GPIO_Port, BTN_ESC_Pin, LL_GPIO_PULL_UP);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002cfe:	483d      	ldr	r0, [pc, #244]	@ (8002df4 <MX_GPIO_Init+0x5d0>)
 8002d00:	f7fe fbf9 	bl	80014f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(adc_Int_GPIO_Port, adc_Int_Pin, LL_GPIO_PULL_UP);
 8002d04:	2201      	movs	r2, #1
 8002d06:	2101      	movs	r1, #1
 8002d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d0c:	f7fe fbf3 	bl	80014f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MPU_INT_GPIO_Port, MPU_INT_Pin, LL_GPIO_PULL_NO);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2102      	movs	r1, #2
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d18:	f7fe fbed 	bl	80014f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin, LL_GPIO_PULL_UP);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	2140      	movs	r1, #64	@ 0x40
 8002d20:	482f      	ldr	r0, [pc, #188]	@ (8002de0 <MX_GPIO_Init+0x5bc>)
 8002d22:	f7fe fbe8 	bl	80014f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN_ESC_GPIO_Port, BTN_ESC_Pin, LL_GPIO_MODE_INPUT);
 8002d26:	2200      	movs	r2, #0
 8002d28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d2c:	4831      	ldr	r0, [pc, #196]	@ (8002df4 <MX_GPIO_Init+0x5d0>)
 8002d2e:	f7fe fba5 	bl	800147c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(adc_Int_GPIO_Port, adc_Int_Pin, LL_GPIO_MODE_INPUT);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2101      	movs	r1, #1
 8002d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d3a:	f7fe fb9f 	bl	800147c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MPU_INT_GPIO_Port, MPU_INT_Pin, LL_GPIO_MODE_INPUT);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2102      	movs	r1, #2
 8002d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d46:	f7fe fb99 	bl	800147c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin, LL_GPIO_MODE_INPUT);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2140      	movs	r1, #64	@ 0x40
 8002d4e:	4824      	ldr	r0, [pc, #144]	@ (8002de0 <MX_GPIO_Init+0x5bc>)
 8002d50:	f7fe fb94 	bl	800147c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002d54:	f7fe f918 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe f968 	bl	8001034 <NVIC_EncodePriority>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4619      	mov	r1, r3
 8002d68:	2006      	movs	r0, #6
 8002d6a:	f7fe f939 	bl	8000fe0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8002d6e:	2006      	movs	r0, #6
 8002d70:	f7fe f918 	bl	8000fa4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002d74:	f7fe f908 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe f958 	bl	8001034 <NVIC_EncodePriority>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4619      	mov	r1, r3
 8002d88:	2007      	movs	r0, #7
 8002d8a:	f7fe f929 	bl	8000fe0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8002d8e:	2007      	movs	r0, #7
 8002d90:	f7fe f908 	bl	8000fa4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002d94:	f7fe f8f8 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe f948 	bl	8001034 <NVIC_EncodePriority>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4619      	mov	r1, r3
 8002da8:	2017      	movs	r0, #23
 8002daa:	f7fe f919 	bl	8000fe0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002dae:	2017      	movs	r0, #23
 8002db0:	f7fe f8f8 	bl	8000fa4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002db4:	f7fe f8e8 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f938 	bl	8001034 <NVIC_EncodePriority>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	2028      	movs	r0, #40	@ 0x28
 8002dca:	f7fe f909 	bl	8000fe0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dce:	2028      	movs	r0, #40	@ 0x28
 8002dd0:	f7fe f8e8 	bl	8000fa4 <__NVIC_EnableIRQ>

}
 8002dd4:	bf00      	nop
 8002dd6:	3728      	adds	r7, #40	@ 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	48001800 	.word	0x48001800
 8002de0:	48000c00 	.word	0x48000c00
 8002de4:	48000400 	.word	0x48000400
 8002de8:	48001000 	.word	0x48001000
 8002dec:	0f000003 	.word	0x0f000003
 8002df0:	0f000001 	.word	0x0f000001
 8002df4:	48000800 	.word	0x48000800

08002df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002dfc:	b672      	cpsid	i
}
 8002dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <Error_Handler+0x8>

08002e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <HAL_MspInit+0x44>)
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <HAL_MspInit+0x44>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e16:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <HAL_MspInit+0x44>)
 8002e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_MspInit+0x44>)
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <HAL_MspInit+0x44>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_MspInit+0x44>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002e3a:	f003 fdb3 	bl	80069a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000

08002e4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b09e      	sub	sp, #120	@ 0x78
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	2254      	movs	r2, #84	@ 0x54
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f00e ffad 	bl	8011dcc <memset>
  if(hadc->Instance==ADC4)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a33      	ldr	r2, [pc, #204]	@ (8002f44 <HAL_ADC_MspInit+0xf8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d15f      	bne.n	8002f3c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002e7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e80:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002e82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002e86:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 fb8f 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002e98:	f7ff ffae 	bl	8002df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f48 <HAL_ADC_MspInit+0xfc>)
 8002e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea0:	4a29      	ldr	r2, [pc, #164]	@ (8002f48 <HAL_ADC_MspInit+0xfc>)
 8002ea2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ea8:	4b27      	ldr	r3, [pc, #156]	@ (8002f48 <HAL_ADC_MspInit+0xfc>)
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb4:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_ADC_MspInit+0xfc>)
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb8:	4a23      	ldr	r2, [pc, #140]	@ (8002f48 <HAL_ADC_MspInit+0xfc>)
 8002eba:	f043 0302 	orr.w	r3, r3, #2
 8002ebe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ec0:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <HAL_ADC_MspInit+0xfc>)
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
    /**ADC4 GPIO Configuration
    PB14     ------> ADC4_IN4
    PB15     ------> ADC4_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002ecc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ed0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ede:	4619      	mov	r1, r3
 8002ee0:	481a      	ldr	r0, [pc, #104]	@ (8002f4c <HAL_ADC_MspInit+0x100>)
 8002ee2:	f002 fd3d 	bl	8005960 <HAL_GPIO_Init>

    /* ADC4 DMA Init */
    /* ADC4 Init */
    hdma_adc4.Instance = DMA1_Channel1;
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f54 <HAL_ADC_MspInit+0x108>)
 8002eea:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8002eec:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002eee:	2226      	movs	r2, #38	@ 0x26
 8002ef0:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ef2:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef8:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8002efe:	4b14      	ldr	r3, [pc, #80]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002f00:	2280      	movs	r2, #128	@ 0x80
 8002f02:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f04:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002f06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f0a:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f0c:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f12:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8002f14:	4b0e      	ldr	r3, [pc, #56]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002f16:	2220      	movs	r2, #32
 8002f18:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8002f20:	480b      	ldr	r0, [pc, #44]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002f22:	f002 f99d 	bl	8005260 <HAL_DMA_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002f2c:	f7ff ff64 	bl	8002df8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a07      	ldr	r2, [pc, #28]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f36:	4a06      	ldr	r2, [pc, #24]	@ (8002f50 <HAL_ADC_MspInit+0x104>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8002f3c:	bf00      	nop
 8002f3e:	3778      	adds	r7, #120	@ 0x78
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	50000500 	.word	0x50000500
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	48000400 	.word	0x48000400
 8002f50:	20001b30 	.word	0x20001b30
 8002f54:	40020008 	.word	0x40020008

08002f58 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <HAL_CORDIC_MspInit+0x38>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10b      	bne.n	8002f82 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <HAL_CORDIC_MspInit+0x3c>)
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6e:	4a09      	ldr	r2, [pc, #36]	@ (8002f94 <HAL_CORDIC_MspInit+0x3c>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f76:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <HAL_CORDIC_MspInit+0x3c>)
 8002f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40020c00 	.word	0x40020c00
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b09e      	sub	sp, #120	@ 0x78
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	2254      	movs	r2, #84	@ 0x54
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f00e ff07 	bl	8011dcc <memset>
  if(hfdcan->Instance==FDCAN2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a20      	ldr	r2, [pc, #128]	@ (8003044 <HAL_FDCAN_MspInit+0xac>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d138      	bne.n	800303a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fcc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002fce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd4:	f107 0310 	add.w	r3, r7, #16
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 fae9 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002fe4:	f7ff ff08 	bl	8002df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002fe8:	4b17      	ldr	r3, [pc, #92]	@ (8003048 <HAL_FDCAN_MspInit+0xb0>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	4a16      	ldr	r2, [pc, #88]	@ (8003048 <HAL_FDCAN_MspInit+0xb0>)
 8002fee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff4:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <HAL_FDCAN_MspInit+0xb0>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003000:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <HAL_FDCAN_MspInit+0xb0>)
 8003002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003004:	4a10      	ldr	r2, [pc, #64]	@ (8003048 <HAL_FDCAN_MspInit+0xb0>)
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800300c:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <HAL_FDCAN_MspInit+0xb0>)
 800300e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003018:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800301c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800302a:	2309      	movs	r3, #9
 800302c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	@ (800304c <HAL_FDCAN_MspInit+0xb4>)
 8003036:	f002 fc93 	bl	8005960 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800303a:	bf00      	nop
 800303c:	3778      	adds	r7, #120	@ 0x78
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40006800 	.word	0x40006800
 8003048:	40021000 	.word	0x40021000
 800304c:	48000400 	.word	0x48000400

08003050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0a2      	sub	sp, #136	@ 0x88
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003068:	f107 0320 	add.w	r3, r7, #32
 800306c:	2254      	movs	r2, #84	@ 0x54
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f00e feab 	bl	8011dcc <memset>
  if(hi2c->Instance==I2C1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a4f      	ldr	r2, [pc, #316]	@ (80031b8 <HAL_I2C_MspInit+0x168>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d158      	bne.n	8003132 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003080:	2340      	movs	r3, #64	@ 0x40
 8003082:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003084:	2300      	movs	r3, #0
 8003086:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003088:	f107 0320 	add.w	r3, r7, #32
 800308c:	4618      	mov	r0, r3
 800308e:	f004 fa8f 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003098:	f7ff feae 	bl	8002df8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309c:	4b47      	ldr	r3, [pc, #284]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 800309e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a0:	4a46      	ldr	r2, [pc, #280]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030a8:	4b44      	ldr	r3, [pc, #272]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 80030aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b4:	4b41      	ldr	r3, [pc, #260]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 80030b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b8:	4a40      	ldr	r2, [pc, #256]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c0:	4b3e      	ldr	r3, [pc, #248]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 80030c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030d0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d2:	2312      	movs	r3, #18
 80030d4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030e0:	2304      	movs	r3, #4
 80030e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80030ea:	4619      	mov	r1, r3
 80030ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030f0:	f002 fc36 	bl	8005960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030f8:	2312      	movs	r3, #18
 80030fa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003106:	2304      	movs	r3, #4
 8003108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003110:	4619      	mov	r1, r3
 8003112:	482b      	ldr	r0, [pc, #172]	@ (80031c0 <HAL_I2C_MspInit+0x170>)
 8003114:	f002 fc24 	bl	8005960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003118:	4b28      	ldr	r3, [pc, #160]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	4a27      	ldr	r2, [pc, #156]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 800311e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003122:	6593      	str	r3, [r2, #88]	@ 0x58
 8003124:	4b25      	ldr	r3, [pc, #148]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003130:	e03e      	b.n	80031b0 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a23      	ldr	r2, [pc, #140]	@ (80031c4 <HAL_I2C_MspInit+0x174>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d139      	bne.n	80031b0 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003140:	2300      	movs	r3, #0
 8003142:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003144:	f107 0320 	add.w	r3, r7, #32
 8003148:	4618      	mov	r0, r3
 800314a:	f004 fa31 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8003154:	f7ff fe50 	bl	8002df8 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003158:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	4a17      	ldr	r2, [pc, #92]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003164:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 8003166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003170:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003174:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003176:	2312      	movs	r3, #18
 8003178:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800317a:	2301      	movs	r3, #1
 800317c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003184:	2304      	movs	r3, #4
 8003186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800318e:	4619      	mov	r1, r3
 8003190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003194:	f002 fbe4 	bl	8005960 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003198:	4b08      	ldr	r3, [pc, #32]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319c:	4a07      	ldr	r2, [pc, #28]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 800319e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a4:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <HAL_I2C_MspInit+0x16c>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3788      	adds	r7, #136	@ 0x88
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40005400 	.word	0x40005400
 80031bc:	40021000 	.word	0x40021000
 80031c0:	48000400 	.word	0x48000400
 80031c4:	40005800 	.word	0x40005800

080031c8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b0a0      	sub	sp, #128	@ 0x80
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031e0:	f107 0318 	add.w	r3, r7, #24
 80031e4:	2254      	movs	r2, #84	@ 0x54
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f00e fdef 	bl	8011dcc <memset>
  if(hqspi->Instance==QUADSPI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3c      	ldr	r2, [pc, #240]	@ (80032e4 <HAL_QSPI_MspInit+0x11c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d170      	bne.n	80032da <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80031f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 80031fe:	2300      	movs	r3, #0
 8003200:	667b      	str	r3, [r7, #100]	@ 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003202:	f107 0318 	add.w	r3, r7, #24
 8003206:	4618      	mov	r0, r3
 8003208:	f004 f9d2 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 8003212:	f7ff fdf1 	bl	8002df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 8003218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321a:	4a33      	ldr	r2, [pc, #204]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003220:	6513      	str	r3, [r2, #80]	@ 0x50
 8003222:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 8003224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322e:	4b2e      	ldr	r3, [pc, #184]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 8003230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003232:	4a2d      	ldr	r2, [pc, #180]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800323a:	4b2b      	ldr	r3, [pc, #172]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	4b28      	ldr	r3, [pc, #160]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324a:	4a27      	ldr	r2, [pc, #156]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003252:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800325e:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003262:	4a21      	ldr	r2, [pc, #132]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 8003264:	f043 0320 	orr.w	r3, r3, #32
 8003268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800326a:	4b1f      	ldr	r3, [pc, #124]	@ (80032e8 <HAL_QSPI_MspInit+0x120>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> QUADSPI1_BK1_IO0
    PB10     ------> QUADSPI1_CLK
    PB11     ------> QUADSPI1_BK1_NCS
    PF6     ------> QUADSPI1_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003276:	2380      	movs	r3, #128	@ 0x80
 8003278:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003286:	230a      	movs	r3, #10
 8003288:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800328e:	4619      	mov	r1, r3
 8003290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003294:	f002 fb64 	bl	8005960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8003298:	f640 4303 	movw	r3, #3075	@ 0xc03
 800329c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329e:	2302      	movs	r3, #2
 80032a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a6:	2303      	movs	r3, #3
 80032a8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032aa:	230a      	movs	r3, #10
 80032ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80032b2:	4619      	mov	r1, r3
 80032b4:	480d      	ldr	r0, [pc, #52]	@ (80032ec <HAL_QSPI_MspInit+0x124>)
 80032b6:	f002 fb53 	bl	8005960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032ba:	2340      	movs	r3, #64	@ 0x40
 80032bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c6:	2303      	movs	r3, #3
 80032c8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032ca:	230a      	movs	r3, #10
 80032cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032ce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80032d2:	4619      	mov	r1, r3
 80032d4:	4806      	ldr	r0, [pc, #24]	@ (80032f0 <HAL_QSPI_MspInit+0x128>)
 80032d6:	f002 fb43 	bl	8005960 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80032da:	bf00      	nop
 80032dc:	3780      	adds	r7, #128	@ 0x80
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	a0001000 	.word	0xa0001000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	48000400 	.word	0x48000400
 80032f0:	48001400 	.word	0x48001400

080032f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	@ 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a40      	ldr	r2, [pc, #256]	@ (8003414 <HAL_SPI_MspInit+0x120>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d179      	bne.n	800340a <HAL_SPI_MspInit+0x116>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003316:	4b40      	ldr	r3, [pc, #256]	@ (8003418 <HAL_SPI_MspInit+0x124>)
 8003318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331a:	4a3f      	ldr	r2, [pc, #252]	@ (8003418 <HAL_SPI_MspInit+0x124>)
 800331c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003320:	6613      	str	r3, [r2, #96]	@ 0x60
 8003322:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <HAL_SPI_MspInit+0x124>)
 8003324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003326:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800332e:	4b3a      	ldr	r3, [pc, #232]	@ (8003418 <HAL_SPI_MspInit+0x124>)
 8003330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003332:	4a39      	ldr	r2, [pc, #228]	@ (8003418 <HAL_SPI_MspInit+0x124>)
 8003334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800333a:	4b37      	ldr	r3, [pc, #220]	@ (8003418 <HAL_SPI_MspInit+0x124>)
 800333c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8003346:	231c      	movs	r3, #28
 8003348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003356:	2305      	movs	r3, #5
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	4619      	mov	r1, r3
 8003360:	482e      	ldr	r0, [pc, #184]	@ (800341c <HAL_SPI_MspInit+0x128>)
 8003362:	f002 fafd 	bl	8005960 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel4;
 8003366:	4b2e      	ldr	r3, [pc, #184]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 8003368:	4a2e      	ldr	r2, [pc, #184]	@ (8003424 <HAL_SPI_MspInit+0x130>)
 800336a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800336c:	4b2c      	ldr	r3, [pc, #176]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 800336e:	220a      	movs	r2, #10
 8003370:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003372:	4b2b      	ldr	r3, [pc, #172]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003378:	4b29      	ldr	r3, [pc, #164]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 800337a:	2200      	movs	r2, #0
 800337c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800337e:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 8003380:	2280      	movs	r2, #128	@ 0x80
 8003382:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003384:	4b26      	ldr	r3, [pc, #152]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 8003386:	2200      	movs	r2, #0
 8003388:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800338a:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 800338c:	2200      	movs	r2, #0
 800338e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003390:	4b23      	ldr	r3, [pc, #140]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 8003392:	2200      	movs	r2, #0
 8003394:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003396:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 8003398:	2200      	movs	r2, #0
 800339a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800339c:	4820      	ldr	r0, [pc, #128]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 800339e:	f001 ff5f 	bl	8005260 <HAL_DMA_Init>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 80033a8:	f7ff fd26 	bl	8002df8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 80033b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80033b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <HAL_SPI_MspInit+0x12c>)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel5;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033ba:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <HAL_SPI_MspInit+0x138>)
 80033bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80033be:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033c0:	220b      	movs	r2, #11
 80033c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c4:	4b18      	ldr	r3, [pc, #96]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033c6:	2210      	movs	r2, #16
 80033c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ca:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033d0:	4b15      	ldr	r3, [pc, #84]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033d2:	2280      	movs	r2, #128	@ 0x80
 80033d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033d8:	2200      	movs	r2, #0
 80033da:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033dc:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033de:	2200      	movs	r2, #0
 80033e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80033ee:	480e      	ldr	r0, [pc, #56]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 80033f0:	f001 ff36 	bl	8005260 <HAL_DMA_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80033fa:	f7ff fcfd 	bl	8002df8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a09      	ldr	r2, [pc, #36]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 8003402:	655a      	str	r2, [r3, #84]	@ 0x54
 8003404:	4a08      	ldr	r2, [pc, #32]	@ (8003428 <HAL_SPI_MspInit+0x134>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800340a:	bf00      	nop
 800340c:	3728      	adds	r7, #40	@ 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40013000 	.word	0x40013000
 8003418:	40021000 	.word	0x40021000
 800341c:	48001800 	.word	0x48001800
 8003420:	200023bc 	.word	0x200023bc
 8003424:	40020044 	.word	0x40020044
 8003428:	2000241c 	.word	0x2000241c
 800342c:	40020058 	.word	0x40020058

08003430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a3a      	ldr	r2, [pc, #232]	@ (8003528 <HAL_TIM_Base_MspInit+0xf8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10c      	bne.n	800345c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003442:	4b3a      	ldr	r3, [pc, #232]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 8003444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003446:	4a39      	ldr	r2, [pc, #228]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 8003448:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800344c:	6613      	str	r3, [r2, #96]	@ 0x60
 800344e:	4b37      	ldr	r3, [pc, #220]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 8003450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 800345a:	e060      	b.n	800351e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a33      	ldr	r2, [pc, #204]	@ (8003530 <HAL_TIM_Base_MspInit+0x100>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10c      	bne.n	8003480 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003466:	4b31      	ldr	r3, [pc, #196]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	4a30      	ldr	r2, [pc, #192]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	6593      	str	r3, [r2, #88]	@ 0x58
 8003472:	4b2e      	ldr	r3, [pc, #184]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	69bb      	ldr	r3, [r7, #24]
}
 800347e:	e04e      	b.n	800351e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2b      	ldr	r2, [pc, #172]	@ (8003534 <HAL_TIM_Base_MspInit+0x104>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10c      	bne.n	80034a4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800348a:	4b28      	ldr	r3, [pc, #160]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	4a27      	ldr	r2, [pc, #156]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 8003490:	f043 0308 	orr.w	r3, r3, #8
 8003494:	6593      	str	r3, [r2, #88]	@ 0x58
 8003496:	4b25      	ldr	r3, [pc, #148]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697b      	ldr	r3, [r7, #20]
}
 80034a2:	e03c      	b.n	800351e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a23      	ldr	r2, [pc, #140]	@ (8003538 <HAL_TIM_Base_MspInit+0x108>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d114      	bne.n	80034d8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034ae:	4b1f      	ldr	r3, [pc, #124]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 80034b4:	f043 0310 	orr.w	r3, r3, #16
 80034b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ba:	4b1c      	ldr	r3, [pc, #112]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2100      	movs	r1, #0
 80034ca:	2036      	movs	r0, #54	@ 0x36
 80034cc:	f001 fe93 	bl	80051f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034d0:	2036      	movs	r0, #54	@ 0x36
 80034d2:	f001 feaa 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 80034d6:	e022      	b.n	800351e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a17      	ldr	r2, [pc, #92]	@ (800353c <HAL_TIM_Base_MspInit+0x10c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10c      	bne.n	80034fc <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80034e2:	4b12      	ldr	r3, [pc, #72]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 80034e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e6:	4a11      	ldr	r2, [pc, #68]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80034ee:	4b0f      	ldr	r3, [pc, #60]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 80034f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
}
 80034fa:	e010      	b.n	800351e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM20)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0f      	ldr	r2, [pc, #60]	@ (8003540 <HAL_TIM_Base_MspInit+0x110>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10b      	bne.n	800351e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003506:	4b09      	ldr	r3, [pc, #36]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 8003508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350a:	4a08      	ldr	r2, [pc, #32]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 800350c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003510:	6613      	str	r3, [r2, #96]	@ 0x60
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <HAL_TIM_Base_MspInit+0xfc>)
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
}
 800351e:	bf00      	nop
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40021000 	.word	0x40021000
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40001000 	.word	0x40001000
 800353c:	40014000 	.word	0x40014000
 8003540:	40015000 	.word	0x40015000

08003544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	@ 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a45      	ldr	r2, [pc, #276]	@ (8003678 <HAL_TIM_MspPostInit+0x134>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d11c      	bne.n	80035a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	4b45      	ldr	r3, [pc, #276]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 8003568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356a:	4a44      	ldr	r2, [pc, #272]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003572:	4b42      	ldr	r3, [pc, #264]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 8003574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	69bb      	ldr	r3, [r7, #24]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800357e:	2340      	movs	r3, #64	@ 0x40
 8003580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358a:	2300      	movs	r3, #0
 800358c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800358e:	2302      	movs	r3, #2
 8003590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003592:	f107 031c 	add.w	r3, r7, #28
 8003596:	4619      	mov	r1, r3
 8003598:	4839      	ldr	r0, [pc, #228]	@ (8003680 <HAL_TIM_MspPostInit+0x13c>)
 800359a:	f002 f9e1 	bl	8005960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800359e:	e067      	b.n	8003670 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a37      	ldr	r2, [pc, #220]	@ (8003684 <HAL_TIM_MspPostInit+0x140>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d11d      	bne.n	80035e6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035aa:	4b34      	ldr	r3, [pc, #208]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 80035ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ae:	4a33      	ldr	r2, [pc, #204]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 80035b0:	f043 0320 	orr.w	r3, r3, #32
 80035b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035b6:	4b31      	ldr	r3, [pc, #196]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 80035b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80035c2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80035c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	2302      	movs	r3, #2
 80035ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 80035d4:	2306      	movs	r3, #6
 80035d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035d8:	f107 031c 	add.w	r3, r7, #28
 80035dc:	4619      	mov	r1, r3
 80035de:	482a      	ldr	r0, [pc, #168]	@ (8003688 <HAL_TIM_MspPostInit+0x144>)
 80035e0:	f002 f9be 	bl	8005960 <HAL_GPIO_Init>
}
 80035e4:	e044      	b.n	8003670 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM15)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a28      	ldr	r2, [pc, #160]	@ (800368c <HAL_TIM_MspPostInit+0x148>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d11d      	bne.n	800362c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035f0:	4b22      	ldr	r3, [pc, #136]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 80035f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f4:	4a21      	ldr	r2, [pc, #132]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 80035f6:	f043 0320 	orr.w	r3, r3, #32
 80035fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035fc:	4b1f      	ldr	r3, [pc, #124]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 80035fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800360c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 800361a:	2303      	movs	r3, #3
 800361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800361e:	f107 031c 	add.w	r3, r7, #28
 8003622:	4619      	mov	r1, r3
 8003624:	4818      	ldr	r0, [pc, #96]	@ (8003688 <HAL_TIM_MspPostInit+0x144>)
 8003626:	f002 f99b 	bl	8005960 <HAL_GPIO_Init>
}
 800362a:	e021      	b.n	8003670 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM20)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <HAL_TIM_MspPostInit+0x14c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d11c      	bne.n	8003670 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003636:	4b11      	ldr	r3, [pc, #68]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	4a10      	ldr	r2, [pc, #64]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 800363c:	f043 0320 	orr.w	r3, r3, #32
 8003640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003642:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <HAL_TIM_MspPostInit+0x138>)
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800364e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365c:	2300      	movs	r3, #0
 800365e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8003660:	2302      	movs	r3, #2
 8003662:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003664:	f107 031c 	add.w	r3, r7, #28
 8003668:	4619      	mov	r1, r3
 800366a:	4807      	ldr	r0, [pc, #28]	@ (8003688 <HAL_TIM_MspPostInit+0x144>)
 800366c:	f002 f978 	bl	8005960 <HAL_GPIO_Init>
}
 8003670:	bf00      	nop
 8003672:	3730      	adds	r7, #48	@ 0x30
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40000800 	.word	0x40000800
 800367c:	40021000 	.word	0x40021000
 8003680:	48000400 	.word	0x48000400
 8003684:	40000c00 	.word	0x40000c00
 8003688:	48001400 	.word	0x48001400
 800368c:	40014000 	.word	0x40014000
 8003690:	40015000 	.word	0x40015000

08003694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b0a6      	sub	sp, #152	@ 0x98
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036b0:	2254      	movs	r2, #84	@ 0x54
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f00e fb89 	bl	8011dcc <memset>
  if(huart->Instance==UART4)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4aad      	ldr	r2, [pc, #692]	@ (8003974 <HAL_UART_MspInit+0x2e0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d13c      	bne.n	800373e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80036c4:	2308      	movs	r3, #8
 80036c6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80036c8:	2300      	movs	r3, #0
 80036ca:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 ff6d 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80036dc:	f7ff fb8c 	bl	8002df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80036e0:	4ba5      	ldr	r3, [pc, #660]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	4aa4      	ldr	r2, [pc, #656]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 80036e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ec:	4ba2      	ldr	r3, [pc, #648]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f8:	4b9f      	ldr	r3, [pc, #636]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 80036fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fc:	4a9e      	ldr	r2, [pc, #632]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003704:	4b9c      	ldr	r3, [pc, #624]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 8003706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003710:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	2302      	movs	r3, #2
 800371a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800372a:	2305      	movs	r3, #5
 800372c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003730:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003734:	4619      	mov	r1, r3
 8003736:	4891      	ldr	r0, [pc, #580]	@ (800397c <HAL_UART_MspInit+0x2e8>)
 8003738:	f002 f912 	bl	8005960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800373c:	e170      	b.n	8003a20 <HAL_UART_MspInit+0x38c>
  else if(huart->Instance==UART5)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a8f      	ldr	r2, [pc, #572]	@ (8003980 <HAL_UART_MspInit+0x2ec>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d15d      	bne.n	8003804 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003748:	2310      	movs	r3, #16
 800374a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800374c:	2300      	movs	r3, #0
 800374e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003750:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003754:	4618      	mov	r0, r3
 8003756:	f003 ff2b 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003760:	f7ff fb4a 	bl	8002df8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003764:	4b84      	ldr	r3, [pc, #528]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003768:	4a83      	ldr	r2, [pc, #524]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 800376a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800376e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003770:	4b81      	ldr	r3, [pc, #516]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800377c:	4b7e      	ldr	r3, [pc, #504]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 800377e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003780:	4a7d      	ldr	r2, [pc, #500]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003788:	4b7b      	ldr	r3, [pc, #492]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 800378a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003794:	4b78      	ldr	r3, [pc, #480]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 8003796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003798:	4a77      	ldr	r2, [pc, #476]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 800379a:	f043 0308 	orr.w	r3, r3, #8
 800379e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037a0:	4b75      	ldr	r3, [pc, #468]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 80037a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80037ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80037c6:	2305      	movs	r3, #5
 80037c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037cc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80037d0:	4619      	mov	r1, r3
 80037d2:	486a      	ldr	r0, [pc, #424]	@ (800397c <HAL_UART_MspInit+0x2e8>)
 80037d4:	f002 f8c4 	bl	8005960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037d8:	2304      	movs	r3, #4
 80037da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80037f0:	2305      	movs	r3, #5
 80037f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037f6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80037fa:	4619      	mov	r1, r3
 80037fc:	4861      	ldr	r0, [pc, #388]	@ (8003984 <HAL_UART_MspInit+0x2f0>)
 80037fe:	f002 f8af 	bl	8005960 <HAL_GPIO_Init>
}
 8003802:	e10d      	b.n	8003a20 <HAL_UART_MspInit+0x38c>
  else if(huart->Instance==USART1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a5f      	ldr	r2, [pc, #380]	@ (8003988 <HAL_UART_MspInit+0x2f4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	f040 80c8 	bne.w	80039a0 <HAL_UART_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003810:	2301      	movs	r3, #1
 8003812:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003814:	2300      	movs	r3, #0
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003818:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fec7 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_UART_MspInit+0x198>
      Error_Handler();
 8003828:	f7ff fae6 	bl	8002df8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800382c:	4b52      	ldr	r3, [pc, #328]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	4a51      	ldr	r2, [pc, #324]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 8003832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003836:	6613      	str	r3, [r2, #96]	@ 0x60
 8003838:	4b4f      	ldr	r3, [pc, #316]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 800383a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003844:	4b4c      	ldr	r3, [pc, #304]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 8003846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003848:	4a4b      	ldr	r2, [pc, #300]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003850:	4b49      	ldr	r3, [pc, #292]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 8003852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800385c:	4b46      	ldr	r3, [pc, #280]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 800385e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003860:	4a45      	ldr	r2, [pc, #276]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 8003862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003868:	4b43      	ldr	r3, [pc, #268]	@ (8003978 <HAL_UART_MspInit+0x2e4>)
 800386a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800388e:	2307      	movs	r3, #7
 8003890:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003894:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003898:	4619      	mov	r1, r3
 800389a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800389e:	f002 f85f 	bl	8005960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038bc:	2307      	movs	r3, #7
 80038be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038c2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80038c6:	4619      	mov	r1, r3
 80038c8:	4830      	ldr	r0, [pc, #192]	@ (800398c <HAL_UART_MspInit+0x2f8>)
 80038ca:	f002 f849 	bl	8005960 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80038ce:	4b30      	ldr	r3, [pc, #192]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 80038d0:	4a30      	ldr	r2, [pc, #192]	@ (8003994 <HAL_UART_MspInit+0x300>)
 80038d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80038d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 80038d6:	2218      	movs	r2, #24
 80038d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038da:	4b2d      	ldr	r3, [pc, #180]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 80038e8:	2280      	movs	r2, #128	@ 0x80
 80038ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038ec:	4b28      	ldr	r3, [pc, #160]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038f2:	4b27      	ldr	r3, [pc, #156]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80038f8:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038fe:	4b24      	ldr	r3, [pc, #144]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 8003900:	2200      	movs	r2, #0
 8003902:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003904:	4822      	ldr	r0, [pc, #136]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 8003906:	f001 fcab 	bl	8005260 <HAL_DMA_Init>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_UART_MspInit+0x280>
      Error_Handler();
 8003910:	f7ff fa72 	bl	8002df8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a1e      	ldr	r2, [pc, #120]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 8003918:	67da      	str	r2, [r3, #124]	@ 0x7c
 800391a:	4a1d      	ldr	r2, [pc, #116]	@ (8003990 <HAL_UART_MspInit+0x2fc>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003920:	4b1d      	ldr	r3, [pc, #116]	@ (8003998 <HAL_UART_MspInit+0x304>)
 8003922:	4a1e      	ldr	r2, [pc, #120]	@ (800399c <HAL_UART_MspInit+0x308>)
 8003924:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003926:	4b1c      	ldr	r3, [pc, #112]	@ (8003998 <HAL_UART_MspInit+0x304>)
 8003928:	2219      	movs	r2, #25
 800392a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800392c:	4b1a      	ldr	r3, [pc, #104]	@ (8003998 <HAL_UART_MspInit+0x304>)
 800392e:	2210      	movs	r2, #16
 8003930:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003932:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <HAL_UART_MspInit+0x304>)
 8003934:	2200      	movs	r2, #0
 8003936:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003938:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <HAL_UART_MspInit+0x304>)
 800393a:	2280      	movs	r2, #128	@ 0x80
 800393c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800393e:	4b16      	ldr	r3, [pc, #88]	@ (8003998 <HAL_UART_MspInit+0x304>)
 8003940:	2200      	movs	r2, #0
 8003942:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003944:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <HAL_UART_MspInit+0x304>)
 8003946:	2200      	movs	r2, #0
 8003948:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800394a:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <HAL_UART_MspInit+0x304>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003950:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <HAL_UART_MspInit+0x304>)
 8003952:	2200      	movs	r2, #0
 8003954:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003956:	4810      	ldr	r0, [pc, #64]	@ (8003998 <HAL_UART_MspInit+0x304>)
 8003958:	f001 fc82 	bl	8005260 <HAL_DMA_Init>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8003962:	f7ff fa49 	bl	8002df8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a0b      	ldr	r2, [pc, #44]	@ (8003998 <HAL_UART_MspInit+0x304>)
 800396a:	679a      	str	r2, [r3, #120]	@ 0x78
 800396c:	4a0a      	ldr	r2, [pc, #40]	@ (8003998 <HAL_UART_MspInit+0x304>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003972:	e055      	b.n	8003a20 <HAL_UART_MspInit+0x38c>
 8003974:	40004c00 	.word	0x40004c00
 8003978:	40021000 	.word	0x40021000
 800397c:	48000800 	.word	0x48000800
 8003980:	40005000 	.word	0x40005000
 8003984:	48000c00 	.word	0x48000c00
 8003988:	40013800 	.word	0x40013800
 800398c:	48001800 	.word	0x48001800
 8003990:	20001f38 	.word	0x20001f38
 8003994:	40020030 	.word	0x40020030
 8003998:	20001dfc 	.word	0x20001dfc
 800399c:	4002001c 	.word	0x4002001c
  else if(huart->Instance==USART2)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a20      	ldr	r2, [pc, #128]	@ (8003a28 <HAL_UART_MspInit+0x394>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d13a      	bne.n	8003a20 <HAL_UART_MspInit+0x38c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039aa:	2302      	movs	r3, #2
 80039ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039ae:	2300      	movs	r3, #0
 80039b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80039b6:	4618      	mov	r0, r3
 80039b8:	f003 fdfa 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_UART_MspInit+0x332>
      Error_Handler();
 80039c2:	f7ff fa19 	bl	8002df8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039c6:	4b19      	ldr	r3, [pc, #100]	@ (8003a2c <HAL_UART_MspInit+0x398>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ca:	4a18      	ldr	r2, [pc, #96]	@ (8003a2c <HAL_UART_MspInit+0x398>)
 80039cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d2:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <HAL_UART_MspInit+0x398>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039de:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <HAL_UART_MspInit+0x398>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e2:	4a12      	ldr	r2, [pc, #72]	@ (8003a2c <HAL_UART_MspInit+0x398>)
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ea:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <HAL_UART_MspInit+0x398>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80039f6:	2318      	movs	r3, #24
 80039f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a0e:	2307      	movs	r3, #7
 8003a10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a14:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4805      	ldr	r0, [pc, #20]	@ (8003a30 <HAL_UART_MspInit+0x39c>)
 8003a1c:	f001 ffa0 	bl	8005960 <HAL_GPIO_Init>
}
 8003a20:	bf00      	nop
 8003a22:	3798      	adds	r7, #152	@ 0x98
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40004400 	.word	0x40004400
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	48000400 	.word	0x48000400

08003a34 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003a48:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <HAL_FMC_MspInit+0xa4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d13e      	bne.n	8003ace <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8003a50:	4b21      	ldr	r3, [pc, #132]	@ (8003ad8 <HAL_FMC_MspInit+0xa4>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a56:	4b21      	ldr	r3, [pc, #132]	@ (8003adc <HAL_FMC_MspInit+0xa8>)
 8003a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5a:	4a20      	ldr	r2, [pc, #128]	@ (8003adc <HAL_FMC_MspInit+0xa8>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a62:	4b1e      	ldr	r3, [pc, #120]	@ (8003adc <HAL_FMC_MspInit+0xa8>)
 8003a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003a6e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003a72:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a80:	230c      	movs	r3, #12
 8003a82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4815      	ldr	r0, [pc, #84]	@ (8003ae0 <HAL_FMC_MspInit+0xac>)
 8003a8a:	f001 ff69 	bl	8005960 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003a8e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8003a92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	480e      	ldr	r0, [pc, #56]	@ (8003ae4 <HAL_FMC_MspInit+0xb0>)
 8003aaa:	f001 ff59 	bl	8005960 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aba:	2303      	movs	r3, #3
 8003abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003abe:	230c      	movs	r3, #12
 8003ac0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4808      	ldr	r0, [pc, #32]	@ (8003ae8 <HAL_FMC_MspInit+0xb4>)
 8003ac8:	f001 ff4a 	bl	8005960 <HAL_GPIO_Init>
 8003acc:	e000      	b.n	8003ad0 <HAL_FMC_MspInit+0x9c>
    return;
 8003ace:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20001990 	.word	0x20001990
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	48001000 	.word	0x48001000
 8003ae4:	48000c00 	.word	0x48000c00
 8003ae8:	48001800 	.word	0x48001800

08003aec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003af4:	f7ff ff9e 	bl	8003a34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f06f 0201 	mvn.w	r2, #1
 8003b0e:	611a      	str	r2, [r3, #16]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_TIM_IsEnabledIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_IsEnabledIT_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <LL_TIM_IsEnabledIT_UPDATE+0x18>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <LL_TIM_IsEnabledIT_UPDATE+0x1a>
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003b70:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4013      	ands	r3, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d101      	bne.n	8003b82 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40010400 	.word	0x40010400

08003b94 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003b9c:	4a04      	ldr	r2, [pc, #16]	@ (8003bb0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6153      	str	r3, [r2, #20]
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40010400 	.word	0x40010400

08003bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <NMI_Handler+0x4>

08003bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bc0:	bf00      	nop
 8003bc2:	e7fd      	b.n	8003bc0 <HardFault_Handler+0x4>

08003bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <MemManage_Handler+0x4>

08003bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <BusFault_Handler+0x4>

08003bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <UsageFault_Handler+0x4>

08003bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c0a:	f000 f9cb 	bl	8003fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8003c16:	2001      	movs	r0, #1
 8003c18:	f7ff ffa6 	bl	8003b68 <LL_EXTI_IsActiveFlag_0_31>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7ff ffb6 	bl	8003b94 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    EXTIValue_callback();
 8003c28:	f00b f96a 	bl	800ef00 <EXTIValue_callback>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003c2c:	bf00      	nop
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8003c34:	2002      	movs	r0, #2
 8003c36:	f7ff ff97 	bl	8003b68 <LL_EXTI_IsActiveFlag_0_31>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d004      	beq.n	8003c4a <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8003c40:	2002      	movs	r0, #2
 8003c42:	f7ff ffa7 	bl	8003b94 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_1 */
    EXTIValue_MPU_callback();
 8003c46:	f00b fc63 	bl	800f510 <EXTIValue_MPU_callback>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003c54:	4802      	ldr	r0, [pc, #8]	@ (8003c60 <DMA1_Channel1_IRQHandler+0x10>)
 8003c56:	f001 fbab 	bl	80053b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20001b30 	.word	0x20001b30

08003c64 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c68:	4802      	ldr	r0, [pc, #8]	@ (8003c74 <DMA1_Channel2_IRQHandler+0x10>)
 8003c6a:	f001 fba1 	bl	80053b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20001dfc 	.word	0x20001dfc

08003c78 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c7c:	4802      	ldr	r0, [pc, #8]	@ (8003c88 <DMA1_Channel3_IRQHandler+0x10>)
 8003c7e:	f001 fb97 	bl	80053b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20001f38 	.word	0x20001f38

08003c8c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003c90:	4802      	ldr	r0, [pc, #8]	@ (8003c9c <DMA1_Channel4_IRQHandler+0x10>)
 8003c92:	f001 fb8d 	bl	80053b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200023bc 	.word	0x200023bc

08003ca0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003ca4:	4802      	ldr	r0, [pc, #8]	@ (8003cb0 <DMA1_Channel5_IRQHandler+0x10>)
 8003ca6:	f001 fb83 	bl	80053b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	2000241c 	.word	0x2000241c

08003cb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8003cb8:	2040      	movs	r0, #64	@ 0x40
 8003cba:	f7ff ff55 	bl	8003b68 <LL_EXTI_IsActiveFlag_0_31>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8003cc4:	2040      	movs	r0, #64	@ 0x40
 8003cc6:	f7ff ff65 	bl	8003b94 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8003ce0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003ce4:	f7ff ff40 	bl	8003b68 <LL_EXTI_IsActiveFlag_0_31>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8003cee:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003cf2:	f7ff ff4f 	bl	8003b94 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if(  LL_TIM_IsEnabledIT_UPDATE (TIM6) )		// sploh omogo�?ena prekinitev ob RXNE?
 8003d00:	480a      	ldr	r0, [pc, #40]	@ (8003d2c <TIM6_DAC_IRQHandler+0x30>)
 8003d02:	f7ff ff1e 	bl	8003b42 <LL_TIM_IsEnabledIT_UPDATE>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <TIM6_DAC_IRQHandler+0x26>
	{
		if(LL_TIM_IsActiveFlag_UPDATE (TIM6) )	// postavljena zastavica RXNE?
 8003d0c:	4807      	ldr	r0, [pc, #28]	@ (8003d2c <TIM6_DAC_IRQHandler+0x30>)
 8003d0e:	f7ff ff05 	bl	8003b1c <LL_TIM_IsActiveFlag_UPDATE>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <TIM6_DAC_IRQHandler+0x26>
		{
			PSERV_run_services_Callback();
 8003d18:	f00b fdc2 	bl	800f8a0 <PSERV_run_services_Callback>
			LL_TIM_ClearFlag_UPDATE(TIM6);
 8003d1c:	4803      	ldr	r0, [pc, #12]	@ (8003d2c <TIM6_DAC_IRQHandler+0x30>)
 8003d1e:	f7ff feef 	bl	8003b00 <LL_TIM_ClearFlag_UPDATE>
		}
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d22:	4803      	ldr	r0, [pc, #12]	@ (8003d30 <TIM6_DAC_IRQHandler+0x34>)
 8003d24:	f004 fd22 	bl	800876c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40001000 	.word	0x40001000
 8003d30:	20002050 	.word	0x20002050

08003d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	return 1;
 8003d38:	2301      	movs	r3, #1
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <_kill>:

int _kill(int pid, int sig)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d4e:	f00e f88f 	bl	8011e70 <__errno>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2216      	movs	r2, #22
 8003d56:	601a      	str	r2, [r3, #0]
	return -1;
 8003d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_exit>:

void _exit (int status)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ffe7 	bl	8003d44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d76:	bf00      	nop
 8003d78:	e7fd      	b.n	8003d76 <_exit+0x12>

08003d7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e00a      	b.n	8003da2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d8c:	f3af 8000 	nop.w
 8003d90:	4601      	mov	r1, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	60ba      	str	r2, [r7, #8]
 8003d98:	b2ca      	uxtb	r2, r1
 8003d9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	dbf0      	blt.n	8003d8c <_read+0x12>
	}

return len;
 8003daa:	687b      	ldr	r3, [r7, #4]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	return -1;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ddc:	605a      	str	r2, [r3, #4]
	return 0;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_isatty>:

int _isatty(int file)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	return 1;
 8003df4:	2301      	movs	r3, #1
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
	return 0;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e24:	4a14      	ldr	r2, [pc, #80]	@ (8003e78 <_sbrk+0x5c>)
 8003e26:	4b15      	ldr	r3, [pc, #84]	@ (8003e7c <_sbrk+0x60>)
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <_sbrk+0x64>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e38:	4b11      	ldr	r3, [pc, #68]	@ (8003e80 <_sbrk+0x64>)
 8003e3a:	4a12      	ldr	r2, [pc, #72]	@ (8003e84 <_sbrk+0x68>)
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e3e:	4b10      	ldr	r3, [pc, #64]	@ (8003e80 <_sbrk+0x64>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d207      	bcs.n	8003e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e4c:	f00e f810 	bl	8011e70 <__errno>
 8003e50:	4603      	mov	r3, r0
 8003e52:	220c      	movs	r2, #12
 8003e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	e009      	b.n	8003e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e5c:	4b08      	ldr	r3, [pc, #32]	@ (8003e80 <_sbrk+0x64>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <_sbrk+0x64>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	4a05      	ldr	r2, [pc, #20]	@ (8003e80 <_sbrk+0x64>)
 8003e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20020000 	.word	0x20020000
 8003e7c:	00000400 	.word	0x00000400
 8003e80:	20001994 	.word	0x20001994
 8003e84:	20002a08 	.word	0x20002a08

08003e88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <SystemInit+0x20>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	4a05      	ldr	r2, [pc, #20]	@ (8003ea8 <SystemInit+0x20>)
 8003e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003eac:	480d      	ldr	r0, [pc, #52]	@ (8003ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003eb0:	480d      	ldr	r0, [pc, #52]	@ (8003ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003eb2:	490e      	ldr	r1, [pc, #56]	@ (8003eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8003eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef0 <LoopForever+0xe>)
  movs r3, #0
 8003eb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003eb8:	e002      	b.n	8003ec0 <LoopCopyDataInit>

08003eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ebe:	3304      	adds	r3, #4

08003ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ec4:	d3f9      	bcc.n	8003eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ec6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ec8:	4c0b      	ldr	r4, [pc, #44]	@ (8003ef8 <LoopForever+0x16>)
  movs r3, #0
 8003eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ecc:	e001      	b.n	8003ed2 <LoopFillZerobss>

08003ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed0:	3204      	adds	r2, #4

08003ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ed4:	d3fb      	bcc.n	8003ece <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ed6:	f7ff ffd7 	bl	8003e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eda:	f00d ffcf 	bl	8011e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ede:	f7fd fbab 	bl	8001638 <main>

08003ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ee2:	e7fe      	b.n	8003ee2 <LoopForever>
  ldr   r0, =_estack
 8003ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003eec:	20001974 	.word	0x20001974
  ldr r2, =_sidata
 8003ef0:	080145f8 	.word	0x080145f8
  ldr r2, =_sbss
 8003ef4:	20001974 	.word	0x20001974
  ldr r4, =_ebss
 8003ef8:	20002a08 	.word	0x20002a08

08003efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003efc:	e7fe      	b.n	8003efc <ADC1_2_IRQHandler>

08003efe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f08:	2003      	movs	r0, #3
 8003f0a:	f001 f969 	bl	80051e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f000 f80e 	bl	8003f30 <HAL_InitTick>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	71fb      	strb	r3, [r7, #7]
 8003f1e:	e001      	b.n	8003f24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f20:	f7fe ff70 	bl	8002e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f24:	79fb      	ldrb	r3, [r7, #7]

}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f3c:	4b16      	ldr	r3, [pc, #88]	@ (8003f98 <HAL_InitTick+0x68>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d022      	beq.n	8003f8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f44:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <HAL_InitTick+0x6c>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b13      	ldr	r3, [pc, #76]	@ (8003f98 <HAL_InitTick+0x68>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 f974 	bl	8005246 <HAL_SYSTICK_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10f      	bne.n	8003f84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	d809      	bhi.n	8003f7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f72:	f001 f940 	bl	80051f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f76:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa0 <HAL_InitTick+0x70>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	e007      	b.n	8003f8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	e004      	b.n	8003f8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	73fb      	strb	r3, [r7, #15]
 8003f88:	e001      	b.n	8003f8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000008 	.word	0x20000008
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	20000004 	.word	0x20000004

08003fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa8:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_IncTick+0x1c>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <HAL_IncTick+0x20>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4a03      	ldr	r2, [pc, #12]	@ (8003fc0 <HAL_IncTick+0x1c>)
 8003fb4:	6013      	str	r3, [r2, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	200024e0 	.word	0x200024e0
 8003fc4:	20000008 	.word	0x20000008

08003fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return uwTick;
 8003fcc:	4b03      	ldr	r3, [pc, #12]	@ (8003fdc <HAL_GetTick+0x14>)
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	200024e0 	.word	0x200024e0

08003fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe8:	f7ff ffee 	bl	8003fc8 <HAL_GetTick>
 8003fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d004      	beq.n	8004004 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <HAL_Delay+0x40>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004004:	bf00      	nop
 8004006:	f7ff ffdf 	bl	8003fc8 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	429a      	cmp	r2, r3
 8004014:	d8f7      	bhi.n	8004006 <HAL_Delay+0x26>
  {
  }
}
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000008 	.word	0x20000008

08004024 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	609a      	str	r2, [r3, #8]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3360      	adds	r3, #96	@ 0x60
 800409e:	461a      	mov	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <LL_ADC_SetOffset+0x44>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	03fff000 	.word	0x03fff000

080040d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3360      	adds	r3, #96	@ 0x60
 80040e2:	461a      	mov	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3360      	adds	r3, #96	@ 0x60
 8004110:	461a      	mov	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	431a      	orrs	r2, r3
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004136:	b480      	push	{r7}
 8004138:	b087      	sub	sp, #28
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3360      	adds	r3, #96	@ 0x60
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	431a      	orrs	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3360      	adds	r3, #96	@ 0x60
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	431a      	orrs	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	615a      	str	r2, [r3, #20]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3330      	adds	r3, #48	@ 0x30
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	211f      	movs	r1, #31
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	43db      	mvns	r3, r3
 80041fa:	401a      	ands	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	0e9b      	lsrs	r3, r3, #26
 8004200:	f003 011f 	and.w	r1, r3, #31
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	431a      	orrs	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3314      	adds	r3, #20
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	0e5b      	lsrs	r3, r3, #25
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	4413      	add	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	0d1b      	lsrs	r3, r3, #20
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	2107      	movs	r1, #7
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	401a      	ands	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	0d1b      	lsrs	r3, r3, #20
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	431a      	orrs	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a0f      	ldr	r2, [pc, #60]	@ (80042c4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d10a      	bne.n	80042a2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80042a0:	e00a      	b.n	80042b8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ae:	43db      	mvns	r3, r3
 80042b0:	401a      	ands	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	407f0000 	.word	0x407f0000

080042c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80042d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6093      	str	r3, [r2, #8]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004300:	d101      	bne.n	8004306 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004324:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004328:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004350:	d101      	bne.n	8004356 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <LL_ADC_IsEnabled+0x18>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <LL_ADC_IsEnabled+0x1a>
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b04      	cmp	r3, #4
 800439c:	d101      	bne.n	80043a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d101      	bne.n	80043c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b089      	sub	sp, #36	@ 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e1af      	b.n	8004752 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fe fd23 	bl	8002e4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff67 	bl	80042ec <LL_ADC_IsDeepPowerDownEnabled>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d004      	beq.n	800442e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ff4d 	bl	80042c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff ff82 	bl	800433c <LL_ADC_IsInternalRegulatorEnabled>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d115      	bne.n	800446a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff66 	bl	8004314 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004448:	4b9f      	ldr	r3, [pc, #636]	@ (80046c8 <HAL_ADC_Init+0x2f0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	4a9f      	ldr	r2, [pc, #636]	@ (80046cc <HAL_ADC_Init+0x2f4>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	099b      	lsrs	r3, r3, #6
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800445c:	e002      	b.n	8004464 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3b01      	subs	r3, #1
 8004462:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f9      	bne.n	800445e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff ff64 	bl	800433c <LL_ADC_IsInternalRegulatorEnabled>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10d      	bne.n	8004496 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	f043 0210 	orr.w	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448a:	f043 0201 	orr.w	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff ff75 	bl	800438a <LL_ADC_REG_IsConversionOngoing>
 80044a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 8148 	bne.w	8004740 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 8144 	bne.w	8004740 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80044c0:	f043 0202 	orr.w	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ff49 	bl	8004364 <LL_ADC_IsEnabled>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d141      	bne.n	800455c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_Init+0x114>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7a      	ldr	r2, [pc, #488]	@ (80046d0 <HAL_ADC_Init+0x2f8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10f      	bne.n	800450c <HAL_ADC_Init+0x134>
 80044ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80044f0:	f7ff ff38 	bl	8004364 <LL_ADC_IsEnabled>
 80044f4:	4604      	mov	r4, r0
 80044f6:	4876      	ldr	r0, [pc, #472]	@ (80046d0 <HAL_ADC_Init+0x2f8>)
 80044f8:	f7ff ff34 	bl	8004364 <LL_ADC_IsEnabled>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4323      	orrs	r3, r4
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e012      	b.n	8004532 <HAL_ADC_Init+0x15a>
 800450c:	4871      	ldr	r0, [pc, #452]	@ (80046d4 <HAL_ADC_Init+0x2fc>)
 800450e:	f7ff ff29 	bl	8004364 <LL_ADC_IsEnabled>
 8004512:	4604      	mov	r4, r0
 8004514:	4870      	ldr	r0, [pc, #448]	@ (80046d8 <HAL_ADC_Init+0x300>)
 8004516:	f7ff ff25 	bl	8004364 <LL_ADC_IsEnabled>
 800451a:	4603      	mov	r3, r0
 800451c:	431c      	orrs	r4, r3
 800451e:	486f      	ldr	r0, [pc, #444]	@ (80046dc <HAL_ADC_Init+0x304>)
 8004520:	f7ff ff20 	bl	8004364 <LL_ADC_IsEnabled>
 8004524:	4603      	mov	r3, r0
 8004526:	4323      	orrs	r3, r4
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d012      	beq.n	800455c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800453e:	d004      	beq.n	800454a <HAL_ADC_Init+0x172>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a62      	ldr	r2, [pc, #392]	@ (80046d0 <HAL_ADC_Init+0x2f8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_ADC_Init+0x176>
 800454a:	4a65      	ldr	r2, [pc, #404]	@ (80046e0 <HAL_ADC_Init+0x308>)
 800454c:	e000      	b.n	8004550 <HAL_ADC_Init+0x178>
 800454e:	4a65      	ldr	r2, [pc, #404]	@ (80046e4 <HAL_ADC_Init+0x30c>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f7ff fd64 	bl	8004024 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7f5b      	ldrb	r3, [r3, #29]
 8004560:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004566:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800456c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004572:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800457a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004586:	2b01      	cmp	r3, #1
 8004588:	d106      	bne.n	8004598 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	3b01      	subs	r3, #1
 8004590:	045b      	lsls	r3, r3, #17
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	4b4b      	ldr	r3, [pc, #300]	@ (80046e8 <HAL_ADC_Init+0x310>)
 80045bc:	4013      	ands	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	69b9      	ldr	r1, [r7, #24]
 80045c4:	430b      	orrs	r3, r1
 80045c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fed1 	bl	800438a <LL_ADC_REG_IsConversionOngoing>
 80045e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fede 	bl	80043b0 <LL_ADC_INJ_IsConversionOngoing>
 80045f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d17f      	bne.n	80046fc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d17c      	bne.n	80046fc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004606:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800460e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800461e:	f023 0302 	bic.w	r3, r3, #2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	69b9      	ldr	r1, [r7, #24]
 8004628:	430b      	orrs	r3, r1
 800462a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d017      	beq.n	8004664 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004642:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800464c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004650:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6911      	ldr	r1, [r2, #16]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	430b      	orrs	r3, r1
 800465e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004662:	e013      	b.n	800468c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004672:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004688:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004692:	2b01      	cmp	r3, #1
 8004694:	d12a      	bne.n	80046ec <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046ac:	4311      	orrs	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80046b2:	4311      	orrs	r1, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046b8:	430a      	orrs	r2, r1
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	611a      	str	r2, [r3, #16]
 80046c6:	e019      	b.n	80046fc <HAL_ADC_Init+0x324>
 80046c8:	20000000 	.word	0x20000000
 80046cc:	053e2d63 	.word	0x053e2d63
 80046d0:	50000100 	.word	0x50000100
 80046d4:	50000400 	.word	0x50000400
 80046d8:	50000500 	.word	0x50000500
 80046dc:	50000600 	.word	0x50000600
 80046e0:	50000300 	.word	0x50000300
 80046e4:	50000700 	.word	0x50000700
 80046e8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10c      	bne.n	800471e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	f023 010f 	bic.w	r1, r3, #15
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	1e5a      	subs	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30
 800471c:	e007      	b.n	800472e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 020f 	bic.w	r2, r2, #15
 800472c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800473e:	e007      	b.n	8004750 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004744:	f043 0210 	orr.w	r2, r3, #16
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004750:	7ffb      	ldrb	r3, [r7, #31]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3724      	adds	r7, #36	@ 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}
 800475a:	bf00      	nop

0800475c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b0b6      	sub	sp, #216	@ 0xd8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004776:	2b01      	cmp	r3, #1
 8004778:	d102      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x24>
 800477a:	2302      	movs	r3, #2
 800477c:	f000 bc13 	b.w	8004fa6 <HAL_ADC_ConfigChannel+0x84a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fdfc 	bl	800438a <LL_ADC_REG_IsConversionOngoing>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 83f3 	bne.w	8004f80 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f7ff fd0e 	bl	80041c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fdea 	bl	800438a <LL_ADC_REG_IsConversionOngoing>
 80047b6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fdf6 	bl	80043b0 <LL_ADC_INJ_IsConversionOngoing>
 80047c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 81d9 	bne.w	8004b84 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 81d4 	bne.w	8004b84 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047e4:	d10f      	bne.n	8004806 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	4619      	mov	r1, r3
 80047f2:	f7ff fd15 	bl	8004220 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fccf 	bl	80041a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004804:	e00e      	b.n	8004824 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	461a      	mov	r2, r3
 8004814:	f7ff fd04 	bl	8004220 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fcbf 	bl	80041a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	695a      	ldr	r2, [r3, #20]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	08db      	lsrs	r3, r3, #3
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b04      	cmp	r3, #4
 8004844:	d022      	beq.n	800488c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6919      	ldr	r1, [r3, #16]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004856:	f7ff fc19 	bl	800408c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6919      	ldr	r1, [r3, #16]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	461a      	mov	r2, r3
 8004868:	f7ff fc65 	bl	8004136 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6919      	ldr	r1, [r3, #16]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	7f1b      	ldrb	r3, [r3, #28]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d102      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x126>
 800487c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004880:	e000      	b.n	8004884 <HAL_ADC_ConfigChannel+0x128>
 8004882:	2300      	movs	r3, #0
 8004884:	461a      	mov	r2, r3
 8004886:	f7ff fc71 	bl	800416c <LL_ADC_SetOffsetSaturation>
 800488a:	e17b      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fc1e 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 8004898:	4603      	mov	r3, r0
 800489a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x15c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2100      	movs	r1, #0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fc13 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 80048ae:	4603      	mov	r3, r0
 80048b0:	0e9b      	lsrs	r3, r3, #26
 80048b2:	f003 021f 	and.w	r2, r3, #31
 80048b6:	e01e      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x19a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fc08 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80048d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80048de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x18e>
    return 32U;
 80048e6:	2320      	movs	r3, #32
 80048e8:	e004      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x198>
  return __builtin_clz(value);
 80048ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048ee:	fab3 f383 	clz	r3, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <HAL_ADC_ConfigChannel+0x1b2>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	0e9b      	lsrs	r3, r3, #26
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	e018      	b.n	8004940 <HAL_ADC_ConfigChannel+0x1e4>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004926:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800492a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004932:	2320      	movs	r3, #32
 8004934:	e004      	b.n	8004940 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800493a:	fab3 f383 	clz	r3, r3
 800493e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004940:	429a      	cmp	r2, r3
 8004942:	d106      	bne.n	8004952 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2200      	movs	r2, #0
 800494a:	2100      	movs	r1, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fbd7 	bl	8004100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fbbb 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 800495e:	4603      	mov	r3, r0
 8004960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <HAL_ADC_ConfigChannel+0x222>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fbb0 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 8004974:	4603      	mov	r3, r0
 8004976:	0e9b      	lsrs	r3, r3, #26
 8004978:	f003 021f 	and.w	r2, r3, #31
 800497c:	e01e      	b.n	80049bc <HAL_ADC_ConfigChannel+0x260>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2101      	movs	r1, #1
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fba5 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 800498a:	4603      	mov	r3, r0
 800498c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800499c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80049a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80049ac:	2320      	movs	r3, #32
 80049ae:	e004      	b.n	80049ba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80049b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049b4:	fab3 f383 	clz	r3, r3
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x278>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	0e9b      	lsrs	r3, r3, #26
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	e018      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x2aa>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80049e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80049f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80049f8:	2320      	movs	r3, #32
 80049fa:	e004      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80049fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a00:	fab3 f383 	clz	r3, r3
 8004a04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d106      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2101      	movs	r1, #1
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fb74 	bl	8004100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fb58 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x2e8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2102      	movs	r1, #2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fb4d 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	0e9b      	lsrs	r3, r3, #26
 8004a3e:	f003 021f 	and.w	r2, r3, #31
 8004a42:	e01e      	b.n	8004a82 <HAL_ADC_ConfigChannel+0x326>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fb42 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a5a:	fa93 f3a3 	rbit	r3, r3
 8004a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004a6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004a72:	2320      	movs	r3, #32
 8004a74:	e004      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d105      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x33e>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	0e9b      	lsrs	r3, r3, #26
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	e016      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x36c>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004aac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004aba:	2320      	movs	r3, #32
 8004abc:	e004      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ac2:	fab3 f383 	clz	r3, r3
 8004ac6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d106      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2102      	movs	r1, #2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fb13 	bl	8004100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2103      	movs	r1, #3
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff faf7 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x3aa>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2103      	movs	r1, #3
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff faec 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 8004afc:	4603      	mov	r3, r0
 8004afe:	0e9b      	lsrs	r3, r3, #26
 8004b00:	f003 021f 	and.w	r2, r3, #31
 8004b04:	e017      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x3da>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2103      	movs	r1, #3
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fae1 	bl	80040d4 <LL_ADC_GetOffsetChannel>
 8004b12:	4603      	mov	r3, r0
 8004b14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004b1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b20:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004b28:	2320      	movs	r3, #32
 8004b2a:	e003      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b2e:	fab3 f383 	clz	r3, r3
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d105      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x3f2>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	0e9b      	lsrs	r3, r3, #26
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	e011      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x416>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004b66:	2320      	movs	r3, #32
 8004b68:	e003      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d106      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2103      	movs	r1, #3
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff fabe 	bl	8004100 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fbeb 	bl	8004364 <LL_ADC_IsEnabled>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f040 813d 	bne.w	8004e10 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7ff fb68 	bl	8004278 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4aa2      	ldr	r2, [pc, #648]	@ (8004e38 <HAL_ADC_ConfigChannel+0x6dc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	f040 812e 	bne.w	8004e10 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x480>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0e9b      	lsrs	r3, r3, #26
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2b09      	cmp	r3, #9
 8004bd2:	bf94      	ite	ls
 8004bd4:	2301      	movls	r3, #1
 8004bd6:	2300      	movhi	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	e019      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x4b4>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004be4:	fa93 f3a3 	rbit	r3, r3
 8004be8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004bea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004bee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004bf4:	2320      	movs	r3, #32
 8004bf6:	e003      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004bf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bfa:	fab3 f383 	clz	r3, r3
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	3301      	adds	r3, #1
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	bf94      	ite	ls
 8004c0a:	2301      	movls	r3, #1
 8004c0c:	2300      	movhi	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d079      	beq.n	8004d08 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d107      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x4d4>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	0e9b      	lsrs	r3, r3, #26
 8004c26:	3301      	adds	r3, #1
 8004c28:	069b      	lsls	r3, r3, #26
 8004c2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c2e:	e015      	b.n	8004c5c <HAL_ADC_ConfigChannel+0x500>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c38:	fa93 f3a3 	rbit	r3, r3
 8004c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004c48:	2320      	movs	r3, #32
 8004c4a:	e003      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	3301      	adds	r3, #1
 8004c56:	069b      	lsls	r3, r3, #26
 8004c58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x520>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	0e9b      	lsrs	r3, r3, #26
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	e017      	b.n	8004cac <HAL_ADC_ConfigChannel+0x550>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c84:	fa93 f3a3 	rbit	r3, r3
 8004c88:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004c94:	2320      	movs	r3, #32
 8004c96:	e003      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c9a:	fab3 f383 	clz	r3, r3
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	ea42 0103 	orr.w	r1, r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x576>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	0e9b      	lsrs	r3, r3, #26
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	f003 021f 	and.w	r2, r3, #31
 8004cc8:	4613      	mov	r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	4413      	add	r3, r2
 8004cce:	051b      	lsls	r3, r3, #20
 8004cd0:	e018      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x5a8>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004cea:	2320      	movs	r3, #32
 8004cec:	e003      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf0:	fab3 f383 	clz	r3, r3
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f003 021f 	and.w	r2, r3, #31
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4413      	add	r3, r2
 8004d02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d04:	430b      	orrs	r3, r1
 8004d06:	e07e      	b.n	8004e06 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x5c8>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	0e9b      	lsrs	r3, r3, #26
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	069b      	lsls	r3, r3, #26
 8004d1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d22:	e015      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x5f4>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d34:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	e003      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	069b      	lsls	r3, r3, #26
 8004d4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x614>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0e9b      	lsrs	r3, r3, #26
 8004d62:	3301      	adds	r3, #1
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	2101      	movs	r1, #1
 8004d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6e:	e017      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x644>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	61fb      	str	r3, [r7, #28]
  return result;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	e003      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	3301      	adds	r3, #1
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	ea42 0103 	orr.w	r1, r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10d      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x670>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0e9b      	lsrs	r3, r3, #26
 8004db6:	3301      	adds	r3, #1
 8004db8:	f003 021f 	and.w	r2, r3, #31
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3b1e      	subs	r3, #30
 8004dc4:	051b      	lsls	r3, r3, #20
 8004dc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004dca:	e01b      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x6a8>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	fa93 f3a3 	rbit	r3, r3
 8004dd8:	613b      	str	r3, [r7, #16]
  return result;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004de4:	2320      	movs	r3, #32
 8004de6:	e003      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	3301      	adds	r3, #1
 8004df2:	f003 021f 	and.w	r2, r3, #31
 8004df6:	4613      	mov	r3, r2
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3b1e      	subs	r3, #30
 8004dfe:	051b      	lsls	r3, r3, #20
 8004e00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e04:	430b      	orrs	r3, r1
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f7ff fa08 	bl	8004220 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b09      	ldr	r3, [pc, #36]	@ (8004e3c <HAL_ADC_ConfigChannel+0x6e0>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80be 	beq.w	8004f9a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e26:	d004      	beq.n	8004e32 <HAL_ADC_ConfigChannel+0x6d6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a04      	ldr	r2, [pc, #16]	@ (8004e40 <HAL_ADC_ConfigChannel+0x6e4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10a      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x6ec>
 8004e32:	4b04      	ldr	r3, [pc, #16]	@ (8004e44 <HAL_ADC_ConfigChannel+0x6e8>)
 8004e34:	e009      	b.n	8004e4a <HAL_ADC_ConfigChannel+0x6ee>
 8004e36:	bf00      	nop
 8004e38:	407f0000 	.word	0x407f0000
 8004e3c:	80080000 	.word	0x80080000
 8004e40:	50000100 	.word	0x50000100
 8004e44:	50000300 	.word	0x50000300
 8004e48:	4b59      	ldr	r3, [pc, #356]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x854>)
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff f910 	bl	8004070 <LL_ADC_GetCommonPathInternalCh>
 8004e50:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a56      	ldr	r2, [pc, #344]	@ (8004fb4 <HAL_ADC_ConfigChannel+0x858>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_ADC_ConfigChannel+0x70c>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a55      	ldr	r2, [pc, #340]	@ (8004fb8 <HAL_ADC_ConfigChannel+0x85c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d13a      	bne.n	8004ede <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d134      	bne.n	8004ede <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e7c:	d005      	beq.n	8004e8a <HAL_ADC_ConfigChannel+0x72e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a4e      	ldr	r2, [pc, #312]	@ (8004fbc <HAL_ADC_ConfigChannel+0x860>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	f040 8085 	bne.w	8004f94 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e92:	d004      	beq.n	8004e9e <HAL_ADC_ConfigChannel+0x742>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a49      	ldr	r2, [pc, #292]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x864>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x746>
 8004e9e:	4a49      	ldr	r2, [pc, #292]	@ (8004fc4 <HAL_ADC_ConfigChannel+0x868>)
 8004ea0:	e000      	b.n	8004ea4 <HAL_ADC_ConfigChannel+0x748>
 8004ea2:	4a43      	ldr	r2, [pc, #268]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x854>)
 8004ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ea8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7ff f8cb 	bl	800404a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eb4:	4b44      	ldr	r3, [pc, #272]	@ (8004fc8 <HAL_ADC_ConfigChannel+0x86c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	4a44      	ldr	r2, [pc, #272]	@ (8004fcc <HAL_ADC_ConfigChannel+0x870>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ece:	e002      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f9      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004edc:	e05a      	b.n	8004f94 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a3b      	ldr	r2, [pc, #236]	@ (8004fd0 <HAL_ADC_ConfigChannel+0x874>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d125      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x7d8>
 8004ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d11f      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a31      	ldr	r2, [pc, #196]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x864>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d104      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x7ac>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a34      	ldr	r2, [pc, #208]	@ (8004fd4 <HAL_ADC_ConfigChannel+0x878>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d047      	beq.n	8004f98 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f10:	d004      	beq.n	8004f1c <HAL_ADC_ConfigChannel+0x7c0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x864>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d101      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x7c4>
 8004f1c:	4a29      	ldr	r2, [pc, #164]	@ (8004fc4 <HAL_ADC_ConfigChannel+0x868>)
 8004f1e:	e000      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x7c6>
 8004f20:	4a23      	ldr	r2, [pc, #140]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x854>)
 8004f22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f7ff f88c 	bl	800404a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f32:	e031      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a27      	ldr	r2, [pc, #156]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x87c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d12d      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d127      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x864>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d022      	beq.n	8004f9a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f5c:	d004      	beq.n	8004f68 <HAL_ADC_ConfigChannel+0x80c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a17      	ldr	r2, [pc, #92]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x864>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d101      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x810>
 8004f68:	4a16      	ldr	r2, [pc, #88]	@ (8004fc4 <HAL_ADC_ConfigChannel+0x868>)
 8004f6a:	e000      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x812>
 8004f6c:	4a10      	ldr	r2, [pc, #64]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x854>)
 8004f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7ff f866 	bl	800404a <LL_ADC_SetCommonPathInternalCh>
 8004f7e:	e00c      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f92:	e002      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f94:	bf00      	nop
 8004f96:	e000      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004fa2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	37d8      	adds	r7, #216	@ 0xd8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	50000700 	.word	0x50000700
 8004fb4:	c3210000 	.word	0xc3210000
 8004fb8:	90c00010 	.word	0x90c00010
 8004fbc:	50000600 	.word	0x50000600
 8004fc0:	50000100 	.word	0x50000100
 8004fc4:	50000300 	.word	0x50000300
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	053e2d63 	.word	0x053e2d63
 8004fd0:	c7520000 	.word	0xc7520000
 8004fd4:	50000500 	.word	0x50000500
 8004fd8:	cb840000 	.word	0xcb840000

08004fdc <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e023      	b.n	8005036 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fd ffa8 	bl	8002f58 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <__NVIC_SetPriorityGrouping>:
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005050:	4b0c      	ldr	r3, [pc, #48]	@ (8005084 <__NVIC_SetPriorityGrouping+0x44>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800505c:	4013      	ands	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800506c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005072:	4a04      	ldr	r2, [pc, #16]	@ (8005084 <__NVIC_SetPriorityGrouping+0x44>)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	60d3      	str	r3, [r2, #12]
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <__NVIC_GetPriorityGrouping>:
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800508c:	4b04      	ldr	r3, [pc, #16]	@ (80050a0 <__NVIC_GetPriorityGrouping+0x18>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	f003 0307 	and.w	r3, r3, #7
}
 8005096:	4618      	mov	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <__NVIC_EnableIRQ>:
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	db0b      	blt.n	80050ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	f003 021f 	and.w	r2, r3, #31
 80050bc:	4907      	ldr	r1, [pc, #28]	@ (80050dc <__NVIC_EnableIRQ+0x38>)
 80050be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	2001      	movs	r0, #1
 80050c6:	fa00 f202 	lsl.w	r2, r0, r2
 80050ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	e000e100 	.word	0xe000e100

080050e0 <__NVIC_SetPriority>:
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	6039      	str	r1, [r7, #0]
 80050ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	db0a      	blt.n	800510a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	490c      	ldr	r1, [pc, #48]	@ (800512c <__NVIC_SetPriority+0x4c>)
 80050fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fe:	0112      	lsls	r2, r2, #4
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	440b      	add	r3, r1
 8005104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005108:	e00a      	b.n	8005120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	4908      	ldr	r1, [pc, #32]	@ (8005130 <__NVIC_SetPriority+0x50>)
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	3b04      	subs	r3, #4
 8005118:	0112      	lsls	r2, r2, #4
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	440b      	add	r3, r1
 800511e:	761a      	strb	r2, [r3, #24]
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000e100 	.word	0xe000e100
 8005130:	e000ed00 	.word	0xe000ed00

08005134 <NVIC_EncodePriority>:
{
 8005134:	b480      	push	{r7}
 8005136:	b089      	sub	sp, #36	@ 0x24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f1c3 0307 	rsb	r3, r3, #7
 800514e:	2b04      	cmp	r3, #4
 8005150:	bf28      	it	cs
 8005152:	2304      	movcs	r3, #4
 8005154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	3304      	adds	r3, #4
 800515a:	2b06      	cmp	r3, #6
 800515c:	d902      	bls.n	8005164 <NVIC_EncodePriority+0x30>
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3b03      	subs	r3, #3
 8005162:	e000      	b.n	8005166 <NVIC_EncodePriority+0x32>
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005168:	f04f 32ff 	mov.w	r2, #4294967295
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43da      	mvns	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	401a      	ands	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800517c:	f04f 31ff 	mov.w	r1, #4294967295
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	43d9      	mvns	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800518c:	4313      	orrs	r3, r2
}
 800518e:	4618      	mov	r0, r3
 8005190:	3724      	adds	r7, #36	@ 0x24
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051ac:	d301      	bcc.n	80051b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051ae:	2301      	movs	r3, #1
 80051b0:	e00f      	b.n	80051d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051b2:	4a0a      	ldr	r2, [pc, #40]	@ (80051dc <SysTick_Config+0x40>)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ba:	210f      	movs	r1, #15
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	f7ff ff8e 	bl	80050e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051c4:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <SysTick_Config+0x40>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ca:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <SysTick_Config+0x40>)
 80051cc:	2207      	movs	r2, #7
 80051ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	e000e010 	.word	0xe000e010

080051e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff ff29 	bl	8005040 <__NVIC_SetPriorityGrouping>
}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b086      	sub	sp, #24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	4603      	mov	r3, r0
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005204:	f7ff ff40 	bl	8005088 <__NVIC_GetPriorityGrouping>
 8005208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f7ff ff90 	bl	8005134 <NVIC_EncodePriority>
 8005214:	4602      	mov	r2, r0
 8005216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ff5f 	bl	80050e0 <__NVIC_SetPriority>
}
 8005222:	bf00      	nop
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	4603      	mov	r3, r0
 8005232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff33 	bl	80050a4 <__NVIC_EnableIRQ>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ffa4 	bl	800519c <SysTick_Config>
 8005254:	4603      	mov	r3, r0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e08d      	b.n	800538e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	4b47      	ldr	r3, [pc, #284]	@ (8005398 <HAL_DMA_Init+0x138>)
 800527a:	429a      	cmp	r2, r3
 800527c:	d80f      	bhi.n	800529e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	4b45      	ldr	r3, [pc, #276]	@ (800539c <HAL_DMA_Init+0x13c>)
 8005286:	4413      	add	r3, r2
 8005288:	4a45      	ldr	r2, [pc, #276]	@ (80053a0 <HAL_DMA_Init+0x140>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	009a      	lsls	r2, r3, #2
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a42      	ldr	r2, [pc, #264]	@ (80053a4 <HAL_DMA_Init+0x144>)
 800529a:	641a      	str	r2, [r3, #64]	@ 0x40
 800529c:	e00e      	b.n	80052bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b40      	ldr	r3, [pc, #256]	@ (80053a8 <HAL_DMA_Init+0x148>)
 80052a6:	4413      	add	r3, r2
 80052a8:	4a3d      	ldr	r2, [pc, #244]	@ (80053a0 <HAL_DMA_Init+0x140>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	009a      	lsls	r2, r3, #2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a3c      	ldr	r2, [pc, #240]	@ (80053ac <HAL_DMA_Init+0x14c>)
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80052d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8fe 	bl	8005510 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800531c:	d102      	bne.n	8005324 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005338:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d010      	beq.n	8005364 <HAL_DMA_Init+0x104>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d80c      	bhi.n	8005364 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f91e 	bl	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	e008      	b.n	8005376 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40020407 	.word	0x40020407
 800539c:	bffdfff8 	.word	0xbffdfff8
 80053a0:	cccccccd 	.word	0xcccccccd
 80053a4:	40020000 	.word	0x40020000
 80053a8:	bffdfbf8 	.word	0xbffdfbf8
 80053ac:	40020400 	.word	0x40020400

080053b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2204      	movs	r2, #4
 80053d2:	409a      	lsls	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d026      	beq.n	800542a <HAL_DMA_IRQHandler+0x7a>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d021      	beq.n	800542a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d107      	bne.n	8005404 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0204 	bic.w	r2, r2, #4
 8005402:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005408:	f003 021f 	and.w	r2, r3, #31
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005410:	2104      	movs	r1, #4
 8005412:	fa01 f202 	lsl.w	r2, r1, r2
 8005416:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541c:	2b00      	cmp	r3, #0
 800541e:	d071      	beq.n	8005504 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005428:	e06c      	b.n	8005504 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2202      	movs	r2, #2
 8005434:	409a      	lsls	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d02e      	beq.n	800549c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d029      	beq.n	800549c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 020a 	bic.w	r2, r2, #10
 8005464:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f003 021f 	and.w	r2, r3, #31
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	2102      	movs	r1, #2
 800547c:	fa01 f202 	lsl.w	r2, r1, r2
 8005480:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d038      	beq.n	8005504 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800549a:	e033      	b.n	8005504 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	2208      	movs	r2, #8
 80054a6:	409a      	lsls	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d02a      	beq.n	8005506 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d025      	beq.n	8005506 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 020e 	bic.w	r2, r2, #14
 80054c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f003 021f 	and.w	r2, r3, #31
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	2101      	movs	r1, #1
 80054d8:	fa01 f202 	lsl.w	r2, r1, r2
 80054dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005504:	bf00      	nop
 8005506:	bf00      	nop
}
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	4b16      	ldr	r3, [pc, #88]	@ (8005578 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005520:	429a      	cmp	r2, r3
 8005522:	d802      	bhi.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005524:	4b15      	ldr	r3, [pc, #84]	@ (800557c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e001      	b.n	800552e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800552a:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800552c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	3b08      	subs	r3, #8
 800553a:	4a12      	ldr	r2, [pc, #72]	@ (8005584 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	091b      	lsrs	r3, r3, #4
 8005542:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005548:	089b      	lsrs	r3, r3, #2
 800554a:	009a      	lsls	r2, r3, #2
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4413      	add	r3, r2
 8005550:	461a      	mov	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a0b      	ldr	r2, [pc, #44]	@ (8005588 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800555a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2201      	movs	r2, #1
 8005564:	409a      	lsls	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40020407 	.word	0x40020407
 800557c:	40020800 	.word	0x40020800
 8005580:	40020820 	.word	0x40020820
 8005584:	cccccccd 	.word	0xcccccccd
 8005588:	40020880 	.word	0x40020880

0800558c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4b0b      	ldr	r3, [pc, #44]	@ (80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	461a      	mov	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a08      	ldr	r2, [pc, #32]	@ (80055d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055ae:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2201      	movs	r2, #1
 80055ba:	409a      	lsls	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	1000823f 	.word	0x1000823f
 80055d0:	40020940 	.word	0x40020940

080055d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e147      	b.n	8005876 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fd fccc 	bl	8002f98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0210 	bic.w	r2, r2, #16
 800560e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005610:	f7fe fcda 	bl	8003fc8 <HAL_GetTick>
 8005614:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005616:	e012      	b.n	800563e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005618:	f7fe fcd6 	bl	8003fc8 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b0a      	cmp	r3, #10
 8005624:	d90b      	bls.n	800563e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800562a:	f043 0201 	orr.w	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2203      	movs	r2, #3
 8005636:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e11b      	b.n	8005876 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d0e5      	beq.n	8005618 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800565c:	f7fe fcb4 	bl	8003fc8 <HAL_GetTick>
 8005660:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005662:	e012      	b.n	800568a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005664:	f7fe fcb0 	bl	8003fc8 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b0a      	cmp	r3, #10
 8005670:	d90b      	bls.n	800568a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005676:	f043 0201 	orr.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2203      	movs	r2, #3
 8005682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0f5      	b.n	8005876 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0e5      	beq.n	8005664 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0202 	orr.w	r2, r2, #2
 80056a6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a74      	ldr	r2, [pc, #464]	@ (8005880 <HAL_FDCAN_Init+0x2ac>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d103      	bne.n	80056ba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80056b2:	4a74      	ldr	r2, [pc, #464]	@ (8005884 <HAL_FDCAN_Init+0x2b0>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	7c1b      	ldrb	r3, [r3, #16]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d108      	bne.n	80056d4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056d0:	619a      	str	r2, [r3, #24]
 80056d2:	e007      	b.n	80056e4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	7c5b      	ldrb	r3, [r3, #17]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d108      	bne.n	80056fe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056fa:	619a      	str	r2, [r3, #24]
 80056fc:	e007      	b.n	800570e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800570c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	7c9b      	ldrb	r3, [r3, #18]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d108      	bne.n	8005728 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005724:	619a      	str	r2, [r3, #24]
 8005726:	e007      	b.n	8005738 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005736:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699a      	ldr	r2, [r3, #24]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800575c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0210 	bic.w	r2, r2, #16
 800576c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d108      	bne.n	8005788 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0204 	orr.w	r2, r2, #4
 8005784:	619a      	str	r2, [r3, #24]
 8005786:	e02c      	b.n	80057e2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d028      	beq.n	80057e2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d01c      	beq.n	80057d2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057a6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0210 	orr.w	r2, r2, #16
 80057b6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d110      	bne.n	80057e2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0220 	orr.w	r2, r2, #32
 80057ce:	619a      	str	r2, [r3, #24]
 80057d0:	e007      	b.n	80057e2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699a      	ldr	r2, [r3, #24]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0220 	orr.w	r2, r2, #32
 80057e0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057f2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057fa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	3b01      	subs	r3, #1
 8005804:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800580a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800580c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005816:	d115      	bne.n	8005844 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	3b01      	subs	r3, #1
 8005824:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005826:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582c:	3b01      	subs	r3, #1
 800582e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005830:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	3b01      	subs	r3, #1
 800583a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005840:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005842:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f814 	bl	8005888 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40006400 	.word	0x40006400
 8005884:	40006500 	.word	0x40006500

08005888 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005890:	4b30      	ldr	r3, [pc, #192]	@ (8005954 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005892:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2f      	ldr	r2, [pc, #188]	@ (8005958 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d103      	bne.n	80058a6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80058a4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a2c      	ldr	r2, [pc, #176]	@ (800595c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d103      	bne.n	80058b8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80058b6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ce:	041a      	lsls	r2, r3, #16
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ec:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	061a      	lsls	r2, r3, #24
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e005      	b.n	800593a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3304      	adds	r3, #4
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	429a      	cmp	r2, r3
 8005944:	d3f3      	bcc.n	800592e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	4000a400 	.word	0x4000a400
 8005958:	40006800 	.word	0x40006800
 800595c:	40006c00 	.word	0x40006c00

08005960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800596e:	e15a      	b.n	8005c26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	2101      	movs	r1, #1
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	4013      	ands	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 814c 	beq.w	8005c20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d005      	beq.n	80059a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800599c:	2b02      	cmp	r3, #2
 800599e:	d130      	bne.n	8005a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	2203      	movs	r2, #3
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059d6:	2201      	movs	r2, #1
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4013      	ands	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	f003 0201 	and.w	r2, r3, #1
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d017      	beq.n	8005a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	2203      	movs	r2, #3
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4013      	ands	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d123      	bne.n	8005a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	08da      	lsrs	r2, r3, #3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3208      	adds	r2, #8
 8005a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	220f      	movs	r2, #15
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	08da      	lsrs	r2, r3, #3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3208      	adds	r2, #8
 8005a8c:	6939      	ldr	r1, [r7, #16]
 8005a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0203 	and.w	r2, r3, #3
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80a6 	beq.w	8005c20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8005c44 <HAL_GPIO_Init+0x2e4>)
 8005ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad8:	4a5a      	ldr	r2, [pc, #360]	@ (8005c44 <HAL_GPIO_Init+0x2e4>)
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ae0:	4b58      	ldr	r3, [pc, #352]	@ (8005c44 <HAL_GPIO_Init+0x2e4>)
 8005ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aec:	4a56      	ldr	r2, [pc, #344]	@ (8005c48 <HAL_GPIO_Init+0x2e8>)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	089b      	lsrs	r3, r3, #2
 8005af2:	3302      	adds	r3, #2
 8005af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	220f      	movs	r2, #15
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b16:	d01f      	beq.n	8005b58 <HAL_GPIO_Init+0x1f8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a4c      	ldr	r2, [pc, #304]	@ (8005c4c <HAL_GPIO_Init+0x2ec>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d019      	beq.n	8005b54 <HAL_GPIO_Init+0x1f4>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a4b      	ldr	r2, [pc, #300]	@ (8005c50 <HAL_GPIO_Init+0x2f0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d013      	beq.n	8005b50 <HAL_GPIO_Init+0x1f0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8005c54 <HAL_GPIO_Init+0x2f4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00d      	beq.n	8005b4c <HAL_GPIO_Init+0x1ec>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a49      	ldr	r2, [pc, #292]	@ (8005c58 <HAL_GPIO_Init+0x2f8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d007      	beq.n	8005b48 <HAL_GPIO_Init+0x1e8>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a48      	ldr	r2, [pc, #288]	@ (8005c5c <HAL_GPIO_Init+0x2fc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d101      	bne.n	8005b44 <HAL_GPIO_Init+0x1e4>
 8005b40:	2305      	movs	r3, #5
 8005b42:	e00a      	b.n	8005b5a <HAL_GPIO_Init+0x1fa>
 8005b44:	2306      	movs	r3, #6
 8005b46:	e008      	b.n	8005b5a <HAL_GPIO_Init+0x1fa>
 8005b48:	2304      	movs	r3, #4
 8005b4a:	e006      	b.n	8005b5a <HAL_GPIO_Init+0x1fa>
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e004      	b.n	8005b5a <HAL_GPIO_Init+0x1fa>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e002      	b.n	8005b5a <HAL_GPIO_Init+0x1fa>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <HAL_GPIO_Init+0x1fa>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	f002 0203 	and.w	r2, r2, #3
 8005b60:	0092      	lsls	r2, r2, #2
 8005b62:	4093      	lsls	r3, r2
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b6a:	4937      	ldr	r1, [pc, #220]	@ (8005c48 <HAL_GPIO_Init+0x2e8>)
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	3302      	adds	r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b78:	4b39      	ldr	r3, [pc, #228]	@ (8005c60 <HAL_GPIO_Init+0x300>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	43db      	mvns	r3, r3
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4013      	ands	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b9c:	4a30      	ldr	r2, [pc, #192]	@ (8005c60 <HAL_GPIO_Init+0x300>)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c60 <HAL_GPIO_Init+0x300>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	43db      	mvns	r3, r3
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005bc6:	4a26      	ldr	r2, [pc, #152]	@ (8005c60 <HAL_GPIO_Init+0x300>)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005bcc:	4b24      	ldr	r3, [pc, #144]	@ (8005c60 <HAL_GPIO_Init+0x300>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c60 <HAL_GPIO_Init+0x300>)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c60 <HAL_GPIO_Init+0x300>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4013      	ands	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c1a:	4a11      	ldr	r2, [pc, #68]	@ (8005c60 <HAL_GPIO_Init+0x300>)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3301      	adds	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f47f ae9d 	bne.w	8005970 <HAL_GPIO_Init+0x10>
  }
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	48000400 	.word	0x48000400
 8005c50:	48000800 	.word	0x48000800
 8005c54:	48000c00 	.word	0x48000c00
 8005c58:	48001000 	.word	0x48001000
 8005c5c:	48001400 	.word	0x48001400
 8005c60:	40010400 	.word	0x40010400

08005c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e081      	b.n	8005d7a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fd f9e0 	bl	8003050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2224      	movs	r2, #36	@ 0x24
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d107      	bne.n	8005cde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	e006      	b.n	8005cec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005cea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d104      	bne.n	8005cfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69d9      	ldr	r1, [r3, #28]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1a      	ldr	r2, [r3, #32]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	817b      	strh	r3, [r7, #10]
 8005d96:	460b      	mov	r3, r1
 8005d98:	813b      	strh	r3, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	f040 80f9 	bne.w	8005f9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_I2C_Mem_Write+0x34>
 8005db2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0ed      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2C_Mem_Write+0x4e>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0e6      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dda:	f7fe f8f5 	bl	8003fc8 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2319      	movs	r3, #25
 8005de6:	2201      	movs	r2, #1
 8005de8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fac3 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0d1      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2221      	movs	r2, #33	@ 0x21
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2240      	movs	r2, #64	@ 0x40
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a3a      	ldr	r2, [r7, #32]
 8005e16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e24:	88f8      	ldrh	r0, [r7, #6]
 8005e26:	893a      	ldrh	r2, [r7, #8]
 8005e28:	8979      	ldrh	r1, [r7, #10]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	4603      	mov	r3, r0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f9d3 	bl	80061e0 <I2C_RequestMemoryWrite>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0a9      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2bff      	cmp	r3, #255	@ 0xff
 8005e54:	d90e      	bls.n	8005e74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	22ff      	movs	r2, #255	@ 0xff
 8005e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	8979      	ldrh	r1, [r7, #10]
 8005e64:	2300      	movs	r3, #0
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 fc2b 	bl	80066c8 <I2C_TransferConfig>
 8005e72:	e00f      	b.n	8005e94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	8979      	ldrh	r1, [r7, #10]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fc1a 	bl	80066c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 faad 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e07b      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d034      	beq.n	8005f4c <HAL_I2C_Mem_Write+0x1c8>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d130      	bne.n	8005f4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2180      	movs	r1, #128	@ 0x80
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fa3f 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e04d      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2bff      	cmp	r3, #255	@ 0xff
 8005f0c:	d90e      	bls.n	8005f2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	22ff      	movs	r2, #255	@ 0xff
 8005f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	8979      	ldrh	r1, [r7, #10]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fbcf 	bl	80066c8 <I2C_TransferConfig>
 8005f2a:	e00f      	b.n	8005f4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	8979      	ldrh	r1, [r7, #10]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fbbe 	bl	80066c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d19e      	bne.n	8005e94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fa8c 	bl	8006478 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e01a      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa8 <HAL_I2C_Mem_Write+0x224>)
 8005f7e:	400b      	ands	r3, r1
 8005f80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	fe00e800 	.word	0xfe00e800

08005fac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	813b      	strh	r3, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	f040 80fd 	bne.w	80061ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_I2C_Mem_Read+0x34>
 8005fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d105      	bne.n	8005fec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0f1      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_I2C_Mem_Read+0x4e>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e0ea      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006002:	f7fd ffe1 	bl	8003fc8 <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	2319      	movs	r3, #25
 800600e:	2201      	movs	r2, #1
 8006010:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f9af 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0d5      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2222      	movs	r2, #34	@ 0x22
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2240      	movs	r2, #64	@ 0x40
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800604c:	88f8      	ldrh	r0, [r7, #6]
 800604e:	893a      	ldrh	r2, [r7, #8]
 8006050:	8979      	ldrh	r1, [r7, #10]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4603      	mov	r3, r0
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f913 	bl	8006288 <I2C_RequestMemoryRead>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e0ad      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	2bff      	cmp	r3, #255	@ 0xff
 800607c:	d90e      	bls.n	800609c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	22ff      	movs	r2, #255	@ 0xff
 8006082:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006088:	b2da      	uxtb	r2, r3
 800608a:	8979      	ldrh	r1, [r7, #10]
 800608c:	4b52      	ldr	r3, [pc, #328]	@ (80061d8 <HAL_I2C_Mem_Read+0x22c>)
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fb17 	bl	80066c8 <I2C_TransferConfig>
 800609a:	e00f      	b.n	80060bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	8979      	ldrh	r1, [r7, #10]
 80060ae:	4b4a      	ldr	r3, [pc, #296]	@ (80061d8 <HAL_I2C_Mem_Read+0x22c>)
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fb06 	bl	80066c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	2200      	movs	r2, #0
 80060c4:	2104      	movs	r1, #4
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f956 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e07c      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d034      	beq.n	800617c <HAL_I2C_Mem_Read+0x1d0>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d130      	bne.n	800617c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	2200      	movs	r2, #0
 8006122:	2180      	movs	r1, #128	@ 0x80
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f927 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e04d      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	2bff      	cmp	r3, #255	@ 0xff
 800613c:	d90e      	bls.n	800615c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	22ff      	movs	r2, #255	@ 0xff
 8006142:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006148:	b2da      	uxtb	r2, r3
 800614a:	8979      	ldrh	r1, [r7, #10]
 800614c:	2300      	movs	r3, #0
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fab7 	bl	80066c8 <I2C_TransferConfig>
 800615a:	e00f      	b.n	800617c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800616a:	b2da      	uxtb	r2, r3
 800616c:	8979      	ldrh	r1, [r7, #10]
 800616e:	2300      	movs	r3, #0
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 faa6 	bl	80066c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d19a      	bne.n	80060bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f974 	bl	8006478 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e01a      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2220      	movs	r2, #32
 80061a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	4b0b      	ldr	r3, [pc, #44]	@ (80061dc <HAL_I2C_Mem_Read+0x230>)
 80061ae:	400b      	ands	r3, r1
 80061b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	80002400 	.word	0x80002400
 80061dc:	fe00e800 	.word	0xfe00e800

080061e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	4608      	mov	r0, r1
 80061ea:	4611      	mov	r1, r2
 80061ec:	461a      	mov	r2, r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	817b      	strh	r3, [r7, #10]
 80061f2:	460b      	mov	r3, r1
 80061f4:	813b      	strh	r3, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	8979      	ldrh	r1, [r7, #10]
 8006200:	4b20      	ldr	r3, [pc, #128]	@ (8006284 <I2C_RequestMemoryWrite+0xa4>)
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fa5d 	bl	80066c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	69b9      	ldr	r1, [r7, #24]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f8f0 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e02c      	b.n	800627c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d105      	bne.n	8006234 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006228:	893b      	ldrh	r3, [r7, #8]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	629a      	str	r2, [r3, #40]	@ 0x28
 8006232:	e015      	b.n	8006260 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006234:	893b      	ldrh	r3, [r7, #8]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	b29b      	uxth	r3, r3
 800623a:	b2da      	uxtb	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	69b9      	ldr	r1, [r7, #24]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f8d6 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e012      	b.n	800627c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2200      	movs	r2, #0
 8006268:	2180      	movs	r1, #128	@ 0x80
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f884 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	80002000 	.word	0x80002000

08006288 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	461a      	mov	r2, r3
 8006296:	4603      	mov	r3, r0
 8006298:	817b      	strh	r3, [r7, #10]
 800629a:	460b      	mov	r3, r1
 800629c:	813b      	strh	r3, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	8979      	ldrh	r1, [r7, #10]
 80062a8:	4b20      	ldr	r3, [pc, #128]	@ (800632c <I2C_RequestMemoryRead+0xa4>)
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	2300      	movs	r3, #0
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fa0a 	bl	80066c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	69b9      	ldr	r1, [r7, #24]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f89d 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e02c      	b.n	8006322 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d105      	bne.n	80062da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80062d8:	e015      	b.n	8006306 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	b29b      	uxth	r3, r3
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	69b9      	ldr	r1, [r7, #24]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f883 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e012      	b.n	8006322 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062fc:	893b      	ldrh	r3, [r7, #8]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2200      	movs	r2, #0
 800630e:	2140      	movs	r1, #64	@ 0x40
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f831 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	80002000 	.word	0x80002000

08006330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b02      	cmp	r3, #2
 8006344:	d103      	bne.n	800634e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2200      	movs	r2, #0
 800634c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b01      	cmp	r3, #1
 800635a:	d007      	beq.n	800636c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	619a      	str	r2, [r3, #24]
  }
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006388:	e022      	b.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d01e      	beq.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7fd fe19 	bl	8003fc8 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d113      	bne.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e00f      	b.n	80063f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4013      	ands	r3, r2
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d0cd      	beq.n	800638a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006404:	e02c      	b.n	8006460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f870 	bl	80064f0 <I2C_IsErrorOccurred>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e02a      	b.n	8006470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d01e      	beq.n	8006460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006422:	f7fd fdd1 	bl	8003fc8 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	429a      	cmp	r2, r3
 8006430:	d302      	bcc.n	8006438 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d113      	bne.n	8006460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643c:	f043 0220 	orr.w	r2, r3, #32
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e007      	b.n	8006470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b02      	cmp	r3, #2
 800646c:	d1cb      	bne.n	8006406 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006484:	e028      	b.n	80064d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f830 	bl	80064f0 <I2C_IsErrorOccurred>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e026      	b.n	80064e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649a:	f7fd fd95 	bl	8003fc8 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d302      	bcc.n	80064b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d113      	bne.n	80064d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b4:	f043 0220 	orr.w	r2, r3, #32
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e007      	b.n	80064e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d1cf      	bne.n	8006486 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	@ 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	d075      	beq.n	8006608 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2210      	movs	r2, #16
 8006522:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006524:	e056      	b.n	80065d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d052      	beq.n	80065d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800652e:	f7fd fd4b 	bl	8003fc8 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	429a      	cmp	r2, r3
 800653c:	d302      	bcc.n	8006544 <I2C_IsErrorOccurred+0x54>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d147      	bne.n	80065d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800654e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006556:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006566:	d12e      	bne.n	80065c6 <I2C_IsErrorOccurred+0xd6>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800656e:	d02a      	beq.n	80065c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006570:	7cfb      	ldrb	r3, [r7, #19]
 8006572:	2b20      	cmp	r3, #32
 8006574:	d027      	beq.n	80065c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006584:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006586:	f7fd fd1f 	bl	8003fc8 <HAL_GetTick>
 800658a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800658c:	e01b      	b.n	80065c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800658e:	f7fd fd1b 	bl	8003fc8 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b19      	cmp	r3, #25
 800659a:	d914      	bls.n	80065c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a0:	f043 0220 	orr.w	r2, r3, #32
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d1dc      	bne.n	800658e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d003      	beq.n	80065ea <I2C_IsErrorOccurred+0xfa>
 80065e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d09d      	beq.n	8006526 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2220      	movs	r2, #32
 80065f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	f043 0304 	orr.w	r3, r3, #4
 8006600:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800662a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	f043 0308 	orr.w	r3, r3, #8
 8006642:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800664c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	f043 0302 	orr.w	r3, r3, #2
 8006664:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800666e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006676:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800667a:	2b00      	cmp	r3, #0
 800667c:	d01c      	beq.n	80066b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f7ff fe56 	bl	8006330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6859      	ldr	r1, [r3, #4]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <I2C_IsErrorOccurred+0x1d4>)
 8006690:	400b      	ands	r3, r1
 8006692:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	431a      	orrs	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80066b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3728      	adds	r7, #40	@ 0x28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	fe00e800 	.word	0xfe00e800

080066c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	817b      	strh	r3, [r7, #10]
 80066d6:	4613      	mov	r3, r2
 80066d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066da:	897b      	ldrh	r3, [r7, #10]
 80066dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066e0:	7a7b      	ldrb	r3, [r7, #9]
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066e8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066f6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	0d5b      	lsrs	r3, r3, #21
 8006702:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006706:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <I2C_TransferConfig+0x60>)
 8006708:	430b      	orrs	r3, r1
 800670a:	43db      	mvns	r3, r3
 800670c:	ea02 0103 	and.w	r1, r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	03ff63ff 	.word	0x03ff63ff

0800672c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b20      	cmp	r3, #32
 8006740:	d138      	bne.n	80067b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800674c:	2302      	movs	r3, #2
 800674e:	e032      	b.n	80067b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2224      	movs	r2, #36	@ 0x24
 800675c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0201 	bic.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800677e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6819      	ldr	r1, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e000      	b.n	80067b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d139      	bne.n	800684c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e033      	b.n	800684e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2224      	movs	r2, #36	@ 0x24
 80067f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006814:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
  }
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d141      	bne.n	80068ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800686a:	4b4b      	ldr	r3, [pc, #300]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006876:	d131      	bne.n	80068dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006878:	4b47      	ldr	r3, [pc, #284]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800687e:	4a46      	ldr	r2, [pc, #280]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006888:	4b43      	ldr	r3, [pc, #268]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006890:	4a41      	ldr	r2, [pc, #260]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006898:	4b40      	ldr	r3, [pc, #256]	@ (800699c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2232      	movs	r2, #50	@ 0x32
 800689e:	fb02 f303 	mul.w	r3, r2, r3
 80068a2:	4a3f      	ldr	r2, [pc, #252]	@ (80069a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	0c9b      	lsrs	r3, r3, #18
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ae:	e002      	b.n	80068b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068b6:	4b38      	ldr	r3, [pc, #224]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c2:	d102      	bne.n	80068ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f2      	bne.n	80068b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068ca:	4b33      	ldr	r3, [pc, #204]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d6:	d158      	bne.n	800698a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e057      	b.n	800698c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e2:	4a2d      	ldr	r2, [pc, #180]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80068ec:	e04d      	b.n	800698a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f4:	d141      	bne.n	800697a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068f6:	4b28      	ldr	r3, [pc, #160]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006902:	d131      	bne.n	8006968 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006904:	4b24      	ldr	r3, [pc, #144]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800690a:	4a23      	ldr	r2, [pc, #140]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006910:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006914:	4b20      	ldr	r3, [pc, #128]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800691c:	4a1e      	ldr	r2, [pc, #120]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006924:	4b1d      	ldr	r3, [pc, #116]	@ (800699c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2232      	movs	r2, #50	@ 0x32
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	4a1c      	ldr	r2, [pc, #112]	@ (80069a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006930:	fba2 2303 	umull	r2, r3, r2, r3
 8006934:	0c9b      	lsrs	r3, r3, #18
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800693a:	e002      	b.n	8006942 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3b01      	subs	r3, #1
 8006940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006942:	4b15      	ldr	r3, [pc, #84]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800694a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800694e:	d102      	bne.n	8006956 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f2      	bne.n	800693c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006956:	4b10      	ldr	r3, [pc, #64]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006962:	d112      	bne.n	800698a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e011      	b.n	800698c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006968:	4b0b      	ldr	r3, [pc, #44]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800696a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696e:	4a0a      	ldr	r2, [pc, #40]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006978:	e007      	b.n	800698a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800697a:	4b07      	ldr	r3, [pc, #28]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006982:	4a05      	ldr	r2, [pc, #20]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006984:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006988:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	40007000 	.word	0x40007000
 800699c:	20000000 	.word	0x20000000
 80069a0:	431bde83 	.word	0x431bde83

080069a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069a8:	4b05      	ldr	r3, [pc, #20]	@ (80069c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	4a04      	ldr	r2, [pc, #16]	@ (80069c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069b2:	6093      	str	r3, [r2, #8]
}
 80069b4:	bf00      	nop
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40007000 	.word	0x40007000

080069c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80069cc:	f7fd fafc 	bl	8003fc8 <HAL_GetTick>
 80069d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e069      	b.n	8006ab0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7fc fbe9 	bl	80031c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80069f6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f85e 	bl	8006abc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	021a      	lsls	r2, r3, #8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	2120      	movs	r1, #32
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f856 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006a30:	7afb      	ldrb	r3, [r7, #11]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d137      	bne.n	8006aa6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006a40:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6852      	ldr	r2, [r2, #4]
 8006a48:	0611      	lsls	r1, r2, #24
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68d2      	ldr	r2, [r2, #12]
 8006a4e:	4311      	orrs	r1, r2
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	69d2      	ldr	r2, [r2, #28]
 8006a54:	4311      	orrs	r1, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6a12      	ldr	r2, [r2, #32]
 8006a5a:	4311      	orrs	r1, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	4b13      	ldr	r3, [pc, #76]	@ (8006ab8 <HAL_QSPI_Init+0xf4>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6912      	ldr	r2, [r2, #16]
 8006a72:	0411      	lsls	r1, r2, #16
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6952      	ldr	r2, [r2, #20]
 8006a78:	4311      	orrs	r1, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6992      	ldr	r2, [r2, #24]
 8006a7e:	4311      	orrs	r1, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	430b      	orrs	r3, r1
 8006a86:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8006aae:	7afb      	ldrb	r3, [r7, #11]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	ffe0f8fe 	.word	0xffe0f8fe

08006abc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ae8:	e01a      	b.n	8006b20 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d016      	beq.n	8006b20 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af2:	f7fd fa69 	bl	8003fc8 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d302      	bcc.n	8006b08 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10b      	bne.n	8006b20 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b14:	f043 0201 	orr.w	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e00e      	b.n	8006b3e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf14      	ite	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2300      	moveq	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d1d6      	bne.n	8006aea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e306      	b.n	8007168 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d075      	beq.n	8006c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b66:	4b97      	ldr	r3, [pc, #604]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b70:	4b94      	ldr	r3, [pc, #592]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b0c      	cmp	r3, #12
 8006b7e:	d102      	bne.n	8006b86 <HAL_RCC_OscConfig+0x3e>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d002      	beq.n	8006b8c <HAL_RCC_OscConfig+0x44>
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d10b      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b8c:	4b8d      	ldr	r3, [pc, #564]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d05b      	beq.n	8006c50 <HAL_RCC_OscConfig+0x108>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d157      	bne.n	8006c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e2e1      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bac:	d106      	bne.n	8006bbc <HAL_RCC_OscConfig+0x74>
 8006bae:	4b85      	ldr	r3, [pc, #532]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a84      	ldr	r2, [pc, #528]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	e01d      	b.n	8006bf8 <HAL_RCC_OscConfig+0xb0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bc4:	d10c      	bne.n	8006be0 <HAL_RCC_OscConfig+0x98>
 8006bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a7e      	ldr	r2, [pc, #504]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	4b7c      	ldr	r3, [pc, #496]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a7b      	ldr	r2, [pc, #492]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	e00b      	b.n	8006bf8 <HAL_RCC_OscConfig+0xb0>
 8006be0:	4b78      	ldr	r3, [pc, #480]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a77      	ldr	r2, [pc, #476]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	4b75      	ldr	r3, [pc, #468]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a74      	ldr	r2, [pc, #464]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d013      	beq.n	8006c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c00:	f7fd f9e2 	bl	8003fc8 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c08:	f7fd f9de 	bl	8003fc8 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b64      	cmp	r3, #100	@ 0x64
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e2a6      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0xc0>
 8006c26:	e014      	b.n	8006c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c28:	f7fd f9ce 	bl	8003fc8 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c30:	f7fd f9ca 	bl	8003fc8 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b64      	cmp	r3, #100	@ 0x64
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e292      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c42:	4b60      	ldr	r3, [pc, #384]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0xe8>
 8006c4e:	e000      	b.n	8006c52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d075      	beq.n	8006d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c5e:	4b59      	ldr	r3, [pc, #356]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 030c 	and.w	r3, r3, #12
 8006c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c68:	4b56      	ldr	r3, [pc, #344]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b0c      	cmp	r3, #12
 8006c76:	d102      	bne.n	8006c7e <HAL_RCC_OscConfig+0x136>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d002      	beq.n	8006c84 <HAL_RCC_OscConfig+0x13c>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d11f      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c84:	4b4f      	ldr	r3, [pc, #316]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCC_OscConfig+0x154>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e265      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9c:	4b49      	ldr	r3, [pc, #292]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	061b      	lsls	r3, r3, #24
 8006caa:	4946      	ldr	r1, [pc, #280]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006cb0:	4b45      	ldr	r3, [pc, #276]	@ (8006dc8 <HAL_RCC_OscConfig+0x280>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fd f93b 	bl	8003f30 <HAL_InitTick>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d043      	beq.n	8006d48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e251      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d023      	beq.n	8006d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a3c      	ldr	r2, [pc, #240]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd8:	f7fd f976 	bl	8003fc8 <HAL_GetTick>
 8006cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ce0:	f7fd f972 	bl	8003fc8 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e23a      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cf2:	4b34      	ldr	r3, [pc, #208]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f0      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cfe:	4b31      	ldr	r3, [pc, #196]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	061b      	lsls	r3, r3, #24
 8006d0c:	492d      	ldr	r1, [pc, #180]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	604b      	str	r3, [r1, #4]
 8006d12:	e01a      	b.n	8006d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d14:	4b2b      	ldr	r3, [pc, #172]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006d1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d20:	f7fd f952 	bl	8003fc8 <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d28:	f7fd f94e 	bl	8003fc8 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e216      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d3a:	4b22      	ldr	r3, [pc, #136]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <HAL_RCC_OscConfig+0x1e0>
 8006d46:	e000      	b.n	8006d4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d041      	beq.n	8006dda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01c      	beq.n	8006d98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d5e:	4b19      	ldr	r3, [pc, #100]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d64:	4a17      	ldr	r2, [pc, #92]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6e:	f7fd f92b 	bl	8003fc8 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d76:	f7fd f927 	bl	8003fc8 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e1ef      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d88:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0ef      	beq.n	8006d76 <HAL_RCC_OscConfig+0x22e>
 8006d96:	e020      	b.n	8006dda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d98:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d9e:	4a09      	ldr	r2, [pc, #36]	@ (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da8:	f7fd f90e 	bl	8003fc8 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006dae:	e00d      	b.n	8006dcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006db0:	f7fd f90a 	bl	8003fc8 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d906      	bls.n	8006dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e1d2      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
 8006dc2:	bf00      	nop
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1ea      	bne.n	8006db0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 80a6 	beq.w	8006f34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006de8:	2300      	movs	r3, #0
 8006dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006dec:	4b84      	ldr	r3, [pc, #528]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_RCC_OscConfig+0x2b4>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <HAL_RCC_OscConfig+0x2b6>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00d      	beq.n	8006e1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e02:	4b7f      	ldr	r3, [pc, #508]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e06:	4a7e      	ldr	r2, [pc, #504]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e1e:	4b79      	ldr	r3, [pc, #484]	@ (8007004 <HAL_RCC_OscConfig+0x4bc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d118      	bne.n	8006e5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e2a:	4b76      	ldr	r3, [pc, #472]	@ (8007004 <HAL_RCC_OscConfig+0x4bc>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a75      	ldr	r2, [pc, #468]	@ (8007004 <HAL_RCC_OscConfig+0x4bc>)
 8006e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e36:	f7fd f8c7 	bl	8003fc8 <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e3e:	f7fd f8c3 	bl	8003fc8 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e18b      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e50:	4b6c      	ldr	r3, [pc, #432]	@ (8007004 <HAL_RCC_OscConfig+0x4bc>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0f0      	beq.n	8006e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d108      	bne.n	8006e76 <HAL_RCC_OscConfig+0x32e>
 8006e64:	4b66      	ldr	r3, [pc, #408]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e6a:	4a65      	ldr	r2, [pc, #404]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006e6c:	f043 0301 	orr.w	r3, r3, #1
 8006e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e74:	e024      	b.n	8006ec0 <HAL_RCC_OscConfig+0x378>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d110      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x358>
 8006e7e:	4b60      	ldr	r3, [pc, #384]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e84:	4a5e      	ldr	r2, [pc, #376]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006e86:	f043 0304 	orr.w	r3, r3, #4
 8006e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e94:	4a5a      	ldr	r2, [pc, #360]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e9e:	e00f      	b.n	8006ec0 <HAL_RCC_OscConfig+0x378>
 8006ea0:	4b57      	ldr	r3, [pc, #348]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea6:	4a56      	ldr	r2, [pc, #344]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006eb0:	4b53      	ldr	r3, [pc, #332]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb6:	4a52      	ldr	r2, [pc, #328]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006eb8:	f023 0304 	bic.w	r3, r3, #4
 8006ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d016      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec8:	f7fd f87e 	bl	8003fc8 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ece:	e00a      	b.n	8006ee6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed0:	f7fd f87a 	bl	8003fc8 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e140      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ee6:	4b46      	ldr	r3, [pc, #280]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d0ed      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x388>
 8006ef4:	e015      	b.n	8006f22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef6:	f7fd f867 	bl	8003fc8 <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006efc:	e00a      	b.n	8006f14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006efe:	f7fd f863 	bl	8003fc8 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e129      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f14:	4b3a      	ldr	r3, [pc, #232]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1ed      	bne.n	8006efe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f22:	7ffb      	ldrb	r3, [r7, #31]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d105      	bne.n	8006f34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f28:	4b35      	ldr	r3, [pc, #212]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2c:	4a34      	ldr	r2, [pc, #208]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d03c      	beq.n	8006fba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01c      	beq.n	8006f82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f48:	4b2d      	ldr	r3, [pc, #180]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006f50:	f043 0301 	orr.w	r3, r3, #1
 8006f54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f58:	f7fd f836 	bl	8003fc8 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f60:	f7fd f832 	bl	8003fc8 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e0fa      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f72:	4b23      	ldr	r3, [pc, #140]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0ef      	beq.n	8006f60 <HAL_RCC_OscConfig+0x418>
 8006f80:	e01b      	b.n	8006fba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f82:	4b1f      	ldr	r3, [pc, #124]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f88:	4a1d      	ldr	r2, [pc, #116]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f92:	f7fd f819 	bl	8003fc8 <HAL_GetTick>
 8006f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f98:	e008      	b.n	8006fac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f9a:	f7fd f815 	bl	8003fc8 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e0dd      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fac:	4b14      	ldr	r3, [pc, #80]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ef      	bne.n	8006f9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80d1 	beq.w	8007166 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 030c 	and.w	r3, r3, #12
 8006fcc:	2b0c      	cmp	r3, #12
 8006fce:	f000 808b 	beq.w	80070e8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d15e      	bne.n	8007098 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fda:	4b09      	ldr	r3, [pc, #36]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a08      	ldr	r2, [pc, #32]	@ (8007000 <HAL_RCC_OscConfig+0x4b8>)
 8006fe0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe6:	f7fc ffef 	bl	8003fc8 <HAL_GetTick>
 8006fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fec:	e00c      	b.n	8007008 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fee:	f7fc ffeb 	bl	8003fc8 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d905      	bls.n	8007008 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e0b3      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
 8007000:	40021000 	.word	0x40021000
 8007004:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007008:	4b59      	ldr	r3, [pc, #356]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1ec      	bne.n	8006fee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007014:	4b56      	ldr	r3, [pc, #344]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	4b56      	ldr	r3, [pc, #344]	@ (8007174 <HAL_RCC_OscConfig+0x62c>)
 800701a:	4013      	ands	r3, r2
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6a11      	ldr	r1, [r2, #32]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007024:	3a01      	subs	r2, #1
 8007026:	0112      	lsls	r2, r2, #4
 8007028:	4311      	orrs	r1, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800702e:	0212      	lsls	r2, r2, #8
 8007030:	4311      	orrs	r1, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007036:	0852      	lsrs	r2, r2, #1
 8007038:	3a01      	subs	r2, #1
 800703a:	0552      	lsls	r2, r2, #21
 800703c:	4311      	orrs	r1, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007042:	0852      	lsrs	r2, r2, #1
 8007044:	3a01      	subs	r2, #1
 8007046:	0652      	lsls	r2, r2, #25
 8007048:	4311      	orrs	r1, r2
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800704e:	06d2      	lsls	r2, r2, #27
 8007050:	430a      	orrs	r2, r1
 8007052:	4947      	ldr	r1, [pc, #284]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 8007054:	4313      	orrs	r3, r2
 8007056:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007058:	4b45      	ldr	r3, [pc, #276]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a44      	ldr	r2, [pc, #272]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 800705e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007062:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007064:	4b42      	ldr	r3, [pc, #264]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	4a41      	ldr	r2, [pc, #260]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 800706a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800706e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007070:	f7fc ffaa 	bl	8003fc8 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007078:	f7fc ffa6 	bl	8003fc8 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e06e      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800708a:	4b39      	ldr	r3, [pc, #228]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCC_OscConfig+0x530>
 8007096:	e066      	b.n	8007166 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007098:	4b35      	ldr	r3, [pc, #212]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a34      	ldr	r2, [pc, #208]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 800709e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80070a4:	4b32      	ldr	r3, [pc, #200]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	4a31      	ldr	r2, [pc, #196]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 80070aa:	f023 0303 	bic.w	r3, r3, #3
 80070ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80070b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 80070b6:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80070ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fc ff82 	bl	8003fc8 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c8:	f7fc ff7e 	bl	8003fc8 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e046      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070da:	4b25      	ldr	r3, [pc, #148]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <HAL_RCC_OscConfig+0x580>
 80070e6:	e03e      	b.n	8007166 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e039      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80070f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007170 <HAL_RCC_OscConfig+0x628>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f003 0203 	and.w	r2, r3, #3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	429a      	cmp	r2, r3
 8007106:	d12c      	bne.n	8007162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007112:	3b01      	subs	r3, #1
 8007114:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007116:	429a      	cmp	r2, r3
 8007118:	d123      	bne.n	8007162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007126:	429a      	cmp	r2, r3
 8007128:	d11b      	bne.n	8007162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007136:	429a      	cmp	r2, r3
 8007138:	d113      	bne.n	8007162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007144:	085b      	lsrs	r3, r3, #1
 8007146:	3b01      	subs	r3, #1
 8007148:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800714a:	429a      	cmp	r2, r3
 800714c:	d109      	bne.n	8007162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007158:	085b      	lsrs	r3, r3, #1
 800715a:	3b01      	subs	r3, #1
 800715c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800715e:	429a      	cmp	r2, r3
 8007160:	d001      	beq.n	8007166 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3720      	adds	r7, #32
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	40021000 	.word	0x40021000
 8007174:	019f800c 	.word	0x019f800c

08007178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007182:	2300      	movs	r3, #0
 8007184:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e11e      	b.n	80073ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007190:	4b91      	ldr	r3, [pc, #580]	@ (80073d8 <HAL_RCC_ClockConfig+0x260>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d910      	bls.n	80071c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719e:	4b8e      	ldr	r3, [pc, #568]	@ (80073d8 <HAL_RCC_ClockConfig+0x260>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f023 020f 	bic.w	r2, r3, #15
 80071a6:	498c      	ldr	r1, [pc, #560]	@ (80073d8 <HAL_RCC_ClockConfig+0x260>)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ae:	4b8a      	ldr	r3, [pc, #552]	@ (80073d8 <HAL_RCC_ClockConfig+0x260>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d001      	beq.n	80071c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e106      	b.n	80073ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d073      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d129      	bne.n	8007228 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071d4:	4b81      	ldr	r3, [pc, #516]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0f4      	b.n	80073ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80071e4:	f000 f99e 	bl	8007524 <RCC_GetSysClockFreqFromPLLSource>
 80071e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4a7c      	ldr	r2, [pc, #496]	@ (80073e0 <HAL_RCC_ClockConfig+0x268>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d93f      	bls.n	8007272 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80071f2:	4b7a      	ldr	r3, [pc, #488]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d009      	beq.n	8007212 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007206:	2b00      	cmp	r3, #0
 8007208:	d033      	beq.n	8007272 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800720e:	2b00      	cmp	r3, #0
 8007210:	d12f      	bne.n	8007272 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007212:	4b72      	ldr	r3, [pc, #456]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800721a:	4a70      	ldr	r2, [pc, #448]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 800721c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007222:	2380      	movs	r3, #128	@ 0x80
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	e024      	b.n	8007272 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b02      	cmp	r3, #2
 800722e:	d107      	bne.n	8007240 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007230:	4b6a      	ldr	r3, [pc, #424]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e0c6      	b.n	80073ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007240:	4b66      	ldr	r3, [pc, #408]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e0be      	b.n	80073ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007250:	f000 f8ce 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 8007254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	4a61      	ldr	r2, [pc, #388]	@ (80073e0 <HAL_RCC_ClockConfig+0x268>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d909      	bls.n	8007272 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800725e:	4b5f      	ldr	r3, [pc, #380]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007266:	4a5d      	ldr	r2, [pc, #372]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800726c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800726e:	2380      	movs	r3, #128	@ 0x80
 8007270:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007272:	4b5a      	ldr	r3, [pc, #360]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f023 0203 	bic.w	r2, r3, #3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	4957      	ldr	r1, [pc, #348]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007280:	4313      	orrs	r3, r2
 8007282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007284:	f7fc fea0 	bl	8003fc8 <HAL_GetTick>
 8007288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800728a:	e00a      	b.n	80072a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800728c:	f7fc fe9c 	bl	8003fc8 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800729a:	4293      	cmp	r3, r2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e095      	b.n	80073ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a2:	4b4e      	ldr	r3, [pc, #312]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 020c 	and.w	r2, r3, #12
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d1eb      	bne.n	800728c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d023      	beq.n	8007308 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d005      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072cc:	4b43      	ldr	r3, [pc, #268]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	4a42      	ldr	r2, [pc, #264]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 80072d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80072d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0308 	and.w	r3, r3, #8
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80072e4:	4b3d      	ldr	r3, [pc, #244]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072ec:	4a3b      	ldr	r2, [pc, #236]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 80072ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80072f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072f4:	4b39      	ldr	r3, [pc, #228]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4936      	ldr	r1, [pc, #216]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007302:	4313      	orrs	r3, r2
 8007304:	608b      	str	r3, [r1, #8]
 8007306:	e008      	b.n	800731a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b80      	cmp	r3, #128	@ 0x80
 800730c:	d105      	bne.n	800731a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800730e:	4b33      	ldr	r3, [pc, #204]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	4a32      	ldr	r2, [pc, #200]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007314:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007318:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800731a:	4b2f      	ldr	r3, [pc, #188]	@ (80073d8 <HAL_RCC_ClockConfig+0x260>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d21d      	bcs.n	8007364 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007328:	4b2b      	ldr	r3, [pc, #172]	@ (80073d8 <HAL_RCC_ClockConfig+0x260>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f023 020f 	bic.w	r2, r3, #15
 8007330:	4929      	ldr	r1, [pc, #164]	@ (80073d8 <HAL_RCC_ClockConfig+0x260>)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	4313      	orrs	r3, r2
 8007336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007338:	f7fc fe46 	bl	8003fc8 <HAL_GetTick>
 800733c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800733e:	e00a      	b.n	8007356 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007340:	f7fc fe42 	bl	8003fc8 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800734e:	4293      	cmp	r3, r2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e03b      	b.n	80073ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007356:	4b20      	ldr	r3, [pc, #128]	@ (80073d8 <HAL_RCC_ClockConfig+0x260>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d1ed      	bne.n	8007340 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007370:	4b1a      	ldr	r3, [pc, #104]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4917      	ldr	r1, [pc, #92]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 800737e:	4313      	orrs	r3, r2
 8007380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800738e:	4b13      	ldr	r3, [pc, #76]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	490f      	ldr	r1, [pc, #60]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073a2:	f000 f825 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b0c      	ldr	r3, [pc, #48]	@ (80073dc <HAL_RCC_ClockConfig+0x264>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	091b      	lsrs	r3, r3, #4
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	490c      	ldr	r1, [pc, #48]	@ (80073e4 <HAL_RCC_ClockConfig+0x26c>)
 80073b4:	5ccb      	ldrb	r3, [r1, r3]
 80073b6:	f003 031f 	and.w	r3, r3, #31
 80073ba:	fa22 f303 	lsr.w	r3, r2, r3
 80073be:	4a0a      	ldr	r2, [pc, #40]	@ (80073e8 <HAL_RCC_ClockConfig+0x270>)
 80073c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80073c2:	4b0a      	ldr	r3, [pc, #40]	@ (80073ec <HAL_RCC_ClockConfig+0x274>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fc fdb2 	bl	8003f30 <HAL_InitTick>
 80073cc:	4603      	mov	r3, r0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	40022000 	.word	0x40022000
 80073dc:	40021000 	.word	0x40021000
 80073e0:	04c4b400 	.word	0x04c4b400
 80073e4:	08013ddc 	.word	0x08013ddc
 80073e8:	20000000 	.word	0x20000000
 80073ec:	20000004 	.word	0x20000004

080073f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80073f6:	4b2c      	ldr	r3, [pc, #176]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 030c 	and.w	r3, r3, #12
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d102      	bne.n	8007408 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007402:	4b2a      	ldr	r3, [pc, #168]	@ (80074ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	e047      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007408:	4b27      	ldr	r3, [pc, #156]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 030c 	and.w	r3, r3, #12
 8007410:	2b08      	cmp	r3, #8
 8007412:	d102      	bne.n	800741a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007414:	4b26      	ldr	r3, [pc, #152]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	e03e      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800741a:	4b23      	ldr	r3, [pc, #140]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 030c 	and.w	r3, r3, #12
 8007422:	2b0c      	cmp	r3, #12
 8007424:	d136      	bne.n	8007494 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007426:	4b20      	ldr	r3, [pc, #128]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007430:	4b1d      	ldr	r3, [pc, #116]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	091b      	lsrs	r3, r3, #4
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	3301      	adds	r3, #1
 800743c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b03      	cmp	r3, #3
 8007442:	d10c      	bne.n	800745e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007444:	4a1a      	ldr	r2, [pc, #104]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	fbb2 f3f3 	udiv	r3, r2, r3
 800744c:	4a16      	ldr	r2, [pc, #88]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800744e:	68d2      	ldr	r2, [r2, #12]
 8007450:	0a12      	lsrs	r2, r2, #8
 8007452:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007456:	fb02 f303 	mul.w	r3, r2, r3
 800745a:	617b      	str	r3, [r7, #20]
      break;
 800745c:	e00c      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800745e:	4a13      	ldr	r2, [pc, #76]	@ (80074ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	fbb2 f3f3 	udiv	r3, r2, r3
 8007466:	4a10      	ldr	r2, [pc, #64]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007468:	68d2      	ldr	r2, [r2, #12]
 800746a:	0a12      	lsrs	r2, r2, #8
 800746c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007470:	fb02 f303 	mul.w	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]
      break;
 8007476:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007478:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	0e5b      	lsrs	r3, r3, #25
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	3301      	adds	r3, #1
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	e001      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007498:	693b      	ldr	r3, [r7, #16]
}
 800749a:	4618      	mov	r0, r3
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40021000 	.word	0x40021000
 80074ac:	00f42400 	.word	0x00f42400
 80074b0:	007a1200 	.word	0x007a1200

080074b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074b8:	4b03      	ldr	r3, [pc, #12]	@ (80074c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80074ba:	681b      	ldr	r3, [r3, #0]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	20000000 	.word	0x20000000

080074cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80074d0:	f7ff fff0 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 80074d4:	4602      	mov	r2, r0
 80074d6:	4b06      	ldr	r3, [pc, #24]	@ (80074f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	0a1b      	lsrs	r3, r3, #8
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	4904      	ldr	r1, [pc, #16]	@ (80074f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074e2:	5ccb      	ldrb	r3, [r1, r3]
 80074e4:	f003 031f 	and.w	r3, r3, #31
 80074e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	40021000 	.word	0x40021000
 80074f4:	08013dec 	.word	0x08013dec

080074f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80074fc:	f7ff ffda 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 8007500:	4602      	mov	r2, r0
 8007502:	4b06      	ldr	r3, [pc, #24]	@ (800751c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	0adb      	lsrs	r3, r3, #11
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	4904      	ldr	r1, [pc, #16]	@ (8007520 <HAL_RCC_GetPCLK2Freq+0x28>)
 800750e:	5ccb      	ldrb	r3, [r1, r3]
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007518:	4618      	mov	r0, r3
 800751a:	bd80      	pop	{r7, pc}
 800751c:	40021000 	.word	0x40021000
 8007520:	08013dec 	.word	0x08013dec

08007524 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800752a:	4b1e      	ldr	r3, [pc, #120]	@ (80075a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007534:	4b1b      	ldr	r3, [pc, #108]	@ (80075a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b03      	cmp	r3, #3
 8007546:	d10c      	bne.n	8007562 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007548:	4a17      	ldr	r2, [pc, #92]	@ (80075a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007550:	4a14      	ldr	r2, [pc, #80]	@ (80075a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007552:	68d2      	ldr	r2, [r2, #12]
 8007554:	0a12      	lsrs	r2, r2, #8
 8007556:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800755a:	fb02 f303 	mul.w	r3, r2, r3
 800755e:	617b      	str	r3, [r7, #20]
    break;
 8007560:	e00c      	b.n	800757c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007562:	4a12      	ldr	r2, [pc, #72]	@ (80075ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	fbb2 f3f3 	udiv	r3, r2, r3
 800756a:	4a0e      	ldr	r2, [pc, #56]	@ (80075a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800756c:	68d2      	ldr	r2, [r2, #12]
 800756e:	0a12      	lsrs	r2, r2, #8
 8007570:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007574:	fb02 f303 	mul.w	r3, r2, r3
 8007578:	617b      	str	r3, [r7, #20]
    break;
 800757a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800757c:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	0e5b      	lsrs	r3, r3, #25
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	3301      	adds	r3, #1
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	fbb2 f3f3 	udiv	r3, r2, r3
 8007594:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007596:	687b      	ldr	r3, [r7, #4]
}
 8007598:	4618      	mov	r0, r3
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	40021000 	.word	0x40021000
 80075a8:	007a1200 	.word	0x007a1200
 80075ac:	00f42400 	.word	0x00f42400

080075b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075b8:	2300      	movs	r3, #0
 80075ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075bc:	2300      	movs	r3, #0
 80075be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 8098 	beq.w	80076fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075ce:	2300      	movs	r3, #0
 80075d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075d2:	4b43      	ldr	r3, [pc, #268]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10d      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075de:	4b40      	ldr	r3, [pc, #256]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e2:	4a3f      	ldr	r2, [pc, #252]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ea:	4b3d      	ldr	r3, [pc, #244]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075f2:	60bb      	str	r3, [r7, #8]
 80075f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075f6:	2301      	movs	r3, #1
 80075f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075fa:	4b3a      	ldr	r3, [pc, #232]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a39      	ldr	r2, [pc, #228]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007604:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007606:	f7fc fcdf 	bl	8003fc8 <HAL_GetTick>
 800760a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800760c:	e009      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800760e:	f7fc fcdb 	bl	8003fc8 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d902      	bls.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	74fb      	strb	r3, [r7, #19]
        break;
 8007620:	e005      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007622:	4b30      	ldr	r3, [pc, #192]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0ef      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800762e:	7cfb      	ldrb	r3, [r7, #19]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d159      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007634:	4b2a      	ldr	r3, [pc, #168]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800763a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800763e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01e      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	429a      	cmp	r2, r3
 800764e:	d019      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007650:	4b23      	ldr	r3, [pc, #140]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800765a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800765c:	4b20      	ldr	r3, [pc, #128]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800765e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007662:	4a1f      	ldr	r2, [pc, #124]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800766c:	4b1c      	ldr	r3, [pc, #112]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800766e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007672:	4a1b      	ldr	r2, [pc, #108]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800767c:	4a18      	ldr	r2, [pc, #96]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d016      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768e:	f7fc fc9b 	bl	8003fc8 <HAL_GetTick>
 8007692:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007694:	e00b      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007696:	f7fc fc97 	bl	8003fc8 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d902      	bls.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	74fb      	strb	r3, [r7, #19]
            break;
 80076ac:	e006      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076ae:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0ec      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80076bc:	7cfb      	ldrb	r3, [r7, #19]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076c2:	4b07      	ldr	r3, [pc, #28]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d0:	4903      	ldr	r1, [pc, #12]	@ (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80076d8:	e008      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076da:	7cfb      	ldrb	r3, [r7, #19]
 80076dc:	74bb      	strb	r3, [r7, #18]
 80076de:	e005      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80076e0:	40021000 	.word	0x40021000
 80076e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	7cfb      	ldrb	r3, [r7, #19]
 80076ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076ec:	7c7b      	ldrb	r3, [r7, #17]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d105      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f6:	4aa6      	ldr	r2, [pc, #664]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800770a:	4ba1      	ldr	r3, [pc, #644]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007710:	f023 0203 	bic.w	r2, r3, #3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	499d      	ldr	r1, [pc, #628]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00a      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800772c:	4b98      	ldr	r3, [pc, #608]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007732:	f023 020c 	bic.w	r2, r3, #12
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	4995      	ldr	r1, [pc, #596]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800774e:	4b90      	ldr	r3, [pc, #576]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007754:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	498c      	ldr	r1, [pc, #560]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775e:	4313      	orrs	r3, r2
 8007760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007770:	4b87      	ldr	r3, [pc, #540]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007776:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	4984      	ldr	r1, [pc, #528]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007792:	4b7f      	ldr	r3, [pc, #508]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007798:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	497b      	ldr	r1, [pc, #492]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00a      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077b4:	4b76      	ldr	r3, [pc, #472]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	4973      	ldr	r1, [pc, #460]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	496a      	ldr	r1, [pc, #424]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077f8:	4b65      	ldr	r3, [pc, #404]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	4962      	ldr	r1, [pc, #392]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007808:	4313      	orrs	r3, r2
 800780a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800781a:	4b5d      	ldr	r3, [pc, #372]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800781c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007820:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	4959      	ldr	r1, [pc, #356]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800782a:	4313      	orrs	r3, r2
 800782c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800783c:	4b54      	ldr	r3, [pc, #336]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800783e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007842:	f023 0203 	bic.w	r2, r3, #3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784a:	4951      	ldr	r1, [pc, #324]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800784c:	4313      	orrs	r3, r2
 800784e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800785e:	4b4c      	ldr	r3, [pc, #304]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007864:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786c:	4948      	ldr	r1, [pc, #288]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800787c:	2b00      	cmp	r3, #0
 800787e:	d015      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007880:	4b43      	ldr	r3, [pc, #268]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788e:	4940      	ldr	r1, [pc, #256]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800789e:	d105      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4a3a      	ldr	r2, [pc, #232]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d015      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078b8:	4b35      	ldr	r3, [pc, #212]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078c6:	4932      	ldr	r1, [pc, #200]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078d6:	d105      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d015      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078f0:	4b27      	ldr	r3, [pc, #156]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fe:	4924      	ldr	r1, [pc, #144]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007900:	4313      	orrs	r3, r2
 8007902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800790e:	d105      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007910:	4b1f      	ldr	r3, [pc, #124]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	4a1e      	ldr	r2, [pc, #120]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800791a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d015      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007928:	4b19      	ldr	r3, [pc, #100]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800792e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007936:	4916      	ldr	r1, [pc, #88]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007938:	4313      	orrs	r3, r2
 800793a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007942:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007946:	d105      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007948:	4b11      	ldr	r3, [pc, #68]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	4a10      	ldr	r2, [pc, #64]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007952:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d019      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007960:	4b0b      	ldr	r3, [pc, #44]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007966:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796e:	4908      	ldr	r1, [pc, #32]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800797e:	d109      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007980:	4b03      	ldr	r3, [pc, #12]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	4a02      	ldr	r2, [pc, #8]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800798a:	60d3      	str	r3, [r2, #12]
 800798c:	e002      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800798e:	bf00      	nop
 8007990:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d015      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80079a0:	4b29      	ldr	r3, [pc, #164]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ae:	4926      	ldr	r1, [pc, #152]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079be:	d105      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80079c0:	4b21      	ldr	r3, [pc, #132]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	4a20      	ldr	r2, [pc, #128]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d015      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80079d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e6:	4918      	ldr	r1, [pc, #96]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f6:	d105      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80079f8:	4b13      	ldr	r3, [pc, #76]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	4a12      	ldr	r2, [pc, #72]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d015      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a10:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a1e:	490a      	ldr	r1, [pc, #40]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a2e:	d105      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a30:	4b05      	ldr	r3, [pc, #20]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	4a04      	ldr	r2, [pc, #16]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007a3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	40021000 	.word	0x40021000

08007a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e09d      	b.n	8007b9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d108      	bne.n	8007a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a6e:	d009      	beq.n	8007a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	61da      	str	r2, [r3, #28]
 8007a76:	e005      	b.n	8007a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fb fc28 	bl	80032f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007aba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ac4:	d902      	bls.n	8007acc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	e002      	b.n	8007ad2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ad0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007ada:	d007      	beq.n	8007aec <HAL_SPI_Init+0xa0>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ae4:	d002      	beq.n	8007aec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b24:	431a      	orrs	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b2e:	ea42 0103 	orr.w	r1, r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	0c1b      	lsrs	r3, r3, #16
 8007b48:	f003 0204 	and.w	r2, r3, #4
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007b68:	ea42 0103 	orr.w	r1, r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69da      	ldr	r2, [r3, #28]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b088      	sub	sp, #32
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	603b      	str	r3, [r7, #0]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_SPI_Transmit+0x22>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e158      	b.n	8007e76 <HAL_SPI_Transmit+0x2d4>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bcc:	f7fc f9fc 	bl	8003fc8 <HAL_GetTick>
 8007bd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d002      	beq.n	8007be8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007be2:	2302      	movs	r3, #2
 8007be4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007be6:	e13d      	b.n	8007e64 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <HAL_SPI_Transmit+0x52>
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007bf8:	e134      	b.n	8007e64 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	88fa      	ldrh	r2, [r7, #6]
 8007c12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	88fa      	ldrh	r2, [r7, #6]
 8007c18:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c44:	d10f      	bne.n	8007c66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c70:	2b40      	cmp	r3, #64	@ 0x40
 8007c72:	d007      	beq.n	8007c84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c8c:	d94b      	bls.n	8007d26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_SPI_Transmit+0xfa>
 8007c96:	8afb      	ldrh	r3, [r7, #22]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d13e      	bne.n	8007d1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca0:	881a      	ldrh	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cac:	1c9a      	adds	r2, r3, #2
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007cc0:	e02b      	b.n	8007d1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d112      	bne.n	8007cf6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd4:	881a      	ldrh	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce0:	1c9a      	adds	r2, r3, #2
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007cf4:	e011      	b.n	8007d1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cf6:	f7fc f967 	bl	8003fc8 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d803      	bhi.n	8007d0e <HAL_SPI_Transmit+0x16c>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0c:	d102      	bne.n	8007d14 <HAL_SPI_Transmit+0x172>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d18:	e0a4      	b.n	8007e64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1ce      	bne.n	8007cc2 <HAL_SPI_Transmit+0x120>
 8007d24:	e07c      	b.n	8007e20 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <HAL_SPI_Transmit+0x192>
 8007d2e:	8afb      	ldrh	r3, [r7, #22]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d170      	bne.n	8007e16 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d912      	bls.n	8007d64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d42:	881a      	ldrh	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4e:	1c9a      	adds	r2, r3, #2
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b02      	subs	r3, #2
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d62:	e058      	b.n	8007e16 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	7812      	ldrb	r2, [r2, #0]
 8007d70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007d8a:	e044      	b.n	8007e16 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d12b      	bne.n	8007df2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d912      	bls.n	8007dca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da8:	881a      	ldrh	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	1c9a      	adds	r2, r3, #2
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b02      	subs	r3, #2
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007dc8:	e025      	b.n	8007e16 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	330c      	adds	r3, #12
 8007dd4:	7812      	ldrb	r2, [r2, #0]
 8007dd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007df0:	e011      	b.n	8007e16 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007df2:	f7fc f8e9 	bl	8003fc8 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d803      	bhi.n	8007e0a <HAL_SPI_Transmit+0x268>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d102      	bne.n	8007e10 <HAL_SPI_Transmit+0x26e>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e14:	e026      	b.n	8007e64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1b5      	bne.n	8007d8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fb5b 	bl	80084e0 <SPI_EndRxTxTransaction>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2220      	movs	r2, #32
 8007e34:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e3e:	2300      	movs	r3, #0
 8007e40:	613b      	str	r3, [r7, #16]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	613b      	str	r3, [r7, #16]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	613b      	str	r3, [r7, #16]
 8007e52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e000      	b.n	8007e64 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007e62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3720      	adds	r7, #32
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b08a      	sub	sp, #40	@ 0x28
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_SPI_TransmitReceive+0x26>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e1fb      	b.n	800829c <HAL_SPI_TransmitReceive+0x41e>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007eac:	f7fc f88c 	bl	8003fc8 <HAL_GetTick>
 8007eb0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007eb8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007ec0:	887b      	ldrh	r3, [r7, #2]
 8007ec2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007ec4:	887b      	ldrh	r3, [r7, #2]
 8007ec6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ec8:	7efb      	ldrb	r3, [r7, #27]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d00e      	beq.n	8007eec <HAL_SPI_TransmitReceive+0x6e>
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ed4:	d106      	bne.n	8007ee4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d102      	bne.n	8007ee4 <HAL_SPI_TransmitReceive+0x66>
 8007ede:	7efb      	ldrb	r3, [r7, #27]
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d003      	beq.n	8007eec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007eea:	e1cd      	b.n	8008288 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <HAL_SPI_TransmitReceive+0x80>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <HAL_SPI_TransmitReceive+0x80>
 8007ef8:	887b      	ldrh	r3, [r7, #2]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007f04:	e1c0      	b.n	8008288 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d003      	beq.n	8007f1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2205      	movs	r2, #5
 8007f16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	887a      	ldrh	r2, [r7, #2]
 8007f2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	887a      	ldrh	r2, [r7, #2]
 8007f32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	887a      	ldrh	r2, [r7, #2]
 8007f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	887a      	ldrh	r2, [r7, #2]
 8007f46:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f5c:	d802      	bhi.n	8007f64 <HAL_SPI_TransmitReceive+0xe6>
 8007f5e:	8a3b      	ldrh	r3, [r7, #16]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d908      	bls.n	8007f76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f72:	605a      	str	r2, [r3, #4]
 8007f74:	e007      	b.n	8007f86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f90:	2b40      	cmp	r3, #64	@ 0x40
 8007f92:	d007      	beq.n	8007fa4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007fac:	d97c      	bls.n	80080a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <HAL_SPI_TransmitReceive+0x13e>
 8007fb6:	8a7b      	ldrh	r3, [r7, #18]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d169      	bne.n	8008090 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc0:	881a      	ldrh	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fcc:	1c9a      	adds	r2, r3, #2
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fe0:	e056      	b.n	8008090 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d11b      	bne.n	8008028 <HAL_SPI_TransmitReceive+0x1aa>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d016      	beq.n	8008028 <HAL_SPI_TransmitReceive+0x1aa>
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d113      	bne.n	8008028 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008004:	881a      	ldrh	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008010:	1c9a      	adds	r2, r3, #2
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800801a:	b29b      	uxth	r3, r3
 800801c:	3b01      	subs	r3, #1
 800801e:	b29a      	uxth	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b01      	cmp	r3, #1
 8008034:	d11c      	bne.n	8008070 <HAL_SPI_TransmitReceive+0x1f2>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d016      	beq.n	8008070 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804c:	b292      	uxth	r2, r2
 800804e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008054:	1c9a      	adds	r2, r3, #2
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800806c:	2301      	movs	r3, #1
 800806e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008070:	f7fb ffaa 	bl	8003fc8 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800807c:	429a      	cmp	r2, r3
 800807e:	d807      	bhi.n	8008090 <HAL_SPI_TransmitReceive+0x212>
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d003      	beq.n	8008090 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800808e:	e0fb      	b.n	8008288 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1a3      	bne.n	8007fe2 <HAL_SPI_TransmitReceive+0x164>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d19d      	bne.n	8007fe2 <HAL_SPI_TransmitReceive+0x164>
 80080a6:	e0df      	b.n	8008268 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <HAL_SPI_TransmitReceive+0x23a>
 80080b0:	8a7b      	ldrh	r3, [r7, #18]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	f040 80cb 	bne.w	800824e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d912      	bls.n	80080e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c6:	881a      	ldrh	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d2:	1c9a      	adds	r2, r3, #2
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b02      	subs	r3, #2
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080e6:	e0b2      	b.n	800824e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	330c      	adds	r3, #12
 80080f2:	7812      	ldrb	r2, [r2, #0]
 80080f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008104:	b29b      	uxth	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	b29a      	uxth	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800810e:	e09e      	b.n	800824e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b02      	cmp	r3, #2
 800811c:	d134      	bne.n	8008188 <HAL_SPI_TransmitReceive+0x30a>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008122:	b29b      	uxth	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d02f      	beq.n	8008188 <HAL_SPI_TransmitReceive+0x30a>
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	2b01      	cmp	r3, #1
 800812c:	d12c      	bne.n	8008188 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b01      	cmp	r3, #1
 8008136:	d912      	bls.n	800815e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813c:	881a      	ldrh	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	1c9a      	adds	r2, r3, #2
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b02      	subs	r3, #2
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800815c:	e012      	b.n	8008184 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	330c      	adds	r3, #12
 8008168:	7812      	ldrb	r2, [r2, #0]
 800816a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b01      	cmp	r3, #1
 8008194:	d148      	bne.n	8008228 <HAL_SPI_TransmitReceive+0x3aa>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d042      	beq.n	8008228 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d923      	bls.n	80081f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b8:	b292      	uxth	r2, r2
 80081ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c0:	1c9a      	adds	r2, r3, #2
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b02      	subs	r3, #2
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081de:	b29b      	uxth	r3, r3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d81f      	bhi.n	8008224 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80081f2:	605a      	str	r2, [r3, #4]
 80081f4:	e016      	b.n	8008224 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f103 020c 	add.w	r2, r3, #12
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008202:	7812      	ldrb	r2, [r2, #0]
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008224:	2301      	movs	r3, #1
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008228:	f7fb fece 	bl	8003fc8 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008234:	429a      	cmp	r2, r3
 8008236:	d803      	bhi.n	8008240 <HAL_SPI_TransmitReceive+0x3c2>
 8008238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823e:	d102      	bne.n	8008246 <HAL_SPI_TransmitReceive+0x3c8>
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	2b00      	cmp	r3, #0
 8008244:	d103      	bne.n	800824e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800824c:	e01c      	b.n	8008288 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008252:	b29b      	uxth	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	f47f af5b 	bne.w	8008110 <HAL_SPI_TransmitReceive+0x292>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	f47f af54 	bne.w	8008110 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008268:	69fa      	ldr	r2, [r7, #28]
 800826a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f937 	bl	80084e0 <SPI_EndRxTxTransaction>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d006      	beq.n	8008286 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2220      	movs	r2, #32
 8008282:	661a      	str	r2, [r3, #96]	@ 0x60
 8008284:	e000      	b.n	8008288 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008298:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800829c:	4618      	mov	r0, r3
 800829e:	3728      	adds	r7, #40	@ 0x28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	4613      	mov	r3, r2
 80082b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082b4:	f7fb fe88 	bl	8003fc8 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4413      	add	r3, r2
 80082c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082c4:	f7fb fe80 	bl	8003fc8 <HAL_GetTick>
 80082c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082ca:	4b39      	ldr	r3, [pc, #228]	@ (80083b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	015b      	lsls	r3, r3, #5
 80082d0:	0d1b      	lsrs	r3, r3, #20
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	fb02 f303 	mul.w	r3, r2, r3
 80082d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082da:	e054      	b.n	8008386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d050      	beq.n	8008386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082e4:	f7fb fe70 	bl	8003fc8 <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d902      	bls.n	80082fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d13d      	bne.n	8008376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008312:	d111      	bne.n	8008338 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800831c:	d004      	beq.n	8008328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008326:	d107      	bne.n	8008338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008340:	d10f      	bne.n	8008362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e017      	b.n	80083a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	3b01      	subs	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4013      	ands	r3, r2
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	429a      	cmp	r2, r3
 8008394:	bf0c      	ite	eq
 8008396:	2301      	moveq	r3, #1
 8008398:	2300      	movne	r3, #0
 800839a:	b2db      	uxtb	r3, r3
 800839c:	461a      	mov	r2, r3
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d19b      	bne.n	80082dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000000 	.word	0x20000000

080083b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08a      	sub	sp, #40	@ 0x28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083c6:	f7fb fdff 	bl	8003fc8 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ce:	1a9b      	subs	r3, r3, r2
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	4413      	add	r3, r2
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80083d6:	f7fb fdf7 	bl	8003fc8 <HAL_GetTick>
 80083da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	330c      	adds	r3, #12
 80083e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083e4:	4b3d      	ldr	r3, [pc, #244]	@ (80084dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	00da      	lsls	r2, r3, #3
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	0d1b      	lsrs	r3, r3, #20
 80083f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f6:	fb02 f303 	mul.w	r3, r2, r3
 80083fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80083fc:	e060      	b.n	80084c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008404:	d107      	bne.n	8008416 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d104      	bne.n	8008416 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008414:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841c:	d050      	beq.n	80084c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800841e:	f7fb fdd3 	bl	8003fc8 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800842a:	429a      	cmp	r2, r3
 800842c:	d902      	bls.n	8008434 <SPI_WaitFifoStateUntilTimeout+0x80>
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	2b00      	cmp	r3, #0
 8008432:	d13d      	bne.n	80084b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008442:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800844c:	d111      	bne.n	8008472 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008456:	d004      	beq.n	8008462 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008460:	d107      	bne.n	8008472 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008470:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800847a:	d10f      	bne.n	800849c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800849a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e010      	b.n	80084d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	3b01      	subs	r3, #1
 80084be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4013      	ands	r3, r2
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d196      	bne.n	80083fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3728      	adds	r7, #40	@ 0x28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20000000 	.word	0x20000000

080084e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff ff5b 	bl	80083b4 <SPI_WaitFifoStateUntilTimeout>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d007      	beq.n	8008514 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008508:	f043 0220 	orr.w	r2, r3, #32
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e027      	b.n	8008564 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2200      	movs	r2, #0
 800851c:	2180      	movs	r1, #128	@ 0x80
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f7ff fec0 	bl	80082a4 <SPI_WaitFlagStateUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d007      	beq.n	800853a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800852e:	f043 0220 	orr.w	r2, r3, #32
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e014      	b.n	8008564 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2200      	movs	r2, #0
 8008542:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f7ff ff34 	bl	80083b4 <SPI_WaitFifoStateUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d007      	beq.n	8008562 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008556:	f043 0220 	orr.w	r2, r3, #32
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e000      	b.n	8008564 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e038      	b.n	80085f4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7fb faa8 	bl	8003aec <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3308      	adds	r3, #8
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f002 fae2 	bl	800ab70 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	461a      	mov	r2, r3
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	f002 fba8 	bl	800ad0c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6858      	ldr	r0, [r3, #4]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	f002 fbf1 	bl	800adb0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	6892      	ldr	r2, [r2, #8]
 80085d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	6892      	ldr	r2, [r2, #8]
 80085e2:	f041 0101 	orr.w	r1, r1, #1
 80085e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e049      	b.n	80086a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d106      	bne.n	8008628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fa ff04 	bl	8003430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3304      	adds	r3, #4
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f000 fc72 	bl	8008f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e049      	b.n	8008750 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d106      	bne.n	80086d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f841 	bl	8008758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2202      	movs	r2, #2
 80086da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3304      	adds	r3, #4
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f000 fc1b 	bl	8008f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b02      	cmp	r3, #2
 8008780:	d122      	bne.n	80087c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b02      	cmp	r3, #2
 800878e:	d11b      	bne.n	80087c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f06f 0202 	mvn.w	r2, #2
 8008798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fb9a 	bl	8008ee8 <HAL_TIM_IC_CaptureCallback>
 80087b4:	e005      	b.n	80087c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fb8c 	bl	8008ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fb9d 	bl	8008efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f003 0304 	and.w	r3, r3, #4
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d122      	bne.n	800881c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d11b      	bne.n	800881c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f06f 0204 	mvn.w	r2, #4
 80087ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2202      	movs	r2, #2
 80087f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fb70 	bl	8008ee8 <HAL_TIM_IC_CaptureCallback>
 8008808:	e005      	b.n	8008816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fb62 	bl	8008ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fb73 	bl	8008efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b08      	cmp	r3, #8
 8008828:	d122      	bne.n	8008870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b08      	cmp	r3, #8
 8008836:	d11b      	bne.n	8008870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f06f 0208 	mvn.w	r2, #8
 8008840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2204      	movs	r2, #4
 8008846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	f003 0303 	and.w	r3, r3, #3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fb46 	bl	8008ee8 <HAL_TIM_IC_CaptureCallback>
 800885c:	e005      	b.n	800886a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fb38 	bl	8008ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fb49 	bl	8008efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f003 0310 	and.w	r3, r3, #16
 800887a:	2b10      	cmp	r3, #16
 800887c:	d122      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f003 0310 	and.w	r3, r3, #16
 8008888:	2b10      	cmp	r3, #16
 800888a:	d11b      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f06f 0210 	mvn.w	r2, #16
 8008894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2208      	movs	r2, #8
 800889a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fb1c 	bl	8008ee8 <HAL_TIM_IC_CaptureCallback>
 80088b0:	e005      	b.n	80088be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fb0e 	bl	8008ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fb1f 	bl	8008efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d10e      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d107      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f06f 0201 	mvn.w	r2, #1
 80088e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fae8 	bl	8008ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088fa:	2b80      	cmp	r3, #128	@ 0x80
 80088fc:	d10e      	bne.n	800891c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008908:	2b80      	cmp	r3, #128	@ 0x80
 800890a:	d107      	bne.n	800891c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 f8c4 	bl	8009aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800892a:	d10e      	bne.n	800894a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008936:	2b80      	cmp	r3, #128	@ 0x80
 8008938:	d107      	bne.n	800894a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 f8b7 	bl	8009ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008954:	2b40      	cmp	r3, #64	@ 0x40
 8008956:	d10e      	bne.n	8008976 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008962:	2b40      	cmp	r3, #64	@ 0x40
 8008964:	d107      	bne.n	8008976 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800896e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 facd 	bl	8008f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	f003 0320 	and.w	r3, r3, #32
 8008980:	2b20      	cmp	r3, #32
 8008982:	d10e      	bne.n	80089a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b20      	cmp	r3, #32
 8008990:	d107      	bne.n	80089a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f06f 0220 	mvn.w	r2, #32
 800899a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 f877 	bl	8009a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089b0:	d10f      	bne.n	80089d2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089c0:	d107      	bne.n	80089d2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80089ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 f87d 	bl	8009acc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089e0:	d10f      	bne.n	8008a02 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089f0:	d107      	bne.n	8008a02 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80089fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 f86f 	bl	8009ae0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a10:	d10f      	bne.n	8008a32 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a20:	d107      	bne.n	8008a32 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 f861 	bl	8009af4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a40:	d10f      	bne.n	8008a62 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a50:	d107      	bne.n	8008a62 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 f853 	bl	8009b08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
	...

08008a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e0ff      	b.n	8008c8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b14      	cmp	r3, #20
 8008a96:	f200 80f0 	bhi.w	8008c7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008af5 	.word	0x08008af5
 8008aa4:	08008c7b 	.word	0x08008c7b
 8008aa8:	08008c7b 	.word	0x08008c7b
 8008aac:	08008c7b 	.word	0x08008c7b
 8008ab0:	08008b35 	.word	0x08008b35
 8008ab4:	08008c7b 	.word	0x08008c7b
 8008ab8:	08008c7b 	.word	0x08008c7b
 8008abc:	08008c7b 	.word	0x08008c7b
 8008ac0:	08008b77 	.word	0x08008b77
 8008ac4:	08008c7b 	.word	0x08008c7b
 8008ac8:	08008c7b 	.word	0x08008c7b
 8008acc:	08008c7b 	.word	0x08008c7b
 8008ad0:	08008bb7 	.word	0x08008bb7
 8008ad4:	08008c7b 	.word	0x08008c7b
 8008ad8:	08008c7b 	.word	0x08008c7b
 8008adc:	08008c7b 	.word	0x08008c7b
 8008ae0:	08008bf9 	.word	0x08008bf9
 8008ae4:	08008c7b 	.word	0x08008c7b
 8008ae8:	08008c7b 	.word	0x08008c7b
 8008aec:	08008c7b 	.word	0x08008c7b
 8008af0:	08008c39 	.word	0x08008c39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 faba 	bl	8009074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699a      	ldr	r2, [r3, #24]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0208 	orr.w	r2, r2, #8
 8008b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0204 	bic.w	r2, r2, #4
 8008b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6999      	ldr	r1, [r3, #24]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	619a      	str	r2, [r3, #24]
      break;
 8008b32:	e0a5      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fb34 	bl	80091a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	699a      	ldr	r2, [r3, #24]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6999      	ldr	r1, [r3, #24]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	021a      	lsls	r2, r3, #8
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	619a      	str	r2, [r3, #24]
      break;
 8008b74:	e084      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fba7 	bl	80092d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69da      	ldr	r2, [r3, #28]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f042 0208 	orr.w	r2, r2, #8
 8008b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0204 	bic.w	r2, r2, #4
 8008ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69d9      	ldr	r1, [r3, #28]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	61da      	str	r2, [r3, #28]
      break;
 8008bb4:	e064      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fc19 	bl	80093f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69da      	ldr	r2, [r3, #28]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69d9      	ldr	r1, [r3, #28]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	021a      	lsls	r2, r3, #8
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	61da      	str	r2, [r3, #28]
      break;
 8008bf6:	e043      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fc8c 	bl	800951c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0208 	orr.w	r2, r2, #8
 8008c12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0204 	bic.w	r2, r2, #4
 8008c22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	691a      	ldr	r2, [r3, #16]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008c36:	e023      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fcd6 	bl	80095f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	021a      	lsls	r2, r3, #8
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008c78:	e002      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop

08008c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e0f6      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x20a>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008cce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a6f      	ldr	r2, [pc, #444]	@ (8008ea8 <HAL_TIM_ConfigClockSource+0x214>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	f000 80c1 	beq.w	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008cf0:	4a6d      	ldr	r2, [pc, #436]	@ (8008ea8 <HAL_TIM_ConfigClockSource+0x214>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	f200 80c6 	bhi.w	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cf8:	4a6c      	ldr	r2, [pc, #432]	@ (8008eac <HAL_TIM_ConfigClockSource+0x218>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	f000 80b9 	beq.w	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008d00:	4a6a      	ldr	r2, [pc, #424]	@ (8008eac <HAL_TIM_ConfigClockSource+0x218>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	f200 80be 	bhi.w	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d08:	4a69      	ldr	r2, [pc, #420]	@ (8008eb0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	f000 80b1 	beq.w	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008d10:	4a67      	ldr	r2, [pc, #412]	@ (8008eb0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	f200 80b6 	bhi.w	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d18:	4a66      	ldr	r2, [pc, #408]	@ (8008eb4 <HAL_TIM_ConfigClockSource+0x220>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	f000 80a9 	beq.w	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008d20:	4a64      	ldr	r2, [pc, #400]	@ (8008eb4 <HAL_TIM_ConfigClockSource+0x220>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	f200 80ae 	bhi.w	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d28:	4a63      	ldr	r2, [pc, #396]	@ (8008eb8 <HAL_TIM_ConfigClockSource+0x224>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	f000 80a1 	beq.w	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008d30:	4a61      	ldr	r2, [pc, #388]	@ (8008eb8 <HAL_TIM_ConfigClockSource+0x224>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	f200 80a6 	bhi.w	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d38:	4a60      	ldr	r2, [pc, #384]	@ (8008ebc <HAL_TIM_ConfigClockSource+0x228>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	f000 8099 	beq.w	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008d40:	4a5e      	ldr	r2, [pc, #376]	@ (8008ebc <HAL_TIM_ConfigClockSource+0x228>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	f200 809e 	bhi.w	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d4c:	f000 8091 	beq.w	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008d50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d54:	f200 8096 	bhi.w	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d5c:	f000 8089 	beq.w	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008d60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d64:	f200 808e 	bhi.w	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d6c:	d03e      	beq.n	8008dec <HAL_TIM_ConfigClockSource+0x158>
 8008d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d72:	f200 8087 	bhi.w	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d7a:	f000 8086 	beq.w	8008e8a <HAL_TIM_ConfigClockSource+0x1f6>
 8008d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d82:	d87f      	bhi.n	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d84:	2b70      	cmp	r3, #112	@ 0x70
 8008d86:	d01a      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x12a>
 8008d88:	2b70      	cmp	r3, #112	@ 0x70
 8008d8a:	d87b      	bhi.n	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d8c:	2b60      	cmp	r3, #96	@ 0x60
 8008d8e:	d050      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0x19e>
 8008d90:	2b60      	cmp	r3, #96	@ 0x60
 8008d92:	d877      	bhi.n	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d94:	2b50      	cmp	r3, #80	@ 0x50
 8008d96:	d03c      	beq.n	8008e12 <HAL_TIM_ConfigClockSource+0x17e>
 8008d98:	2b50      	cmp	r3, #80	@ 0x50
 8008d9a:	d873      	bhi.n	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d9c:	2b40      	cmp	r3, #64	@ 0x40
 8008d9e:	d058      	beq.n	8008e52 <HAL_TIM_ConfigClockSource+0x1be>
 8008da0:	2b40      	cmp	r3, #64	@ 0x40
 8008da2:	d86f      	bhi.n	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008da4:	2b30      	cmp	r3, #48	@ 0x30
 8008da6:	d064      	beq.n	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008da8:	2b30      	cmp	r3, #48	@ 0x30
 8008daa:	d86b      	bhi.n	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008dac:	2b20      	cmp	r3, #32
 8008dae:	d060      	beq.n	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	d867      	bhi.n	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d05c      	beq.n	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008db8:	2b10      	cmp	r3, #16
 8008dba:	d05a      	beq.n	8008e72 <HAL_TIM_ConfigClockSource+0x1de>
 8008dbc:	e062      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	6899      	ldr	r1, [r3, #8]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	f000 fcf7 	bl	80097c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	609a      	str	r2, [r3, #8]
      break;
 8008dea:	e04f      	b.n	8008e8c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	6899      	ldr	r1, [r3, #8]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f000 fce0 	bl	80097c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e0e:	609a      	str	r2, [r3, #8]
      break;
 8008e10:	e03c      	b.n	8008e8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	6859      	ldr	r1, [r3, #4]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f000 fc52 	bl	80096c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2150      	movs	r1, #80	@ 0x50
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 fcab 	bl	8009786 <TIM_ITRx_SetConfig>
      break;
 8008e30:	e02c      	b.n	8008e8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6818      	ldr	r0, [r3, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	6859      	ldr	r1, [r3, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f000 fc71 	bl	8009726 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2160      	movs	r1, #96	@ 0x60
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 fc9b 	bl	8009786 <TIM_ITRx_SetConfig>
      break;
 8008e50:	e01c      	b.n	8008e8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	6859      	ldr	r1, [r3, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	f000 fc32 	bl	80096c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2140      	movs	r1, #64	@ 0x40
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fc8b 	bl	8009786 <TIM_ITRx_SetConfig>
      break;
 8008e70:	e00c      	b.n	8008e8c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f000 fc82 	bl	8009786 <TIM_ITRx_SetConfig>
      break;
 8008e82:	e003      	b.n	8008e8c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	73fb      	strb	r3, [r7, #15]
      break;
 8008e88:	e000      	b.n	8008e8c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	00100070 	.word	0x00100070
 8008eac:	00100060 	.word	0x00100060
 8008eb0:	00100050 	.word	0x00100050
 8008eb4:	00100040 	.word	0x00100040
 8008eb8:	00100030 	.word	0x00100030
 8008ebc:	00100020 	.word	0x00100020

08008ec0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a46      	ldr	r2, [pc, #280]	@ (8009050 <TIM_Base_SetConfig+0x12c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d017      	beq.n	8008f6c <TIM_Base_SetConfig+0x48>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f42:	d013      	beq.n	8008f6c <TIM_Base_SetConfig+0x48>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a43      	ldr	r2, [pc, #268]	@ (8009054 <TIM_Base_SetConfig+0x130>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00f      	beq.n	8008f6c <TIM_Base_SetConfig+0x48>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a42      	ldr	r2, [pc, #264]	@ (8009058 <TIM_Base_SetConfig+0x134>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00b      	beq.n	8008f6c <TIM_Base_SetConfig+0x48>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a41      	ldr	r2, [pc, #260]	@ (800905c <TIM_Base_SetConfig+0x138>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d007      	beq.n	8008f6c <TIM_Base_SetConfig+0x48>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a40      	ldr	r2, [pc, #256]	@ (8009060 <TIM_Base_SetConfig+0x13c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_Base_SetConfig+0x48>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a3f      	ldr	r2, [pc, #252]	@ (8009064 <TIM_Base_SetConfig+0x140>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d108      	bne.n	8008f7e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a33      	ldr	r2, [pc, #204]	@ (8009050 <TIM_Base_SetConfig+0x12c>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d023      	beq.n	8008fce <TIM_Base_SetConfig+0xaa>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f8c:	d01f      	beq.n	8008fce <TIM_Base_SetConfig+0xaa>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a30      	ldr	r2, [pc, #192]	@ (8009054 <TIM_Base_SetConfig+0x130>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d01b      	beq.n	8008fce <TIM_Base_SetConfig+0xaa>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a2f      	ldr	r2, [pc, #188]	@ (8009058 <TIM_Base_SetConfig+0x134>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d017      	beq.n	8008fce <TIM_Base_SetConfig+0xaa>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800905c <TIM_Base_SetConfig+0x138>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d013      	beq.n	8008fce <TIM_Base_SetConfig+0xaa>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8009060 <TIM_Base_SetConfig+0x13c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00f      	beq.n	8008fce <TIM_Base_SetConfig+0xaa>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8009068 <TIM_Base_SetConfig+0x144>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00b      	beq.n	8008fce <TIM_Base_SetConfig+0xaa>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800906c <TIM_Base_SetConfig+0x148>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d007      	beq.n	8008fce <TIM_Base_SetConfig+0xaa>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8009070 <TIM_Base_SetConfig+0x14c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d003      	beq.n	8008fce <TIM_Base_SetConfig+0xaa>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a26      	ldr	r2, [pc, #152]	@ (8009064 <TIM_Base_SetConfig+0x140>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d108      	bne.n	8008fe0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a12      	ldr	r2, [pc, #72]	@ (8009050 <TIM_Base_SetConfig+0x12c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d013      	beq.n	8009034 <TIM_Base_SetConfig+0x110>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a14      	ldr	r2, [pc, #80]	@ (8009060 <TIM_Base_SetConfig+0x13c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d00f      	beq.n	8009034 <TIM_Base_SetConfig+0x110>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a14      	ldr	r2, [pc, #80]	@ (8009068 <TIM_Base_SetConfig+0x144>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d00b      	beq.n	8009034 <TIM_Base_SetConfig+0x110>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a13      	ldr	r2, [pc, #76]	@ (800906c <TIM_Base_SetConfig+0x148>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d007      	beq.n	8009034 <TIM_Base_SetConfig+0x110>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a12      	ldr	r2, [pc, #72]	@ (8009070 <TIM_Base_SetConfig+0x14c>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d003      	beq.n	8009034 <TIM_Base_SetConfig+0x110>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a0d      	ldr	r2, [pc, #52]	@ (8009064 <TIM_Base_SetConfig+0x140>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d103      	bne.n	800903c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	615a      	str	r2, [r3, #20]
}
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40012c00 	.word	0x40012c00
 8009054:	40000400 	.word	0x40000400
 8009058:	40000800 	.word	0x40000800
 800905c:	40000c00 	.word	0x40000c00
 8009060:	40013400 	.word	0x40013400
 8009064:	40015000 	.word	0x40015000
 8009068:	40014000 	.word	0x40014000
 800906c:	40014400 	.word	0x40014400
 8009070:	40014800 	.word	0x40014800

08009074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	f023 0201 	bic.w	r2, r3, #1
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0303 	bic.w	r3, r3, #3
 80090ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f023 0302 	bic.w	r3, r3, #2
 80090c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a30      	ldr	r2, [pc, #192]	@ (8009190 <TIM_OC1_SetConfig+0x11c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d013      	beq.n	80090fc <TIM_OC1_SetConfig+0x88>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a2f      	ldr	r2, [pc, #188]	@ (8009194 <TIM_OC1_SetConfig+0x120>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d00f      	beq.n	80090fc <TIM_OC1_SetConfig+0x88>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a2e      	ldr	r2, [pc, #184]	@ (8009198 <TIM_OC1_SetConfig+0x124>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00b      	beq.n	80090fc <TIM_OC1_SetConfig+0x88>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a2d      	ldr	r2, [pc, #180]	@ (800919c <TIM_OC1_SetConfig+0x128>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d007      	beq.n	80090fc <TIM_OC1_SetConfig+0x88>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a2c      	ldr	r2, [pc, #176]	@ (80091a0 <TIM_OC1_SetConfig+0x12c>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d003      	beq.n	80090fc <TIM_OC1_SetConfig+0x88>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a2b      	ldr	r2, [pc, #172]	@ (80091a4 <TIM_OC1_SetConfig+0x130>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d10c      	bne.n	8009116 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	f023 0308 	bic.w	r3, r3, #8
 8009102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f023 0304 	bic.w	r3, r3, #4
 8009114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a1d      	ldr	r2, [pc, #116]	@ (8009190 <TIM_OC1_SetConfig+0x11c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d013      	beq.n	8009146 <TIM_OC1_SetConfig+0xd2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a1c      	ldr	r2, [pc, #112]	@ (8009194 <TIM_OC1_SetConfig+0x120>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00f      	beq.n	8009146 <TIM_OC1_SetConfig+0xd2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a1b      	ldr	r2, [pc, #108]	@ (8009198 <TIM_OC1_SetConfig+0x124>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d00b      	beq.n	8009146 <TIM_OC1_SetConfig+0xd2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a1a      	ldr	r2, [pc, #104]	@ (800919c <TIM_OC1_SetConfig+0x128>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d007      	beq.n	8009146 <TIM_OC1_SetConfig+0xd2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a19      	ldr	r2, [pc, #100]	@ (80091a0 <TIM_OC1_SetConfig+0x12c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d003      	beq.n	8009146 <TIM_OC1_SetConfig+0xd2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a18      	ldr	r2, [pc, #96]	@ (80091a4 <TIM_OC1_SetConfig+0x130>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d111      	bne.n	800916a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800914c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4313      	orrs	r3, r2
 8009168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	621a      	str	r2, [r3, #32]
}
 8009184:	bf00      	nop
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	40012c00 	.word	0x40012c00
 8009194:	40013400 	.word	0x40013400
 8009198:	40014000 	.word	0x40014000
 800919c:	40014400 	.word	0x40014400
 80091a0:	40014800 	.word	0x40014800
 80091a4:	40015000 	.word	0x40015000

080091a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	f023 0210 	bic.w	r2, r3, #16
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	021b      	lsls	r3, r3, #8
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f023 0320 	bic.w	r3, r3, #32
 80091f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	4313      	orrs	r3, r2
 8009202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a2c      	ldr	r2, [pc, #176]	@ (80092b8 <TIM_OC2_SetConfig+0x110>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d007      	beq.n	800921c <TIM_OC2_SetConfig+0x74>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a2b      	ldr	r2, [pc, #172]	@ (80092bc <TIM_OC2_SetConfig+0x114>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d003      	beq.n	800921c <TIM_OC2_SetConfig+0x74>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a2a      	ldr	r2, [pc, #168]	@ (80092c0 <TIM_OC2_SetConfig+0x118>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d10d      	bne.n	8009238 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	4313      	orrs	r3, r2
 800922e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a1f      	ldr	r2, [pc, #124]	@ (80092b8 <TIM_OC2_SetConfig+0x110>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d013      	beq.n	8009268 <TIM_OC2_SetConfig+0xc0>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a1e      	ldr	r2, [pc, #120]	@ (80092bc <TIM_OC2_SetConfig+0x114>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d00f      	beq.n	8009268 <TIM_OC2_SetConfig+0xc0>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a1e      	ldr	r2, [pc, #120]	@ (80092c4 <TIM_OC2_SetConfig+0x11c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d00b      	beq.n	8009268 <TIM_OC2_SetConfig+0xc0>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a1d      	ldr	r2, [pc, #116]	@ (80092c8 <TIM_OC2_SetConfig+0x120>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d007      	beq.n	8009268 <TIM_OC2_SetConfig+0xc0>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a1c      	ldr	r2, [pc, #112]	@ (80092cc <TIM_OC2_SetConfig+0x124>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d003      	beq.n	8009268 <TIM_OC2_SetConfig+0xc0>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a17      	ldr	r2, [pc, #92]	@ (80092c0 <TIM_OC2_SetConfig+0x118>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d113      	bne.n	8009290 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800926e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	4313      	orrs	r3, r2
 800928e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	621a      	str	r2, [r3, #32]
}
 80092aa:	bf00      	nop
 80092ac:	371c      	adds	r7, #28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	40012c00 	.word	0x40012c00
 80092bc:	40013400 	.word	0x40013400
 80092c0:	40015000 	.word	0x40015000
 80092c4:	40014000 	.word	0x40014000
 80092c8:	40014400 	.word	0x40014400
 80092cc:	40014800 	.word	0x40014800

080092d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	4313      	orrs	r3, r2
 8009314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800931c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	4313      	orrs	r3, r2
 8009328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a2b      	ldr	r2, [pc, #172]	@ (80093dc <TIM_OC3_SetConfig+0x10c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d007      	beq.n	8009342 <TIM_OC3_SetConfig+0x72>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a2a      	ldr	r2, [pc, #168]	@ (80093e0 <TIM_OC3_SetConfig+0x110>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d003      	beq.n	8009342 <TIM_OC3_SetConfig+0x72>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a29      	ldr	r2, [pc, #164]	@ (80093e4 <TIM_OC3_SetConfig+0x114>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d10d      	bne.n	800935e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800935c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a1e      	ldr	r2, [pc, #120]	@ (80093dc <TIM_OC3_SetConfig+0x10c>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d013      	beq.n	800938e <TIM_OC3_SetConfig+0xbe>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a1d      	ldr	r2, [pc, #116]	@ (80093e0 <TIM_OC3_SetConfig+0x110>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d00f      	beq.n	800938e <TIM_OC3_SetConfig+0xbe>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a1d      	ldr	r2, [pc, #116]	@ (80093e8 <TIM_OC3_SetConfig+0x118>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d00b      	beq.n	800938e <TIM_OC3_SetConfig+0xbe>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a1c      	ldr	r2, [pc, #112]	@ (80093ec <TIM_OC3_SetConfig+0x11c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d007      	beq.n	800938e <TIM_OC3_SetConfig+0xbe>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a1b      	ldr	r2, [pc, #108]	@ (80093f0 <TIM_OC3_SetConfig+0x120>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <TIM_OC3_SetConfig+0xbe>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a16      	ldr	r2, [pc, #88]	@ (80093e4 <TIM_OC3_SetConfig+0x114>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d113      	bne.n	80093b6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800939c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	621a      	str	r2, [r3, #32]
}
 80093d0:	bf00      	nop
 80093d2:	371c      	adds	r7, #28
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	40012c00 	.word	0x40012c00
 80093e0:	40013400 	.word	0x40013400
 80093e4:	40015000 	.word	0x40015000
 80093e8:	40014000 	.word	0x40014000
 80093ec:	40014400 	.word	0x40014400
 80093f0:	40014800 	.word	0x40014800

080093f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800942e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4313      	orrs	r3, r2
 800943a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	031b      	lsls	r3, r3, #12
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	4313      	orrs	r3, r2
 800944e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a2c      	ldr	r2, [pc, #176]	@ (8009504 <TIM_OC4_SetConfig+0x110>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d007      	beq.n	8009468 <TIM_OC4_SetConfig+0x74>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a2b      	ldr	r2, [pc, #172]	@ (8009508 <TIM_OC4_SetConfig+0x114>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d003      	beq.n	8009468 <TIM_OC4_SetConfig+0x74>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a2a      	ldr	r2, [pc, #168]	@ (800950c <TIM_OC4_SetConfig+0x118>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d10d      	bne.n	8009484 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800946e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	031b      	lsls	r3, r3, #12
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009482:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a1f      	ldr	r2, [pc, #124]	@ (8009504 <TIM_OC4_SetConfig+0x110>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d013      	beq.n	80094b4 <TIM_OC4_SetConfig+0xc0>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a1e      	ldr	r2, [pc, #120]	@ (8009508 <TIM_OC4_SetConfig+0x114>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00f      	beq.n	80094b4 <TIM_OC4_SetConfig+0xc0>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a1e      	ldr	r2, [pc, #120]	@ (8009510 <TIM_OC4_SetConfig+0x11c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d00b      	beq.n	80094b4 <TIM_OC4_SetConfig+0xc0>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a1d      	ldr	r2, [pc, #116]	@ (8009514 <TIM_OC4_SetConfig+0x120>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d007      	beq.n	80094b4 <TIM_OC4_SetConfig+0xc0>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009518 <TIM_OC4_SetConfig+0x124>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d003      	beq.n	80094b4 <TIM_OC4_SetConfig+0xc0>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a17      	ldr	r2, [pc, #92]	@ (800950c <TIM_OC4_SetConfig+0x118>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d113      	bne.n	80094dc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	019b      	lsls	r3, r3, #6
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	019b      	lsls	r3, r3, #6
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4313      	orrs	r3, r2
 80094da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	621a      	str	r2, [r3, #32]
}
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	40012c00 	.word	0x40012c00
 8009508:	40013400 	.word	0x40013400
 800950c:	40015000 	.word	0x40015000
 8009510:	40014000 	.word	0x40014000
 8009514:	40014400 	.word	0x40014400
 8009518:	40014800 	.word	0x40014800

0800951c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800954a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800954e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009560:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	4313      	orrs	r3, r2
 800956c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a19      	ldr	r2, [pc, #100]	@ (80095d8 <TIM_OC5_SetConfig+0xbc>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d013      	beq.n	800959e <TIM_OC5_SetConfig+0x82>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a18      	ldr	r2, [pc, #96]	@ (80095dc <TIM_OC5_SetConfig+0xc0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00f      	beq.n	800959e <TIM_OC5_SetConfig+0x82>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a17      	ldr	r2, [pc, #92]	@ (80095e0 <TIM_OC5_SetConfig+0xc4>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d00b      	beq.n	800959e <TIM_OC5_SetConfig+0x82>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a16      	ldr	r2, [pc, #88]	@ (80095e4 <TIM_OC5_SetConfig+0xc8>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d007      	beq.n	800959e <TIM_OC5_SetConfig+0x82>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a15      	ldr	r2, [pc, #84]	@ (80095e8 <TIM_OC5_SetConfig+0xcc>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d003      	beq.n	800959e <TIM_OC5_SetConfig+0x82>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a14      	ldr	r2, [pc, #80]	@ (80095ec <TIM_OC5_SetConfig+0xd0>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d109      	bne.n	80095b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	621a      	str	r2, [r3, #32]
}
 80095cc:	bf00      	nop
 80095ce:	371c      	adds	r7, #28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	40012c00 	.word	0x40012c00
 80095dc:	40013400 	.word	0x40013400
 80095e0:	40014000 	.word	0x40014000
 80095e4:	40014400 	.word	0x40014400
 80095e8:	40014800 	.word	0x40014800
 80095ec:	40015000 	.word	0x40015000

080095f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800961e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	051b      	lsls	r3, r3, #20
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a1a      	ldr	r2, [pc, #104]	@ (80096b0 <TIM_OC6_SetConfig+0xc0>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d013      	beq.n	8009674 <TIM_OC6_SetConfig+0x84>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a19      	ldr	r2, [pc, #100]	@ (80096b4 <TIM_OC6_SetConfig+0xc4>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00f      	beq.n	8009674 <TIM_OC6_SetConfig+0x84>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a18      	ldr	r2, [pc, #96]	@ (80096b8 <TIM_OC6_SetConfig+0xc8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d00b      	beq.n	8009674 <TIM_OC6_SetConfig+0x84>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a17      	ldr	r2, [pc, #92]	@ (80096bc <TIM_OC6_SetConfig+0xcc>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d007      	beq.n	8009674 <TIM_OC6_SetConfig+0x84>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a16      	ldr	r2, [pc, #88]	@ (80096c0 <TIM_OC6_SetConfig+0xd0>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d003      	beq.n	8009674 <TIM_OC6_SetConfig+0x84>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a15      	ldr	r2, [pc, #84]	@ (80096c4 <TIM_OC6_SetConfig+0xd4>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d109      	bne.n	8009688 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800967a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	029b      	lsls	r3, r3, #10
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	4313      	orrs	r3, r2
 8009686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	621a      	str	r2, [r3, #32]
}
 80096a2:	bf00      	nop
 80096a4:	371c      	adds	r7, #28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	40012c00 	.word	0x40012c00
 80096b4:	40013400 	.word	0x40013400
 80096b8:	40014000 	.word	0x40014000
 80096bc:	40014400 	.word	0x40014400
 80096c0:	40014800 	.word	0x40014800
 80096c4:	40015000 	.word	0x40015000

080096c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	f023 0201 	bic.w	r2, r3, #1
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	011b      	lsls	r3, r3, #4
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f023 030a 	bic.w	r3, r3, #10
 8009704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4313      	orrs	r3, r2
 800970c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	621a      	str	r2, [r3, #32]
}
 800971a:	bf00      	nop
 800971c:	371c      	adds	r7, #28
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009726:	b480      	push	{r7}
 8009728:	b087      	sub	sp, #28
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	f023 0210 	bic.w	r2, r3, #16
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	031b      	lsls	r3, r3, #12
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	621a      	str	r2, [r3, #32]
}
 800977a:	bf00      	nop
 800977c:	371c      	adds	r7, #28
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800979c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	f043 0307 	orr.w	r3, r3, #7
 80097ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	609a      	str	r2, [r3, #8]
}
 80097b4:	bf00      	nop
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	021a      	lsls	r2, r3, #8
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	431a      	orrs	r2, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	609a      	str	r2, [r3, #8]
}
 80097f4:	bf00      	nop
 80097f6:	371c      	adds	r7, #28
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009814:	2302      	movs	r3, #2
 8009816:	e074      	b.n	8009902 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2202      	movs	r2, #2
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a34      	ldr	r2, [pc, #208]	@ (8009910 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d009      	beq.n	8009856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a33      	ldr	r2, [pc, #204]	@ (8009914 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d004      	beq.n	8009856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a31      	ldr	r2, [pc, #196]	@ (8009918 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d108      	bne.n	8009868 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800985c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4313      	orrs	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800986e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4313      	orrs	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a21      	ldr	r2, [pc, #132]	@ (8009910 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d022      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009898:	d01d      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a1f      	ldr	r2, [pc, #124]	@ (800991c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d018      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009920 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d013      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009924 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d00e      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a15      	ldr	r2, [pc, #84]	@ (8009914 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d009      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a18      	ldr	r2, [pc, #96]	@ (8009928 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d004      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a11      	ldr	r2, [pc, #68]	@ (8009918 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d10c      	bne.n	80098f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	40012c00 	.word	0x40012c00
 8009914:	40013400 	.word	0x40013400
 8009918:	40015000 	.word	0x40015000
 800991c:	40000400 	.word	0x40000400
 8009920:	40000800 	.word	0x40000800
 8009924:	40000c00 	.word	0x40000c00
 8009928:	40014000 	.word	0x40014000

0800992c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009940:	2b01      	cmp	r3, #1
 8009942:	d101      	bne.n	8009948 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009944:	2302      	movs	r3, #2
 8009946:	e096      	b.n	8009a76 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	4313      	orrs	r3, r2
 800995c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	4313      	orrs	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4313      	orrs	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	4313      	orrs	r3, r2
 8009994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	041b      	lsls	r3, r3, #16
 80099be:	4313      	orrs	r3, r2
 80099c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a2f      	ldr	r2, [pc, #188]	@ (8009a84 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d009      	beq.n	80099e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a2d      	ldr	r2, [pc, #180]	@ (8009a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d004      	beq.n	80099e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a2c      	ldr	r2, [pc, #176]	@ (8009a8c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d106      	bne.n	80099ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a24      	ldr	r2, [pc, #144]	@ (8009a84 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d009      	beq.n	8009a0c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a22      	ldr	r2, [pc, #136]	@ (8009a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d004      	beq.n	8009a0c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a21      	ldr	r2, [pc, #132]	@ (8009a8c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d12b      	bne.n	8009a64 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a16:	051b      	lsls	r3, r3, #20
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a34:	4313      	orrs	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a11      	ldr	r2, [pc, #68]	@ (8009a84 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d009      	beq.n	8009a56 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a10      	ldr	r2, [pc, #64]	@ (8009a88 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d004      	beq.n	8009a56 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a0e      	ldr	r2, [pc, #56]	@ (8009a8c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d106      	bne.n	8009a64 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	40012c00 	.word	0x40012c00
 8009a88:	40013400 	.word	0x40013400
 8009a8c:	40015000 	.word	0x40015000

08009a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e042      	b.n	8009bb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7f9 fda7 	bl	8003694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2224      	movs	r2, #36	@ 0x24
 8009b4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0201 	bic.w	r2, r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f82c 	bl	8009bbc <UART_SetConfig>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e022      	b.n	8009bb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fb1c 	bl	800a1b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0201 	orr.w	r2, r2, #1
 8009baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fba3 	bl	800a2f8 <UART_CheckIdleState>
 8009bb2:	4603      	mov	r3, r0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bc0:	b08c      	sub	sp, #48	@ 0x30
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	689a      	ldr	r2, [r3, #8]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	431a      	orrs	r2, r3
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	4baa      	ldr	r3, [pc, #680]	@ (8009e94 <UART_SetConfig+0x2d8>)
 8009bec:	4013      	ands	r3, r2
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	6812      	ldr	r2, [r2, #0]
 8009bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a9f      	ldr	r2, [pc, #636]	@ (8009e98 <UART_SetConfig+0x2dc>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d004      	beq.n	8009c28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c24:	4313      	orrs	r3, r2
 8009c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009c32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	6812      	ldr	r2, [r2, #0]
 8009c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c3c:	430b      	orrs	r3, r1
 8009c3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c46:	f023 010f 	bic.w	r1, r3, #15
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a90      	ldr	r2, [pc, #576]	@ (8009e9c <UART_SetConfig+0x2e0>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d125      	bne.n	8009cac <UART_SetConfig+0xf0>
 8009c60:	4b8f      	ldr	r3, [pc, #572]	@ (8009ea0 <UART_SetConfig+0x2e4>)
 8009c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c66:	f003 0303 	and.w	r3, r3, #3
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d81a      	bhi.n	8009ca4 <UART_SetConfig+0xe8>
 8009c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c74 <UART_SetConfig+0xb8>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c85 	.word	0x08009c85
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c8d 	.word	0x08009c8d
 8009c80:	08009c9d 	.word	0x08009c9d
 8009c84:	2301      	movs	r3, #1
 8009c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c8a:	e116      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c92:	e112      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009c94:	2304      	movs	r3, #4
 8009c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c9a:	e10e      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009c9c:	2308      	movs	r3, #8
 8009c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ca2:	e10a      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009caa:	e106      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a7c      	ldr	r2, [pc, #496]	@ (8009ea4 <UART_SetConfig+0x2e8>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d138      	bne.n	8009d28 <UART_SetConfig+0x16c>
 8009cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8009ea0 <UART_SetConfig+0x2e4>)
 8009cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cbc:	f003 030c 	and.w	r3, r3, #12
 8009cc0:	2b0c      	cmp	r3, #12
 8009cc2:	d82d      	bhi.n	8009d20 <UART_SetConfig+0x164>
 8009cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ccc <UART_SetConfig+0x110>)
 8009cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cca:	bf00      	nop
 8009ccc:	08009d01 	.word	0x08009d01
 8009cd0:	08009d21 	.word	0x08009d21
 8009cd4:	08009d21 	.word	0x08009d21
 8009cd8:	08009d21 	.word	0x08009d21
 8009cdc:	08009d11 	.word	0x08009d11
 8009ce0:	08009d21 	.word	0x08009d21
 8009ce4:	08009d21 	.word	0x08009d21
 8009ce8:	08009d21 	.word	0x08009d21
 8009cec:	08009d09 	.word	0x08009d09
 8009cf0:	08009d21 	.word	0x08009d21
 8009cf4:	08009d21 	.word	0x08009d21
 8009cf8:	08009d21 	.word	0x08009d21
 8009cfc:	08009d19 	.word	0x08009d19
 8009d00:	2300      	movs	r3, #0
 8009d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d06:	e0d8      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d08:	2302      	movs	r3, #2
 8009d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d0e:	e0d4      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d10:	2304      	movs	r3, #4
 8009d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d16:	e0d0      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d18:	2308      	movs	r3, #8
 8009d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d1e:	e0cc      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d20:	2310      	movs	r3, #16
 8009d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d26:	e0c8      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8009ea8 <UART_SetConfig+0x2ec>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d125      	bne.n	8009d7e <UART_SetConfig+0x1c2>
 8009d32:	4b5b      	ldr	r3, [pc, #364]	@ (8009ea0 <UART_SetConfig+0x2e4>)
 8009d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d3c:	2b30      	cmp	r3, #48	@ 0x30
 8009d3e:	d016      	beq.n	8009d6e <UART_SetConfig+0x1b2>
 8009d40:	2b30      	cmp	r3, #48	@ 0x30
 8009d42:	d818      	bhi.n	8009d76 <UART_SetConfig+0x1ba>
 8009d44:	2b20      	cmp	r3, #32
 8009d46:	d00a      	beq.n	8009d5e <UART_SetConfig+0x1a2>
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	d814      	bhi.n	8009d76 <UART_SetConfig+0x1ba>
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <UART_SetConfig+0x19a>
 8009d50:	2b10      	cmp	r3, #16
 8009d52:	d008      	beq.n	8009d66 <UART_SetConfig+0x1aa>
 8009d54:	e00f      	b.n	8009d76 <UART_SetConfig+0x1ba>
 8009d56:	2300      	movs	r3, #0
 8009d58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d5c:	e0ad      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d64:	e0a9      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d66:	2304      	movs	r3, #4
 8009d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d6c:	e0a5      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d6e:	2308      	movs	r3, #8
 8009d70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d74:	e0a1      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d76:	2310      	movs	r3, #16
 8009d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d7c:	e09d      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a4a      	ldr	r2, [pc, #296]	@ (8009eac <UART_SetConfig+0x2f0>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d125      	bne.n	8009dd4 <UART_SetConfig+0x218>
 8009d88:	4b45      	ldr	r3, [pc, #276]	@ (8009ea0 <UART_SetConfig+0x2e4>)
 8009d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009d92:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d94:	d016      	beq.n	8009dc4 <UART_SetConfig+0x208>
 8009d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d98:	d818      	bhi.n	8009dcc <UART_SetConfig+0x210>
 8009d9a:	2b80      	cmp	r3, #128	@ 0x80
 8009d9c:	d00a      	beq.n	8009db4 <UART_SetConfig+0x1f8>
 8009d9e:	2b80      	cmp	r3, #128	@ 0x80
 8009da0:	d814      	bhi.n	8009dcc <UART_SetConfig+0x210>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <UART_SetConfig+0x1f0>
 8009da6:	2b40      	cmp	r3, #64	@ 0x40
 8009da8:	d008      	beq.n	8009dbc <UART_SetConfig+0x200>
 8009daa:	e00f      	b.n	8009dcc <UART_SetConfig+0x210>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db2:	e082      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009db4:	2302      	movs	r3, #2
 8009db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dba:	e07e      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dc2:	e07a      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dca:	e076      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009dcc:	2310      	movs	r3, #16
 8009dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dd2:	e072      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a35      	ldr	r2, [pc, #212]	@ (8009eb0 <UART_SetConfig+0x2f4>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d12a      	bne.n	8009e34 <UART_SetConfig+0x278>
 8009dde:	4b30      	ldr	r3, [pc, #192]	@ (8009ea0 <UART_SetConfig+0x2e4>)
 8009de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dec:	d01a      	beq.n	8009e24 <UART_SetConfig+0x268>
 8009dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009df2:	d81b      	bhi.n	8009e2c <UART_SetConfig+0x270>
 8009df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009df8:	d00c      	beq.n	8009e14 <UART_SetConfig+0x258>
 8009dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dfe:	d815      	bhi.n	8009e2c <UART_SetConfig+0x270>
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <UART_SetConfig+0x250>
 8009e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e08:	d008      	beq.n	8009e1c <UART_SetConfig+0x260>
 8009e0a:	e00f      	b.n	8009e2c <UART_SetConfig+0x270>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e12:	e052      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e14:	2302      	movs	r3, #2
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e1a:	e04e      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e22:	e04a      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e24:	2308      	movs	r3, #8
 8009e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e2a:	e046      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e32:	e042      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a17      	ldr	r2, [pc, #92]	@ (8009e98 <UART_SetConfig+0x2dc>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d13a      	bne.n	8009eb4 <UART_SetConfig+0x2f8>
 8009e3e:	4b18      	ldr	r3, [pc, #96]	@ (8009ea0 <UART_SetConfig+0x2e4>)
 8009e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e4c:	d01a      	beq.n	8009e84 <UART_SetConfig+0x2c8>
 8009e4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e52:	d81b      	bhi.n	8009e8c <UART_SetConfig+0x2d0>
 8009e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e58:	d00c      	beq.n	8009e74 <UART_SetConfig+0x2b8>
 8009e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e5e:	d815      	bhi.n	8009e8c <UART_SetConfig+0x2d0>
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d003      	beq.n	8009e6c <UART_SetConfig+0x2b0>
 8009e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e68:	d008      	beq.n	8009e7c <UART_SetConfig+0x2c0>
 8009e6a:	e00f      	b.n	8009e8c <UART_SetConfig+0x2d0>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e72:	e022      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e74:	2302      	movs	r3, #2
 8009e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e7a:	e01e      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e7c:	2304      	movs	r3, #4
 8009e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e82:	e01a      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e84:	2308      	movs	r3, #8
 8009e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e8a:	e016      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e8c:	2310      	movs	r3, #16
 8009e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e92:	e012      	b.n	8009eba <UART_SetConfig+0x2fe>
 8009e94:	cfff69f3 	.word	0xcfff69f3
 8009e98:	40008000 	.word	0x40008000
 8009e9c:	40013800 	.word	0x40013800
 8009ea0:	40021000 	.word	0x40021000
 8009ea4:	40004400 	.word	0x40004400
 8009ea8:	40004800 	.word	0x40004800
 8009eac:	40004c00 	.word	0x40004c00
 8009eb0:	40005000 	.word	0x40005000
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4aae      	ldr	r2, [pc, #696]	@ (800a178 <UART_SetConfig+0x5bc>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	f040 8097 	bne.w	8009ff4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009eca:	2b08      	cmp	r3, #8
 8009ecc:	d823      	bhi.n	8009f16 <UART_SetConfig+0x35a>
 8009ece:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed4 <UART_SetConfig+0x318>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009ef9 	.word	0x08009ef9
 8009ed8:	08009f17 	.word	0x08009f17
 8009edc:	08009f01 	.word	0x08009f01
 8009ee0:	08009f17 	.word	0x08009f17
 8009ee4:	08009f07 	.word	0x08009f07
 8009ee8:	08009f17 	.word	0x08009f17
 8009eec:	08009f17 	.word	0x08009f17
 8009ef0:	08009f17 	.word	0x08009f17
 8009ef4:	08009f0f 	.word	0x08009f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ef8:	f7fd fae8 	bl	80074cc <HAL_RCC_GetPCLK1Freq>
 8009efc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009efe:	e010      	b.n	8009f22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f00:	4b9e      	ldr	r3, [pc, #632]	@ (800a17c <UART_SetConfig+0x5c0>)
 8009f02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f04:	e00d      	b.n	8009f22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f06:	f7fd fa73 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 8009f0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f0c:	e009      	b.n	8009f22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f14:	e005      	b.n	8009f22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009f16:	2300      	movs	r3, #0
 8009f18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 8130 	beq.w	800a18a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2e:	4a94      	ldr	r2, [pc, #592]	@ (800a180 <UART_SetConfig+0x5c4>)
 8009f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f34:	461a      	mov	r2, r3
 8009f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	4613      	mov	r3, r2
 8009f44:	005b      	lsls	r3, r3, #1
 8009f46:	4413      	add	r3, r2
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d305      	bcc.n	8009f5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d903      	bls.n	8009f62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f60:	e113      	b.n	800a18a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	2200      	movs	r2, #0
 8009f66:	60bb      	str	r3, [r7, #8]
 8009f68:	60fa      	str	r2, [r7, #12]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6e:	4a84      	ldr	r2, [pc, #528]	@ (800a180 <UART_SetConfig+0x5c4>)
 8009f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2200      	movs	r2, #0
 8009f78:	603b      	str	r3, [r7, #0]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f84:	f7f6 fe88 	bl	8000c98 <__aeabi_uldivmod>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4619      	mov	r1, r3
 8009f90:	f04f 0200 	mov.w	r2, #0
 8009f94:	f04f 0300 	mov.w	r3, #0
 8009f98:	020b      	lsls	r3, r1, #8
 8009f9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f9e:	0202      	lsls	r2, r0, #8
 8009fa0:	6979      	ldr	r1, [r7, #20]
 8009fa2:	6849      	ldr	r1, [r1, #4]
 8009fa4:	0849      	lsrs	r1, r1, #1
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	460c      	mov	r4, r1
 8009faa:	4605      	mov	r5, r0
 8009fac:	eb12 0804 	adds.w	r8, r2, r4
 8009fb0:	eb43 0905 	adc.w	r9, r3, r5
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	469a      	mov	sl, r3
 8009fbc:	4693      	mov	fp, r2
 8009fbe:	4652      	mov	r2, sl
 8009fc0:	465b      	mov	r3, fp
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	f7f6 fe67 	bl	8000c98 <__aeabi_uldivmod>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4613      	mov	r3, r2
 8009fd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fd8:	d308      	bcc.n	8009fec <UART_SetConfig+0x430>
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fe0:	d204      	bcs.n	8009fec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	6a3a      	ldr	r2, [r7, #32]
 8009fe8:	60da      	str	r2, [r3, #12]
 8009fea:	e0ce      	b.n	800a18a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ff2:	e0ca      	b.n	800a18a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ffc:	d166      	bne.n	800a0cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a002:	2b08      	cmp	r3, #8
 800a004:	d827      	bhi.n	800a056 <UART_SetConfig+0x49a>
 800a006:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <UART_SetConfig+0x450>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a031 	.word	0x0800a031
 800a010:	0800a039 	.word	0x0800a039
 800a014:	0800a041 	.word	0x0800a041
 800a018:	0800a057 	.word	0x0800a057
 800a01c:	0800a047 	.word	0x0800a047
 800a020:	0800a057 	.word	0x0800a057
 800a024:	0800a057 	.word	0x0800a057
 800a028:	0800a057 	.word	0x0800a057
 800a02c:	0800a04f 	.word	0x0800a04f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a030:	f7fd fa4c 	bl	80074cc <HAL_RCC_GetPCLK1Freq>
 800a034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a036:	e014      	b.n	800a062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a038:	f7fd fa5e 	bl	80074f8 <HAL_RCC_GetPCLK2Freq>
 800a03c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a03e:	e010      	b.n	800a062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a040:	4b4e      	ldr	r3, [pc, #312]	@ (800a17c <UART_SetConfig+0x5c0>)
 800a042:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a044:	e00d      	b.n	800a062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a046:	f7fd f9d3 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 800a04a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a04c:	e009      	b.n	800a062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a04e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a054:	e005      	b.n	800a062 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 8090 	beq.w	800a18a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06e:	4a44      	ldr	r2, [pc, #272]	@ (800a180 <UART_SetConfig+0x5c4>)
 800a070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a074:	461a      	mov	r2, r3
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	fbb3 f3f2 	udiv	r3, r3, r2
 800a07c:	005a      	lsls	r2, r3, #1
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	085b      	lsrs	r3, r3, #1
 800a084:	441a      	add	r2, r3
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a08e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	2b0f      	cmp	r3, #15
 800a094:	d916      	bls.n	800a0c4 <UART_SetConfig+0x508>
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a09c:	d212      	bcs.n	800a0c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	f023 030f 	bic.w	r3, r3, #15
 800a0a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	085b      	lsrs	r3, r3, #1
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	f003 0307 	and.w	r3, r3, #7
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	8bfb      	ldrh	r3, [r7, #30]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	8bfa      	ldrh	r2, [r7, #30]
 800a0c0:	60da      	str	r2, [r3, #12]
 800a0c2:	e062      	b.n	800a18a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a0ca:	e05e      	b.n	800a18a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0d0:	2b08      	cmp	r3, #8
 800a0d2:	d828      	bhi.n	800a126 <UART_SetConfig+0x56a>
 800a0d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a0dc <UART_SetConfig+0x520>)
 800a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0da:	bf00      	nop
 800a0dc:	0800a101 	.word	0x0800a101
 800a0e0:	0800a109 	.word	0x0800a109
 800a0e4:	0800a111 	.word	0x0800a111
 800a0e8:	0800a127 	.word	0x0800a127
 800a0ec:	0800a117 	.word	0x0800a117
 800a0f0:	0800a127 	.word	0x0800a127
 800a0f4:	0800a127 	.word	0x0800a127
 800a0f8:	0800a127 	.word	0x0800a127
 800a0fc:	0800a11f 	.word	0x0800a11f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a100:	f7fd f9e4 	bl	80074cc <HAL_RCC_GetPCLK1Freq>
 800a104:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a106:	e014      	b.n	800a132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a108:	f7fd f9f6 	bl	80074f8 <HAL_RCC_GetPCLK2Freq>
 800a10c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a10e:	e010      	b.n	800a132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a110:	4b1a      	ldr	r3, [pc, #104]	@ (800a17c <UART_SetConfig+0x5c0>)
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a114:	e00d      	b.n	800a132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a116:	f7fd f96b 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 800a11a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a11c:	e009      	b.n	800a132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a11e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a124:	e005      	b.n	800a132 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a126:	2300      	movs	r3, #0
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a130:	bf00      	nop
    }

    if (pclk != 0U)
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	2b00      	cmp	r3, #0
 800a136:	d028      	beq.n	800a18a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13c:	4a10      	ldr	r2, [pc, #64]	@ (800a180 <UART_SetConfig+0x5c4>)
 800a13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a142:	461a      	mov	r2, r3
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	fbb3 f2f2 	udiv	r2, r3, r2
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	085b      	lsrs	r3, r3, #1
 800a150:	441a      	add	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	fbb2 f3f3 	udiv	r3, r2, r3
 800a15a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	2b0f      	cmp	r3, #15
 800a160:	d910      	bls.n	800a184 <UART_SetConfig+0x5c8>
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a168:	d20c      	bcs.n	800a184 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60da      	str	r2, [r3, #12]
 800a174:	e009      	b.n	800a18a <UART_SetConfig+0x5ce>
 800a176:	bf00      	nop
 800a178:	40008000 	.word	0x40008000
 800a17c:	00f42400 	.word	0x00f42400
 800a180:	08013df4 	.word	0x08013df4
      }
      else
      {
        ret = HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2201      	movs	r2, #1
 800a196:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2200      	movs	r2, #0
 800a19e:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800a1a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3730      	adds	r7, #48	@ 0x30
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a1b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00a      	beq.n	800a1de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00a      	beq.n	800a222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a226:	f003 0308 	and.w	r3, r3, #8
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	430a      	orrs	r2, r1
 800a242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a248:	f003 0310 	and.w	r3, r3, #16
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00a      	beq.n	800a266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00a      	beq.n	800a288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	430a      	orrs	r2, r1
 800a286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a290:	2b00      	cmp	r3, #0
 800a292:	d01a      	beq.n	800a2ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2b2:	d10a      	bne.n	800a2ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	605a      	str	r2, [r3, #4]
  }
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a308:	f7f9 fe5e 	bl	8003fc8 <HAL_GetTick>
 800a30c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0308 	and.w	r3, r3, #8
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d10e      	bne.n	800a33a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a31c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f82f 	bl	800a38e <UART_WaitOnFlagUntilTimeout>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e025      	b.n	800a386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b04      	cmp	r3, #4
 800a346:	d10e      	bne.n	800a366 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a348:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f819 	bl	800a38e <UART_WaitOnFlagUntilTimeout>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e00f      	b.n	800a386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2220      	movs	r2, #32
 800a36a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2220      	movs	r2, #32
 800a372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b09c      	sub	sp, #112	@ 0x70
 800a392:	af00      	add	r7, sp, #0
 800a394:	60f8      	str	r0, [r7, #12]
 800a396:	60b9      	str	r1, [r7, #8]
 800a398:	603b      	str	r3, [r7, #0]
 800a39a:	4613      	mov	r3, r2
 800a39c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a39e:	e0a9      	b.n	800a4f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	f000 80a5 	beq.w	800a4f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3aa:	f7f9 fe0d 	bl	8003fc8 <HAL_GetTick>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d302      	bcc.n	800a3c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a3ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d140      	bne.n	800a442 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3c8:	e853 3f00 	ldrex	r3, [r3]
 800a3cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a3ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3d0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a3d4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3e0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a3e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a3ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e6      	bne.n	800a3c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3fc:	e853 3f00 	ldrex	r3, [r3]
 800a400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	f023 0301 	bic.w	r3, r3, #1
 800a408:	663b      	str	r3, [r7, #96]	@ 0x60
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3308      	adds	r3, #8
 800a410:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a412:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a414:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a416:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e5      	bne.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2220      	movs	r2, #32
 800a42a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2220      	movs	r2, #32
 800a432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e069      	b.n	800a516 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0304 	and.w	r3, r3, #4
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d051      	beq.n	800a4f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a45a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a45e:	d149      	bne.n	800a4f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a468:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a47e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a488:	637b      	str	r3, [r7, #52]	@ 0x34
 800a48a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a48e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e6      	bne.n	800a46a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f023 0301 	bic.w	r3, r3, #1
 800a4b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a4bc:	623a      	str	r2, [r7, #32]
 800a4be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c0:	69f9      	ldr	r1, [r7, #28]
 800a4c2:	6a3a      	ldr	r2, [r7, #32]
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e5      	bne.n	800a49c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e010      	b.n	800a516 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	69da      	ldr	r2, [r3, #28]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	429a      	cmp	r2, r3
 800a502:	bf0c      	ite	eq
 800a504:	2301      	moveq	r3, #1
 800a506:	2300      	movne	r3, #0
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	461a      	mov	r2, r3
 800a50c:	79fb      	ldrb	r3, [r7, #7]
 800a50e:	429a      	cmp	r2, r3
 800a510:	f43f af46 	beq.w	800a3a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3770      	adds	r7, #112	@ 0x70
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a51e:	b480      	push	{r7}
 800a520:	b085      	sub	sp, #20
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d101      	bne.n	800a534 <HAL_UARTEx_DisableFifoMode+0x16>
 800a530:	2302      	movs	r3, #2
 800a532:	e027      	b.n	800a584 <HAL_UARTEx_DisableFifoMode+0x66>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2224      	movs	r2, #36	@ 0x24
 800a540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 0201 	bic.w	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a562:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d101      	bne.n	800a5a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e02d      	b.n	800a604 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2224      	movs	r2, #36	@ 0x24
 800a5b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0201 	bic.w	r2, r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f84f 	bl	800a688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a620:	2302      	movs	r3, #2
 800a622:	e02d      	b.n	800a680 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2224      	movs	r2, #36	@ 0x24
 800a630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0201 	bic.w	r2, r2, #1
 800a64a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f811 	bl	800a688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2220      	movs	r2, #32
 800a672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a694:	2b00      	cmp	r3, #0
 800a696:	d108      	bne.n	800a6aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6a8:	e031      	b.n	800a70e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6aa:	2308      	movs	r3, #8
 800a6ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6ae:	2308      	movs	r3, #8
 800a6b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	0e5b      	lsrs	r3, r3, #25
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f003 0307 	and.w	r3, r3, #7
 800a6c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	0f5b      	lsrs	r3, r3, #29
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f003 0307 	and.w	r3, r3, #7
 800a6d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6d2:	7bbb      	ldrb	r3, [r7, #14]
 800a6d4:	7b3a      	ldrb	r2, [r7, #12]
 800a6d6:	4911      	ldr	r1, [pc, #68]	@ (800a71c <UARTEx_SetNbDataToProcess+0x94>)
 800a6d8:	5c8a      	ldrb	r2, [r1, r2]
 800a6da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6de:	7b3a      	ldrb	r2, [r7, #12]
 800a6e0:	490f      	ldr	r1, [pc, #60]	@ (800a720 <UARTEx_SetNbDataToProcess+0x98>)
 800a6e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
 800a6f2:	7b7a      	ldrb	r2, [r7, #13]
 800a6f4:	4909      	ldr	r1, [pc, #36]	@ (800a71c <UARTEx_SetNbDataToProcess+0x94>)
 800a6f6:	5c8a      	ldrb	r2, [r1, r2]
 800a6f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6fc:	7b7a      	ldrb	r2, [r7, #13]
 800a6fe:	4908      	ldr	r1, [pc, #32]	@ (800a720 <UARTEx_SetNbDataToProcess+0x98>)
 800a700:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a702:	fb93 f3f2 	sdiv	r3, r3, r2
 800a706:	b29a      	uxth	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a70e:	bf00      	nop
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	08013e0c 	.word	0x08013e0c
 800a720:	08013e14 	.word	0x08013e14

0800a724 <LL_EXTI_EnableIT_0_31>:
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a72c:	4b05      	ldr	r3, [pc, #20]	@ (800a744 <LL_EXTI_EnableIT_0_31+0x20>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	4904      	ldr	r1, [pc, #16]	@ (800a744 <LL_EXTI_EnableIT_0_31+0x20>)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4313      	orrs	r3, r2
 800a736:	600b      	str	r3, [r1, #0]
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	40010400 	.word	0x40010400

0800a748 <LL_EXTI_EnableIT_32_63>:
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a750:	4b05      	ldr	r3, [pc, #20]	@ (800a768 <LL_EXTI_EnableIT_32_63+0x20>)
 800a752:	6a1a      	ldr	r2, [r3, #32]
 800a754:	4904      	ldr	r1, [pc, #16]	@ (800a768 <LL_EXTI_EnableIT_32_63+0x20>)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4313      	orrs	r3, r2
 800a75a:	620b      	str	r3, [r1, #32]
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	40010400 	.word	0x40010400

0800a76c <LL_EXTI_DisableIT_0_31>:
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a774:	4b06      	ldr	r3, [pc, #24]	@ (800a790 <LL_EXTI_DisableIT_0_31+0x24>)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	43db      	mvns	r3, r3
 800a77c:	4904      	ldr	r1, [pc, #16]	@ (800a790 <LL_EXTI_DisableIT_0_31+0x24>)
 800a77e:	4013      	ands	r3, r2
 800a780:	600b      	str	r3, [r1, #0]
}
 800a782:	bf00      	nop
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	40010400 	.word	0x40010400

0800a794 <LL_EXTI_DisableIT_32_63>:
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a79c:	4b06      	ldr	r3, [pc, #24]	@ (800a7b8 <LL_EXTI_DisableIT_32_63+0x24>)
 800a79e:	6a1a      	ldr	r2, [r3, #32]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	43db      	mvns	r3, r3
 800a7a4:	4904      	ldr	r1, [pc, #16]	@ (800a7b8 <LL_EXTI_DisableIT_32_63+0x24>)
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	620b      	str	r3, [r1, #32]
}
 800a7aa:	bf00      	nop
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40010400 	.word	0x40010400

0800a7bc <LL_EXTI_EnableEvent_0_31>:
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a7c4:	4b05      	ldr	r3, [pc, #20]	@ (800a7dc <LL_EXTI_EnableEvent_0_31+0x20>)
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	4904      	ldr	r1, [pc, #16]	@ (800a7dc <LL_EXTI_EnableEvent_0_31+0x20>)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	604b      	str	r3, [r1, #4]
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	40010400 	.word	0x40010400

0800a7e0 <LL_EXTI_EnableEvent_32_63>:
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a7e8:	4b05      	ldr	r3, [pc, #20]	@ (800a800 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a7ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7ec:	4904      	ldr	r1, [pc, #16]	@ (800a800 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	40010400 	.word	0x40010400

0800a804 <LL_EXTI_DisableEvent_0_31>:
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a80c:	4b06      	ldr	r3, [pc, #24]	@ (800a828 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a80e:	685a      	ldr	r2, [r3, #4]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	43db      	mvns	r3, r3
 800a814:	4904      	ldr	r1, [pc, #16]	@ (800a828 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a816:	4013      	ands	r3, r2
 800a818:	604b      	str	r3, [r1, #4]
}
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	40010400 	.word	0x40010400

0800a82c <LL_EXTI_DisableEvent_32_63>:
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a834:	4b06      	ldr	r3, [pc, #24]	@ (800a850 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	43db      	mvns	r3, r3
 800a83c:	4904      	ldr	r1, [pc, #16]	@ (800a850 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a83e:	4013      	ands	r3, r2
 800a840:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	40010400 	.word	0x40010400

0800a854 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a85c:	4b05      	ldr	r3, [pc, #20]	@ (800a874 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a85e:	689a      	ldr	r2, [r3, #8]
 800a860:	4904      	ldr	r1, [pc, #16]	@ (800a874 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4313      	orrs	r3, r2
 800a866:	608b      	str	r3, [r1, #8]
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	40010400 	.word	0x40010400

0800a878 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a880:	4b05      	ldr	r3, [pc, #20]	@ (800a898 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a882:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a884:	4904      	ldr	r1, [pc, #16]	@ (800a898 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4313      	orrs	r3, r2
 800a88a:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	40010400 	.word	0x40010400

0800a89c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a8a4:	4b06      	ldr	r3, [pc, #24]	@ (800a8c0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	43db      	mvns	r3, r3
 800a8ac:	4904      	ldr	r1, [pc, #16]	@ (800a8c0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	608b      	str	r3, [r1, #8]
}
 800a8b2:	bf00      	nop
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	40010400 	.word	0x40010400

0800a8c4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a8cc:	4b06      	ldr	r3, [pc, #24]	@ (800a8e8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a8ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	43db      	mvns	r3, r3
 800a8d4:	4904      	ldr	r1, [pc, #16]	@ (800a8e8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	40010400 	.word	0x40010400

0800a8ec <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a8f4:	4b05      	ldr	r3, [pc, #20]	@ (800a90c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	4904      	ldr	r1, [pc, #16]	@ (800a90c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60cb      	str	r3, [r1, #12]
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	40010400 	.word	0x40010400

0800a910 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a918:	4b05      	ldr	r3, [pc, #20]	@ (800a930 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a91c:	4904      	ldr	r1, [pc, #16]	@ (800a930 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4313      	orrs	r3, r2
 800a922:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	40010400 	.word	0x40010400

0800a934 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a93c:	4b06      	ldr	r3, [pc, #24]	@ (800a958 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a93e:	68da      	ldr	r2, [r3, #12]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	43db      	mvns	r3, r3
 800a944:	4904      	ldr	r1, [pc, #16]	@ (800a958 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a946:	4013      	ands	r3, r2
 800a948:	60cb      	str	r3, [r1, #12]
}
 800a94a:	bf00      	nop
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	40010400 	.word	0x40010400

0800a95c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a964:	4b06      	ldr	r3, [pc, #24]	@ (800a980 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	43db      	mvns	r3, r3
 800a96c:	4904      	ldr	r1, [pc, #16]	@ (800a980 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a96e:	4013      	ands	r3, r2
 800a970:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800a972:	bf00      	nop
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	40010400 	.word	0x40010400

0800a984 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	7a1b      	ldrb	r3, [r3, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 80d2 	beq.w	800ab3e <LL_EXTI_Init+0x1ba>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d063      	beq.n	800aa6a <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	7a5b      	ldrb	r3, [r3, #9]
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d01c      	beq.n	800a9e4 <LL_EXTI_Init+0x60>
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	dc25      	bgt.n	800a9fa <LL_EXTI_Init+0x76>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d002      	beq.n	800a9b8 <LL_EXTI_Init+0x34>
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d00b      	beq.n	800a9ce <LL_EXTI_Init+0x4a>
 800a9b6:	e020      	b.n	800a9fa <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff ff21 	bl	800a804 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff feac 	bl	800a724 <LL_EXTI_EnableIT_0_31>
          break;
 800a9cc:	e018      	b.n	800aa00 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff feca 	bl	800a76c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff feed 	bl	800a7bc <LL_EXTI_EnableEvent_0_31>
          break;
 800a9e2:	e00d      	b.n	800aa00 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff fe9b 	bl	800a724 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7ff fee2 	bl	800a7bc <LL_EXTI_EnableEvent_0_31>
          break;
 800a9f8:	e002      	b.n	800aa00 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	60fb      	str	r3, [r7, #12]
          break;
 800a9fe:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	7a9b      	ldrb	r3, [r3, #10]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d030      	beq.n	800aa6a <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7a9b      	ldrb	r3, [r3, #10]
 800aa0c:	2b03      	cmp	r3, #3
 800aa0e:	d01c      	beq.n	800aa4a <LL_EXTI_Init+0xc6>
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	dc25      	bgt.n	800aa60 <LL_EXTI_Init+0xdc>
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d002      	beq.n	800aa1e <LL_EXTI_Init+0x9a>
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d00b      	beq.n	800aa34 <LL_EXTI_Init+0xb0>
 800aa1c:	e020      	b.n	800aa60 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7ff ff86 	bl	800a934 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff ff11 	bl	800a854 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800aa32:	e01a      	b.n	800aa6a <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff ff2f 	bl	800a89c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff ff52 	bl	800a8ec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800aa48:	e00f      	b.n	800aa6a <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff ff00 	bl	800a854 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff ff47 	bl	800a8ec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800aa5e:	e004      	b.n	800aa6a <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f043 0302 	orr.w	r3, r3, #2
 800aa66:	60fb      	str	r3, [r7, #12]
            break;
 800aa68:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d079      	beq.n	800ab66 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	7a5b      	ldrb	r3, [r3, #9]
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d01c      	beq.n	800aab4 <LL_EXTI_Init+0x130>
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	dc25      	bgt.n	800aaca <LL_EXTI_Init+0x146>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <LL_EXTI_Init+0x104>
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d00b      	beq.n	800aa9e <LL_EXTI_Init+0x11a>
 800aa86:	e020      	b.n	800aaca <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff fecd 	bl	800a82c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff fe56 	bl	800a748 <LL_EXTI_EnableIT_32_63>
          break;
 800aa9c:	e01a      	b.n	800aad4 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff fe76 	bl	800a794 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7ff fe97 	bl	800a7e0 <LL_EXTI_EnableEvent_32_63>
          break;
 800aab2:	e00f      	b.n	800aad4 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7ff fe45 	bl	800a748 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff fe8c 	bl	800a7e0 <LL_EXTI_EnableEvent_32_63>
          break;
 800aac8:	e004      	b.n	800aad4 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f043 0304 	orr.w	r3, r3, #4
 800aad0:	60fb      	str	r3, [r7, #12]
          break;
 800aad2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	7a9b      	ldrb	r3, [r3, #10]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d044      	beq.n	800ab66 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	7a9b      	ldrb	r3, [r3, #10]
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d01c      	beq.n	800ab1e <LL_EXTI_Init+0x19a>
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	dc25      	bgt.n	800ab34 <LL_EXTI_Init+0x1b0>
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d002      	beq.n	800aaf2 <LL_EXTI_Init+0x16e>
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d00b      	beq.n	800ab08 <LL_EXTI_Init+0x184>
 800aaf0:	e020      	b.n	800ab34 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff ff30 	bl	800a95c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff feb9 	bl	800a878 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800ab06:	e02e      	b.n	800ab66 <LL_EXTI_Init+0x1e2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7ff fed9 	bl	800a8c4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff fefa 	bl	800a910 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ab1c:	e023      	b.n	800ab66 <LL_EXTI_Init+0x1e2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff fea8 	bl	800a878 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff feef 	bl	800a910 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ab32:	e018      	b.n	800ab66 <LL_EXTI_Init+0x1e2>
          default:
            status |= 0x05u;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f043 0305 	orr.w	r3, r3, #5
 800ab3a:	60fb      	str	r3, [r7, #12]
            break;
 800ab3c:	e013      	b.n	800ab66 <LL_EXTI_Init+0x1e2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7ff fe12 	bl	800a76c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7ff fe59 	bl	800a804 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff fe1c 	bl	800a794 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7ff fe63 	bl	800a82c <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 800ab66:	68fb      	ldr	r3, [r7, #12]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	6812      	ldr	r2, [r2, #0]
 800ab88:	f023 0101 	bic.w	r1, r3, #1
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	2b08      	cmp	r3, #8
 800ab98:	d102      	bne.n	800aba0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ab9a:	2340      	movs	r3, #64	@ 0x40
 800ab9c:	617b      	str	r3, [r7, #20]
 800ab9e:	e001      	b.n	800aba4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800aba0:	2300      	movs	r3, #0
 800aba2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800abb0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800abb6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800abbc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800abc2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800abc8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800abce:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800abd4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800abda:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800abe0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800abe6:	4313      	orrs	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800ac12:	4b3d      	ldr	r3, [pc, #244]	@ (800ad08 <FMC_NORSRAM_Init+0x198>)
 800ac14:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac1c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ac24:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800ac2c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800ac34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	43db      	mvns	r3, r3
 800ac44:	ea02 0103 	and.w	r1, r2, r3
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	4319      	orrs	r1, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac5e:	d10c      	bne.n	800ac7a <FMC_NORSRAM_Init+0x10a>
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d008      	beq.n	800ac7a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac74:	431a      	orrs	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d006      	beq.n	800ac90 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8a:	431a      	orrs	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d12f      	bne.n	800acfa <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	0c1b      	lsrs	r3, r3, #16
 800aca0:	041b      	lsls	r3, r3, #16
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800aca6:	431a      	orrs	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b04      	cmp	r3, #4
 800acb2:	d014      	beq.n	800acde <FMC_NORSRAM_Init+0x16e>
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d819      	bhi.n	800acec <FMC_NORSRAM_Init+0x17c>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <FMC_NORSRAM_Init+0x152>
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	d007      	beq.n	800acd0 <FMC_NORSRAM_Init+0x160>
 800acc0:	e014      	b.n	800acec <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	621a      	str	r2, [r3, #32]
        break;
 800acce:	e014      	b.n	800acfa <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	621a      	str	r2, [r3, #32]
        break;
 800acdc:	e00d      	b.n	800acfa <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	621a      	str	r2, [r3, #32]
        break;
 800acea:	e006      	b.n	800acfa <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	621a      	str	r2, [r3, #32]
        break;
 800acf8:	bf00      	nop
    }
  }

  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	371c      	adds	r7, #28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	0008fb7f 	.word	0x0008fb7f

0800ad0c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b087      	sub	sp, #28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	1c5a      	adds	r2, r3, #1
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	431a      	orrs	r2, r3
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	431a      	orrs	r2, r3
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	079b      	lsls	r3, r3, #30
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	041b      	lsls	r3, r3, #16
 800ad44:	431a      	orrs	r2, r3
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	051b      	lsls	r3, r3, #20
 800ad4e:	431a      	orrs	r2, r3
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	3b02      	subs	r3, #2
 800ad56:	061b      	lsls	r3, r3, #24
 800ad58:	ea42 0103 	orr.w	r1, r2, r3
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	3201      	adds	r2, #1
 800ad64:	4319      	orrs	r1, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad78:	d113      	bne.n	800ada2 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ad82:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	695b      	ldr	r3, [r3, #20]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	051b      	lsls	r3, r3, #20
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	431a      	orrs	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	371c      	adds	r7, #28
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adc4:	d121      	bne.n	800ae0a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adce:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	6819      	ldr	r1, [r3, #0]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	011b      	lsls	r3, r3, #4
 800addc:	4319      	orrs	r1, r3
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	021b      	lsls	r3, r3, #8
 800ade4:	4319      	orrs	r1, r3
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	079b      	lsls	r3, r3, #30
 800adec:	4319      	orrs	r1, r3
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	4319      	orrs	r1, r3
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	041b      	lsls	r3, r3, #16
 800adfa:	430b      	orrs	r3, r1
 800adfc:	ea42 0103 	orr.w	r1, r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ae08:	e005      	b.n	800ae16 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800ae12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <LL_GPIO_SetPinMode>:
{
 800ae24:	b480      	push	{r7}
 800ae26:	b08b      	sub	sp, #44	@ 0x2c
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	fa93 f3a3 	rbit	r3, r3
 800ae3e:	613b      	str	r3, [r7, #16]
  return result;
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800ae4a:	2320      	movs	r3, #32
 800ae4c:	e003      	b.n	800ae56 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	fab3 f383 	clz	r3, r3
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	2103      	movs	r1, #3
 800ae5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5e:	43db      	mvns	r3, r3
 800ae60:	401a      	ands	r2, r3
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	fa93 f3a3 	rbit	r3, r3
 800ae6c:	61fb      	str	r3, [r7, #28]
  return result;
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800ae78:	2320      	movs	r3, #32
 800ae7a:	e003      	b.n	800ae84 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7e:	fab3 f383 	clz	r3, r3
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	fa01 f303 	lsl.w	r3, r1, r3
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	601a      	str	r2, [r3, #0]
}
 800ae92:	bf00      	nop
 800ae94:	372c      	adds	r7, #44	@ 0x2c
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <LL_GPIO_SetPinOutputType>:
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b085      	sub	sp, #20
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	60b9      	str	r1, [r7, #8]
 800aea8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	43db      	mvns	r3, r3
 800aeb2:	401a      	ands	r2, r3
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	fb01 f303 	mul.w	r3, r1, r3
 800aebc:	431a      	orrs	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	605a      	str	r2, [r3, #4]
}
 800aec2:	bf00      	nop
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <LL_GPIO_SetPinSpeed>:
{
 800aece:	b480      	push	{r7}
 800aed0:	b08b      	sub	sp, #44	@ 0x2c
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	689a      	ldr	r2, [r3, #8]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	fa93 f3a3 	rbit	r3, r3
 800aee8:	613b      	str	r3, [r7, #16]
  return result;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800aef4:	2320      	movs	r3, #32
 800aef6:	e003      	b.n	800af00 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	fab3 f383 	clz	r3, r3
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	2103      	movs	r1, #3
 800af04:	fa01 f303 	lsl.w	r3, r1, r3
 800af08:	43db      	mvns	r3, r3
 800af0a:	401a      	ands	r2, r3
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	fa93 f3a3 	rbit	r3, r3
 800af16:	61fb      	str	r3, [r7, #28]
  return result;
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800af22:	2320      	movs	r3, #32
 800af24:	e003      	b.n	800af2e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800af26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af28:	fab3 f383 	clz	r3, r3
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	fa01 f303 	lsl.w	r3, r1, r3
 800af36:	431a      	orrs	r2, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	609a      	str	r2, [r3, #8]
}
 800af3c:	bf00      	nop
 800af3e:	372c      	adds	r7, #44	@ 0x2c
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <LL_GPIO_SetPinPull>:
{
 800af48:	b480      	push	{r7}
 800af4a:	b08b      	sub	sp, #44	@ 0x2c
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	68da      	ldr	r2, [r3, #12]
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	fa93 f3a3 	rbit	r3, r3
 800af62:	613b      	str	r3, [r7, #16]
  return result;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800af6e:	2320      	movs	r3, #32
 800af70:	e003      	b.n	800af7a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	fab3 f383 	clz	r3, r3
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	005b      	lsls	r3, r3, #1
 800af7c:	2103      	movs	r1, #3
 800af7e:	fa01 f303 	lsl.w	r3, r1, r3
 800af82:	43db      	mvns	r3, r3
 800af84:	401a      	ands	r2, r3
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	fa93 f3a3 	rbit	r3, r3
 800af90:	61fb      	str	r3, [r7, #28]
  return result;
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800af9c:	2320      	movs	r3, #32
 800af9e:	e003      	b.n	800afa8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800afa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa2:	fab3 f383 	clz	r3, r3
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	005b      	lsls	r3, r3, #1
 800afaa:	6879      	ldr	r1, [r7, #4]
 800afac:	fa01 f303 	lsl.w	r3, r1, r3
 800afb0:	431a      	orrs	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	60da      	str	r2, [r3, #12]
}
 800afb6:	bf00      	nop
 800afb8:	372c      	adds	r7, #44	@ 0x2c
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <LL_GPIO_SetAFPin_0_7>:
{
 800afc2:	b480      	push	{r7}
 800afc4:	b08b      	sub	sp, #44	@ 0x2c
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6a1a      	ldr	r2, [r3, #32]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	fa93 f3a3 	rbit	r3, r3
 800afdc:	613b      	str	r3, [r7, #16]
  return result;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800afe8:	2320      	movs	r3, #32
 800afea:	e003      	b.n	800aff4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	fab3 f383 	clz	r3, r3
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	210f      	movs	r1, #15
 800aff8:	fa01 f303 	lsl.w	r3, r1, r3
 800affc:	43db      	mvns	r3, r3
 800affe:	401a      	ands	r2, r3
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	fa93 f3a3 	rbit	r3, r3
 800b00a:	61fb      	str	r3, [r7, #28]
  return result;
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b016:	2320      	movs	r3, #32
 800b018:	e003      	b.n	800b022 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01c:	fab3 f383 	clz	r3, r3
 800b020:	b2db      	uxtb	r3, r3
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	6879      	ldr	r1, [r7, #4]
 800b026:	fa01 f303 	lsl.w	r3, r1, r3
 800b02a:	431a      	orrs	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	621a      	str	r2, [r3, #32]
}
 800b030:	bf00      	nop
 800b032:	372c      	adds	r7, #44	@ 0x2c
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <LL_GPIO_SetAFPin_8_15>:
{
 800b03c:	b480      	push	{r7}
 800b03e:	b08b      	sub	sp, #44	@ 0x2c
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	0a1b      	lsrs	r3, r3, #8
 800b050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	fa93 f3a3 	rbit	r3, r3
 800b058:	613b      	str	r3, [r7, #16]
  return result;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b064:	2320      	movs	r3, #32
 800b066:	e003      	b.n	800b070 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	fab3 f383 	clz	r3, r3
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	210f      	movs	r1, #15
 800b074:	fa01 f303 	lsl.w	r3, r1, r3
 800b078:	43db      	mvns	r3, r3
 800b07a:	401a      	ands	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	fa93 f3a3 	rbit	r3, r3
 800b088:	61fb      	str	r3, [r7, #28]
  return result;
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b094:	2320      	movs	r3, #32
 800b096:	e003      	b.n	800b0a0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09a:	fab3 f383 	clz	r3, r3
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	6879      	ldr	r1, [r7, #4]
 800b0a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b0ae:	bf00      	nop
 800b0b0:	372c      	adds	r7, #44	@ 0x2c
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b088      	sub	sp, #32
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	fa93 f3a3 	rbit	r3, r3
 800b0d0:	60fb      	str	r3, [r7, #12]
  return result;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d101      	bne.n	800b0e0 <LL_GPIO_Init+0x26>
    return 32U;
 800b0dc:	2320      	movs	r3, #32
 800b0de:	e003      	b.n	800b0e8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	fab3 f383 	clz	r3, r3
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b0ea:	e048      	b.n	800b17e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	2101      	movs	r1, #1
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d03a      	beq.n	800b178 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d003      	beq.n	800b112 <LL_GPIO_Init+0x58>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d10e      	bne.n	800b130 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	461a      	mov	r2, r3
 800b118:	69b9      	ldr	r1, [r7, #24]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff fed7 	bl	800aece <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	6819      	ldr	r1, [r3, #0]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	461a      	mov	r2, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff feb7 	bl	800ae9e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	461a      	mov	r2, r3
 800b136:	69b9      	ldr	r1, [r7, #24]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff ff05 	bl	800af48 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	2b02      	cmp	r3, #2
 800b144:	d111      	bne.n	800b16a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	2bff      	cmp	r3, #255	@ 0xff
 800b14a:	d807      	bhi.n	800b15c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	461a      	mov	r2, r3
 800b152:	69b9      	ldr	r1, [r7, #24]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff ff34 	bl	800afc2 <LL_GPIO_SetAFPin_0_7>
 800b15a:	e006      	b.n	800b16a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	461a      	mov	r2, r3
 800b162:	69b9      	ldr	r1, [r7, #24]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff ff69 	bl	800b03c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	461a      	mov	r2, r3
 800b170:	69b9      	ldr	r1, [r7, #24]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7ff fe56 	bl	800ae24 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	3301      	adds	r3, #1
 800b17c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	fa22 f303 	lsr.w	r3, r2, r3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1af      	bne.n	800b0ec <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3720      	adds	r7, #32
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800b198:	b480      	push	{r7}
 800b19a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b19c:	4b07      	ldr	r3, [pc, #28]	@ (800b1bc <LL_RCC_HSI_IsReady+0x24>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1a8:	d101      	bne.n	800b1ae <LL_RCC_HSI_IsReady+0x16>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e000      	b.n	800b1b0 <LL_RCC_HSI_IsReady+0x18>
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	40021000 	.word	0x40021000

0800b1c0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b1c4:	4b07      	ldr	r3, [pc, #28]	@ (800b1e4 <LL_RCC_LSE_IsReady+0x24>)
 800b1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d101      	bne.n	800b1d6 <LL_RCC_LSE_IsReady+0x16>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e000      	b.n	800b1d8 <LL_RCC_LSE_IsReady+0x18>
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	40021000 	.word	0x40021000

0800b1e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b1ec:	4b04      	ldr	r3, [pc, #16]	@ (800b200 <LL_RCC_GetSysClkSource+0x18>)
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f003 030c 	and.w	r3, r3, #12
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	40021000 	.word	0x40021000

0800b204 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800b204:	b480      	push	{r7}
 800b206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b208:	4b04      	ldr	r3, [pc, #16]	@ (800b21c <LL_RCC_GetAHBPrescaler+0x18>)
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b210:	4618      	mov	r0, r3
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	40021000 	.word	0x40021000

0800b220 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b220:	b480      	push	{r7}
 800b222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b224:	4b04      	ldr	r3, [pc, #16]	@ (800b238 <LL_RCC_GetAPB1Prescaler+0x18>)
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	40021000 	.word	0x40021000

0800b23c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b240:	4b04      	ldr	r3, [pc, #16]	@ (800b254 <LL_RCC_GetAPB2Prescaler+0x18>)
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800b248:	4618      	mov	r0, r3
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	40021000 	.word	0x40021000

0800b258 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800b260:	4b06      	ldr	r3, [pc, #24]	@ (800b27c <LL_RCC_GetUSARTClockSource+0x24>)
 800b262:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	401a      	ands	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	041b      	lsls	r3, r3, #16
 800b26e:	4313      	orrs	r3, r2
}
 800b270:	4618      	mov	r0, r3
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	40021000 	.word	0x40021000

0800b280 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800b288:	4b06      	ldr	r3, [pc, #24]	@ (800b2a4 <LL_RCC_GetUARTClockSource+0x24>)
 800b28a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	401a      	ands	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	041b      	lsls	r3, r3, #16
 800b296:	4313      	orrs	r3, r2
}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	40021000 	.word	0x40021000

0800b2a8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b2ac:	4b04      	ldr	r3, [pc, #16]	@ (800b2c0 <LL_RCC_PLL_GetMainSource+0x18>)
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f003 0303 	and.w	r3, r3, #3
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	40021000 	.word	0x40021000

0800b2c4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b2c8:	4b04      	ldr	r3, [pc, #16]	@ (800b2dc <LL_RCC_PLL_GetN+0x18>)
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	0a1b      	lsrs	r3, r3, #8
 800b2ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	40021000 	.word	0x40021000

0800b2e0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b2e4:	4b04      	ldr	r3, [pc, #16]	@ (800b2f8 <LL_RCC_PLL_GetR+0x18>)
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	40021000 	.word	0x40021000

0800b2fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b300:	4b04      	ldr	r3, [pc, #16]	@ (800b314 <LL_RCC_PLL_GetDivider+0x18>)
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	40021000 	.word	0x40021000

0800b318 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800b320:	2300      	movs	r3, #0
 800b322:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b03      	cmp	r3, #3
 800b328:	d132      	bne.n	800b390 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff ff94 	bl	800b258 <LL_RCC_GetUSARTClockSource>
 800b330:	4603      	mov	r3, r0
 800b332:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800b336:	d016      	beq.n	800b366 <LL_RCC_GetUSARTClockFreq+0x4e>
 800b338:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800b33c:	d81c      	bhi.n	800b378 <LL_RCC_GetUSARTClockFreq+0x60>
 800b33e:	4a51      	ldr	r2, [pc, #324]	@ (800b484 <LL_RCC_GetUSARTClockFreq+0x16c>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d003      	beq.n	800b34c <LL_RCC_GetUSARTClockFreq+0x34>
 800b344:	4a50      	ldr	r2, [pc, #320]	@ (800b488 <LL_RCC_GetUSARTClockFreq+0x170>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d004      	beq.n	800b354 <LL_RCC_GetUSARTClockFreq+0x3c>
 800b34a:	e015      	b.n	800b378 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800b34c:	f000 f92e 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b350:	60f8      	str	r0, [r7, #12]
        break;
 800b352:	e092      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800b354:	f7ff ff20 	bl	800b198 <LL_RCC_HSI_IsReady>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f000 8082 	beq.w	800b464 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 800b360:	4b4a      	ldr	r3, [pc, #296]	@ (800b48c <LL_RCC_GetUSARTClockFreq+0x174>)
 800b362:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b364:	e07e      	b.n	800b464 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800b366:	f7ff ff2b 	bl	800b1c0 <LL_RCC_LSE_IsReady>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d07b      	beq.n	800b468 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 800b370:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b374:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b376:	e077      	b.n	800b468 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b378:	f000 f918 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b37c:	4603      	mov	r3, r0
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 f93a 	bl	800b5f8 <RCC_GetHCLKClockFreq>
 800b384:	4603      	mov	r3, r0
 800b386:	4618      	mov	r0, r3
 800b388:	f000 f964 	bl	800b654 <RCC_GetPCLK2ClockFreq>
 800b38c:	60f8      	str	r0, [r7, #12]
        break;
 800b38e:	e074      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b0c      	cmp	r3, #12
 800b394:	d131      	bne.n	800b3fa <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff ff5e 	bl	800b258 <LL_RCC_GetUSARTClockSource>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800b3a2:	d015      	beq.n	800b3d0 <LL_RCC_GetUSARTClockFreq+0xb8>
 800b3a4:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800b3a8:	d81b      	bhi.n	800b3e2 <LL_RCC_GetUSARTClockFreq+0xca>
 800b3aa:	4a39      	ldr	r2, [pc, #228]	@ (800b490 <LL_RCC_GetUSARTClockFreq+0x178>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d003      	beq.n	800b3b8 <LL_RCC_GetUSARTClockFreq+0xa0>
 800b3b0:	4a38      	ldr	r2, [pc, #224]	@ (800b494 <LL_RCC_GetUSARTClockFreq+0x17c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d004      	beq.n	800b3c0 <LL_RCC_GetUSARTClockFreq+0xa8>
 800b3b6:	e014      	b.n	800b3e2 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800b3b8:	f000 f8f8 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b3bc:	60f8      	str	r0, [r7, #12]
        break;
 800b3be:	e05c      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800b3c0:	f7ff feea 	bl	800b198 <LL_RCC_HSI_IsReady>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d050      	beq.n	800b46c <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 800b3ca:	4b30      	ldr	r3, [pc, #192]	@ (800b48c <LL_RCC_GetUSARTClockFreq+0x174>)
 800b3cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b3ce:	e04d      	b.n	800b46c <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800b3d0:	f7ff fef6 	bl	800b1c0 <LL_RCC_LSE_IsReady>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d04a      	beq.n	800b470 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 800b3da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3de:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b3e0:	e046      	b.n	800b470 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b3e2:	f000 f8e3 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 f905 	bl	800b5f8 <RCC_GetHCLKClockFreq>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 f919 	bl	800b628 <RCC_GetPCLK1ClockFreq>
 800b3f6:	60f8      	str	r0, [r7, #12]
        break;
 800b3f8:	e03f      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b30      	cmp	r3, #48	@ 0x30
 800b3fe:	d13c      	bne.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff ff29 	bl	800b258 <LL_RCC_GetUSARTClockSource>
 800b406:	4603      	mov	r3, r0
 800b408:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800b40c:	d015      	beq.n	800b43a <LL_RCC_GetUSARTClockFreq+0x122>
 800b40e:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800b412:	d81b      	bhi.n	800b44c <LL_RCC_GetUSARTClockFreq+0x134>
 800b414:	4a20      	ldr	r2, [pc, #128]	@ (800b498 <LL_RCC_GetUSARTClockFreq+0x180>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d003      	beq.n	800b422 <LL_RCC_GetUSARTClockFreq+0x10a>
 800b41a:	4a20      	ldr	r2, [pc, #128]	@ (800b49c <LL_RCC_GetUSARTClockFreq+0x184>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d004      	beq.n	800b42a <LL_RCC_GetUSARTClockFreq+0x112>
 800b420:	e014      	b.n	800b44c <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800b422:	f000 f8c3 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b426:	60f8      	str	r0, [r7, #12]
          break;
 800b428:	e027      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800b42a:	f7ff feb5 	bl	800b198 <LL_RCC_HSI_IsReady>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d01f      	beq.n	800b474 <LL_RCC_GetUSARTClockFreq+0x15c>
          {
            usart_frequency = HSI_VALUE;
 800b434:	4b15      	ldr	r3, [pc, #84]	@ (800b48c <LL_RCC_GetUSARTClockFreq+0x174>)
 800b436:	60fb      	str	r3, [r7, #12]
          }
          break;
 800b438:	e01c      	b.n	800b474 <LL_RCC_GetUSARTClockFreq+0x15c>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800b43a:	f7ff fec1 	bl	800b1c0 <LL_RCC_LSE_IsReady>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d019      	beq.n	800b478 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = LSE_VALUE;
 800b444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b448:	60fb      	str	r3, [r7, #12]
          }
          break;
 800b44a:	e015      	b.n	800b478 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b44c:	f000 f8ae 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b450:	4603      	mov	r3, r0
 800b452:	4618      	mov	r0, r3
 800b454:	f000 f8d0 	bl	800b5f8 <RCC_GetHCLKClockFreq>
 800b458:	4603      	mov	r3, r0
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 f8e4 	bl	800b628 <RCC_GetPCLK1ClockFreq>
 800b460:	60f8      	str	r0, [r7, #12]
          break;
 800b462:	e00a      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800b464:	bf00      	nop
 800b466:	e008      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800b468:	bf00      	nop
 800b46a:	e006      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800b46c:	bf00      	nop
 800b46e:	e004      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800b470:	bf00      	nop
 800b472:	e002      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 800b474:	bf00      	nop
 800b476:	e000      	b.n	800b47a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 800b478:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 800b47a:	68fb      	ldr	r3, [r7, #12]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	00030001 	.word	0x00030001
 800b488:	00030002 	.word	0x00030002
 800b48c:	00f42400 	.word	0x00f42400
 800b490:	000c0004 	.word	0x000c0004
 800b494:	000c0008 	.word	0x000c0008
 800b498:	00300010 	.word	0x00300010
 800b49c:	00300020 	.word	0x00300020

0800b4a0 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4b0:	d134      	bne.n	800b51c <LL_RCC_GetUARTClockFreq+0x7c>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7ff fee4 	bl	800b280 <LL_RCC_GetUARTClockSource>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800b4be:	d015      	beq.n	800b4ec <LL_RCC_GetUARTClockFreq+0x4c>
 800b4c0:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800b4c4:	d81b      	bhi.n	800b4fe <LL_RCC_GetUARTClockFreq+0x5e>
 800b4c6:	4a34      	ldr	r2, [pc, #208]	@ (800b598 <LL_RCC_GetUARTClockFreq+0xf8>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d003      	beq.n	800b4d4 <LL_RCC_GetUARTClockFreq+0x34>
 800b4cc:	4a33      	ldr	r2, [pc, #204]	@ (800b59c <LL_RCC_GetUARTClockFreq+0xfc>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d004      	beq.n	800b4dc <LL_RCC_GetUARTClockFreq+0x3c>
 800b4d2:	e014      	b.n	800b4fe <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800b4d4:	f000 f86a 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b4d8:	60f8      	str	r0, [r7, #12]
        break;
 800b4da:	e01f      	b.n	800b51c <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800b4dc:	f7ff fe5c 	bl	800b198 <LL_RCC_HSI_IsReady>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d017      	beq.n	800b516 <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = HSI_VALUE;
 800b4e6:	4b2e      	ldr	r3, [pc, #184]	@ (800b5a0 <LL_RCC_GetUARTClockFreq+0x100>)
 800b4e8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b4ea:	e014      	b.n	800b516 <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800b4ec:	f7ff fe68 	bl	800b1c0 <LL_RCC_LSE_IsReady>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d011      	beq.n	800b51a <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = LSE_VALUE;
 800b4f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4fa:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b4fc:	e00d      	b.n	800b51a <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b4fe:	f000 f855 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b502:	4603      	mov	r3, r0
 800b504:	4618      	mov	r0, r3
 800b506:	f000 f877 	bl	800b5f8 <RCC_GetHCLKClockFreq>
 800b50a:	4603      	mov	r3, r0
 800b50c:	4618      	mov	r0, r3
 800b50e:	f000 f88b 	bl	800b628 <RCC_GetPCLK1ClockFreq>
 800b512:	60f8      	str	r0, [r7, #12]
        break;
 800b514:	e002      	b.n	800b51c <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 800b516:	bf00      	nop
 800b518:	e000      	b.n	800b51c <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 800b51a:	bf00      	nop
    }
  }

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b522:	d134      	bne.n	800b58e <LL_RCC_GetUARTClockFreq+0xee>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7ff feab 	bl	800b280 <LL_RCC_GetUARTClockSource>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800b530:	d015      	beq.n	800b55e <LL_RCC_GetUARTClockFreq+0xbe>
 800b532:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800b536:	d81b      	bhi.n	800b570 <LL_RCC_GetUARTClockFreq+0xd0>
 800b538:	4a1a      	ldr	r2, [pc, #104]	@ (800b5a4 <LL_RCC_GetUARTClockFreq+0x104>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d003      	beq.n	800b546 <LL_RCC_GetUARTClockFreq+0xa6>
 800b53e:	4a1a      	ldr	r2, [pc, #104]	@ (800b5a8 <LL_RCC_GetUARTClockFreq+0x108>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d004      	beq.n	800b54e <LL_RCC_GetUARTClockFreq+0xae>
 800b544:	e014      	b.n	800b570 <LL_RCC_GetUARTClockFreq+0xd0>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800b546:	f000 f831 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b54a:	60f8      	str	r0, [r7, #12]
        break;
 800b54c:	e01f      	b.n	800b58e <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800b54e:	f7ff fe23 	bl	800b198 <LL_RCC_HSI_IsReady>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d017      	beq.n	800b588 <LL_RCC_GetUARTClockFreq+0xe8>
        {
          uart_frequency = HSI_VALUE;
 800b558:	4b11      	ldr	r3, [pc, #68]	@ (800b5a0 <LL_RCC_GetUARTClockFreq+0x100>)
 800b55a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b55c:	e014      	b.n	800b588 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800b55e:	f7ff fe2f 	bl	800b1c0 <LL_RCC_LSE_IsReady>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d011      	beq.n	800b58c <LL_RCC_GetUARTClockFreq+0xec>
        {
          uart_frequency = LSE_VALUE;
 800b568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b56c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b56e:	e00d      	b.n	800b58c <LL_RCC_GetUARTClockFreq+0xec>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b570:	f000 f81c 	bl	800b5ac <RCC_GetSystemClockFreq>
 800b574:	4603      	mov	r3, r0
 800b576:	4618      	mov	r0, r3
 800b578:	f000 f83e 	bl	800b5f8 <RCC_GetHCLKClockFreq>
 800b57c:	4603      	mov	r3, r0
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 f852 	bl	800b628 <RCC_GetPCLK1ClockFreq>
 800b584:	60f8      	str	r0, [r7, #12]
        break;
 800b586:	e002      	b.n	800b58e <LL_RCC_GetUARTClockFreq+0xee>
        break;
 800b588:	bf00      	nop
 800b58a:	e000      	b.n	800b58e <LL_RCC_GetUARTClockFreq+0xee>
        break;
 800b58c:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800b58e:	68fb      	ldr	r3, [r7, #12]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	00c00040 	.word	0x00c00040
 800b59c:	00c00080 	.word	0x00c00080
 800b5a0:	00f42400 	.word	0x00f42400
 800b5a4:	03000100 	.word	0x03000100
 800b5a8:	03000200 	.word	0x03000200

0800b5ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b5b2:	f7ff fe19 	bl	800b1e8 <LL_RCC_GetSysClkSource>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b0c      	cmp	r3, #12
 800b5ba:	d00c      	beq.n	800b5d6 <RCC_GetSystemClockFreq+0x2a>
 800b5bc:	2b0c      	cmp	r3, #12
 800b5be:	d80e      	bhi.n	800b5de <RCC_GetSystemClockFreq+0x32>
 800b5c0:	2b04      	cmp	r3, #4
 800b5c2:	d002      	beq.n	800b5ca <RCC_GetSystemClockFreq+0x1e>
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d003      	beq.n	800b5d0 <RCC_GetSystemClockFreq+0x24>
 800b5c8:	e009      	b.n	800b5de <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b5ca:	4b09      	ldr	r3, [pc, #36]	@ (800b5f0 <RCC_GetSystemClockFreq+0x44>)
 800b5cc:	607b      	str	r3, [r7, #4]
      break;
 800b5ce:	e009      	b.n	800b5e4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b5d0:	4b08      	ldr	r3, [pc, #32]	@ (800b5f4 <RCC_GetSystemClockFreq+0x48>)
 800b5d2:	607b      	str	r3, [r7, #4]
      break;
 800b5d4:	e006      	b.n	800b5e4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800b5d6:	f000 f853 	bl	800b680 <RCC_PLL_GetFreqDomain_SYS>
 800b5da:	6078      	str	r0, [r7, #4]
      break;
 800b5dc:	e002      	b.n	800b5e4 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 800b5de:	4b04      	ldr	r3, [pc, #16]	@ (800b5f0 <RCC_GetSystemClockFreq+0x44>)
 800b5e0:	607b      	str	r3, [r7, #4]
      break;
 800b5e2:	bf00      	nop
  }

  return frequency;
 800b5e4:	687b      	ldr	r3, [r7, #4]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	00f42400 	.word	0x00f42400
 800b5f4:	007a1200 	.word	0x007a1200

0800b5f8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b600:	f7ff fe00 	bl	800b204 <LL_RCC_GetAHBPrescaler>
 800b604:	4603      	mov	r3, r0
 800b606:	091b      	lsrs	r3, r3, #4
 800b608:	f003 030f 	and.w	r3, r3, #15
 800b60c:	4a05      	ldr	r2, [pc, #20]	@ (800b624 <RCC_GetHCLKClockFreq+0x2c>)
 800b60e:	5cd3      	ldrb	r3, [r2, r3]
 800b610:	f003 031f 	and.w	r3, r3, #31
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	08013ddc 	.word	0x08013ddc

0800b628 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b630:	f7ff fdf6 	bl	800b220 <LL_RCC_GetAPB1Prescaler>
 800b634:	4603      	mov	r3, r0
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	4a05      	ldr	r2, [pc, #20]	@ (800b650 <RCC_GetPCLK1ClockFreq+0x28>)
 800b63a:	5cd3      	ldrb	r3, [r2, r3]
 800b63c:	f003 031f 	and.w	r3, r3, #31
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	08013dec 	.word	0x08013dec

0800b654 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b65c:	f7ff fdee 	bl	800b23c <LL_RCC_GetAPB2Prescaler>
 800b660:	4603      	mov	r3, r0
 800b662:	0adb      	lsrs	r3, r3, #11
 800b664:	4a05      	ldr	r2, [pc, #20]	@ (800b67c <RCC_GetPCLK2ClockFreq+0x28>)
 800b666:	5cd3      	ldrb	r3, [r2, r3]
 800b668:	f003 031f 	and.w	r3, r3, #31
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	08013dec 	.word	0x08013dec

0800b680 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800b680:	b590      	push	{r4, r7, lr}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b686:	f7ff fe0f 	bl	800b2a8 <LL_RCC_PLL_GetMainSource>
 800b68a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d003      	beq.n	800b69a <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b03      	cmp	r3, #3
 800b696:	d003      	beq.n	800b6a0 <RCC_PLL_GetFreqDomain_SYS+0x20>
 800b698:	e005      	b.n	800b6a6 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b69a:	4b11      	ldr	r3, [pc, #68]	@ (800b6e0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800b69c:	607b      	str	r3, [r7, #4]
      break;
 800b69e:	e005      	b.n	800b6ac <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b6a0:	4b10      	ldr	r3, [pc, #64]	@ (800b6e4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800b6a2:	607b      	str	r3, [r7, #4]
      break;
 800b6a4:	e002      	b.n	800b6ac <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800b6a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b6e0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800b6a8:	607b      	str	r3, [r7, #4]
      break;
 800b6aa:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b6ac:	f7ff fe0a 	bl	800b2c4 <LL_RCC_PLL_GetN>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	fb03 f402 	mul.w	r4, r3, r2
 800b6b8:	f7ff fe20 	bl	800b2fc <LL_RCC_PLL_GetDivider>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	091b      	lsrs	r3, r3, #4
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	fbb4 f4f3 	udiv	r4, r4, r3
 800b6c6:	f7ff fe0b 	bl	800b2e0 <LL_RCC_PLL_GetR>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	0e5b      	lsrs	r3, r3, #25
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	005b      	lsls	r3, r3, #1
 800b6d2:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd90      	pop	{r4, r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	00f42400 	.word	0x00f42400
 800b6e4:	007a1200 	.word	0x007a1200

0800b6e8 <LL_TIM_SetPrescaler>:
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <LL_TIM_SetAutoReload>:
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <LL_TIM_SetRepetitionCounter>:
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <LL_TIM_OC_SetCompareCH1>:
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <LL_TIM_OC_SetCompareCH2>:
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <LL_TIM_OC_SetCompareCH3>:
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <LL_TIM_OC_SetCompareCH4>:
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <LL_TIM_OC_SetCompareCH5>:
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <LL_TIM_OC_SetCompareCH6>:
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	f043 0201 	orr.w	r2, r3, #1
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	615a      	str	r2, [r3, #20]
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a43      	ldr	r2, [pc, #268]	@ (800b928 <LL_TIM_Init+0x120>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d017      	beq.n	800b850 <LL_TIM_Init+0x48>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b826:	d013      	beq.n	800b850 <LL_TIM_Init+0x48>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a40      	ldr	r2, [pc, #256]	@ (800b92c <LL_TIM_Init+0x124>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00f      	beq.n	800b850 <LL_TIM_Init+0x48>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a3f      	ldr	r2, [pc, #252]	@ (800b930 <LL_TIM_Init+0x128>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d00b      	beq.n	800b850 <LL_TIM_Init+0x48>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a3e      	ldr	r2, [pc, #248]	@ (800b934 <LL_TIM_Init+0x12c>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d007      	beq.n	800b850 <LL_TIM_Init+0x48>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a3d      	ldr	r2, [pc, #244]	@ (800b938 <LL_TIM_Init+0x130>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d003      	beq.n	800b850 <LL_TIM_Init+0x48>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a3c      	ldr	r2, [pc, #240]	@ (800b93c <LL_TIM_Init+0x134>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d106      	bne.n	800b85e <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a31      	ldr	r2, [pc, #196]	@ (800b928 <LL_TIM_Init+0x120>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d023      	beq.n	800b8ae <LL_TIM_Init+0xa6>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b86c:	d01f      	beq.n	800b8ae <LL_TIM_Init+0xa6>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a2e      	ldr	r2, [pc, #184]	@ (800b92c <LL_TIM_Init+0x124>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d01b      	beq.n	800b8ae <LL_TIM_Init+0xa6>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a2d      	ldr	r2, [pc, #180]	@ (800b930 <LL_TIM_Init+0x128>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d017      	beq.n	800b8ae <LL_TIM_Init+0xa6>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a2c      	ldr	r2, [pc, #176]	@ (800b934 <LL_TIM_Init+0x12c>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d013      	beq.n	800b8ae <LL_TIM_Init+0xa6>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a2b      	ldr	r2, [pc, #172]	@ (800b938 <LL_TIM_Init+0x130>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d00f      	beq.n	800b8ae <LL_TIM_Init+0xa6>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a2b      	ldr	r2, [pc, #172]	@ (800b940 <LL_TIM_Init+0x138>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d00b      	beq.n	800b8ae <LL_TIM_Init+0xa6>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a2a      	ldr	r2, [pc, #168]	@ (800b944 <LL_TIM_Init+0x13c>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d007      	beq.n	800b8ae <LL_TIM_Init+0xa6>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a29      	ldr	r2, [pc, #164]	@ (800b948 <LL_TIM_Init+0x140>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d003      	beq.n	800b8ae <LL_TIM_Init+0xa6>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a24      	ldr	r2, [pc, #144]	@ (800b93c <LL_TIM_Init+0x134>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d106      	bne.n	800b8bc <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7ff ff1b 	bl	800b704 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7ff ff07 	bl	800b6e8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a12      	ldr	r2, [pc, #72]	@ (800b928 <LL_TIM_Init+0x120>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d013      	beq.n	800b90a <LL_TIM_Init+0x102>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4a14      	ldr	r2, [pc, #80]	@ (800b938 <LL_TIM_Init+0x130>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d00f      	beq.n	800b90a <LL_TIM_Init+0x102>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4a14      	ldr	r2, [pc, #80]	@ (800b940 <LL_TIM_Init+0x138>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d00b      	beq.n	800b90a <LL_TIM_Init+0x102>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4a13      	ldr	r2, [pc, #76]	@ (800b944 <LL_TIM_Init+0x13c>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d007      	beq.n	800b90a <LL_TIM_Init+0x102>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a12      	ldr	r2, [pc, #72]	@ (800b948 <LL_TIM_Init+0x140>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d003      	beq.n	800b90a <LL_TIM_Init+0x102>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a0d      	ldr	r2, [pc, #52]	@ (800b93c <LL_TIM_Init+0x134>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d105      	bne.n	800b916 <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7ff ff05 	bl	800b720 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff ff66 	bl	800b7e8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	40012c00 	.word	0x40012c00
 800b92c:	40000400 	.word	0x40000400
 800b930:	40000800 	.word	0x40000800
 800b934:	40000c00 	.word	0x40000c00
 800b938:	40013400 	.word	0x40013400
 800b93c:	40015000 	.word	0x40015000
 800b940:	40014000 	.word	0x40014000
 800b944:	40014400 	.word	0x40014400
 800b948:	40014800 	.word	0x40014800

0800b94c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b962:	d045      	beq.n	800b9f0 <LL_TIM_OC_Init+0xa4>
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b96a:	d848      	bhi.n	800b9fe <LL_TIM_OC_Init+0xb2>
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b972:	d036      	beq.n	800b9e2 <LL_TIM_OC_Init+0x96>
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b97a:	d840      	bhi.n	800b9fe <LL_TIM_OC_Init+0xb2>
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b982:	d027      	beq.n	800b9d4 <LL_TIM_OC_Init+0x88>
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b98a:	d838      	bhi.n	800b9fe <LL_TIM_OC_Init+0xb2>
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b992:	d018      	beq.n	800b9c6 <LL_TIM_OC_Init+0x7a>
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b99a:	d830      	bhi.n	800b9fe <LL_TIM_OC_Init+0xb2>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d003      	beq.n	800b9aa <LL_TIM_OC_Init+0x5e>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b10      	cmp	r3, #16
 800b9a6:	d007      	beq.n	800b9b8 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800b9a8:	e029      	b.n	800b9fe <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 f8bf 	bl	800bb30 <OC1Config>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9b6:	e023      	b.n	800ba00 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 f93e 	bl	800bc3c <OC2Config>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c4:	e01c      	b.n	800ba00 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800b9c6:	6879      	ldr	r1, [r7, #4]
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 f9c1 	bl	800bd50 <OC3Config>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9d2:	e015      	b.n	800ba00 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800b9d4:	6879      	ldr	r1, [r7, #4]
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f000 fa44 	bl	800be64 <OC4Config>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	75fb      	strb	r3, [r7, #23]
      break;
 800b9e0:	e00e      	b.n	800ba00 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 fac7 	bl	800bf78 <OC5Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ee:	e007      	b.n	800ba00 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800b9f0:	6879      	ldr	r1, [r7, #4]
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f000 fb2a 	bl	800c04c <OC6Config>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b9fc:	e000      	b.n	800ba00 <LL_TIM_OC_Init+0xb4>
      break;
 800b9fe:	bf00      	nop
  }

  return result;
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	7b12      	ldrb	r2, [r2, #12]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	89d2      	ldrh	r2, [r2, #14]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba86:	4313      	orrs	r3, r2
 800ba88:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a25      	ldr	r2, [pc, #148]	@ (800bb24 <LL_TIM_BDTR_Init+0x118>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d007      	beq.n	800baa2 <LL_TIM_BDTR_Init+0x96>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a24      	ldr	r2, [pc, #144]	@ (800bb28 <LL_TIM_BDTR_Init+0x11c>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d003      	beq.n	800baa2 <LL_TIM_BDTR_Init+0x96>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a23      	ldr	r2, [pc, #140]	@ (800bb2c <LL_TIM_BDTR_Init+0x120>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d10d      	bne.n	800babe <LL_TIM_BDTR_Init+0xb2>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	4313      	orrs	r3, r2
 800baae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	4313      	orrs	r3, r2
 800babc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a18      	ldr	r2, [pc, #96]	@ (800bb24 <LL_TIM_BDTR_Init+0x118>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d007      	beq.n	800bad6 <LL_TIM_BDTR_Init+0xca>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a17      	ldr	r2, [pc, #92]	@ (800bb28 <LL_TIM_BDTR_Init+0x11c>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d003      	beq.n	800bad6 <LL_TIM_BDTR_Init+0xca>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a16      	ldr	r2, [pc, #88]	@ (800bb2c <LL_TIM_BDTR_Init+0x120>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d11b      	bne.n	800bb0e <LL_TIM_BDTR_Init+0x102>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	4313      	orrs	r3, r2
 800baf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	40012c00 	.word	0x40012c00
 800bb28:	40013400 	.word	0x40013400
 800bb2c:	40015000 	.word	0x40015000

0800bb30 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	f023 0201 	bic.w	r2, r3, #1
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f023 0303 	bic.w	r3, r3, #3
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	6812      	ldr	r2, [r2, #0]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f023 0202 	bic.w	r2, r3, #2
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	f023 0201 	bic.w	r2, r3, #1
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a24      	ldr	r2, [pc, #144]	@ (800bc24 <OC1Config+0xf4>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d013      	beq.n	800bbbe <OC1Config+0x8e>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a23      	ldr	r2, [pc, #140]	@ (800bc28 <OC1Config+0xf8>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d00f      	beq.n	800bbbe <OC1Config+0x8e>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a22      	ldr	r2, [pc, #136]	@ (800bc2c <OC1Config+0xfc>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d00b      	beq.n	800bbbe <OC1Config+0x8e>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a21      	ldr	r2, [pc, #132]	@ (800bc30 <OC1Config+0x100>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d007      	beq.n	800bbbe <OC1Config+0x8e>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a20      	ldr	r2, [pc, #128]	@ (800bc34 <OC1Config+0x104>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d003      	beq.n	800bbbe <OC1Config+0x8e>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a1f      	ldr	r2, [pc, #124]	@ (800bc38 <OC1Config+0x108>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d11e      	bne.n	800bbfc <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f023 0208 	bic.w	r2, r3, #8
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	f023 0204 	bic.w	r2, r3, #4
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	69db      	ldr	r3, [r3, #28]
 800bbf6:	005b      	lsls	r3, r3, #1
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	693a      	ldr	r2, [r7, #16]
 800bc00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff fd94 	bl	800b73c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	40012c00 	.word	0x40012c00
 800bc28:	40013400 	.word	0x40013400
 800bc2c:	40014000 	.word	0x40014000
 800bc30:	40014400 	.word	0x40014400
 800bc34:	40014800 	.word	0x40014800
 800bc38:	40015000 	.word	0x40015000

0800bc3c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	f023 0210 	bic.w	r2, r3, #16
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	6812      	ldr	r2, [r2, #0]
 800bc7a:	0212      	lsls	r2, r2, #8
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f023 0220 	bic.w	r2, r3, #32
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	011b      	lsls	r3, r3, #4
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f023 0210 	bic.w	r2, r3, #16
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	011b      	lsls	r3, r3, #4
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a25      	ldr	r2, [pc, #148]	@ (800bd38 <OC2Config+0xfc>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d013      	beq.n	800bcd0 <OC2Config+0x94>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a24      	ldr	r2, [pc, #144]	@ (800bd3c <OC2Config+0x100>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d00f      	beq.n	800bcd0 <OC2Config+0x94>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a23      	ldr	r2, [pc, #140]	@ (800bd40 <OC2Config+0x104>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d00b      	beq.n	800bcd0 <OC2Config+0x94>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a22      	ldr	r2, [pc, #136]	@ (800bd44 <OC2Config+0x108>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d007      	beq.n	800bcd0 <OC2Config+0x94>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a21      	ldr	r2, [pc, #132]	@ (800bd48 <OC2Config+0x10c>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d003      	beq.n	800bcd0 <OC2Config+0x94>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a20      	ldr	r2, [pc, #128]	@ (800bd4c <OC2Config+0x110>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d11f      	bne.n	800bd10 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	019b      	lsls	r3, r3, #6
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	019b      	lsls	r3, r3, #6
 800bcec:	4313      	orrs	r3, r2
 800bcee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	69db      	ldr	r3, [r3, #28]
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	693a      	ldr	r2, [r7, #16]
 800bd14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff fd18 	bl	800b758 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	40012c00 	.word	0x40012c00
 800bd3c:	40013400 	.word	0x40013400
 800bd40:	40014000 	.word	0x40014000
 800bd44:	40014400 	.word	0x40014400
 800bd48:	40014800 	.word	0x40014800
 800bd4c:	40015000 	.word	0x40015000

0800bd50 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	69db      	ldr	r3, [r3, #28]
 800bd76:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f023 0303 	bic.w	r3, r3, #3
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	6812      	ldr	r2, [r2, #0]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	021b      	lsls	r3, r3, #8
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	021b      	lsls	r3, r3, #8
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a25      	ldr	r2, [pc, #148]	@ (800be4c <OC3Config+0xfc>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d013      	beq.n	800bde2 <OC3Config+0x92>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a24      	ldr	r2, [pc, #144]	@ (800be50 <OC3Config+0x100>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d00f      	beq.n	800bde2 <OC3Config+0x92>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a23      	ldr	r2, [pc, #140]	@ (800be54 <OC3Config+0x104>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d00b      	beq.n	800bde2 <OC3Config+0x92>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a22      	ldr	r2, [pc, #136]	@ (800be58 <OC3Config+0x108>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d007      	beq.n	800bde2 <OC3Config+0x92>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a21      	ldr	r2, [pc, #132]	@ (800be5c <OC3Config+0x10c>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d003      	beq.n	800bde2 <OC3Config+0x92>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a20      	ldr	r2, [pc, #128]	@ (800be60 <OC3Config+0x110>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d11f      	bne.n	800be22 <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	029b      	lsls	r3, r3, #10
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	029b      	lsls	r3, r3, #10
 800bdfe:	4313      	orrs	r3, r2
 800be00:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	011b      	lsls	r3, r3, #4
 800be0e:	4313      	orrs	r3, r2
 800be10:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	69db      	ldr	r3, [r3, #28]
 800be1c:	015b      	lsls	r3, r3, #5
 800be1e:	4313      	orrs	r3, r2
 800be20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	4619      	mov	r1, r3
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff fc9d 	bl	800b774 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	40012c00 	.word	0x40012c00
 800be50:	40013400 	.word	0x40013400
 800be54:	40014000 	.word	0x40014000
 800be58:	40014400 	.word	0x40014400
 800be5c:	40014800 	.word	0x40014800
 800be60:	40015000 	.word	0x40015000

0800be64 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	6812      	ldr	r2, [r2, #0]
 800bea2:	0212      	lsls	r2, r2, #8
 800bea4:	4313      	orrs	r3, r2
 800bea6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	031b      	lsls	r3, r3, #12
 800beb4:	4313      	orrs	r3, r2
 800beb6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	031b      	lsls	r3, r3, #12
 800bec4:	4313      	orrs	r3, r2
 800bec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a25      	ldr	r2, [pc, #148]	@ (800bf60 <OC4Config+0xfc>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d013      	beq.n	800bef8 <OC4Config+0x94>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a24      	ldr	r2, [pc, #144]	@ (800bf64 <OC4Config+0x100>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d00f      	beq.n	800bef8 <OC4Config+0x94>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a23      	ldr	r2, [pc, #140]	@ (800bf68 <OC4Config+0x104>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d00b      	beq.n	800bef8 <OC4Config+0x94>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a22      	ldr	r2, [pc, #136]	@ (800bf6c <OC4Config+0x108>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d007      	beq.n	800bef8 <OC4Config+0x94>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a21      	ldr	r2, [pc, #132]	@ (800bf70 <OC4Config+0x10c>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d003      	beq.n	800bef8 <OC4Config+0x94>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a20      	ldr	r2, [pc, #128]	@ (800bf74 <OC4Config+0x110>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d11f      	bne.n	800bf38 <OC4Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	039b      	lsls	r3, r3, #14
 800bf04:	4313      	orrs	r3, r2
 800bf06:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	039b      	lsls	r3, r3, #14
 800bf14:	4313      	orrs	r3, r2
 800bf16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	019b      	lsls	r3, r3, #6
 800bf24:	4313      	orrs	r3, r2
 800bf26:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	69db      	ldr	r3, [r3, #28]
 800bf32:	01db      	lsls	r3, r3, #7
 800bf34:	4313      	orrs	r3, r2
 800bf36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	693a      	ldr	r2, [r7, #16]
 800bf3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff fc20 	bl	800b790 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	697a      	ldr	r2, [r7, #20]
 800bf54:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3718      	adds	r7, #24
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	40012c00 	.word	0x40012c00
 800bf64:	40013400 	.word	0x40013400
 800bf68:	40014000 	.word	0x40014000
 800bf6c:	40014400 	.word	0x40014400
 800bf70:	40014800 	.word	0x40014800
 800bf74:	40015000 	.word	0x40015000

0800bf78 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf98:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	6812      	ldr	r2, [r2, #0]
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	041b      	lsls	r3, r3, #16
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	041b      	lsls	r3, r3, #16
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a19      	ldr	r2, [pc, #100]	@ (800c034 <OC5Config+0xbc>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d013      	beq.n	800bffc <OC5Config+0x84>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a18      	ldr	r2, [pc, #96]	@ (800c038 <OC5Config+0xc0>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d00f      	beq.n	800bffc <OC5Config+0x84>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a17      	ldr	r2, [pc, #92]	@ (800c03c <OC5Config+0xc4>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d00b      	beq.n	800bffc <OC5Config+0x84>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a16      	ldr	r2, [pc, #88]	@ (800c040 <OC5Config+0xc8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d007      	beq.n	800bffc <OC5Config+0x84>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a15      	ldr	r2, [pc, #84]	@ (800c044 <OC5Config+0xcc>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d003      	beq.n	800bffc <OC5Config+0x84>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a14      	ldr	r2, [pc, #80]	@ (800c048 <OC5Config+0xd0>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d109      	bne.n	800c010 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	021b      	lsls	r3, r3, #8
 800c00a:	431a      	orrs	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff fbc5 	bl	800b7ac <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	40012c00 	.word	0x40012c00
 800c038:	40013400 	.word	0x40013400
 800c03c:	40014000 	.word	0x40014000
 800c040:	40014400 	.word	0x40014400
 800c044:	40014800 	.word	0x40014800
 800c048:	40015000 	.word	0x40015000

0800c04c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c06c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	6812      	ldr	r2, [r2, #0]
 800c07c:	0212      	lsls	r2, r2, #8
 800c07e:	4313      	orrs	r3, r2
 800c080:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	051b      	lsls	r3, r3, #20
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	051b      	lsls	r3, r3, #20
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a18      	ldr	r2, [pc, #96]	@ (800c108 <OC6Config+0xbc>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d013      	beq.n	800c0d2 <OC6Config+0x86>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a17      	ldr	r2, [pc, #92]	@ (800c10c <OC6Config+0xc0>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d00f      	beq.n	800c0d2 <OC6Config+0x86>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a16      	ldr	r2, [pc, #88]	@ (800c110 <OC6Config+0xc4>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d00b      	beq.n	800c0d2 <OC6Config+0x86>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a15      	ldr	r2, [pc, #84]	@ (800c114 <OC6Config+0xc8>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d007      	beq.n	800c0d2 <OC6Config+0x86>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a14      	ldr	r2, [pc, #80]	@ (800c118 <OC6Config+0xcc>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d003      	beq.n	800c0d2 <OC6Config+0x86>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a13      	ldr	r2, [pc, #76]	@ (800c11c <OC6Config+0xd0>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d109      	bne.n	800c0e6 <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	029b      	lsls	r3, r3, #10
 800c0e0:	431a      	orrs	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff fb6a 	bl	800b7cc <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	40012c00 	.word	0x40012c00
 800c10c:	40013400 	.word	0x40013400
 800c110:	40014000 	.word	0x40014000
 800c114:	40014400 	.word	0x40014400
 800c118:	40014800 	.word	0x40014800
 800c11c:	40015000 	.word	0x40015000

0800c120 <LL_USART_IsEnabled>:
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b01      	cmp	r3, #1
 800c132:	d101      	bne.n	800c138 <LL_USART_IsEnabled+0x18>
 800c134:	2301      	movs	r3, #1
 800c136:	e000      	b.n	800c13a <LL_USART_IsEnabled+0x1a>
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr

0800c146 <LL_USART_SetPrescaler>:
{
 800c146:	b480      	push	{r7}
 800c148:	b083      	sub	sp, #12
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c154:	f023 030f 	bic.w	r3, r3, #15
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	b292      	uxth	r2, r2
 800c15c:	431a      	orrs	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <LL_USART_SetStopBitsLength>:
{
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	431a      	orrs	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	605a      	str	r2, [r3, #4]
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <LL_USART_SetHWFlowCtrl>:
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	431a      	orrs	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	609a      	str	r2, [r3, #8]
}
 800c1ae:	bf00      	nop
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
	...

0800c1bc <LL_USART_SetBaudRate>:
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b0b      	cmp	r3, #11
 800c1ce:	d83c      	bhi.n	800c24a <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800c1d0:	6a3b      	ldr	r3, [r7, #32]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d039      	beq.n	800c24a <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1dc:	d122      	bne.n	800c224 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	4b1c      	ldr	r3, [pc, #112]	@ (800c258 <LL_USART_SetBaudRate+0x9c>)
 800c1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f0:	005a      	lsls	r2, r3, #1
 800c1f2:	6a3b      	ldr	r3, [r7, #32]
 800c1f4:	085b      	lsrs	r3, r3, #1
 800c1f6:	441a      	add	r2, r3
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800c208:	4013      	ands	r3, r2
 800c20a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	085b      	lsrs	r3, r3, #1
 800c210:	b29b      	uxth	r3, r3
 800c212:	f003 0307 	and.w	r3, r3, #7
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	4313      	orrs	r3, r2
 800c21a:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	60da      	str	r2, [r3, #12]
}
 800c222:	e012      	b.n	800c24a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	b2db      	uxtb	r3, r3
 800c228:	461a      	mov	r2, r3
 800c22a:	4b0b      	ldr	r3, [pc, #44]	@ (800c258 <LL_USART_SetBaudRate+0x9c>)
 800c22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	fbb2 f2f3 	udiv	r2, r2, r3
 800c236:	6a3b      	ldr	r3, [r7, #32]
 800c238:	085b      	lsrs	r3, r3, #1
 800c23a:	441a      	add	r2, r3
 800c23c:	6a3b      	ldr	r3, [r7, #32]
 800c23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c242:	b29b      	uxth	r3, r3
 800c244:	461a      	mov	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	60da      	str	r2, [r3, #12]
}
 800c24a:	bf00      	nop
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	08013e1c 	.word	0x08013e1c

0800c25c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af02      	add	r7, sp, #8
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c26a:	2300      	movs	r3, #0
 800c26c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7ff ff56 	bl	800c120 <LL_USART_IsEnabled>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d165      	bne.n	800c346 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	4b34      	ldr	r3, [pc, #208]	@ (800c350 <LL_USART_Init+0xf4>)
 800c280:	4013      	ands	r3, r2
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	6891      	ldr	r1, [r2, #8]
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	6912      	ldr	r2, [r2, #16]
 800c28a:	4311      	orrs	r1, r2
 800c28c:	683a      	ldr	r2, [r7, #0]
 800c28e:	6952      	ldr	r2, [r2, #20]
 800c290:	4311      	orrs	r1, r2
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	69d2      	ldr	r2, [r2, #28]
 800c296:	430a      	orrs	r2, r1
 800c298:	431a      	orrs	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f7ff ff62 	bl	800c16e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff ff6f 	bl	800c194 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a26      	ldr	r2, [pc, #152]	@ (800c354 <LL_USART_Init+0xf8>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d104      	bne.n	800c2c8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c2be:	2003      	movs	r0, #3
 800c2c0:	f7ff f82a 	bl	800b318 <LL_RCC_GetUSARTClockFreq>
 800c2c4:	60b8      	str	r0, [r7, #8]
 800c2c6:	e023      	b.n	800c310 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a23      	ldr	r2, [pc, #140]	@ (800c358 <LL_USART_Init+0xfc>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d104      	bne.n	800c2da <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c2d0:	200c      	movs	r0, #12
 800c2d2:	f7ff f821 	bl	800b318 <LL_RCC_GetUSARTClockFreq>
 800c2d6:	60b8      	str	r0, [r7, #8]
 800c2d8:	e01a      	b.n	800c310 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a1f      	ldr	r2, [pc, #124]	@ (800c35c <LL_USART_Init+0x100>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d104      	bne.n	800c2ec <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800c2e2:	2030      	movs	r0, #48	@ 0x30
 800c2e4:	f7ff f818 	bl	800b318 <LL_RCC_GetUSARTClockFreq>
 800c2e8:	60b8      	str	r0, [r7, #8]
 800c2ea:	e011      	b.n	800c310 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a1c      	ldr	r2, [pc, #112]	@ (800c360 <LL_USART_Init+0x104>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d104      	bne.n	800c2fe <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800c2f4:	20c0      	movs	r0, #192	@ 0xc0
 800c2f6:	f7ff f8d3 	bl	800b4a0 <LL_RCC_GetUARTClockFreq>
 800c2fa:	60b8      	str	r0, [r7, #8]
 800c2fc:	e008      	b.n	800c310 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a18      	ldr	r2, [pc, #96]	@ (800c364 <LL_USART_Init+0x108>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d104      	bne.n	800c310 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800c306:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800c30a:	f7ff f8c9 	bl	800b4a0 <LL_RCC_GetUARTClockFreq>
 800c30e:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d011      	beq.n	800c33a <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00d      	beq.n	800c33a <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 800c31e:	2300      	movs	r3, #0
 800c320:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	69d9      	ldr	r1, [r3, #28]
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	460b      	mov	r3, r1
 800c332:	68b9      	ldr	r1, [r7, #8]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7ff ff41 	bl	800c1bc <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff ff00 	bl	800c146 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c346:	7bfb      	ldrb	r3, [r7, #15]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	efff69f3 	.word	0xefff69f3
 800c354:	40013800 	.word	0x40013800
 800c358:	40004400 	.word	0x40004400
 800c35c:	40004800 	.word	0x40004800
 800c360:	40004c00 	.word	0x40004c00
 800c364:	40005000 	.word	0x40005000

0800c368 <Init_3D>:



// -------------- Public function implementations --------------

void Init_3D(void){
 800c368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c36a:	f6ad 5d2c 	subw	sp, sp, #3372	@ 0xd2c
 800c36e:	f44f 67b9 	mov.w	r7, #1480	@ 0x5c8
 800c372:	446f      	add	r7, sp

 	printf("lamo\r\n");
 800c374:	4894      	ldr	r0, [pc, #592]	@ (800c5c8 <Init_3D+0x260>)
 800c376:	f005 fb95 	bl	8011aa4 <puts>

 	OBJMesh tempMesh = {31};
 800c37a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c37e:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 800c382:	4618      	mov	r0, r3
 800c384:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 800c388:	461a      	mov	r2, r3
 800c38a:	2100      	movs	r1, #0
 800c38c:	f005 fd1e 	bl	8011dcc <memset>
 800c390:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c394:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 800c398:	221f      	movs	r2, #31
 800c39a:	701a      	strb	r2, [r3, #0]
	float fNear = 0.1;
 800c39c:	4b8b      	ldr	r3, [pc, #556]	@ (800c5cc <Init_3D+0x264>)
 800c39e:	f207 7254 	addw	r2, r7, #1876	@ 0x754
 800c3a2:	6013      	str	r3, [r2, #0]
	float fFar = 1000.0;
 800c3a4:	4b8a      	ldr	r3, [pc, #552]	@ (800c5d0 <Init_3D+0x268>)
 800c3a6:	f507 62ea 	add.w	r2, r7, #1872	@ 0x750
 800c3aa:	6013      	str	r3, [r2, #0]
	float fFov = 90.0;
 800c3ac:	4b89      	ldr	r3, [pc, #548]	@ (800c5d4 <Init_3D+0x26c>)
 800c3ae:	f207 724c 	addw	r2, r7, #1868	@ 0x74c
 800c3b2:	6013      	str	r3, [r2, #0]
	float fAspectRatio = (float)ILI9341_HEIGHT / (float)ILI9341_WIDTH;
 800c3b4:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 800c3b8:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 800c3bc:	6013      	str	r3, [r2, #0]


	matProj = Matrix_MakeProjection(fFov, fAspectRatio, fNear, fFar);
 800c3be:	4c86      	ldr	r4, [pc, #536]	@ (800c5d8 <Init_3D+0x270>)
 800c3c0:	463b      	mov	r3, r7
 800c3c2:	f507 62ea 	add.w	r2, r7, #1872	@ 0x750
 800c3c6:	edd2 1a00 	vldr	s3, [r2]
 800c3ca:	f207 7254 	addw	r2, r7, #1876	@ 0x754
 800c3ce:	ed92 1a00 	vldr	s2, [r2]
 800c3d2:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 800c3d6:	edd2 0a00 	vldr	s1, [r2]
 800c3da:	f207 724c 	addw	r2, r7, #1868	@ 0x74c
 800c3de:	ed92 0a00 	vldr	s0, [r2]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f002 fac8 	bl	800e978 <Matrix_MakeProjection>
 800c3e8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c3ec:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 800c3f0:	461d      	mov	r5, r3
 800c3f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	mat4x4 matRotZ = {0}, matTransl = {0}, matMult = {0};
 800c406:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c40a:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 800c40e:	4618      	mov	r0, r3
 800c410:	2340      	movs	r3, #64	@ 0x40
 800c412:	461a      	mov	r2, r3
 800c414:	2100      	movs	r1, #0
 800c416:	f005 fcd9 	bl	8011dcc <memset>
 800c41a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c41e:	f2a3 636c 	subw	r3, r3, #1644	@ 0x66c
 800c422:	4618      	mov	r0, r3
 800c424:	2340      	movs	r3, #64	@ 0x40
 800c426:	461a      	mov	r2, r3
 800c428:	2100      	movs	r1, #0
 800c42a:	f005 fccf 	bl	8011dcc <memset>
 800c42e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c432:	f2a3 63ac 	subw	r3, r3, #1708	@ 0x6ac
 800c436:	4618      	mov	r0, r3
 800c438:	2340      	movs	r3, #64	@ 0x40
 800c43a:	461a      	mov	r2, r3
 800c43c:	2100      	movs	r1, #0
 800c43e:	f005 fcc5 	bl	8011dcc <memset>
	float theta = 0;
 800c442:	f04f 0300 	mov.w	r3, #0
 800c446:	f207 725c 	addw	r2, r7, #1884	@ 0x75c
 800c44a:	6013      	str	r3, [r2, #0]


	while(true){

	analogRead();
 800c44c:	f002 fc06 	bl	800ec5c <analogRead>
	MCP3464_Radians();
 800c450:	f002 fd28 	bl	800eea4 <MCP3464_Radians>
	theta += 0.1;
 800c454:	f207 735c 	addw	r3, r7, #1884	@ 0x75c
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	f7f4 f89d 	bl	8000598 <__aeabi_f2d>
 800c45e:	a354      	add	r3, pc, #336	@ (adr r3, 800c5b0 <Init_3D+0x248>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f7f3 ff3a 	bl	80002dc <__adddf3>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4610      	mov	r0, r2
 800c46e:	4619      	mov	r1, r3
 800c470:	f7f4 fbc2 	bl	8000bf8 <__aeabi_d2f>
 800c474:	4603      	mov	r3, r0
 800c476:	f207 725c 	addw	r2, r7, #1884	@ 0x75c
 800c47a:	6013      	str	r3, [r2, #0]
									//yaw pitch roll
	matRotZ = Matrix_MakeRotationAll(-hand1_mpu.yaw * 0.01745, hand1_mpu.pitch * 0.01745 + M_PI, hand1_mpu.roll * 0.01745);
 800c47c:	4b57      	ldr	r3, [pc, #348]	@ (800c5dc <Init_3D+0x274>)
 800c47e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800c482:	eef1 7a67 	vneg.f32	s15, s15
 800c486:	ee17 3a90 	vmov	r3, s15
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7f4 f884 	bl	8000598 <__aeabi_f2d>
 800c490:	a349      	add	r3, pc, #292	@ (adr r3, 800c5b8 <Init_3D+0x250>)
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	f7f4 f8d7 	bl	8000648 <__aeabi_dmul>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4610      	mov	r0, r2
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	f7f4 fba9 	bl	8000bf8 <__aeabi_d2f>
 800c4a6:	4605      	mov	r5, r0
 800c4a8:	4b4c      	ldr	r3, [pc, #304]	@ (800c5dc <Init_3D+0x274>)
 800c4aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7f4 f873 	bl	8000598 <__aeabi_f2d>
 800c4b2:	a341      	add	r3, pc, #260	@ (adr r3, 800c5b8 <Init_3D+0x250>)
 800c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b8:	f7f4 f8c6 	bl	8000648 <__aeabi_dmul>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	a33e      	add	r3, pc, #248	@ (adr r3, 800c5c0 <Init_3D+0x258>)
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	f7f3 ff07 	bl	80002dc <__adddf3>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	f7f4 fb8f 	bl	8000bf8 <__aeabi_d2f>
 800c4da:	4606      	mov	r6, r0
 800c4dc:	4b3f      	ldr	r3, [pc, #252]	@ (800c5dc <Init_3D+0x274>)
 800c4de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7f4 f859 	bl	8000598 <__aeabi_f2d>
 800c4e6:	a334      	add	r3, pc, #208	@ (adr r3, 800c5b8 <Init_3D+0x250>)
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f4 f8ac 	bl	8000648 <__aeabi_dmul>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	f7f4 fb7e 	bl	8000bf8 <__aeabi_d2f>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c502:	f2a3 642c 	subw	r4, r3, #1580	@ 0x62c
 800c506:	463b      	mov	r3, r7
 800c508:	ee01 2a10 	vmov	s2, r2
 800c50c:	ee00 6a90 	vmov	s1, r6
 800c510:	ee00 5a10 	vmov	s0, r5
 800c514:	4618      	mov	r0, r3
 800c516:	f002 f940 	bl	800e79a <Matrix_MakeRotationAll>
 800c51a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c51e:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 800c522:	461d      	mov	r5, r3
 800c524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c52a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c52e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c530:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//printf("pitch: %f, yaw: %f, roll: %f\r\n", hand1_mpu.pitch , hand1_mpu.yaw ,  hand1_mpu.roll );
	matTransl = Matrix_MakeTranslation(-1, 0, 0.5);
 800c538:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c53c:	f2a3 646c 	subw	r4, r3, #1644	@ 0x66c
 800c540:	463b      	mov	r3, r7
 800c542:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800c546:	eddf 0a26 	vldr	s1, [pc, #152]	@ 800c5e0 <Init_3D+0x278>
 800c54a:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800c54e:	4618      	mov	r0, r3
 800c550:	f002 f9dc 	bl	800e90c <Matrix_MakeTranslation>
 800c554:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c558:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 800c55c:	461d      	mov	r5, r3
 800c55e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c56a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c56e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult = Matrix_MultiplyMatrix(&matRotZ, &matTransl);
 800c572:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c576:	f2a3 64ac 	subw	r4, r3, #1708	@ 0x6ac
 800c57a:	463b      	mov	r3, r7
 800c57c:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800c580:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 800c584:	4618      	mov	r0, r3
 800c586:	f002 fa75 	bl	800ea74 <Matrix_MultiplyMatrix>
 800c58a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c58e:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 800c592:	461d      	mov	r5, r3
 800c594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c59a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c59c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c59e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c5a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	for(int i = 0; i < DlanMesh.size; i++){
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f8c7 3758 	str.w	r3, [r7, #1880]	@ 0x758
 800c5ae:	e053      	b.n	800c658 <Init_3D+0x2f0>
 800c5b0:	9999999a 	.word	0x9999999a
 800c5b4:	3fb99999 	.word	0x3fb99999
 800c5b8:	ad42c3ca 	.word	0xad42c3ca
 800c5bc:	3f91de69 	.word	0x3f91de69
 800c5c0:	54442d18 	.word	0x54442d18
 800c5c4:	400921fb 	.word	0x400921fb
 800c5c8:	08013b00 	.word	0x08013b00
 800c5cc:	3dcccccd 	.word	0x3dcccccd
 800c5d0:	447a0000 	.word	0x447a0000
 800c5d4:	42b40000 	.word	0x42b40000
 800c5d8:	20001998 	.word	0x20001998
 800c5dc:	20001eec 	.word	0x20001eec
 800c5e0:	00000000 	.word	0x00000000

		Triangle triTranslated = {0};
 800c5e4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c5e8:	f2a3 731c 	subw	r3, r3, #1820	@ 0x71c
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	2330      	movs	r3, #48	@ 0x30
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	f005 fbea 	bl	8011dcc <memset>

		triTranslated = Matrix_MultiplyTriangle(&matMult, &DlanMesh.t[i]);
 800c5f8:	f8d7 2758 	ldr.w	r2, [r7, #1880]	@ 0x758
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	005b      	lsls	r3, r3, #1
 800c600:	4413      	add	r3, r2
 800c602:	011b      	lsls	r3, r3, #4
 800c604:	4a78      	ldr	r2, [pc, #480]	@ (800c7e8 <Init_3D+0x480>)
 800c606:	4413      	add	r3, r2
 800c608:	1d1a      	adds	r2, r3, #4
 800c60a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c60e:	f2a3 731c 	subw	r3, r3, #1820	@ 0x71c
 800c612:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 800c616:	4618      	mov	r0, r3
 800c618:	f002 f824 	bl	800e664 <Matrix_MultiplyTriangle>
		//triTranslated = Matrix_MultiplyTriangle(&matMult, &triRotatedZ);
		tempMesh.t[i] = triTranslated;
 800c61c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c620:	f2a3 51ec 	subw	r1, r3, #1516	@ 0x5ec
 800c624:	f8d7 2758 	ldr.w	r2, [r7, #1880]	@ 0x758
 800c628:	4613      	mov	r3, r2
 800c62a:	005b      	lsls	r3, r3, #1
 800c62c:	4413      	add	r3, r2
 800c62e:	011b      	lsls	r3, r3, #4
 800c630:	440b      	add	r3, r1
 800c632:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 800c636:	f2a2 721c 	subw	r2, r2, #1820	@ 0x71c
 800c63a:	1d1c      	adds	r4, r3, #4
 800c63c:	4615      	mov	r5, r2
 800c63e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c646:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c64a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int i = 0; i < DlanMesh.size; i++){
 800c64e:	f8d7 3758 	ldr.w	r3, [r7, #1880]	@ 0x758
 800c652:	3301      	adds	r3, #1
 800c654:	f8c7 3758 	str.w	r3, [r7, #1880]	@ 0x758
 800c658:	4b63      	ldr	r3, [pc, #396]	@ (800c7e8 <Init_3D+0x480>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	461a      	mov	r2, r3
 800c65e:	f8d7 3758 	ldr.w	r3, [r7, #1880]	@ 0x758
 800c662:	4293      	cmp	r3, r2
 800c664:	dbbe      	blt.n	800c5e4 <Init_3D+0x27c>

	}

	Project_And_Draw(&matProj, tempMesh);
 800c666:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c66a:	f2a3 54ec 	subw	r4, r3, #1516	@ 0x5ec
 800c66e:	4668      	mov	r0, sp
 800c670:	f104 030c 	add.w	r3, r4, #12
 800c674:	f44f 62b9 	mov.w	r2, #1480	@ 0x5c8
 800c678:	4619      	mov	r1, r3
 800c67a:	f005 fc26 	bl	8011eca <memcpy>
 800c67e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c682:	485a      	ldr	r0, [pc, #360]	@ (800c7ec <Init_3D+0x484>)
 800c684:	f000 fdb0 	bl	800d1e8 <Project_And_Draw>

	Draw_Thumb(&matMult);
 800c688:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 f8bf 	bl	800c810 <Draw_Thumb>
	Draw_Finger(&matMult, &MiddleMesh, (Vect3D){0.375+0.75, 4.0, -0.5, 1}, 1.75, 8, 7, 6);
 800c692:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c696:	f2a3 63bc 	subw	r3, r3, #1724	@ 0x6bc
 800c69a:	4a55      	ldr	r2, [pc, #340]	@ (800c7f0 <Init_3D+0x488>)
 800c69c:	461c      	mov	r4, r3
 800c69e:	4613      	mov	r3, r2
 800c6a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c6a6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c6aa:	f2a3 63bc 	subw	r3, r3, #1724	@ 0x6bc
 800c6ae:	ed93 6a00 	vldr	s12, [r3]
 800c6b2:	edd3 6a01 	vldr	s13, [r3, #4]
 800c6b6:	ed93 7a02 	vldr	s14, [r3, #8]
 800c6ba:	edd3 7a03 	vldr	s15, [r3, #12]
 800c6be:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800c6c2:	2306      	movs	r3, #6
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	2307      	movs	r3, #7
 800c6c8:	2208      	movs	r2, #8
 800c6ca:	eeb7 2a0c 	vmov.f32	s4, #124	@ 0x3fe00000  1.750
 800c6ce:	eeb0 0a46 	vmov.f32	s0, s12
 800c6d2:	eef0 0a66 	vmov.f32	s1, s13
 800c6d6:	eeb0 1a47 	vmov.f32	s2, s14
 800c6da:	eef0 1a67 	vmov.f32	s3, s15
 800c6de:	4945      	ldr	r1, [pc, #276]	@ (800c7f4 <Init_3D+0x48c>)
 800c6e0:	f000 fa36 	bl	800cb50 <Draw_Finger>
	Draw_Finger(&matMult, &FingerMesh, (Vect3D){0.375, 4.0, -0.5, 1}, 1.5, 5, 4, 3);
 800c6e4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c6e8:	f2a3 63cc 	subw	r3, r3, #1740	@ 0x6cc
 800c6ec:	4a42      	ldr	r2, [pc, #264]	@ (800c7f8 <Init_3D+0x490>)
 800c6ee:	461c      	mov	r4, r3
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c6f8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c6fc:	f2a3 63cc 	subw	r3, r3, #1740	@ 0x6cc
 800c700:	ed93 6a00 	vldr	s12, [r3]
 800c704:	edd3 6a01 	vldr	s13, [r3, #4]
 800c708:	ed93 7a02 	vldr	s14, [r3, #8]
 800c70c:	edd3 7a03 	vldr	s15, [r3, #12]
 800c710:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800c714:	2303      	movs	r3, #3
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	2304      	movs	r3, #4
 800c71a:	2205      	movs	r2, #5
 800c71c:	eeb7 2a08 	vmov.f32	s4, #120	@ 0x3fc00000  1.5
 800c720:	eeb0 0a46 	vmov.f32	s0, s12
 800c724:	eef0 0a66 	vmov.f32	s1, s13
 800c728:	eeb0 1a47 	vmov.f32	s2, s14
 800c72c:	eef0 1a67 	vmov.f32	s3, s15
 800c730:	4932      	ldr	r1, [pc, #200]	@ (800c7fc <Init_3D+0x494>)
 800c732:	f000 fa0d 	bl	800cb50 <Draw_Finger>
	Draw_Finger(&matMult, &FingerMesh, (Vect3D){0.375+0.75*2, 4.0, -0.5, 1}, 1.5, 11, 9, 10);
 800c736:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c73a:	f2a3 63dc 	subw	r3, r3, #1756	@ 0x6dc
 800c73e:	4a30      	ldr	r2, [pc, #192]	@ (800c800 <Init_3D+0x498>)
 800c740:	461c      	mov	r4, r3
 800c742:	4613      	mov	r3, r2
 800c744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c74a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c74e:	f2a3 63dc 	subw	r3, r3, #1756	@ 0x6dc
 800c752:	ed93 6a00 	vldr	s12, [r3]
 800c756:	edd3 6a01 	vldr	s13, [r3, #4]
 800c75a:	ed93 7a02 	vldr	s14, [r3, #8]
 800c75e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c762:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800c766:	230a      	movs	r3, #10
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	2309      	movs	r3, #9
 800c76c:	220b      	movs	r2, #11
 800c76e:	eeb7 2a08 	vmov.f32	s4, #120	@ 0x3fc00000  1.5
 800c772:	eeb0 0a46 	vmov.f32	s0, s12
 800c776:	eef0 0a66 	vmov.f32	s1, s13
 800c77a:	eeb0 1a47 	vmov.f32	s2, s14
 800c77e:	eef0 1a67 	vmov.f32	s3, s15
 800c782:	491e      	ldr	r1, [pc, #120]	@ (800c7fc <Init_3D+0x494>)
 800c784:	f000 f9e4 	bl	800cb50 <Draw_Finger>
	Draw_Finger(&matMult, &ThumbMesh, (Vect3D){0.375+0.75*3, 4.0, -0.5, 1}, 1.3, 14, 13, 12);
 800c788:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c78c:	f2a3 63ec 	subw	r3, r3, #1772	@ 0x6ec
 800c790:	4a1c      	ldr	r2, [pc, #112]	@ (800c804 <Init_3D+0x49c>)
 800c792:	461c      	mov	r4, r3
 800c794:	4613      	mov	r3, r2
 800c796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c79c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800c7a0:	f2a3 63ec 	subw	r3, r3, #1772	@ 0x6ec
 800c7a4:	ed93 6a00 	vldr	s12, [r3]
 800c7a8:	edd3 6a01 	vldr	s13, [r3, #4]
 800c7ac:	ed93 7a02 	vldr	s14, [r3, #8]
 800c7b0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c7b4:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800c7b8:	230c      	movs	r3, #12
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	230d      	movs	r3, #13
 800c7be:	220e      	movs	r2, #14
 800c7c0:	ed9f 2a11 	vldr	s4, [pc, #68]	@ 800c808 <Init_3D+0x4a0>
 800c7c4:	eeb0 0a46 	vmov.f32	s0, s12
 800c7c8:	eef0 0a66 	vmov.f32	s1, s13
 800c7cc:	eeb0 1a47 	vmov.f32	s2, s14
 800c7d0:	eef0 1a67 	vmov.f32	s3, s15
 800c7d4:	490d      	ldr	r1, [pc, #52]	@ (800c80c <Init_3D+0x4a4>)
 800c7d6:	f000 f9bb 	bl	800cb50 <Draw_Finger>



	HAL_Delay(30);
 800c7da:	201e      	movs	r0, #30
 800c7dc:	f7f7 fc00 	bl	8003fe0 <HAL_Delay>
	LCD_ClearScreen();
 800c7e0:	f001 fbdb 	bl	800df9a <LCD_ClearScreen>
	while(true){
 800c7e4:	e632      	b.n	800c44c <Init_3D+0xe4>
 800c7e6:	bf00      	nop
 800c7e8:	2000000c 	.word	0x2000000c
 800c7ec:	20001998 	.word	0x20001998
 800c7f0:	08013b08 	.word	0x08013b08
 800c7f4:	20000bb4 	.word	0x20000bb4
 800c7f8:	08013b18 	.word	0x08013b18
 800c7fc:	20001188 	.word	0x20001188
 800c800:	08013b28 	.word	0x08013b28
 800c804:	08013b38 	.word	0x08013b38
 800c808:	3fa66666 	.word	0x3fa66666
 800c80c:	200005e0 	.word	0x200005e0

0800c810 <Draw_Thumb>:


	printf("end\r\n");
}

void Draw_Thumb(mat4x4 *MatHand){
 800c810:	b5b0      	push	{r4, r5, r7, lr}
 800c812:	f5ad 5d9f 	sub.w	sp, sp, #5088	@ 0x13e0
 800c816:	f44f 67b9 	mov.w	r7, #1480	@ 0x5c8
 800c81a:	446f      	add	r7, sp
 800c81c:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c820:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 800c824:	6018      	str	r0, [r3, #0]
	mat4x4 TransMat, RotMat, RotMat2, matMult, matMult1, matMult2, matClen2;
	Triangle tri1, tri2;
	OBJMesh tempMesh1 = {ThumbMesh.size};
 800c826:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c82a:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 800c82e:	4618      	mov	r0, r3
 800c830:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 800c834:	461a      	mov	r2, r3
 800c836:	2100      	movs	r1, #0
 800c838:	f005 fac8 	bl	8011dcc <memset>
 800c83c:	4bbf      	ldr	r3, [pc, #764]	@ (800cb3c <Draw_Thumb+0x32c>)
 800c83e:	781a      	ldrb	r2, [r3, #0]
 800c840:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c844:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 800c848:	701a      	strb	r2, [r3, #0]
	OBJMesh tempMesh2 = {ThumbMesh.size};
 800c84a:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c84e:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 800c852:	4618      	mov	r0, r3
 800c854:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 800c858:	461a      	mov	r2, r3
 800c85a:	2100      	movs	r1, #0
 800c85c:	f005 fab6 	bl	8011dcc <memset>
 800c860:	4bb6      	ldr	r3, [pc, #728]	@ (800cb3c <Draw_Thumb+0x32c>)
 800c862:	781a      	ldrb	r2, [r3, #0]
 800c864:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c868:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 800c86c:	701a      	strb	r2, [r3, #0]

	//printf("d\r\n");

	TransMat = Matrix_MakeTranslation(-1, 2.5, -0.5);
 800c86e:	463b      	mov	r3, r7
 800c870:	eebe 1a00 	vmov.f32	s2, #224	@ 0xbf000000 -0.5
 800c874:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 800c878:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800c87c:	4618      	mov	r0, r3
 800c87e:	f002 f845 	bl	800e90c <Matrix_MakeTranslation>
 800c882:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c886:	f6a3 6318 	subw	r3, r3, #3608	@ 0xe18
 800c88a:	f607 54d4 	addw	r4, r7, #3540	@ 0xdd4
 800c88e:	461d      	mov	r5, r3
 800c890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c89a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c89c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c8a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult = Matrix_MultiplyMatrix(MatHand, &TransMat);
 800c8a4:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c8a8:	f5a3 7482 	sub.w	r4, r3, #260	@ 0x104
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	f607 52d4 	addw	r2, r7, #3540	@ 0xdd4
 800c8b2:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c8b6:	f6a3 53d4 	subw	r3, r3, #3540	@ 0xdd4
 800c8ba:	6819      	ldr	r1, [r3, #0]
 800c8bc:	f002 f8da 	bl	800ea74 <Matrix_MultiplyMatrix>
 800c8c0:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c8c4:	f6a3 6318 	subw	r3, r3, #3608	@ 0xe18
 800c8c8:	461d      	mov	r5, r3
 800c8ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c8da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RotMat = Matrix_MakeRotationX(hand.position_rad[1]);
 800c8de:	4b98      	ldr	r3, [pc, #608]	@ (800cb40 <Draw_Thumb+0x330>)
 800c8e0:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	eeb0 0a67 	vmov.f32	s0, s15
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f001 ff18 	bl	800e720 <Matrix_MakeRotationX>
 800c8f0:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c8f4:	f6a3 6318 	subw	r3, r3, #3608	@ 0xe18
 800c8f8:	f607 5494 	addw	r4, r7, #3476	@ 0xd94
 800c8fc:	461d      	mov	r5, r3
 800c8fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c90a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c90e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult1 = Matrix_MultiplyMatrix(&matMult, &RotMat);
 800c912:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c916:	f5a3 74a2 	sub.w	r4, r3, #324	@ 0x144
 800c91a:	463b      	mov	r3, r7
 800c91c:	f607 5294 	addw	r2, r7, #3476	@ 0xd94
 800c920:	f607 5114 	addw	r1, r7, #3348	@ 0xd14
 800c924:	4618      	mov	r0, r3
 800c926:	f002 f8a5 	bl	800ea74 <Matrix_MultiplyMatrix>
 800c92a:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c92e:	f6a3 6318 	subw	r3, r3, #3608	@ 0xe18
 800c932:	461d      	mov	r5, r3
 800c934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c93a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c93c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c93e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c940:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matClen2 = Matrix_MakeTranslation(0, 1.3, 0);
 800c948:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c94c:	f5a3 74e2 	sub.w	r4, r3, #452	@ 0x1c4
 800c950:	463b      	mov	r3, r7
 800c952:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 800cb44 <Draw_Thumb+0x334>
 800c956:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800cb48 <Draw_Thumb+0x338>
 800c95a:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 800cb44 <Draw_Thumb+0x334>
 800c95e:	4618      	mov	r0, r3
 800c960:	f001 ffd4 	bl	800e90c <Matrix_MakeTranslation>
 800c964:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c968:	f6a3 6318 	subw	r3, r3, #3608	@ 0xe18
 800c96c:	461d      	mov	r5, r3
 800c96e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c97a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c97e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matClen2 = Matrix_MultiplyMatrix(&matMult1, &matClen2);
 800c982:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c986:	f5a3 74e2 	sub.w	r4, r3, #452	@ 0x1c4
 800c98a:	463b      	mov	r3, r7
 800c98c:	f607 4254 	addw	r2, r7, #3156	@ 0xc54
 800c990:	f607 41d4 	addw	r1, r7, #3284	@ 0xcd4
 800c994:	4618      	mov	r0, r3
 800c996:	f002 f86d 	bl	800ea74 <Matrix_MultiplyMatrix>
 800c99a:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c99e:	f6a3 6318 	subw	r3, r3, #3608	@ 0xe18
 800c9a2:	461d      	mov	r5, r3
 800c9a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c9b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RotMat2 = Matrix_MakeRotationX(hand.position_rad[0]);
 800c9b8:	4b61      	ldr	r3, [pc, #388]	@ (800cb40 <Draw_Thumb+0x330>)
 800c9ba:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 800c9be:	463b      	mov	r3, r7
 800c9c0:	eeb0 0a67 	vmov.f32	s0, s15
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f001 feab 	bl	800e720 <Matrix_MakeRotationX>
 800c9ca:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c9ce:	f6a3 6318 	subw	r3, r3, #3608	@ 0xe18
 800c9d2:	f607 5454 	addw	r4, r7, #3412	@ 0xd54
 800c9d6:	461d      	mov	r5, r3
 800c9d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c9e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult2 = Matrix_MultiplyMatrix(&matClen2, &RotMat2);
 800c9ec:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800c9f0:	f5a3 74c2 	sub.w	r4, r3, #388	@ 0x184
 800c9f4:	463b      	mov	r3, r7
 800c9f6:	f607 5254 	addw	r2, r7, #3412	@ 0xd54
 800c9fa:	f607 4154 	addw	r1, r7, #3156	@ 0xc54
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f002 f838 	bl	800ea74 <Matrix_MultiplyMatrix>
 800ca04:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800ca08:	f6a3 6318 	subw	r3, r3, #3608	@ 0xe18
 800ca0c:	461d      	mov	r5, r3
 800ca0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ca1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}



	for(int i = 0; i < ThumbMesh.size; i++){
 800ca22:	2300      	movs	r3, #0
 800ca24:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
 800ca28:	e05a      	b.n	800cae0 <Draw_Thumb+0x2d0>

		tri1 = Matrix_MultiplyTriangle(&matMult1, &ThumbMesh.t[i]);
 800ca2a:	f8d7 2e14 	ldr.w	r2, [r7, #3604]	@ 0xe14
 800ca2e:	4613      	mov	r3, r2
 800ca30:	005b      	lsls	r3, r3, #1
 800ca32:	4413      	add	r3, r2
 800ca34:	011b      	lsls	r3, r3, #4
 800ca36:	4a41      	ldr	r2, [pc, #260]	@ (800cb3c <Draw_Thumb+0x32c>)
 800ca38:	4413      	add	r3, r2
 800ca3a:	1d1a      	adds	r2, r3, #4
 800ca3c:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800ca40:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800ca44:	f607 41d4 	addw	r1, r7, #3284	@ 0xcd4
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f001 fe0b 	bl	800e664 <Matrix_MultiplyTriangle>
		tri2 = Matrix_MultiplyTriangle(&matMult2, &ThumbMesh.t[i]);
 800ca4e:	f8d7 2e14 	ldr.w	r2, [r7, #3604]	@ 0xe14
 800ca52:	4613      	mov	r3, r2
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	4413      	add	r3, r2
 800ca58:	011b      	lsls	r3, r3, #4
 800ca5a:	4a38      	ldr	r2, [pc, #224]	@ (800cb3c <Draw_Thumb+0x32c>)
 800ca5c:	4413      	add	r3, r2
 800ca5e:	1d1a      	adds	r2, r3, #4
 800ca60:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800ca64:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800ca68:	f607 4194 	addw	r1, r7, #3220	@ 0xc94
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f001 fdf9 	bl	800e664 <Matrix_MultiplyTriangle>

		tempMesh1.t[i] = tri1;
 800ca72:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800ca76:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 800ca7a:	f8d7 2e14 	ldr.w	r2, [r7, #3604]	@ 0xe14
 800ca7e:	4613      	mov	r3, r2
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	4413      	add	r3, r2
 800ca84:	011b      	lsls	r3, r3, #4
 800ca86:	440b      	add	r3, r1
 800ca88:	f607 6218 	addw	r2, r7, #3608	@ 0xe18
 800ca8c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800ca90:	1d1c      	adds	r4, r3, #4
 800ca92:	4615      	mov	r5, r2
 800ca94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800caa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		tempMesh2.t[i] = tri2;
 800caa4:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800caa8:	f6a3 51cc 	subw	r1, r3, #3532	@ 0xdcc
 800caac:	f8d7 2e14 	ldr.w	r2, [r7, #3604]	@ 0xe14
 800cab0:	4613      	mov	r3, r2
 800cab2:	005b      	lsls	r3, r3, #1
 800cab4:	4413      	add	r3, r2
 800cab6:	011b      	lsls	r3, r3, #4
 800cab8:	440b      	add	r3, r1
 800caba:	f607 6218 	addw	r2, r7, #3608	@ 0xe18
 800cabe:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 800cac2:	1d1c      	adds	r4, r3, #4
 800cac4:	4615      	mov	r5, r2
 800cac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800caca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cacc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cace:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cad2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int i = 0; i < ThumbMesh.size; i++){
 800cad6:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 800cada:	3301      	adds	r3, #1
 800cadc:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
 800cae0:	4b16      	ldr	r3, [pc, #88]	@ (800cb3c <Draw_Thumb+0x32c>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	461a      	mov	r2, r3
 800cae6:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 800caea:	4293      	cmp	r3, r2
 800caec:	db9d      	blt.n	800ca2a <Draw_Thumb+0x21a>
	}

	Project_And_Draw(&matProj, tempMesh1);
 800caee:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800caf2:	f5a3 64ff 	sub.w	r4, r3, #2040	@ 0x7f8
 800caf6:	4668      	mov	r0, sp
 800caf8:	f104 030c 	add.w	r3, r4, #12
 800cafc:	f44f 62b9 	mov.w	r2, #1480	@ 0x5c8
 800cb00:	4619      	mov	r1, r3
 800cb02:	f005 f9e2 	bl	8011eca <memcpy>
 800cb06:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cb0a:	4810      	ldr	r0, [pc, #64]	@ (800cb4c <Draw_Thumb+0x33c>)
 800cb0c:	f000 fb6c 	bl	800d1e8 <Project_And_Draw>
	Project_And_Draw(&matProj, tempMesh2);
 800cb10:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800cb14:	f6a3 54cc 	subw	r4, r3, #3532	@ 0xdcc
 800cb18:	4668      	mov	r0, sp
 800cb1a:	f104 030c 	add.w	r3, r4, #12
 800cb1e:	f44f 62b9 	mov.w	r2, #1480	@ 0x5c8
 800cb22:	4619      	mov	r1, r3
 800cb24:	f005 f9d1 	bl	8011eca <memcpy>
 800cb28:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cb2c:	4807      	ldr	r0, [pc, #28]	@ (800cb4c <Draw_Thumb+0x33c>)
 800cb2e:	f000 fb5b 	bl	800d1e8 <Project_And_Draw>
}
 800cb32:	bf00      	nop
 800cb34:	f607 6718 	addw	r7, r7, #3608	@ 0xe18
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bdb0      	pop	{r4, r5, r7, pc}
 800cb3c:	200005e0 	.word	0x200005e0
 800cb40:	200022d8 	.word	0x200022d8
 800cb44:	00000000 	.word	0x00000000
 800cb48:	3fa66666 	.word	0x3fa66666
 800cb4c:	20001998 	.word	0x20001998

0800cb50 <Draw_Finger>:


void Draw_Finger(mat4x4 *MatHand, OBJMesh *Mesh, Vect3D tipPos, float tip_length, uint8_t adc1, uint8_t adc2, uint8_t adc3){
 800cb50:	b5b0      	push	{r4, r5, r7, lr}
 800cb52:	f5ad 5dcd 	sub.w	sp, sp, #6560	@ 0x19a0
 800cb56:	b086      	sub	sp, #24
 800cb58:	f44f 67b9 	mov.w	r7, #1480	@ 0x5c8
 800cb5c:	446f      	add	r7, sp
 800cb5e:	f507 747c 	add.w	r4, r7, #1008	@ 0x3f0
 800cb62:	f5a4 7465 	sub.w	r4, r4, #916	@ 0x394
 800cb66:	6020      	str	r0, [r4, #0]
 800cb68:	f507 707c 	add.w	r0, r7, #1008	@ 0x3f0
 800cb6c:	f5a0 7066 	sub.w	r0, r0, #920	@ 0x398
 800cb70:	6001      	str	r1, [r0, #0]
 800cb72:	eeb0 6a40 	vmov.f32	s12, s0
 800cb76:	eef0 6a60 	vmov.f32	s13, s1
 800cb7a:	eeb0 7a41 	vmov.f32	s14, s2
 800cb7e:	eef0 7a61 	vmov.f32	s15, s3
 800cb82:	f507 717c 	add.w	r1, r7, #1008	@ 0x3f0
 800cb86:	f5a1 716a 	sub.w	r1, r1, #936	@ 0x3a8
 800cb8a:	f507 707c 	add.w	r0, r7, #1008	@ 0x3f0
 800cb8e:	f5a0 706b 	sub.w	r0, r0, #940	@ 0x3ac
 800cb92:	ed80 2a00 	vstr	s4, [r0]
 800cb96:	4618      	mov	r0, r3
 800cb98:	ed81 6a00 	vstr	s12, [r1]
 800cb9c:	edc1 6a01 	vstr	s13, [r1, #4]
 800cba0:	ed81 7a02 	vstr	s14, [r1, #8]
 800cba4:	edc1 7a03 	vstr	s15, [r1, #12]
 800cba8:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cbac:	f2a3 33ad 	subw	r3, r3, #941	@ 0x3ad
 800cbb0:	701a      	strb	r2, [r3, #0]
 800cbb2:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cbb6:	f2a3 33ae 	subw	r3, r3, #942	@ 0x3ae
 800cbba:	4602      	mov	r2, r0
 800cbbc:	701a      	strb	r2, [r3, #0]
	mat4x4 matTrans, RotMat, matMult, matMult1, matMult2, matMult3;
	Triangle tri1, tri2, tri3;
	OBJMesh tempMesh1 = {Mesh->size};
 800cbbe:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800cbc2:	f103 0310 	add.w	r3, r3, #16
 800cbc6:	f5a3 63fd 	sub.w	r3, r3, #2024	@ 0x7e8
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	f005 f8fa 	bl	8011dcc <memset>
 800cbd8:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cbdc:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	781a      	ldrb	r2, [r3, #0]
 800cbe4:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800cbe8:	f103 0310 	add.w	r3, r3, #16
 800cbec:	f5a3 63fd 	sub.w	r3, r3, #2024	@ 0x7e8
 800cbf0:	701a      	strb	r2, [r3, #0]
	OBJMesh tempMesh2 = {Mesh->size};
 800cbf2:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800cbf6:	f103 0310 	add.w	r3, r3, #16
 800cbfa:	f6a3 53bc 	subw	r3, r3, #3516	@ 0xdbc
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 800cc04:	461a      	mov	r2, r3
 800cc06:	2100      	movs	r1, #0
 800cc08:	f005 f8e0 	bl	8011dcc <memset>
 800cc0c:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cc10:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	781a      	ldrb	r2, [r3, #0]
 800cc18:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800cc1c:	f103 0310 	add.w	r3, r3, #16
 800cc20:	f6a3 53bc 	subw	r3, r3, #3516	@ 0xdbc
 800cc24:	701a      	strb	r2, [r3, #0]
	OBJMesh tempMesh3 = {Mesh->size};
 800cc26:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cc2a:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 800cc34:	461a      	mov	r2, r3
 800cc36:	2100      	movs	r1, #0
 800cc38:	f005 f8c8 	bl	8011dcc <memset>
 800cc3c:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cc40:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	781a      	ldrb	r2, [r3, #0]
 800cc48:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cc4c:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 800cc50:	701a      	strb	r2, [r3, #0]

	//printf("d\r\n");

	matTrans = Matrix_MakeTranslation(tipPos.x, tipPos.y, tipPos.z);
 800cc52:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cc56:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800cc5a:	edd3 7a00 	vldr	s15, [r3]
 800cc5e:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cc62:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800cc66:	ed93 7a01 	vldr	s14, [r3, #4]
 800cc6a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cc6e:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800cc72:	edd3 6a02 	vldr	s13, [r3, #8]
 800cc76:	f107 0310 	add.w	r3, r7, #16
 800cc7a:	3b10      	subs	r3, #16
 800cc7c:	eeb0 1a66 	vmov.f32	s2, s13
 800cc80:	eef0 0a47 	vmov.f32	s1, s14
 800cc84:	eeb0 0a67 	vmov.f32	s0, s15
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f001 fe3f 	bl	800e90c <Matrix_MakeTranslation>
 800cc8e:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cc92:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800cc96:	f507 549d 	add.w	r4, r7, #5024	@ 0x13a0
 800cc9a:	f104 040c 	add.w	r4, r4, #12
 800cc9e:	461d      	mov	r5, r3
 800cca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ccb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult = Matrix_MultiplyMatrix(MatHand, &matTrans);
 800ccb4:	f107 0310 	add.w	r3, r7, #16
 800ccb8:	3b10      	subs	r3, #16
 800ccba:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 800ccbe:	f102 020c 	add.w	r2, r2, #12
 800ccc2:	f507 717c 	add.w	r1, r7, #1008	@ 0x3f0
 800ccc6:	f5a1 7165 	sub.w	r1, r1, #916	@ 0x394
 800ccca:	6809      	ldr	r1, [r1, #0]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f001 fed1 	bl	800ea74 <Matrix_MultiplyMatrix>
 800ccd2:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800ccd6:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800ccda:	f507 5499 	add.w	r4, r7, #4896	@ 0x1320
 800ccde:	f104 040c 	add.w	r4, r4, #12
 800cce2:	461d      	mov	r5, r3
 800cce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ccf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RotMat = Matrix_MakeRotationX(hand.position_rad[adc1]);
 800ccf8:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800ccfc:	f2a3 33ad 	subw	r3, r3, #941	@ 0x3ad
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	4ab1      	ldr	r2, [pc, #708]	@ (800cfc8 <Draw_Finger+0x478>)
 800cd04:	3328      	adds	r3, #40	@ 0x28
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	edd3 7a00 	vldr	s15, [r3]
 800cd0e:	f107 0310 	add.w	r3, r7, #16
 800cd12:	3b10      	subs	r3, #16
 800cd14:	eeb0 0a67 	vmov.f32	s0, s15
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f001 fd01 	bl	800e720 <Matrix_MakeRotationX>
 800cd1e:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cd22:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800cd26:	f507 549b 	add.w	r4, r7, #4960	@ 0x1360
 800cd2a:	f104 040c 	add.w	r4, r4, #12
 800cd2e:	461d      	mov	r5, r3
 800cd30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cd40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult1 = Matrix_MultiplyMatrix(&matMult, &RotMat);
 800cd44:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800cd48:	f103 0310 	add.w	r3, r3, #16
 800cd4c:	f5a3 7482 	sub.w	r4, r3, #260	@ 0x104
 800cd50:	f107 0310 	add.w	r3, r7, #16
 800cd54:	3b10      	subs	r3, #16
 800cd56:	f507 529b 	add.w	r2, r7, #4960	@ 0x1360
 800cd5a:	f102 020c 	add.w	r2, r2, #12
 800cd5e:	f507 5199 	add.w	r1, r7, #4896	@ 0x1320
 800cd62:	f101 010c 	add.w	r1, r1, #12
 800cd66:	4618      	mov	r0, r3
 800cd68:	f001 fe84 	bl	800ea74 <Matrix_MultiplyMatrix>
 800cd6c:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cd70:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800cd74:	461d      	mov	r5, r3
 800cd76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cd86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	matTrans = Matrix_MakeTranslation(0, tip_length, 0);
 800cd8a:	f107 0310 	add.w	r3, r7, #16
 800cd8e:	3b10      	subs	r3, #16
 800cd90:	f507 727c 	add.w	r2, r7, #1008	@ 0x3f0
 800cd94:	f5a2 726b 	sub.w	r2, r2, #940	@ 0x3ac
 800cd98:	ed9f 1a8c 	vldr	s2, [pc, #560]	@ 800cfcc <Draw_Finger+0x47c>
 800cd9c:	edd2 0a00 	vldr	s1, [r2]
 800cda0:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 800cfcc <Draw_Finger+0x47c>
 800cda4:	4618      	mov	r0, r3
 800cda6:	f001 fdb1 	bl	800e90c <Matrix_MakeTranslation>
 800cdaa:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cdae:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800cdb2:	f507 549d 	add.w	r4, r7, #5024	@ 0x13a0
 800cdb6:	f104 040c 	add.w	r4, r4, #12
 800cdba:	461d      	mov	r5, r3
 800cdbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cdcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult = Matrix_MultiplyMatrix(&matMult1, &matTrans);
 800cdd0:	f107 0310 	add.w	r3, r7, #16
 800cdd4:	3b10      	subs	r3, #16
 800cdd6:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 800cdda:	f102 020c 	add.w	r2, r2, #12
 800cdde:	f507 5197 	add.w	r1, r7, #4832	@ 0x12e0
 800cde2:	f101 010c 	add.w	r1, r1, #12
 800cde6:	4618      	mov	r0, r3
 800cde8:	f001 fe44 	bl	800ea74 <Matrix_MultiplyMatrix>
 800cdec:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cdf0:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800cdf4:	f507 5499 	add.w	r4, r7, #4896	@ 0x1320
 800cdf8:	f104 040c 	add.w	r4, r4, #12
 800cdfc:	461d      	mov	r5, r3
 800cdfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ce0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RotMat = Matrix_MakeRotationX(hand.position_rad[adc2]);
 800ce12:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800ce16:	f2a3 33ae 	subw	r3, r3, #942	@ 0x3ae
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	4a6a      	ldr	r2, [pc, #424]	@ (800cfc8 <Draw_Finger+0x478>)
 800ce1e:	3328      	adds	r3, #40	@ 0x28
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	edd3 7a00 	vldr	s15, [r3]
 800ce28:	f107 0310 	add.w	r3, r7, #16
 800ce2c:	3b10      	subs	r3, #16
 800ce2e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce32:	4618      	mov	r0, r3
 800ce34:	f001 fc74 	bl	800e720 <Matrix_MakeRotationX>
 800ce38:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800ce3c:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800ce40:	f507 549b 	add.w	r4, r7, #4960	@ 0x1360
 800ce44:	f104 040c 	add.w	r4, r4, #12
 800ce48:	461d      	mov	r5, r3
 800ce4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ce5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult2 = Matrix_MultiplyMatrix(&matMult, &RotMat);
 800ce5e:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800ce62:	f103 0310 	add.w	r3, r3, #16
 800ce66:	f5a3 74a2 	sub.w	r4, r3, #324	@ 0x144
 800ce6a:	f107 0310 	add.w	r3, r7, #16
 800ce6e:	3b10      	subs	r3, #16
 800ce70:	f507 529b 	add.w	r2, r7, #4960	@ 0x1360
 800ce74:	f102 020c 	add.w	r2, r2, #12
 800ce78:	f507 5199 	add.w	r1, r7, #4896	@ 0x1320
 800ce7c:	f101 010c 	add.w	r1, r1, #12
 800ce80:	4618      	mov	r0, r3
 800ce82:	f001 fdf7 	bl	800ea74 <Matrix_MultiplyMatrix>
 800ce86:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800ce8a:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800ce8e:	461d      	mov	r5, r3
 800ce90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	matTrans = Matrix_MakeTranslation(0, tip_length, 0);
 800cea4:	f107 0310 	add.w	r3, r7, #16
 800cea8:	3b10      	subs	r3, #16
 800ceaa:	f507 727c 	add.w	r2, r7, #1008	@ 0x3f0
 800ceae:	f5a2 726b 	sub.w	r2, r2, #940	@ 0x3ac
 800ceb2:	ed9f 1a46 	vldr	s2, [pc, #280]	@ 800cfcc <Draw_Finger+0x47c>
 800ceb6:	edd2 0a00 	vldr	s1, [r2]
 800ceba:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 800cfcc <Draw_Finger+0x47c>
 800cebe:	4618      	mov	r0, r3
 800cec0:	f001 fd24 	bl	800e90c <Matrix_MakeTranslation>
 800cec4:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cec8:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800cecc:	f507 549d 	add.w	r4, r7, #5024	@ 0x13a0
 800ced0:	f104 040c 	add.w	r4, r4, #12
 800ced4:	461d      	mov	r5, r3
 800ced6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ced8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ceda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cedc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cee2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cee6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult = Matrix_MultiplyMatrix(&matMult2, &matTrans);
 800ceea:	f107 0310 	add.w	r3, r7, #16
 800ceee:	3b10      	subs	r3, #16
 800cef0:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 800cef4:	f102 020c 	add.w	r2, r2, #12
 800cef8:	f507 5195 	add.w	r1, r7, #4768	@ 0x12a0
 800cefc:	f101 010c 	add.w	r1, r1, #12
 800cf00:	4618      	mov	r0, r3
 800cf02:	f001 fdb7 	bl	800ea74 <Matrix_MultiplyMatrix>
 800cf06:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cf0a:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800cf0e:	f507 5499 	add.w	r4, r7, #4896	@ 0x1320
 800cf12:	f104 040c 	add.w	r4, r4, #12
 800cf16:	461d      	mov	r5, r3
 800cf18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cf28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RotMat = Matrix_MakeRotationX(hand.position_rad[adc3]);
 800cf2c:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	4a25      	ldr	r2, [pc, #148]	@ (800cfc8 <Draw_Finger+0x478>)
 800cf34:	3328      	adds	r3, #40	@ 0x28
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	edd3 7a00 	vldr	s15, [r3]
 800cf3e:	f107 0310 	add.w	r3, r7, #16
 800cf42:	3b10      	subs	r3, #16
 800cf44:	eeb0 0a67 	vmov.f32	s0, s15
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f001 fbe9 	bl	800e720 <Matrix_MakeRotationX>
 800cf4e:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cf52:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800cf56:	f507 549b 	add.w	r4, r7, #4960	@ 0x1360
 800cf5a:	f104 040c 	add.w	r4, r4, #12
 800cf5e:	461d      	mov	r5, r3
 800cf60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cf70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	matMult3 = Matrix_MultiplyMatrix(&matMult, &RotMat);
 800cf74:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800cf78:	f103 0310 	add.w	r3, r3, #16
 800cf7c:	f5a3 74c2 	sub.w	r4, r3, #388	@ 0x184
 800cf80:	f107 0310 	add.w	r3, r7, #16
 800cf84:	3b10      	subs	r3, #16
 800cf86:	f507 529b 	add.w	r2, r7, #4960	@ 0x1360
 800cf8a:	f102 020c 	add.w	r2, r2, #12
 800cf8e:	f507 5199 	add.w	r1, r7, #4896	@ 0x1320
 800cf92:	f101 010c 	add.w	r1, r1, #12
 800cf96:	4618      	mov	r0, r3
 800cf98:	f001 fd6c 	bl	800ea74 <Matrix_MultiplyMatrix>
 800cf9c:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cfa0:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800cfa4:	461d      	mov	r5, r3
 800cfa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cfb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}



	for(int i = 0; i < ThumbMesh.size; i++){
 800cfba:	2300      	movs	r3, #0
 800cfbc:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 800cfc0:	f102 020c 	add.w	r2, r2, #12
 800cfc4:	6013      	str	r3, [r2, #0]
 800cfc6:	e0c3      	b.n	800d150 <Draw_Finger+0x600>
 800cfc8:	200022d8 	.word	0x200022d8
 800cfcc:	00000000 	.word	0x00000000

		tri1 = Matrix_MultiplyTriangle(&matMult1, &Mesh->t[i]);
 800cfd0:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800cfd4:	f5a3 7166 	sub.w	r1, r3, #920	@ 0x398
 800cfd8:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800cfdc:	f103 030c 	add.w	r3, r3, #12
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	4413      	add	r3, r2
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	680a      	ldr	r2, [r1, #0]
 800cfec:	4413      	add	r3, r2
 800cfee:	1d1a      	adds	r2, r3, #4
 800cff0:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800cff4:	f103 0310 	add.w	r3, r3, #16
 800cff8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800cffc:	f507 5197 	add.w	r1, r7, #4832	@ 0x12e0
 800d000:	f101 010c 	add.w	r1, r1, #12
 800d004:	4618      	mov	r0, r3
 800d006:	f001 fb2d 	bl	800e664 <Matrix_MultiplyTriangle>
		tri2 = Matrix_MultiplyTriangle(&matMult2, &Mesh->t[i]);
 800d00a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800d00e:	f5a3 7166 	sub.w	r1, r3, #920	@ 0x398
 800d012:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d016:	f103 030c 	add.w	r3, r3, #12
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	4613      	mov	r3, r2
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	4413      	add	r3, r2
 800d022:	011b      	lsls	r3, r3, #4
 800d024:	680a      	ldr	r2, [r1, #0]
 800d026:	4413      	add	r3, r2
 800d028:	1d1a      	adds	r2, r3, #4
 800d02a:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d02e:	f103 0310 	add.w	r3, r3, #16
 800d032:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800d036:	f507 5195 	add.w	r1, r7, #4768	@ 0x12a0
 800d03a:	f101 010c 	add.w	r1, r1, #12
 800d03e:	4618      	mov	r0, r3
 800d040:	f001 fb10 	bl	800e664 <Matrix_MultiplyTriangle>
		tri3 = Matrix_MultiplyTriangle(&matMult3, &Mesh->t[i]);
 800d044:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800d048:	f5a3 7166 	sub.w	r1, r3, #920	@ 0x398
 800d04c:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d050:	f103 030c 	add.w	r3, r3, #12
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	4613      	mov	r3, r2
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	4413      	add	r3, r2
 800d05c:	011b      	lsls	r3, r3, #4
 800d05e:	680a      	ldr	r2, [r1, #0]
 800d060:	4413      	add	r3, r2
 800d062:	1d1a      	adds	r2, r3, #4
 800d064:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d068:	f103 0310 	add.w	r3, r3, #16
 800d06c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800d070:	f507 5193 	add.w	r1, r7, #4704	@ 0x1260
 800d074:	f101 010c 	add.w	r1, r1, #12
 800d078:	4618      	mov	r0, r3
 800d07a:	f001 faf3 	bl	800e664 <Matrix_MultiplyTriangle>

		tempMesh1.t[i] = tri1;
 800d07e:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d082:	f103 0310 	add.w	r3, r3, #16
 800d086:	f5a3 61fd 	sub.w	r1, r3, #2024	@ 0x7e8
 800d08a:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d08e:	f103 030c 	add.w	r3, r3, #12
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	4613      	mov	r3, r2
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	4413      	add	r3, r2
 800d09a:	011b      	lsls	r3, r3, #4
 800d09c:	440b      	add	r3, r1
 800d09e:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 800d0a2:	f102 0210 	add.w	r2, r2, #16
 800d0a6:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 800d0aa:	1d1c      	adds	r4, r3, #4
 800d0ac:	4615      	mov	r5, r2
 800d0ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d0ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		tempMesh2.t[i] = tri2;
 800d0be:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d0c2:	f103 0310 	add.w	r3, r3, #16
 800d0c6:	f6a3 51bc 	subw	r1, r3, #3516	@ 0xdbc
 800d0ca:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d0ce:	f103 030c 	add.w	r3, r3, #12
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	4413      	add	r3, r2
 800d0da:	011b      	lsls	r3, r3, #4
 800d0dc:	440b      	add	r3, r1
 800d0de:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 800d0e2:	f102 0210 	add.w	r2, r2, #16
 800d0e6:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 800d0ea:	1d1c      	adds	r4, r3, #4
 800d0ec:	4615      	mov	r5, r2
 800d0ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d0fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		tempMesh3.t[i] = tri3;
 800d0fe:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800d102:	f5a3 7164 	sub.w	r1, r3, #912	@ 0x390
 800d106:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d10a:	f103 030c 	add.w	r3, r3, #12
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	4613      	mov	r3, r2
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	4413      	add	r3, r2
 800d116:	011b      	lsls	r3, r3, #4
 800d118:	440b      	add	r3, r1
 800d11a:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 800d11e:	f102 0210 	add.w	r2, r2, #16
 800d122:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 800d126:	1d1c      	adds	r4, r3, #4
 800d128:	4615      	mov	r5, r2
 800d12a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d12c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d12e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d132:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d136:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int i = 0; i < ThumbMesh.size; i++){
 800d13a:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d13e:	f103 030c 	add.w	r3, r3, #12
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	3301      	adds	r3, #1
 800d146:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 800d14a:	f102 020c 	add.w	r2, r2, #12
 800d14e:	6013      	str	r3, [r2, #0]
 800d150:	4b23      	ldr	r3, [pc, #140]	@ (800d1e0 <Draw_Finger+0x690>)
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	461a      	mov	r2, r3
 800d156:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d15a:	f103 030c 	add.w	r3, r3, #12
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4293      	cmp	r3, r2
 800d162:	f6ff af35 	blt.w	800cfd0 <Draw_Finger+0x480>
	}

	Project_And_Draw(&matProj, tempMesh1);
 800d166:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d16a:	f103 0310 	add.w	r3, r3, #16
 800d16e:	f5a3 64fd 	sub.w	r4, r3, #2024	@ 0x7e8
 800d172:	4668      	mov	r0, sp
 800d174:	f104 030c 	add.w	r3, r4, #12
 800d178:	f44f 62b9 	mov.w	r2, #1480	@ 0x5c8
 800d17c:	4619      	mov	r1, r3
 800d17e:	f004 fea4 	bl	8011eca <memcpy>
 800d182:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d186:	4817      	ldr	r0, [pc, #92]	@ (800d1e4 <Draw_Finger+0x694>)
 800d188:	f000 f82e 	bl	800d1e8 <Project_And_Draw>
	Project_And_Draw(&matProj, tempMesh2);
 800d18c:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800d190:	f103 0310 	add.w	r3, r3, #16
 800d194:	f6a3 54bc 	subw	r4, r3, #3516	@ 0xdbc
 800d198:	4668      	mov	r0, sp
 800d19a:	f104 030c 	add.w	r3, r4, #12
 800d19e:	f44f 62b9 	mov.w	r2, #1480	@ 0x5c8
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	f004 fe91 	bl	8011eca <memcpy>
 800d1a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d1ac:	480d      	ldr	r0, [pc, #52]	@ (800d1e4 <Draw_Finger+0x694>)
 800d1ae:	f000 f81b 	bl	800d1e8 <Project_And_Draw>
	Project_And_Draw(&matProj, tempMesh3);
 800d1b2:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800d1b6:	f5a3 7464 	sub.w	r4, r3, #912	@ 0x390
 800d1ba:	4668      	mov	r0, sp
 800d1bc:	f104 030c 	add.w	r3, r4, #12
 800d1c0:	f44f 62b9 	mov.w	r2, #1480	@ 0x5c8
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	f004 fe80 	bl	8011eca <memcpy>
 800d1ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d1ce:	4805      	ldr	r0, [pc, #20]	@ (800d1e4 <Draw_Finger+0x694>)
 800d1d0:	f000 f80a 	bl	800d1e8 <Project_And_Draw>
}
 800d1d4:	bf00      	nop
 800d1d6:	f507 579f 	add.w	r7, r7, #5088	@ 0x13e0
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bdb0      	pop	{r4, r5, r7, pc}
 800d1e0:	200005e0 	.word	0x200005e0
 800d1e4:	20001998 	.word	0x20001998

0800d1e8 <Project_And_Draw>:

void Project_And_Draw(mat4x4 *matProj, OBJMesh Mesh){
 800d1e8:	b084      	sub	sp, #16
 800d1ea:	b5b0      	push	{r4, r5, r7, lr}
 800d1ec:	f6ad 3dd8 	subw	sp, sp, #3032	@ 0xbd8
 800d1f0:	f44f 67b9 	mov.w	r7, #1480	@ 0x5c8
 800d1f4:	446f      	add	r7, sp
 800d1f6:	f507 64c2 	add.w	r4, r7, #1552	@ 0x610
 800d1fa:	f2a4 640c 	subw	r4, r4, #1548	@ 0x60c
 800d1fe:	6020      	str	r0, [r4, #0]
 800d200:	f207 6024 	addw	r0, r7, #1572	@ 0x624
 800d204:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	OBJMesh outMesh = {Mesh.size};
 800d208:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d20c:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 800d210:	4618      	mov	r0, r3
 800d212:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 800d216:	461a      	mov	r2, r3
 800d218:	2100      	movs	r1, #0
 800d21a:	f004 fdd7 	bl	8011dcc <memset>
 800d21e:	f897 2624 	ldrb.w	r2, [r7, #1572]	@ 0x624
 800d222:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d226:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 800d22a:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < Mesh.size; i++){
 800d22c:	2300      	movs	r3, #0
 800d22e:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 800d232:	e1e5      	b.n	800d600 <Project_And_Draw+0x418>
	Triangle triProjected = {0};
 800d234:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d238:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d23c:	4618      	mov	r0, r3
 800d23e:	2330      	movs	r3, #48	@ 0x30
 800d240:	461a      	mov	r2, r3
 800d242:	2100      	movs	r1, #0
 800d244:	f004 fdc2 	bl	8011dcc <memset>
//	printf("d\r\n");

	//triProjected = Matrix_MultiplyTriangle(matProj, &Mesh.t[i]);
	//printf("mesh x: %f, y: %f, z: %f, w: %f\r\n", Mesh.t[i].v[0].x, Mesh.t[i].v[0].y, Mesh.t[i].v[0].z, Mesh.t[i].v[0].w);

	Mesh.t[i].v[0].z = Mesh.t[i].v[0].z + 20.0;
 800d248:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d24c:	4613      	mov	r3, r2
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	4413      	add	r3, r2
 800d252:	011b      	lsls	r3, r3, #4
 800d254:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 800d258:	443b      	add	r3, r7
 800d25a:	3310      	adds	r3, #16
 800d25c:	edd3 7a00 	vldr	s15, [r3]
 800d260:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800d264:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d268:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d26c:	4613      	mov	r3, r2
 800d26e:	005b      	lsls	r3, r3, #1
 800d270:	4413      	add	r3, r2
 800d272:	011b      	lsls	r3, r3, #4
 800d274:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 800d278:	443b      	add	r3, r7
 800d27a:	3310      	adds	r3, #16
 800d27c:	edc3 7a00 	vstr	s15, [r3]
	Mesh.t[i].v[1].z = Mesh.t[i].v[1].z + 20.0;
 800d280:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d284:	4613      	mov	r3, r2
 800d286:	005b      	lsls	r3, r3, #1
 800d288:	4413      	add	r3, r2
 800d28a:	011b      	lsls	r3, r3, #4
 800d28c:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 800d290:	443b      	add	r3, r7
 800d292:	3320      	adds	r3, #32
 800d294:	edd3 7a00 	vldr	s15, [r3]
 800d298:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800d29c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2a0:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	005b      	lsls	r3, r3, #1
 800d2a8:	4413      	add	r3, r2
 800d2aa:	011b      	lsls	r3, r3, #4
 800d2ac:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 800d2b0:	443b      	add	r3, r7
 800d2b2:	3320      	adds	r3, #32
 800d2b4:	edc3 7a00 	vstr	s15, [r3]
	Mesh.t[i].v[2].z = Mesh.t[i].v[2].z + 20.0;
 800d2b8:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d2bc:	4613      	mov	r3, r2
 800d2be:	005b      	lsls	r3, r3, #1
 800d2c0:	4413      	add	r3, r2
 800d2c2:	011b      	lsls	r3, r3, #4
 800d2c4:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 800d2c8:	443b      	add	r3, r7
 800d2ca:	3330      	adds	r3, #48	@ 0x30
 800d2cc:	edd3 7a00 	vldr	s15, [r3]
 800d2d0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800d2d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2d8:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d2dc:	4613      	mov	r3, r2
 800d2de:	005b      	lsls	r3, r3, #1
 800d2e0:	4413      	add	r3, r2
 800d2e2:	011b      	lsls	r3, r3, #4
 800d2e4:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 800d2e8:	443b      	add	r3, r7
 800d2ea:	3330      	adds	r3, #48	@ 0x30
 800d2ec:	edc3 7a00 	vstr	s15, [r3]

	triProjected.v[0] = Matrix_MultiplyVector(matProj, &Mesh.t[i].v[0]);
 800d2f0:	f207 6124 	addw	r1, r7, #1572	@ 0x624
 800d2f4:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	4413      	add	r3, r2
 800d2fe:	011b      	lsls	r3, r3, #4
 800d300:	440b      	add	r3, r1
 800d302:	1d1a      	adds	r2, r3, #4
 800d304:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d308:	f5a3 64c1 	sub.w	r4, r3, #1544	@ 0x608
 800d30c:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d310:	f2a3 630c 	subw	r3, r3, #1548	@ 0x60c
 800d314:	4611      	mov	r1, r2
 800d316:	6818      	ldr	r0, [r3, #0]
 800d318:	f001 f8ba 	bl	800e490 <Matrix_MultiplyVector>
 800d31c:	eeb0 6a40 	vmov.f32	s12, s0
 800d320:	eef0 6a60 	vmov.f32	s13, s1
 800d324:	eeb0 7a41 	vmov.f32	s14, s2
 800d328:	eef0 7a61 	vmov.f32	s15, s3
 800d32c:	ed84 6a00 	vstr	s12, [r4]
 800d330:	edc4 6a01 	vstr	s13, [r4, #4]
 800d334:	ed84 7a02 	vstr	s14, [r4, #8]
 800d338:	edc4 7a03 	vstr	s15, [r4, #12]
	triProjected.v[1] = Matrix_MultiplyVector(matProj, &Mesh.t[i].v[1]);
 800d33c:	f207 6124 	addw	r1, r7, #1572	@ 0x624
 800d340:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d344:	4613      	mov	r3, r2
 800d346:	005b      	lsls	r3, r3, #1
 800d348:	4413      	add	r3, r2
 800d34a:	011b      	lsls	r3, r3, #4
 800d34c:	3310      	adds	r3, #16
 800d34e:	440b      	add	r3, r1
 800d350:	1d1a      	adds	r2, r3, #4
 800d352:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d356:	f5a3 64c1 	sub.w	r4, r3, #1544	@ 0x608
 800d35a:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d35e:	f2a3 630c 	subw	r3, r3, #1548	@ 0x60c
 800d362:	4611      	mov	r1, r2
 800d364:	6818      	ldr	r0, [r3, #0]
 800d366:	f001 f893 	bl	800e490 <Matrix_MultiplyVector>
 800d36a:	eeb0 6a40 	vmov.f32	s12, s0
 800d36e:	eef0 6a60 	vmov.f32	s13, s1
 800d372:	eeb0 7a41 	vmov.f32	s14, s2
 800d376:	eef0 7a61 	vmov.f32	s15, s3
 800d37a:	ed84 6a04 	vstr	s12, [r4, #16]
 800d37e:	edc4 6a05 	vstr	s13, [r4, #20]
 800d382:	ed84 7a06 	vstr	s14, [r4, #24]
 800d386:	edc4 7a07 	vstr	s15, [r4, #28]
	triProjected.v[2] = Matrix_MultiplyVector(matProj, &Mesh.t[i].v[2]);
 800d38a:	f207 6124 	addw	r1, r7, #1572	@ 0x624
 800d38e:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d392:	4613      	mov	r3, r2
 800d394:	005b      	lsls	r3, r3, #1
 800d396:	4413      	add	r3, r2
 800d398:	011b      	lsls	r3, r3, #4
 800d39a:	3320      	adds	r3, #32
 800d39c:	440b      	add	r3, r1
 800d39e:	1d1a      	adds	r2, r3, #4
 800d3a0:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d3a4:	f5a3 64c1 	sub.w	r4, r3, #1544	@ 0x608
 800d3a8:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d3ac:	f2a3 630c 	subw	r3, r3, #1548	@ 0x60c
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	6818      	ldr	r0, [r3, #0]
 800d3b4:	f001 f86c 	bl	800e490 <Matrix_MultiplyVector>
 800d3b8:	eeb0 6a40 	vmov.f32	s12, s0
 800d3bc:	eef0 6a60 	vmov.f32	s13, s1
 800d3c0:	eeb0 7a41 	vmov.f32	s14, s2
 800d3c4:	eef0 7a61 	vmov.f32	s15, s3
 800d3c8:	ed84 6a08 	vstr	s12, [r4, #32]
 800d3cc:	edc4 6a09 	vstr	s13, [r4, #36]	@ 0x24
 800d3d0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800d3d4:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c

	//printf("trans0 x: %f, y: %f, z: %f, w: %f\r\n", triProjected.v[0].x, triProjected.v[0].y, triProjected.v[0].z, triProjected.v[0].w);


	triProjected.v[0].x *= (float)ILI9341_WIDTH_SCALE;
 800d3d8:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d3dc:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7f3 f8d8 	bl	8000598 <__aeabi_f2d>
 800d3e8:	a399      	add	r3, pc, #612	@ (adr r3, 800d650 <Project_And_Draw+0x468>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f3 f92b 	bl	8000648 <__aeabi_dmul>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	f7f3 fbfd 	bl	8000bf8 <__aeabi_d2f>
 800d3fe:	4602      	mov	r2, r0
 800d400:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d404:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d408:	601a      	str	r2, [r3, #0]
	triProjected.v[0].y *= (float)ILI9341_HEIGHT_SCALE;
 800d40a:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d40e:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	4618      	mov	r0, r3
 800d416:	f7f3 f8bf 	bl	8000598 <__aeabi_f2d>
 800d41a:	a38f      	add	r3, pc, #572	@ (adr r3, 800d658 <Project_And_Draw+0x470>)
 800d41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d420:	f7f3 f912 	bl	8000648 <__aeabi_dmul>
 800d424:	4602      	mov	r2, r0
 800d426:	460b      	mov	r3, r1
 800d428:	4610      	mov	r0, r2
 800d42a:	4619      	mov	r1, r3
 800d42c:	f7f3 fbe4 	bl	8000bf8 <__aeabi_d2f>
 800d430:	4602      	mov	r2, r0
 800d432:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d436:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d43a:	605a      	str	r2, [r3, #4]
	triProjected.v[1].x *= (float)ILI9341_WIDTH_SCALE;
 800d43c:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d440:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	4618      	mov	r0, r3
 800d448:	f7f3 f8a6 	bl	8000598 <__aeabi_f2d>
 800d44c:	a380      	add	r3, pc, #512	@ (adr r3, 800d650 <Project_And_Draw+0x468>)
 800d44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d452:	f7f3 f8f9 	bl	8000648 <__aeabi_dmul>
 800d456:	4602      	mov	r2, r0
 800d458:	460b      	mov	r3, r1
 800d45a:	4610      	mov	r0, r2
 800d45c:	4619      	mov	r1, r3
 800d45e:	f7f3 fbcb 	bl	8000bf8 <__aeabi_d2f>
 800d462:	4602      	mov	r2, r0
 800d464:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d468:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d46c:	611a      	str	r2, [r3, #16]
	triProjected.v[1].y *= (float)ILI9341_HEIGHT_SCALE;
 800d46e:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d472:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d476:	695b      	ldr	r3, [r3, #20]
 800d478:	4618      	mov	r0, r3
 800d47a:	f7f3 f88d 	bl	8000598 <__aeabi_f2d>
 800d47e:	a376      	add	r3, pc, #472	@ (adr r3, 800d658 <Project_And_Draw+0x470>)
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	f7f3 f8e0 	bl	8000648 <__aeabi_dmul>
 800d488:	4602      	mov	r2, r0
 800d48a:	460b      	mov	r3, r1
 800d48c:	4610      	mov	r0, r2
 800d48e:	4619      	mov	r1, r3
 800d490:	f7f3 fbb2 	bl	8000bf8 <__aeabi_d2f>
 800d494:	4602      	mov	r2, r0
 800d496:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d49a:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d49e:	615a      	str	r2, [r3, #20]
	triProjected.v[2].x *= (float)ILI9341_WIDTH_SCALE;
 800d4a0:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d4a4:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d4a8:	6a1b      	ldr	r3, [r3, #32]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7f3 f874 	bl	8000598 <__aeabi_f2d>
 800d4b0:	a367      	add	r3, pc, #412	@ (adr r3, 800d650 <Project_And_Draw+0x468>)
 800d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b6:	f7f3 f8c7 	bl	8000648 <__aeabi_dmul>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	4610      	mov	r0, r2
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	f7f3 fb99 	bl	8000bf8 <__aeabi_d2f>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d4cc:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d4d0:	621a      	str	r2, [r3, #32]
	triProjected.v[2].y *= (float)ILI9341_HEIGHT_SCALE;
 800d4d2:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d4d6:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7f3 f85b 	bl	8000598 <__aeabi_f2d>
 800d4e2:	a35d      	add	r3, pc, #372	@ (adr r3, 800d658 <Project_And_Draw+0x470>)
 800d4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e8:	f7f3 f8ae 	bl	8000648 <__aeabi_dmul>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	f7f3 fb80 	bl	8000bf8 <__aeabi_d2f>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d4fe:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d502:	625a      	str	r2, [r3, #36]	@ 0x24

	//printf("trans1 x: %f, y: %f, z: %f, w: %f\r\n", triProjected.v[0].x, triProjected.v[0].y, triProjected.v[0].z, triProjected.v[0].w);

	//scaling the model
	triProjected.v[0].x += ILI9341_WIDTH_2; triProjected.v[0].y += 0;
 800d504:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d508:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d50c:	edd3 7a00 	vldr	s15, [r3]
 800d510:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d648 <Project_And_Draw+0x460>
 800d514:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d518:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d51c:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d520:	edc3 7a00 	vstr	s15, [r3]
 800d524:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d528:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d52c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d530:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800d64c <Project_And_Draw+0x464>
 800d534:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d538:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d53c:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d540:	edc3 7a01 	vstr	s15, [r3, #4]
	triProjected.v[1].x += ILI9341_WIDTH_2; triProjected.v[1].y += 0;
 800d544:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d548:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d54c:	edd3 7a04 	vldr	s15, [r3, #16]
 800d550:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800d648 <Project_And_Draw+0x460>
 800d554:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d558:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d55c:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d560:	edc3 7a04 	vstr	s15, [r3, #16]
 800d564:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d568:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d56c:	edd3 7a05 	vldr	s15, [r3, #20]
 800d570:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d64c <Project_And_Draw+0x464>
 800d574:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d578:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d57c:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d580:	edc3 7a05 	vstr	s15, [r3, #20]
	triProjected.v[2].x += ILI9341_WIDTH_2; triProjected.v[2].y += 0;
 800d584:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d588:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d58c:	edd3 7a08 	vldr	s15, [r3, #32]
 800d590:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800d648 <Project_And_Draw+0x460>
 800d594:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d598:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d59c:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d5a0:	edc3 7a08 	vstr	s15, [r3, #32]
 800d5a4:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d5a8:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d5ac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d5b0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800d64c <Project_And_Draw+0x464>
 800d5b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d5b8:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d5bc:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800d5c0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24


	//draw triangles
	outMesh.t[i] = triProjected;
 800d5c4:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d5c8:	f5a3 61bb 	sub.w	r1, r3, #1496	@ 0x5d8
 800d5cc:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	005b      	lsls	r3, r3, #1
 800d5d4:	4413      	add	r3, r2
 800d5d6:	011b      	lsls	r3, r3, #4
 800d5d8:	440b      	add	r3, r1
 800d5da:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 800d5de:	f5a2 62c1 	sub.w	r2, r2, #1544	@ 0x608
 800d5e2:	1d1c      	adds	r4, r3, #4
 800d5e4:	4615      	mov	r5, r2
 800d5e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d5f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int i = 0; i < Mesh.size; i++){
 800d5f6:	f8d7 360c 	ldr.w	r3, [r7, #1548]	@ 0x60c
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 800d600:	f897 3624 	ldrb.w	r3, [r7, #1572]	@ 0x624
 800d604:	461a      	mov	r2, r3
 800d606:	f8d7 360c 	ldr.w	r3, [r7, #1548]	@ 0x60c
 800d60a:	4293      	cmp	r3, r2
 800d60c:	f6ff ae12 	blt.w	800d234 <Project_And_Draw+0x4c>
	//printf("trans2 x: %f, y: %f, z: %f, w: %f\r\n", triProjected.v[0].x, triProjected.v[0].y, triProjected.v[0].z, triProjected.v[0].w);

	}

	LCD_DrawMesh(outMesh, 0xffff);
 800d610:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800d614:	f5a3 64bb 	sub.w	r4, r3, #1496	@ 0x5d8
 800d618:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d61c:	f8cd 35c4 	str.w	r3, [sp, #1476]	@ 0x5c4
 800d620:	4668      	mov	r0, sp
 800d622:	f104 0310 	add.w	r3, r4, #16
 800d626:	f240 52c4 	movw	r2, #1476	@ 0x5c4
 800d62a:	4619      	mov	r1, r3
 800d62c:	f004 fc4d 	bl	8011eca <memcpy>
 800d630:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d634:	f000 fc29 	bl	800de8a <LCD_DrawMesh>

}
 800d638:	bf00      	nop
 800d63a:	f507 67c2 	add.w	r7, r7, #1552	@ 0x610
 800d63e:	46bd      	mov	sp, r7
 800d640:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d644:	b004      	add	sp, #16
 800d646:	4770      	bx	lr
 800d648:	43200000 	.word	0x43200000
 800d64c:	00000000 	.word	0x00000000
 800d650:	9999999a 	.word	0x9999999a
 800d654:	40419999 	.word	0x40419999
 800d658:	66666666 	.word	0x66666666
 800d65c:	403a6666 	.word	0x403a6666

0800d660 <LL_GPIO_SetOutputPin>:
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	619a      	str	r2, [r3, #24]
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <LL_GPIO_ResetOutputPin>:
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	683a      	ldr	r2, [r7, #0]
 800d68a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d68c:	bf00      	nop
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <LED_init>:


// Funkcija LED_init() poskrbi, da se pravilno inicializira LED_group_handle_t struktura.
// Poskrbi tudi, da se določi začetno stanje LEDic.
void LED_init(void)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	af00      	add	r7, sp, #0
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.
		// Spodaj imate primer za inicializacijo LEDice LED0.


		// LEDice na portu F
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 800d69c:	4b1a      	ldr	r3, [pc, #104]	@ (800d708 <LED_init+0x70>)
 800d69e:	2204      	movs	r2, #4
 800d6a0:	605a      	str	r2, [r3, #4]
		LED_group.LEDs[LED0].port = GPIOF;
 800d6a2:	4b19      	ldr	r3, [pc, #100]	@ (800d708 <LED_init+0x70>)
 800d6a4:	4a19      	ldr	r2, [pc, #100]	@ (800d70c <LED_init+0x74>)
 800d6a6:	601a      	str	r2, [r3, #0]

		LED_group.LEDs[LED1].pin = LL_GPIO_PIN_3;
 800d6a8:	4b17      	ldr	r3, [pc, #92]	@ (800d708 <LED_init+0x70>)
 800d6aa:	2208      	movs	r2, #8
 800d6ac:	60da      	str	r2, [r3, #12]
		LED_group.LEDs[LED1].port = GPIOF;
 800d6ae:	4b16      	ldr	r3, [pc, #88]	@ (800d708 <LED_init+0x70>)
 800d6b0:	4a16      	ldr	r2, [pc, #88]	@ (800d70c <LED_init+0x74>)
 800d6b2:	609a      	str	r2, [r3, #8]

		LED_group.LEDs[LED2].pin = LL_GPIO_PIN_4;
 800d6b4:	4b14      	ldr	r3, [pc, #80]	@ (800d708 <LED_init+0x70>)
 800d6b6:	2210      	movs	r2, #16
 800d6b8:	615a      	str	r2, [r3, #20]
		LED_group.LEDs[LED2].port = GPIOF;
 800d6ba:	4b13      	ldr	r3, [pc, #76]	@ (800d708 <LED_init+0x70>)
 800d6bc:	4a13      	ldr	r2, [pc, #76]	@ (800d70c <LED_init+0x74>)
 800d6be:	611a      	str	r2, [r3, #16]

		LED_group.LEDs[LED3].pin = LL_GPIO_PIN_5;
 800d6c0:	4b11      	ldr	r3, [pc, #68]	@ (800d708 <LED_init+0x70>)
 800d6c2:	2220      	movs	r2, #32
 800d6c4:	61da      	str	r2, [r3, #28]
		LED_group.LEDs[LED3].port = GPIOF;
 800d6c6:	4b10      	ldr	r3, [pc, #64]	@ (800d708 <LED_init+0x70>)
 800d6c8:	4a10      	ldr	r2, [pc, #64]	@ (800d70c <LED_init+0x74>)
 800d6ca:	619a      	str	r2, [r3, #24]
		// DOPOLNI



		// LEDice na portu C
		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
 800d6cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d708 <LED_init+0x70>)
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	625a      	str	r2, [r3, #36]	@ 0x24
		LED_group.LEDs[LED4].port = GPIOC;
 800d6d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d708 <LED_init+0x70>)
 800d6d4:	4a0e      	ldr	r2, [pc, #56]	@ (800d710 <LED_init+0x78>)
 800d6d6:	621a      	str	r2, [r3, #32]

		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
 800d6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800d708 <LED_init+0x70>)
 800d6da:	2202      	movs	r2, #2
 800d6dc:	62da      	str	r2, [r3, #44]	@ 0x2c
		LED_group.LEDs[LED5].port = GPIOC;
 800d6de:	4b0a      	ldr	r3, [pc, #40]	@ (800d708 <LED_init+0x70>)
 800d6e0:	4a0b      	ldr	r2, [pc, #44]	@ (800d710 <LED_init+0x78>)
 800d6e2:	629a      	str	r2, [r3, #40]	@ 0x28

		LED_group.LEDs[LED6].pin = LL_GPIO_PIN_2;
 800d6e4:	4b08      	ldr	r3, [pc, #32]	@ (800d708 <LED_init+0x70>)
 800d6e6:	2204      	movs	r2, #4
 800d6e8:	635a      	str	r2, [r3, #52]	@ 0x34
		LED_group.LEDs[LED6].port = GPIOC;
 800d6ea:	4b07      	ldr	r3, [pc, #28]	@ (800d708 <LED_init+0x70>)
 800d6ec:	4a08      	ldr	r2, [pc, #32]	@ (800d710 <LED_init+0x78>)
 800d6ee:	631a      	str	r2, [r3, #48]	@ 0x30

		LED_group.LEDs[LED7].pin = LL_GPIO_PIN_3;
 800d6f0:	4b05      	ldr	r3, [pc, #20]	@ (800d708 <LED_init+0x70>)
 800d6f2:	2208      	movs	r2, #8
 800d6f4:	63da      	str	r2, [r3, #60]	@ 0x3c
		LED_group.LEDs[LED7].port = GPIOC;
 800d6f6:	4b04      	ldr	r3, [pc, #16]	@ (800d708 <LED_init+0x70>)
 800d6f8:	4a05      	ldr	r2, [pc, #20]	@ (800d710 <LED_init+0x78>)
 800d6fa:	639a      	str	r2, [r3, #56]	@ 0x38

	// 2. Nastavite začetno stanje LEDic (t.i. privzeto stanje (angl. default state)).

		// Na začetku po inicializaciji želimo imeti vse LEDice ugasnjene.
		// Uporabi se lahko kar LEDs_write() funkcijo.
		LEDs_write(0x00);
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	f000 f809 	bl	800d714 <LEDs_write>

}
 800d702:	bf00      	nop
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	200024e4 	.word	0x200024e4
 800d70c:	48001400 	.word	0x48001400
 800d710:	48000800 	.word	0x48000800

0800d714 <LEDs_write>:
// V primeru funkcije LEDs_write() pa vrednost vhodnega argumenta "value"
// neposredno določa, katere LEDice v LED skupini bodo prižgane ter katere
// ugasnjene po ideji: če postavljen i-ti bit vrednosti "value", potem naj
// bo prižgana i-ta LEDica; sicer naj bo ugasnjena.
void LEDs_write(uint8_t value)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	4603      	mov	r3, r0
 800d71c:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 800d71e:	2301      	movs	r3, #1
 800d720:	73fb      	strb	r3, [r7, #15]

	// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 800d722:	2300      	movs	r3, #0
 800d724:	73bb      	strb	r3, [r7, #14]
 800d726:	e026      	b.n	800d776 <LEDs_write+0x62>
	{
		// Preveri vrednost i-tega bita vhodnega argumenta "value".
		if (value & bitmask)
 800d728:	79fa      	ldrb	r2, [r7, #7]
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
 800d72c:	4013      	ands	r3, r2
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00d      	beq.n	800d750 <LEDs_write+0x3c>
		{
			// Če je i-ti bit enak 1, potem naj se prižge i-ta LEDica, pri čemer se pa
			// upošteva vrstni red LEDic, kot je bil definiran v naštevnem tipu LEDs_enum_t;
			LL_GPIO_SetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 800d734:	7bbb      	ldrb	r3, [r7, #14]
 800d736:	4a14      	ldr	r2, [pc, #80]	@ (800d788 <LEDs_write+0x74>)
 800d738:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d73c:	7bbb      	ldrb	r3, [r7, #14]
 800d73e:	4912      	ldr	r1, [pc, #72]	@ (800d788 <LEDs_write+0x74>)
 800d740:	00db      	lsls	r3, r3, #3
 800d742:	440b      	add	r3, r1
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	4619      	mov	r1, r3
 800d748:	4610      	mov	r0, r2
 800d74a:	f7ff ff89 	bl	800d660 <LL_GPIO_SetOutputPin>
 800d74e:	e00c      	b.n	800d76a <LEDs_write+0x56>

		}
		else
		{
			// sicer pa naj se i-ta LEDica ugasne.
			LL_GPIO_ResetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 800d750:	7bbb      	ldrb	r3, [r7, #14]
 800d752:	4a0d      	ldr	r2, [pc, #52]	@ (800d788 <LEDs_write+0x74>)
 800d754:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d758:	7bbb      	ldrb	r3, [r7, #14]
 800d75a:	490b      	ldr	r1, [pc, #44]	@ (800d788 <LEDs_write+0x74>)
 800d75c:	00db      	lsls	r3, r3, #3
 800d75e:	440b      	add	r3, r1
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	4619      	mov	r1, r3
 800d764:	4610      	mov	r0, r2
 800d766:	f7ff ff89 	bl	800d67c <LL_GPIO_ResetOutputPin>

		}


		// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
		bitmask <<= 1;
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
 800d76c:	005b      	lsls	r3, r3, #1
 800d76e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 800d770:	7bbb      	ldrb	r3, [r7, #14]
 800d772:	3301      	adds	r3, #1
 800d774:	73bb      	strb	r3, [r7, #14]
 800d776:	7bbb      	ldrb	r3, [r7, #14]
 800d778:	2b07      	cmp	r3, #7
 800d77a:	d9d5      	bls.n	800d728 <LEDs_write+0x14>
	}
}
 800d77c:	bf00      	nop
 800d77e:	bf00      	nop
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	200024e4 	.word	0x200024e4

0800d78c <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	69db      	ldr	r3, [r3, #28]
 800d798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d79c:	2b80      	cmp	r3, #128	@ 0x80
 800d79e:	d101      	bne.n	800d7a4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e000      	b.n	800d7a6 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	370c      	adds	r7, #12
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800d7b2:	b480      	push	{r7}
 800d7b4:	b089      	sub	sp, #36	@ 0x24
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	e853 3f00 	ldrex	r3, [r3]
 800d7c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	f043 0320 	orr.w	r3, r3, #32
 800d7cc:	61fb      	str	r3, [r7, #28]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	69fa      	ldr	r2, [r7, #28]
 800d7d2:	61ba      	str	r2, [r7, #24]
 800d7d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d6:	6979      	ldr	r1, [r7, #20]
 800d7d8:	69ba      	ldr	r2, [r7, #24]
 800d7da:	e841 2300 	strex	r3, r2, [r1]
 800d7de:	613b      	str	r3, [r7, #16]
   return(result);
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1e9      	bne.n	800d7ba <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 800d7e6:	bf00      	nop
 800d7e8:	bf00      	nop
 800d7ea:	3724      	adds	r7, #36	@ 0x24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800d800:	78fa      	ldrb	r2, [r7, #3]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d806:	bf00      	nop
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
	...

0800d814 <SCI_init>:
// nastavi dolžino medpomnilnika printf() funkcije, poskrbi za inicializacijo
// sprejemnega RX in oddajnega TX sistemskega medpomnilnika za SCI vmesnik
// in omogoči prekinitve v zvezi s sprejemom podatkov.

void SCI_init(void)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0
	SCI.USART = USART3;
 800d818:	4b0e      	ldr	r3, [pc, #56]	@ (800d854 <SCI_init+0x40>)
 800d81a:	4a0f      	ldr	r2, [pc, #60]	@ (800d858 <SCI_init+0x44>)
 800d81c:	601a      	str	r2, [r3, #0]
	setvbuf(stdout, NULL, _IONBF, 0);
 800d81e:	4b0f      	ldr	r3, [pc, #60]	@ (800d85c <SCI_init+0x48>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6898      	ldr	r0, [r3, #8]
 800d824:	2300      	movs	r3, #0
 800d826:	2202      	movs	r2, #2
 800d828:	2100      	movs	r1, #0
 800d82a:	f004 f943 	bl	8011ab4 <setvbuf>

	BUF_init( &SCI_RX_buf_handle, SCI_RX_buffer, SCI_RX_BUF_LEN);	// RX SCI medpomnilnik
 800d82e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d832:	490b      	ldr	r1, [pc, #44]	@ (800d860 <SCI_init+0x4c>)
 800d834:	480b      	ldr	r0, [pc, #44]	@ (800d864 <SCI_init+0x50>)
 800d836:	f000 f889 	bl	800d94c <BUF_init>
	BUF_init( &SCI_TX_buf_handle, SCI_TX_buffer, SCI_TX_BUF_LEN);	// TX SCI medpomnilnik
 800d83a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d83e:	490a      	ldr	r1, [pc, #40]	@ (800d868 <SCI_init+0x54>)
 800d840:	480a      	ldr	r0, [pc, #40]	@ (800d86c <SCI_init+0x58>)
 800d842:	f000 f883 	bl	800d94c <BUF_init>
	// Kot zadnji korak inicializacije SCI vmesnika poskrbimo, da se vklopijo
	// prekinitve ob sprejemu novega podatka presko USART enote, s katero
	// implementiramo SCI vmesnik. Uporabimo seveda primerno LL funkcijo,
	// ki omogoči prekinitve ob postavitvi RXNE zastavice.

	LL_USART_EnableIT_RXNE_RXFNE(SCI.USART);
 800d846:	4b03      	ldr	r3, [pc, #12]	@ (800d854 <SCI_init+0x40>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff ffb1 	bl	800d7b2 <LL_USART_EnableIT_RXNE_RXFNE>

}
 800d850:	bf00      	nop
 800d852:	bd80      	pop	{r7, pc}
 800d854:	20002524 	.word	0x20002524
 800d858:	40004800 	.word	0x40004800
 800d85c:	200017b8 	.word	0x200017b8
 800d860:	20002728 	.word	0x20002728
 800d864:	20002928 	.word	0x20002928
 800d868:	20002528 	.word	0x20002528
 800d86c:	20002940 	.word	0x20002940

0800d870 <SCI_send_char>:

// ------ Funkcije za pošiljanje enega samega bajta podatkov -------


void SCI_send_char(char c)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	71fb      	strb	r3, [r7, #7]
	while( LL_USART_IsActiveFlag_TXE_TXFNF (SCI.USART) == 0);
 800d87a:	bf00      	nop
 800d87c:	4b09      	ldr	r3, [pc, #36]	@ (800d8a4 <SCI_send_char+0x34>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff ff83 	bl	800d78c <LL_USART_IsActiveFlag_TXE_TXFNF>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0f7      	beq.n	800d87c <SCI_send_char+0xc>

	LL_USART_TransmitData8 (SCI.USART, (uint8_t) c);
 800d88c:	4b05      	ldr	r3, [pc, #20]	@ (800d8a4 <SCI_send_char+0x34>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	79fa      	ldrb	r2, [r7, #7]
 800d892:	4611      	mov	r1, r2
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff ffad 	bl	800d7f4 <LL_USART_TransmitData8>
}
 800d89a:	bf00      	nop
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20002524 	.word	0x20002524

0800d8a8 <SCI_send_string>:


// ------ Funkcije za pošiljanje niza znakov ali zaporedja bajtov -------

void SCI_send_string(char *str)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; str[i] != 0; i++){
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e009      	b.n	800d8ca <SCI_send_string+0x22>
		SCI_send_char(str[i]);
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7ff ffd6 	bl	800d870 <SCI_send_char>
	for(uint32_t i = 0; str[i] != 0; i++){
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	60fb      	str	r3, [r7, #12]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1ef      	bne.n	800d8b6 <SCI_send_string+0xe>
	}
}
 800d8d6:	bf00      	nop
 800d8d8:	bf00      	nop
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <SCI_send_bytes>:

// Funkcija SCI_send_bytes() pošlje zaporedje bajtov preko SCI vmesnika.
// Lokacija podatkov zapošiljanje je podana z vhodnim argumentom "*data",
// dolžina podatkov za pošiljanje pa je podano z vhodnim argumentom "size".
void SCI_send_bytes(uint8_t *data, uint32_t size)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < size; i++){
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60fb      	str	r3, [r7, #12]
 800d8ee:	e009      	b.n	800d904 <SCI_send_bytes+0x24>
		SCI_send_char(data[i]);
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7ff ffb9 	bl	800d870 <SCI_send_char>
	for(uint32_t i = 0; i < size; i++){
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3301      	adds	r3, #1
 800d902:	60fb      	str	r3, [r7, #12]
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d3f1      	bcc.n	800d8f0 <SCI_send_bytes+0x10>
	}
}
 800d90c:	bf00      	nop
 800d90e:	bf00      	nop
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <_write>:
// redefiniramo _write() funkcijo pravzaprav priredimo uporabo printf() funkcije
// tako, da pošilja sporočila na točno tak način, kakor to sami želimo.
// In mi želimo uporabljati funkcijo printf() tako, da bomo s pomočjo nje
// pošiljali formatirana sporočila preko SCI vmesnika.
int _write(int file, char *ptr, int len)
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b084      	sub	sp, #16
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	60f8      	str	r0, [r7, #12]
 800d91e:	60b9      	str	r1, [r7, #8]
 800d920:	607a      	str	r2, [r7, #4]
	// Sedaj pa uporabimo našo SCI sistemsko funkcijo SCI_send_bytes()
	// da z njo pošljemo te podatke, na katere kaže "ptr".
	// Ker naša funkcija SCI_send_bytes() uporablja drugačen tip
	// vhodnih argumentov, je potrebno poskrbeti za eksplicitno
	// pretvorbo med tipi (angl. type-casting).
	SCI_send_bytes( (uint8_t*) ptr, (uint32_t) len );
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4619      	mov	r1, r3
 800d926:	68b8      	ldr	r0, [r7, #8]
 800d928:	f7ff ffda 	bl	800d8e0 <SCI_send_bytes>


	// Funkcija _write() mora vrniti število uspešno poslanih
	// znakov. Tu poenostavimo in privzamemo, da je bilo uspešno
	// poslanih vseh "len" znakov.
	return len;
 800d92c:	687b      	ldr	r3, [r7, #4]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
	...

0800d938 <SCI_demo_Hello_world>:


// Funkcija SCI_demo_Hello_world() naj preko SCI vmesnika pošlje
// klasično sporočilo "Hello world!".
void SCI_demo_Hello_world(void)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	af00      	add	r7, sp, #0
	SCI_send_string("Goodbye world!\r\n");
 800d93c:	4802      	ldr	r0, [pc, #8]	@ (800d948 <SCI_demo_Hello_world+0x10>)
 800d93e:	f7ff ffb3 	bl	800d8a8 <SCI_send_string>
}
 800d942:	bf00      	nop
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	08013b48 	.word	0x08013b48

0800d94c <BUF_init>:


// -------------- Public function implementations --------------

void BUF_init(buf_handle_t *buf_handle, uint8_t *buffer_ptr, uint32_t buf_length)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
	// Initialize the buffer handle according to given parameters.
	buf_handle->buffer = buffer_ptr;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	601a      	str	r2, [r3, #0]
	buf_handle->length = buf_length;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	605a      	str	r2, [r3, #4]


	// And flush the buffer.
	BUF_flush(buf_handle);
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f000 f804 	bl	800d972 <BUF_flush>
}
 800d96a:	bf00      	nop
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <BUF_flush>:


buf_rtrn_codes_t BUF_flush(buf_handle_t *buf_handle)
{
 800d972:	b480      	push	{r7}
 800d974:	b083      	sub	sp, #12
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
	buf_handle->front = 0;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	60da      	str	r2, [r3, #12]
	buf_handle->rear = 0;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	609a      	str	r2, [r3, #8]
	buf_handle->data_size = 0;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	611a      	str	r2, [r3, #16]
	buf_handle->free_size = buf_handle->length;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	615a      	str	r2, [r3, #20]

	return BUFFER_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <BUF_store_byte>:



// Store one byte of data.
buf_rtrn_codes_t BUF_store_byte(buf_handle_t *buf_handle, uint8_t data)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	70fb      	strb	r3, [r7, #3]
	// check if buffer already full
	if (buf_handle->data_size >= buf_handle->length)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	691a      	ldr	r2, [r3, #16]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d301      	bcc.n	800d9be <BUF_store_byte+0x1c>
	{
		return BUFFER_FULL;	//-> if so, return error
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e02a      	b.n	800da14 <BUF_store_byte+0x72>
	}
	else
	{
		// check special case: buffer empty
		if (buf_handle->data_size == 0)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d106      	bne.n	800d9d4 <BUF_store_byte+0x32>
		{
			buf_handle->front = 0;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	60da      	str	r2, [r3, #12]
			buf_handle->rear = 0;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	609a      	str	r2, [r3, #8]
 800d9d2:	e00d      	b.n	800d9f0 <BUF_store_byte+0x4e>
		}
		else
		{
			// increase rear pointer and apply modular arithmetics
			buf_handle->rear++;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	609a      	str	r2, [r3, #8]

			if (buf_handle->rear >= buf_handle->length)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	689a      	ldr	r2, [r3, #8]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d302      	bcc.n	800d9f0 <BUF_store_byte+0x4e>
			{
				buf_handle->rear = 0;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	609a      	str	r2, [r3, #8]
			}
		}


		// by now rear pointer is ready for new data -> store data
		buf_handle->buffer[buf_handle->rear] = data;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	689b      	ldr	r3, [r3, #8]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	78fa      	ldrb	r2, [r7, #3]
 800d9fc:	701a      	strb	r2, [r3, #0]

		// update data size and free size
		buf_handle->data_size++;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	611a      	str	r2, [r3, #16]
		buf_handle->free_size--;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	1e5a      	subs	r2, r3, #1
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	615a      	str	r2, [r3, #20]

		return BUFFER_OK;
 800da12:	2300      	movs	r3, #0
	}

}
 800da14:	4618      	mov	r0, r3
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <BUF_get_byte>:



// Read one byte of data and store it to the given location.
buf_rtrn_codes_t BUF_get_byte(buf_handle_t *buf_handle, uint8_t *data)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
	// first check if buffer empty
	if (buf_handle->data_size == 0)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	691b      	ldr	r3, [r3, #16]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <BUF_get_byte+0x16>
	{
		return BUFFER_EMPTY;	// return error code and exit this function
 800da32:	2302      	movs	r3, #2
 800da34:	e020      	b.n	800da78 <BUF_get_byte+0x58>
	}

	// else read and return data from the buffer "front"
	*data = buf_handle->buffer[buf_handle->front];	//Get data from the queue "front"
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	4413      	add	r3, r2
 800da40:	781a      	ldrb	r2, [r3, #0]
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	701a      	strb	r2, [r3, #0]

	// update data size and free size
	buf_handle->data_size--;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	1e5a      	subs	r2, r3, #1
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	611a      	str	r2, [r3, #16]
	buf_handle->free_size++;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	695b      	ldr	r3, [r3, #20]
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	615a      	str	r2, [r3, #20]


	// update the "front" value NOT using the modulo arithmetics but
	// using if-then instead because it is faster on uC
	buf_handle->front++;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	60da      	str	r2, [r3, #12]

	if (buf_handle->front >= buf_handle->length)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	68da      	ldr	r2, [r3, #12]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d302      	bcc.n	800da76 <BUF_get_byte+0x56>
	{
		buf_handle->front = 0;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	60da      	str	r2, [r3, #12]
	}

	return BUFFER_OK;	// return BUFFER_OK error code
 800da76:	2300      	movs	r3, #0

}
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <LL_GPIO_IsInputPinSet>:
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	691a      	ldr	r2, [r3, #16]
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	4013      	ands	r3, r2
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d101      	bne.n	800daa0 <LL_GPIO_IsInputPinSet+0x1c>
 800da9c:	2301      	movs	r3, #1
 800da9e:	e000      	b.n	800daa2 <LL_GPIO_IsInputPinSet+0x1e>
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
	...

0800dab0 <KBD_init>:

// Funkcija KBD_init() poskrbi, da se pravilno inicializira keyboard_handle_t strukturna spremenljivka.
// Poskrbi tudi za inicializacijo medpomnilnika tipkovnice.
//
void KBD_init(void)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
		// To storite tako, da pravilno inicializirate "handle" strukture posameznih tipk.
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.


		// buttons on port C
		keyboard.buttons[ BTN_OK ].port = GPIOC;
 800dab6:	4b23      	ldr	r3, [pc, #140]	@ (800db44 <KBD_init+0x94>)
 800dab8:	4a23      	ldr	r2, [pc, #140]	@ (800db48 <KBD_init+0x98>)
 800daba:	605a      	str	r2, [r3, #4]
		keyboard.buttons[ BTN_OK ].pin = LL_GPIO_PIN_15;
 800dabc:	4b21      	ldr	r3, [pc, #132]	@ (800db44 <KBD_init+0x94>)
 800dabe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800dac2:	601a      	str	r2, [r3, #0]

		keyboard.buttons[ BTN_ESC ].port = GPIOC;
 800dac4:	4b1f      	ldr	r3, [pc, #124]	@ (800db44 <KBD_init+0x94>)
 800dac6:	4a20      	ldr	r2, [pc, #128]	@ (800db48 <KBD_init+0x98>)
 800dac8:	615a      	str	r2, [r3, #20]
		keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14;
 800daca:	4b1e      	ldr	r3, [pc, #120]	@ (800db44 <KBD_init+0x94>)
 800dacc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800dad0:	611a      	str	r2, [r3, #16]

		// buttons on port G

		keyboard.buttons[ BTN_UP ].port = GPIOG;
 800dad2:	4b1c      	ldr	r3, [pc, #112]	@ (800db44 <KBD_init+0x94>)
 800dad4:	4a1d      	ldr	r2, [pc, #116]	@ (800db4c <KBD_init+0x9c>)
 800dad6:	625a      	str	r2, [r3, #36]	@ 0x24
		keyboard.buttons[ BTN_UP ].pin = LL_GPIO_PIN_0;
 800dad8:	4b1a      	ldr	r3, [pc, #104]	@ (800db44 <KBD_init+0x94>)
 800dada:	2201      	movs	r2, #1
 800dadc:	621a      	str	r2, [r3, #32]

		keyboard.buttons[ BTN_DOWN ].port = GPIOG;
 800dade:	4b19      	ldr	r3, [pc, #100]	@ (800db44 <KBD_init+0x94>)
 800dae0:	4a1a      	ldr	r2, [pc, #104]	@ (800db4c <KBD_init+0x9c>)
 800dae2:	635a      	str	r2, [r3, #52]	@ 0x34
		keyboard.buttons[ BTN_DOWN ].pin = LL_GPIO_PIN_1;
 800dae4:	4b17      	ldr	r3, [pc, #92]	@ (800db44 <KBD_init+0x94>)
 800dae6:	2202      	movs	r2, #2
 800dae8:	631a      	str	r2, [r3, #48]	@ 0x30

		keyboard.buttons[ BTN_RIGHT ].port = GPIOG;
 800daea:	4b16      	ldr	r3, [pc, #88]	@ (800db44 <KBD_init+0x94>)
 800daec:	4a17      	ldr	r2, [pc, #92]	@ (800db4c <KBD_init+0x9c>)
 800daee:	645a      	str	r2, [r3, #68]	@ 0x44
		keyboard.buttons[ BTN_RIGHT ].pin = LL_GPIO_PIN_8;
 800daf0:	4b14      	ldr	r3, [pc, #80]	@ (800db44 <KBD_init+0x94>)
 800daf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800daf6:	641a      	str	r2, [r3, #64]	@ 0x40

		keyboard.buttons[ BTN_LEFT ].port = GPIOG;
 800daf8:	4b12      	ldr	r3, [pc, #72]	@ (800db44 <KBD_init+0x94>)
 800dafa:	4a14      	ldr	r2, [pc, #80]	@ (800db4c <KBD_init+0x9c>)
 800dafc:	655a      	str	r2, [r3, #84]	@ 0x54
		keyboard.buttons[ BTN_LEFT ].pin = LL_GPIO_PIN_6;
 800dafe:	4b11      	ldr	r3, [pc, #68]	@ (800db44 <KBD_init+0x94>)
 800db00:	2240      	movs	r2, #64	@ 0x40
 800db02:	651a      	str	r2, [r3, #80]	@ 0x50

	// 2. Inicializirajte začetne vrednosti "handle" strukture za posamezne tipke v tipkovnici na sistemskem nivoju


		// Sprehodimo se preko vseh "handle" struktur za delo s posameznimi tipkami.
		for(int i=0; i < NUM_OF_BTNS; i++)
 800db04:	2300      	movs	r3, #0
 800db06:	607b      	str	r3, [r7, #4]
 800db08:	e010      	b.n	800db2c <KBD_init+0x7c>
			// Ne pozabite, da v "handle" strukturah za posamezne tipke hranimo tudi vrednost prejšnjega
			// in trenutnega stanja tipk! In te vrednosti je potrebno na začetku nastaviti.
			// Smiselno jih je nastaviti na tako vrednost, kot da so tipke na začetku v sproščenem,
			// nestisnjenem stanju. In tu si lahko pomagate s pomožnim naštevnim tipom button_sig_value_t.

			keyboard.buttons[i].state_new = 1;
 800db0a:	4a0e      	ldr	r2, [pc, #56]	@ (800db44 <KBD_init+0x94>)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	4413      	add	r3, r2
 800db12:	330c      	adds	r3, #12
 800db14:	2201      	movs	r2, #1
 800db16:	601a      	str	r2, [r3, #0]
			keyboard.buttons[i].state_old = 1;
 800db18:	4a0a      	ldr	r2, [pc, #40]	@ (800db44 <KBD_init+0x94>)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	011b      	lsls	r3, r3, #4
 800db1e:	4413      	add	r3, r2
 800db20:	3308      	adds	r3, #8
 800db22:	2201      	movs	r2, #1
 800db24:	601a      	str	r2, [r3, #0]
		for(int i=0; i < NUM_OF_BTNS; i++)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	3301      	adds	r3, #1
 800db2a:	607b      	str	r3, [r7, #4]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b05      	cmp	r3, #5
 800db30:	ddeb      	ble.n	800db0a <KBD_init+0x5a>

	// 3. Inicializiramo še medpomnilnik tipkovnice.

		// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
		// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
		BUF_init( &kbd_buf_handle, kbd_buffer, KBD_BUF_LEN);
 800db32:	2220      	movs	r2, #32
 800db34:	4906      	ldr	r1, [pc, #24]	@ (800db50 <KBD_init+0xa0>)
 800db36:	4807      	ldr	r0, [pc, #28]	@ (800db54 <KBD_init+0xa4>)
 800db38:	f7ff ff08 	bl	800d94c <BUF_init>

}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	20002958 	.word	0x20002958
 800db48:	48000800 	.word	0x48000800
 800db4c:	48001800 	.word	0x48001800
 800db50:	200029d0 	.word	0x200029d0
 800db54:	200029b8 	.word	0x200029b8

0800db58 <KBD_scan>:
// Funkcija KBD_scan() prebere trenutno stanje tipk v tipkovnici; ugotovi,
// katere tipke so bile pritisnjene ter shrani to informacijo v medpomnilnik
// tipkovnice, da se bo kasneje lahko sistem odzval na pritisk teh tipk.
//
void KBD_scan(void)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
	// in ugotovi, ali je bila pritisnjena. Če je bila pritisnjena,
	// shrani to informacijo v medpomnilnik tipkovnice, da se bo
	// kasneje lahko sistem odzval na pritisk te tipke.

	// Sprehodimo se preko vseh "handle" struktur za delo s posameznimi tipkami.
	for(int i=0; i < NUM_OF_BTNS; i++)
 800db5e:	2300      	movs	r3, #0
 800db60:	607b      	str	r3, [r7, #4]
 800db62:	e040      	b.n	800dbe6 <KBD_scan+0x8e>
	{
		// Znotraj zanke delamo trenutno z i-to tipko. Spremenljivka "i" je pomožni števec zanke.

		// Trenutno, novo stanje tipke postane sedaj staro stanje tipke
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new ;
 800db64:	4a24      	ldr	r2, [pc, #144]	@ (800dbf8 <KBD_scan+0xa0>)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	011b      	lsls	r3, r3, #4
 800db6a:	4413      	add	r3, r2
 800db6c:	330c      	adds	r3, #12
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	4921      	ldr	r1, [pc, #132]	@ (800dbf8 <KBD_scan+0xa0>)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	011b      	lsls	r3, r3, #4
 800db76:	440b      	add	r3, r1
 800db78:	3308      	adds	r3, #8
 800db7a:	601a      	str	r2, [r3, #0]

		// in novo, trenutno stanje tipke se prebere iz ustreznega digitalne GPIO vhoda.
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port, keyboard.buttons[i].pin);
 800db7c:	4a1e      	ldr	r2, [pc, #120]	@ (800dbf8 <KBD_scan+0xa0>)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	011b      	lsls	r3, r3, #4
 800db82:	4413      	add	r3, r2
 800db84:	3304      	adds	r3, #4
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	491b      	ldr	r1, [pc, #108]	@ (800dbf8 <KBD_scan+0xa0>)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	011b      	lsls	r3, r3, #4
 800db8e:	440b      	add	r3, r1
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4619      	mov	r1, r3
 800db94:	4610      	mov	r0, r2
 800db96:	f7ff ff75 	bl	800da84 <LL_GPIO_IsInputPinSet>
 800db9a:	4602      	mov	r2, r0
 800db9c:	4916      	ldr	r1, [pc, #88]	@ (800dbf8 <KBD_scan+0xa0>)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	011b      	lsls	r3, r3, #4
 800dba2:	440b      	add	r3, r1
 800dba4:	330c      	adds	r3, #12
 800dba6:	601a      	str	r2, [r3, #0]



		// Sedaj je potrebno preveriti, ali se je za i-to tipko zgodil pritisk. Pri tem si pomagajte s starim in
		// trenutnim stanjem tipke. Pomaga vam lahko tudi pomožni naštevni tip button_sig_value_t.
		if ( (keyboard.buttons[i].state_old != keyboard.buttons[i].state_new) && (keyboard.buttons[i].state_new == 0) )
 800dba8:	4a13      	ldr	r2, [pc, #76]	@ (800dbf8 <KBD_scan+0xa0>)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	011b      	lsls	r3, r3, #4
 800dbae:	4413      	add	r3, r2
 800dbb0:	3308      	adds	r3, #8
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	4910      	ldr	r1, [pc, #64]	@ (800dbf8 <KBD_scan+0xa0>)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	011b      	lsls	r3, r3, #4
 800dbba:	440b      	add	r3, r1
 800dbbc:	330c      	adds	r3, #12
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d00d      	beq.n	800dbe0 <KBD_scan+0x88>
 800dbc4:	4a0c      	ldr	r2, [pc, #48]	@ (800dbf8 <KBD_scan+0xa0>)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	011b      	lsls	r3, r3, #4
 800dbca:	4413      	add	r3, r2
 800dbcc:	330c      	adds	r3, #12
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d105      	bne.n	800dbe0 <KBD_scan+0x88>
		{

			// In če zaznamo pritisk i-te tipke, shranimo to informacijo v medpomnilnik tipkovnice.
			// Shranimo seveda kar vrednost elementa naštevnega tipa, ki pripada obravnavani i-ti tipki.
			// In to je seveda kar vrednost pomožne spremenljivke "i". Uporabimo funkcijo BUF_store_byte().
			BUF_store_byte( &kbd_buf_handle, i);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	4619      	mov	r1, r3
 800dbda:	4808      	ldr	r0, [pc, #32]	@ (800dbfc <KBD_scan+0xa4>)
 800dbdc:	f7ff fee1 	bl	800d9a2 <BUF_store_byte>
	for(int i=0; i < NUM_OF_BTNS; i++)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	607b      	str	r3, [r7, #4]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b05      	cmp	r3, #5
 800dbea:	ddbb      	ble.n	800db64 <KBD_scan+0xc>

		}

	}

}
 800dbec:	bf00      	nop
 800dbee:	bf00      	nop
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20002958 	.word	0x20002958
 800dbfc:	200029b8 	.word	0x200029b8

0800dc00 <KBD_get_pressed_key>:
// Funkcija KBD_get_pressed_key() iz medpomnilnika tipkovnice vrne
// informacijo o tem, katera je naslednja pritisnjena tipka, na katero
// se še nismo odzvali (tj. je nismo obdelali, "sprocesirali").
//
buttons_enum_t KBD_get_pressed_key(void)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
	// V nasprotnem primeru sklepamo, da je bilo branje elementa iz
	// medpomnilnika neuspešno, ker je medpomnilnik prazen.


	// Torej poskusimo prebrati nov element iz medpomnilnika in ga shraniti v spremenljivko "pressed_button".
	if ( BUF_get_byte( &kbd_buf_handle, &pressed_button ) == BUFFER_OK )
 800dc06:	1dfb      	adds	r3, r7, #7
 800dc08:	4619      	mov	r1, r3
 800dc0a:	4806      	ldr	r0, [pc, #24]	@ (800dc24 <KBD_get_pressed_key+0x24>)
 800dc0c:	f7ff ff08 	bl	800da20 <BUF_get_byte>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d101      	bne.n	800dc1a <KBD_get_pressed_key+0x1a>
	{
		// Če je bilo branje elementa iz medpomnilnika v spremenljivko "pressed_button"
		// uspešno (tj. vrnjen BUFFER_OK), potem je vrednost, ki jo mora funkcija
		// KBD_get_pressed_key() vrniti kar enaka vrednosti pomožne spremenljivke "pressed_button".

		return pressed_button;
 800dc16:	79fb      	ldrb	r3, [r7, #7]
 800dc18:	e000      	b.n	800dc1c <KBD_get_pressed_key+0x1c>
		// Če pa je bilo branje elementa iz medpomnilnika v spremenljivko "pressed_button"
		// neuspešno (tj. ni bil vrnjen BUFFER_OK), potem pa sklepamo, da je medpomnilnik
		// prazen in da pravzaprav ni bila pritisnjena nobena nova tipka.
		// Funkcija KBD_get_pressed_key() mora vrniti kodo "BTN_NONE".

		return BTN_NONE;
 800dc1a:	2307      	movs	r3, #7
	}

}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	200029b8 	.word	0x200029b8

0800dc28 <LCD_IO_Init>:
/*!
 * @brief Nizkonivojska inicializacija zaslona
 * @internal
 */
static void LCD_IO_Init()
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	af00      	add	r7, sp, #0
	LCD_RST_LOW();
 800dc2c:	4b06      	ldr	r3, [pc, #24]	@ (800dc48 <LCD_IO_Init+0x20>)
 800dc2e:	2208      	movs	r2, #8
 800dc30:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(120);
 800dc32:	2078      	movs	r0, #120	@ 0x78
 800dc34:	f7f6 f9d4 	bl	8003fe0 <HAL_Delay>
	LCD_RST_HIGH();
 800dc38:	4b03      	ldr	r3, [pc, #12]	@ (800dc48 <LCD_IO_Init+0x20>)
 800dc3a:	2208      	movs	r2, #8
 800dc3c:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 800dc3e:	2078      	movs	r0, #120	@ 0x78
 800dc40:	f7f6 f9ce 	bl	8003fe0 <HAL_Delay>
}
 800dc44:	bf00      	nop
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	48000c00 	.word	0x48000c00

0800dc4c <LCD_FillRect>:
 *
 * Funkcija izbere želeno območje, potem pa tolikokrat pošlje izbrano barvo,
 * kolikor slikovnih točk je potrebnih.
 */
void LCD_FillRect(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t c)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	603b      	str	r3, [r7, #0]
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 800dc5a:	2002      	movs	r0, #2
 800dc5c:	f000 fbe8 	bl	800e430 <ILI9341_GetParam>
 800dc60:	6138      	str	r0, [r7, #16]
	uint32_t pixel_count = ((w + 1) - x) * ((h + 1) - y);  /* Dejansko št. pikslov */
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	3301      	adds	r3, #1
 800dc6a:	6839      	ldr	r1, [r7, #0]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	1a8a      	subs	r2, r1, r2
 800dc70:	3201      	adds	r2, #1
 800dc72:	fb02 f303 	mul.w	r3, r2, r3
 800dc76:	617b      	str	r3, [r7, #20]

	if(pixel_count > max_count)
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d901      	bls.n	800dc84 <LCD_FillRect+0x38>
		pixel_count = max_count;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	617b      	str	r3, [r7, #20]

	// Izbor koordinat piksla
	ILI9341_SetDisplayWindow(x, y, w, h);
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	68b9      	ldr	r1, [r7, #8]
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f000 fae4 	bl	800e258 <ILI9341_SetDisplayWindow>

	ILI9341_SendRepeatedData(c, pixel_count);
 800dc90:	8c3b      	ldrh	r3, [r7, #32]
 800dc92:	6979      	ldr	r1, [r7, #20]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 fa88 	bl	800e1aa <ILI9341_SendRepeatedData>
	//while (pixel_count) {
	//	LCD_IO_SendData((uint16_t *)&c, LCD_IO_DATA_WRITE_CYCLES);
	//	pixel_count--;
	//}
}
 800dc9a:	bf00      	nop
 800dc9c:	3718      	adds	r7, #24
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <LCD_DrawLine>:

//function copied from ugui library
void LCD_DrawLine(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, uint16_t c)
{
 800dca2:	b580      	push	{r7, lr}
 800dca4:	b08a      	sub	sp, #40	@ 0x28
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	60f8      	str	r0, [r7, #12]
 800dcaa:	60b9      	str	r1, [r7, #8]
 800dcac:	607a      	str	r2, [r7, #4]
 800dcae:	603b      	str	r3, [r7, #0]
	   int16_t n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

	   dx = x2 - x1;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	83bb      	strh	r3, [r7, #28]
	   dy = y2 - y1;
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	837b      	strh	r3, [r7, #26]
	   dxabs = (dx>0)?dx:-dx;
 800dccc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	bfb8      	it	lt
 800dcd4:	425b      	neglt	r3, r3
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	833b      	strh	r3, [r7, #24]
	   dyabs = (dy>0)?dy:-dy;
 800dcda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	bfb8      	it	lt
 800dce2:	425b      	neglt	r3, r3
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	82fb      	strh	r3, [r7, #22]
	   sgndx = (dx>0)?1:-1;
 800dce8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	dd01      	ble.n	800dcf4 <LCD_DrawLine+0x52>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e001      	b.n	800dcf8 <LCD_DrawLine+0x56>
 800dcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf8:	82bb      	strh	r3, [r7, #20]
	   sgndy = (dy>0)?1:-1;
 800dcfa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	dd01      	ble.n	800dd06 <LCD_DrawLine+0x64>
 800dd02:	2301      	movs	r3, #1
 800dd04:	e001      	b.n	800dd0a <LCD_DrawLine+0x68>
 800dd06:	f04f 33ff 	mov.w	r3, #4294967295
 800dd0a:	827b      	strh	r3, [r7, #18]
	   x = dyabs >> 1;
 800dd0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd10:	105b      	asrs	r3, r3, #1
 800dd12:	84bb      	strh	r3, [r7, #36]	@ 0x24
	   y = dxabs >> 1;
 800dd14:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800dd18:	105b      	asrs	r3, r3, #1
 800dd1a:	847b      	strh	r3, [r7, #34]	@ 0x22
	   drawx = x1;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	843b      	strh	r3, [r7, #32]
	   drawy = y1;
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	83fb      	strh	r3, [r7, #30]

	   if(!(drawx>ILI9341_WIDTH || drawy > ILI9341_HEIGHT)) UserPixelSetFunction(drawx, drawy, c);
 800dd24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd28:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800dd2c:	dc0b      	bgt.n	800dd46 <LCD_DrawLine+0xa4>
 800dd2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dd32:	2bf0      	cmp	r3, #240	@ 0xf0
 800dd34:	dc07      	bgt.n	800dd46 <LCD_DrawLine+0xa4>
 800dd36:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800dd38:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800dd3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 f940 	bl	800dfc6 <UserPixelSetFunction>

	   if( dxabs >= dyabs )
 800dd46:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800dd4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	db3a      	blt.n	800ddc8 <LCD_DrawLine+0x126>
	   {
	      for( n=0; n<dxabs; n++ )
 800dd52:	2300      	movs	r3, #0
 800dd54:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dd56:	e030      	b.n	800ddba <LCD_DrawLine+0x118>
	      {
	         y += dyabs;
 800dd58:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dd5a:	8afb      	ldrh	r3, [r7, #22]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	847b      	strh	r3, [r7, #34]	@ 0x22
	         if( y >= dxabs )
 800dd62:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800dd66:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	db09      	blt.n	800dd82 <LCD_DrawLine+0xe0>
	         {
	            y -= dxabs;
 800dd6e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dd70:	8b3b      	ldrh	r3, [r7, #24]
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	847b      	strh	r3, [r7, #34]	@ 0x22
	            drawy += sgndy;
 800dd78:	8bfa      	ldrh	r2, [r7, #30]
 800dd7a:	8a7b      	ldrh	r3, [r7, #18]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	83fb      	strh	r3, [r7, #30]
	         }
	         drawx += sgndx;
 800dd82:	8c3a      	ldrh	r2, [r7, #32]
 800dd84:	8abb      	ldrh	r3, [r7, #20]
 800dd86:	4413      	add	r3, r2
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	843b      	strh	r3, [r7, #32]
	         if(!(drawx>ILI9341_WIDTH || drawy > ILI9341_HEIGHT)) UserPixelSetFunction(drawx, drawy, c);
 800dd8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd90:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800dd94:	dc0b      	bgt.n	800ddae <LCD_DrawLine+0x10c>
 800dd96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dd9a:	2bf0      	cmp	r3, #240	@ 0xf0
 800dd9c:	dc07      	bgt.n	800ddae <LCD_DrawLine+0x10c>
 800dd9e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800dda0:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800dda4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 f90c 	bl	800dfc6 <UserPixelSetFunction>
	      for( n=0; n<dxabs; n++ )
 800ddae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ddba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800ddbe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	dbc8      	blt.n	800dd58 <LCD_DrawLine+0xb6>
	         }
	         drawy += sgndy;
	         if(!(drawx>ILI9341_WIDTH || drawy > ILI9341_HEIGHT)) UserPixelSetFunction(drawx, drawy, c);
	      }
	   }
}
 800ddc6:	e039      	b.n	800de3c <LCD_DrawLine+0x19a>
	      for( n=0; n<dyabs; n++ )
 800ddc8:	2300      	movs	r3, #0
 800ddca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ddcc:	e030      	b.n	800de30 <LCD_DrawLine+0x18e>
	         x += dxabs;
 800ddce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ddd0:	8b3b      	ldrh	r3, [r7, #24]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	         if( x >= dyabs )
 800ddd8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800dddc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	db09      	blt.n	800ddf8 <LCD_DrawLine+0x156>
	            x -= dyabs;
 800dde4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dde6:	8afb      	ldrh	r3, [r7, #22]
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	84bb      	strh	r3, [r7, #36]	@ 0x24
	            drawx += sgndx;
 800ddee:	8c3a      	ldrh	r2, [r7, #32]
 800ddf0:	8abb      	ldrh	r3, [r7, #20]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	843b      	strh	r3, [r7, #32]
	         drawy += sgndy;
 800ddf8:	8bfa      	ldrh	r2, [r7, #30]
 800ddfa:	8a7b      	ldrh	r3, [r7, #18]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	83fb      	strh	r3, [r7, #30]
	         if(!(drawx>ILI9341_WIDTH || drawy > ILI9341_HEIGHT)) UserPixelSetFunction(drawx, drawy, c);
 800de02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800de06:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800de0a:	dc0b      	bgt.n	800de24 <LCD_DrawLine+0x182>
 800de0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800de10:	2bf0      	cmp	r3, #240	@ 0xf0
 800de12:	dc07      	bgt.n	800de24 <LCD_DrawLine+0x182>
 800de14:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800de16:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800de1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800de1e:	4618      	mov	r0, r3
 800de20:	f000 f8d1 	bl	800dfc6 <UserPixelSetFunction>
	      for( n=0; n<dyabs; n++ )
 800de24:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800de28:	b29b      	uxth	r3, r3
 800de2a:	3301      	adds	r3, #1
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de30:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800de34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de38:	429a      	cmp	r2, r3
 800de3a:	dbc8      	blt.n	800ddce <LCD_DrawLine+0x12c>
}
 800de3c:	bf00      	nop
 800de3e:	3728      	adds	r7, #40	@ 0x28
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <LCD_Triangle>:

	ILI9341_SetDisplayWindow(x, y, h, 0);
	ILI9341_SendRepeatedData(c, h);
}

void LCD_Triangle(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, uint32_t x3, uint32_t y3, uint16_t c){
 800de44:	b580      	push	{r7, lr}
 800de46:	b086      	sub	sp, #24
 800de48:	af02      	add	r7, sp, #8
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
 800de50:	603b      	str	r3, [r7, #0]

	LCD_DrawLine(x1, y1, x2, y2, c);
 800de52:	8c3b      	ldrh	r3, [r7, #32]
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	68b9      	ldr	r1, [r7, #8]
 800de5c:	68f8      	ldr	r0, [r7, #12]
 800de5e:	f7ff ff20 	bl	800dca2 <LCD_DrawLine>
	LCD_DrawLine(x2, y2, x3, y3, c);
 800de62:	8c3b      	ldrh	r3, [r7, #32]
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	69ba      	ldr	r2, [r7, #24]
 800de6a:	6839      	ldr	r1, [r7, #0]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff ff18 	bl	800dca2 <LCD_DrawLine>
	LCD_DrawLine(x3, y3, x1, y1, c);
 800de72:	8c3b      	ldrh	r3, [r7, #32]
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	69f9      	ldr	r1, [r7, #28]
 800de7c:	69b8      	ldr	r0, [r7, #24]
 800de7e:	f7ff ff10 	bl	800dca2 <LCD_DrawLine>
}
 800de82:	bf00      	nop
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <LCD_DrawMesh>:

void LCD_DrawMesh(OBJMesh mesh, uint16_t c){
 800de8a:	b084      	sub	sp, #16
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b086      	sub	sp, #24
 800de90:	af04      	add	r7, sp, #16
 800de92:	f107 0c10 	add.w	ip, r7, #16
 800de96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i = 0; i< mesh.size; i++){
 800de9a:	2300      	movs	r3, #0
 800de9c:	607b      	str	r3, [r7, #4]
 800de9e:	e05d      	b.n	800df5c <LCD_DrawMesh+0xd2>

		LCD_Triangle(mesh.t[i].v[0].x, mesh.t[i].v[0].y,
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	4613      	mov	r3, r2
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	4413      	add	r3, r2
 800dea8:	011b      	lsls	r3, r3, #4
 800deaa:	3310      	adds	r3, #16
 800deac:	443b      	add	r3, r7
 800deae:	3304      	adds	r3, #4
 800deb0:	edd3 7a00 	vldr	s15, [r3]
 800deb4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	4613      	mov	r3, r2
 800debc:	005b      	lsls	r3, r3, #1
 800debe:	4413      	add	r3, r2
 800dec0:	011b      	lsls	r3, r3, #4
 800dec2:	3310      	adds	r3, #16
 800dec4:	443b      	add	r3, r7
 800dec6:	3308      	adds	r3, #8
 800dec8:	edd3 7a00 	vldr	s15, [r3]
 800decc:	eefc 6ae7 	vcvt.u32.f32	s13, s15
				mesh.t[i].v[1].x, mesh.t[i].v[1].y,
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	4613      	mov	r3, r2
 800ded4:	005b      	lsls	r3, r3, #1
 800ded6:	4413      	add	r3, r2
 800ded8:	011b      	lsls	r3, r3, #4
 800deda:	3310      	adds	r3, #16
 800dedc:	443b      	add	r3, r7
 800dede:	3314      	adds	r3, #20
 800dee0:	edd3 7a00 	vldr	s15, [r3]
		LCD_Triangle(mesh.t[i].v[0].x, mesh.t[i].v[0].y,
 800dee4:	eebc 6ae7 	vcvt.u32.f32	s12, s15
				mesh.t[i].v[1].x, mesh.t[i].v[1].y,
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	4613      	mov	r3, r2
 800deec:	005b      	lsls	r3, r3, #1
 800deee:	4413      	add	r3, r2
 800def0:	011b      	lsls	r3, r3, #4
 800def2:	3310      	adds	r3, #16
 800def4:	443b      	add	r3, r7
 800def6:	3318      	adds	r3, #24
 800def8:	edd3 7a00 	vldr	s15, [r3]
		LCD_Triangle(mesh.t[i].v[0].x, mesh.t[i].v[0].y,
 800defc:	eefc 5ae7 	vcvt.u32.f32	s11, s15
				mesh.t[i].v[2].x, mesh.t[i].v[2].y, c);
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	4613      	mov	r3, r2
 800df04:	005b      	lsls	r3, r3, #1
 800df06:	4413      	add	r3, r2
 800df08:	011b      	lsls	r3, r3, #4
 800df0a:	3310      	adds	r3, #16
 800df0c:	443b      	add	r3, r7
 800df0e:	3324      	adds	r3, #36	@ 0x24
 800df10:	edd3 7a00 	vldr	s15, [r3]
		LCD_Triangle(mesh.t[i].v[0].x, mesh.t[i].v[0].y,
 800df14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df18:	ee17 1a90 	vmov	r1, s15
				mesh.t[i].v[2].x, mesh.t[i].v[2].y, c);
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	4613      	mov	r3, r2
 800df20:	005b      	lsls	r3, r3, #1
 800df22:	4413      	add	r3, r2
 800df24:	011b      	lsls	r3, r3, #4
 800df26:	3310      	adds	r3, #16
 800df28:	443b      	add	r3, r7
 800df2a:	3328      	adds	r3, #40	@ 0x28
 800df2c:	edd3 7a00 	vldr	s15, [r3]
		LCD_Triangle(mesh.t[i].v[0].x, mesh.t[i].v[0].y,
 800df30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df34:	ee17 2a90 	vmov	r2, s15
 800df38:	f8b7 35e4 	ldrh.w	r3, [r7, #1508]	@ 0x5e4
 800df3c:	9302      	str	r3, [sp, #8]
 800df3e:	9201      	str	r2, [sp, #4]
 800df40:	9100      	str	r1, [sp, #0]
 800df42:	ee15 3a90 	vmov	r3, s11
 800df46:	ee16 2a10 	vmov	r2, s12
 800df4a:	ee16 1a90 	vmov	r1, s13
 800df4e:	ee17 0a10 	vmov	r0, s14
 800df52:	f7ff ff77 	bl	800de44 <LCD_Triangle>
	for(int i = 0; i< mesh.size; i++){
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	3301      	adds	r3, #1
 800df5a:	607b      	str	r3, [r7, #4]
 800df5c:	7c3b      	ldrb	r3, [r7, #16]
 800df5e:	461a      	mov	r2, r3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4293      	cmp	r3, r2
 800df64:	db9c      	blt.n	800dea0 <LCD_DrawMesh+0x16>
	}
}
 800df66:	bf00      	nop
 800df68:	bf00      	nop
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df72:	b004      	add	sp, #16
 800df74:	4770      	bx	lr

0800df76 <LCD_Init>:
 * Inicializacija nastavi privzet barvni prostor (RGB565), orientacijo zaslona, vklopi osvetlitev,
 * zapolni zaslon s črno barvo in nastavi bel tekst na črni podlagi.
 * @note Za inicializacijo posameznih strojnih enot mora poskrbeti uporabnik (npr. FMC)
 */
void LCD_Init()
{
 800df76:	b580      	push	{r7, lr}
 800df78:	af00      	add	r7, sp, #0
	// Resetiraj V/I linijo zaslona
	LCD_IO_Init();
 800df7a:	f7ff fe55 	bl	800dc28 <LCD_IO_Init>

	// Inicializiraj krmilnik Ili9341 v barvnem prostoru RBG565 in brez zasuka slike
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 800df7e:	2103      	movs	r1, #3
 800df80:	2055      	movs	r0, #85	@ 0x55
 800df82:	f000 f9cb 	bl	800e31c <ILI9341_Init>
	ILI9341_DisplayOn();
 800df86:	f000 fa46 	bl	800e416 <ILI9341_DisplayOn>

	LCD_ClearScreen();
 800df8a:	f000 f806 	bl	800df9a <LCD_ClearScreen>
	// Gornja funkcija se bo zaključila pred izbrisom celega zaslona, ker si FMC zapomni vse
	// ukaze in sporoči, da se je zaključil prenos, ne pa pošiljanje.
	// Brez zamika bo zaslon za trenutek utripnil belo. Prej:  HAL_Delay(25);
	ILI9341_WaitTransfer();
 800df8e:	f000 fa3b 	bl	800e408 <ILI9341_WaitTransfer>

	// Inicializiramo še osvetlitev LCD zaslona.
	LCD_BKLT_init();
 800df92:	f000 f86d 	bl	800e070 <LCD_BKLT_init>
}
 800df96:	bf00      	nop
 800df98:	bd80      	pop	{r7, pc}

0800df9a <LCD_ClearScreen>:

/*!
 * @brief Počisti zaslon (prebarvaj s črno barvo)
 */
void LCD_ClearScreen()
{
 800df9a:	b590      	push	{r4, r7, lr}
 800df9c:	b083      	sub	sp, #12
 800df9e:	af02      	add	r7, sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_HEIGHT), ILI9341_GetParam(LCD_WIDTH), 0);
 800dfa0:	2001      	movs	r0, #1
 800dfa2:	f000 fa45 	bl	800e430 <ILI9341_GetParam>
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	f000 fa41 	bl	800e430 <ILI9341_GetParam>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	9200      	str	r2, [sp, #0]
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	2000      	movs	r0, #0
 800dfba:	f7ff fe47 	bl	800dc4c <LCD_FillRect>
}
 800dfbe:	bf00      	nop
 800dfc0:	3704      	adds	r7, #4
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd90      	pop	{r4, r7, pc}

0800dfc6 <UserPixelSetFunction>:


void UserPixelSetFunction(int16_t x, int16_t y, uint16_t c)
{
 800dfc6:	b580      	push	{r7, lr}
 800dfc8:	b082      	sub	sp, #8
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	4603      	mov	r3, r0
 800dfce:	80fb      	strh	r3, [r7, #6]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	80bb      	strh	r3, [r7, #4]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	807b      	strh	r3, [r7, #2]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 800dfd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800dfdc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	f000 f938 	bl	800e258 <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 800dfe8:	1cbb      	adds	r3, r7, #2
 800dfea:	2101      	movs	r1, #1
 800dfec:	4618      	mov	r0, r3
 800dfee:	f000 f8ba 	bl	800e166 <ILI9341_SendData>
}
 800dff2:	bf00      	nop
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <LL_TIM_EnableCounter>:
{
 800dffa:	b480      	push	{r7}
 800dffc:	b083      	sub	sp, #12
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f043 0201 	orr.w	r2, r3, #1
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	601a      	str	r2, [r3, #0]
}
 800e00e:	bf00      	nop
 800e010:	370c      	adds	r7, #12
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <LL_TIM_CC_EnableChannel>:
{
 800e01a:	b480      	push	{r7}
 800e01c:	b083      	sub	sp, #12
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6a1a      	ldr	r2, [r3, #32]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	431a      	orrs	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	621a      	str	r2, [r3, #32]
}
 800e030:	bf00      	nop
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <LL_TIM_OC_SetCompareCH1>:
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	683a      	ldr	r2, [r7, #0]
 800e04a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <LL_TIM_OC_GetCompareCH1>:
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 800e064:	4618      	mov	r0, r3
 800e066:	370c      	adds	r7, #12
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <LCD_BKLT_init>:

// Funkcija LCD_BKLT_init() poskrbi za inicializacijo "handle" strukture za upravljanje LCD osvetlitve,
// za omogočitev delovanja časovnika, omogočitev delovanja kanala časovnika ter za določitev začetne
// vrednosti jakosti osvetlitve LCD zaslona ob inicializaciji sistema.
void LCD_BKLT_init(void)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	af00      	add	r7, sp, #0
		// --- Specifikacija časovnika ter kanala časovnika ---
		//
		// Ti dva parametra strukture določimo s pred-definiranima makrojema iz LL knjižnice,
		// podobno kot smo to storili v prejšnjih vajah.
		// Pozor: kanala ne podamo s številko, temveč z masko.
		LCD_backlight.timer = TIM4 ;
 800e074:	4b0f      	ldr	r3, [pc, #60]	@ (800e0b4 <LCD_BKLT_init+0x44>)
 800e076:	4a10      	ldr	r2, [pc, #64]	@ (800e0b8 <LCD_BKLT_init+0x48>)
 800e078:	601a      	str	r2, [r3, #0]
		LCD_backlight.timer_channel = LL_TIM_CHANNEL_CH1 ;		// namig: poglejte komentar pri implementaciji funkcije LL_TIM_CC_EnableChannel()
 800e07a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b4 <LCD_BKLT_init+0x44>)
 800e07c:	2201      	movs	r2, #1
 800e07e:	605a      	str	r2, [r3, #4]

		// --- Specifikacija LL funkcij za delo s kanalom časovnika ---
		//
		// Kazalca na funkciji inicializiramo s pomočjo imen LL funkcij za nastavitev in
		// branje vrednosti za primerjavo (angl. compare value).
		LCD_backlight.SetCompare = &LL_TIM_OC_SetCompareCH1;
 800e080:	4b0c      	ldr	r3, [pc, #48]	@ (800e0b4 <LCD_BKLT_init+0x44>)
 800e082:	4a0e      	ldr	r2, [pc, #56]	@ (800e0bc <LCD_BKLT_init+0x4c>)
 800e084:	609a      	str	r2, [r3, #8]
		LCD_backlight.GetCompare = &LL_TIM_OC_GetCompareCH1;
 800e086:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b4 <LCD_BKLT_init+0x44>)
 800e088:	4a0d      	ldr	r2, [pc, #52]	@ (800e0c0 <LCD_BKLT_init+0x50>)
 800e08a:	60da      	str	r2, [r3, #12]


		// --- Specifikacija privzete vrednosti za osvetlitev zaslona ---
		//
		LCD_backlight.default_brightness = 50;		// podano v procentih
 800e08c:	4b09      	ldr	r3, [pc, #36]	@ (800e0b4 <LCD_BKLT_init+0x44>)
 800e08e:	2232      	movs	r2, #50	@ 0x32
 800e090:	741a      	strb	r2, [r3, #16]

	// 2. Omogočitev delovanja časovnika, da prične s štetjem.

		// Uporabimo ustrezno LL funkcijo.

		LL_TIM_EnableCounter (LCD_backlight.timer);
 800e092:	4b08      	ldr	r3, [pc, #32]	@ (800e0b4 <LCD_BKLT_init+0x44>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff ffaf 	bl	800dffa <LL_TIM_EnableCounter>

	// 3. Vklop osvetlitve LCD zaslona s privzeto jakostjo osvetlitve.

		// Tu si lahko pomagamo kar z ustrezno LCD_BKLT_ za vklop osvetlitve.

		 LCD_BKLT_on();
 800e09c:	f000 f824 	bl	800e0e8 <LCD_BKLT_on>

		// Ta kanal časovnika bo poskrbel za generacijo PWM signala na pinu mikrokrmilnika
		// po principu primerjanja vrednosti (angl. output compare functionality).
		// Uporabite ustrezno LL funkcijo.

		 LL_TIM_CC_EnableChannel (LCD_backlight.timer, LCD_backlight.timer_channel);
 800e0a0:	4b04      	ldr	r3, [pc, #16]	@ (800e0b4 <LCD_BKLT_init+0x44>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a03      	ldr	r2, [pc, #12]	@ (800e0b4 <LCD_BKLT_init+0x44>)
 800e0a6:	6852      	ldr	r2, [r2, #4]
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7ff ffb5 	bl	800e01a <LL_TIM_CC_EnableChannel>

}
 800e0b0:	bf00      	nop
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	200029f0 	.word	0x200029f0
 800e0b8:	40000800 	.word	0x40000800
 800e0bc:	0800e03d 	.word	0x0800e03d
 800e0c0:	0800e059 	.word	0x0800e059

0800e0c4 <LCD_BKLT_set_brightness>:
//
// PREMISLITE: ker smo premišljeno definirali periodo časovnika, s katerim
// generiramo PWM signal, vhodni argument funkcije kar neposredno lahko
// uporabimo za nastavitev vrednosti za primerjanje ("compare value")
void LCD_BKLT_set_brightness(uint8_t brightness)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	71fb      	strb	r3, [r7, #7]
	// Ustrezno LL funkcijo torej kličemo s pomočjo kazalca na funkcijo,
	// ki je shranjen v "handle" strukturi po sledeči predlogi:
	//
	// 		Function_pointer (function_argument_list)
	//
	LCD_backlight.SetCompare( LCD_backlight.timer, brightness );
 800e0ce:	4b05      	ldr	r3, [pc, #20]	@ (800e0e4 <LCD_BKLT_set_brightness+0x20>)
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	4a04      	ldr	r2, [pc, #16]	@ (800e0e4 <LCD_BKLT_set_brightness+0x20>)
 800e0d4:	6812      	ldr	r2, [r2, #0]
 800e0d6:	79f9      	ldrb	r1, [r7, #7]
 800e0d8:	4610      	mov	r0, r2
 800e0da:	4798      	blx	r3

	// NAMIG: poglejte, kako smo implementirali klic pri funkciji
	// LCD_BKLT_get_brightness() zgoraj.
}
 800e0dc:	bf00      	nop
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	200029f0 	.word	0x200029f0

0800e0e8 <LCD_BKLT_on>:


// Funkcija LCD_BKLT_on() prižge osvetlitev LED zaslona in nastavi jakost
// osvetlitve na specificirano privzeto vrednost ("default value").
void LCD_BKLT_on(void)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0
	LCD_BKLT_set_brightness(LCD_backlight.default_brightness);
 800e0ec:	4b03      	ldr	r3, [pc, #12]	@ (800e0fc <LCD_BKLT_on+0x14>)
 800e0ee:	7c1b      	ldrb	r3, [r3, #16]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7ff ffe7 	bl	800e0c4 <LCD_BKLT_set_brightness>
}
 800e0f6:	bf00      	nop
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	200029f0 	.word	0x200029f0

0800e100 <FMC_BANK1_SetAddress>:
 * @brief Nastavi spominski naslov enote FSMC
 * @param address želen naslov
 * @internal
 */
static inline void FMC_BANK1_SetAddress (LCD_IO_Data_t address)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	80fb      	strh	r3, [r7, #6]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800e10a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800e10e:	88fb      	ldrh	r3, [r7, #6]
 800e110:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800e112:	f3bf 8f4f 	dsb	sy
}
 800e116:	bf00      	nop

	// Počakaj na sinhronizacijo pomnilnika
	__DSB();
}
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <FMC_BANK1_WriteData>:
 * @brief Piši v register enote FSMC
 * @param data želen podatek
 * @internal
 */
static inline void FMC_BANK1_WriteData(LCD_IO_Data_t data)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	80fb      	strh	r3, [r7, #6]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 800e12e:	4a06      	ldr	r2, [pc, #24]	@ (800e148 <FMC_BANK1_WriteData+0x24>)
 800e130:	88fb      	ldrh	r3, [r7, #6]
 800e132:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800e134:	f3bf 8f4f 	dsb	sy
}
 800e138:	bf00      	nop

	// Počakaj na sinhronizacijo pomnilnika
	__DSB();
}
 800e13a:	bf00      	nop
 800e13c:	370c      	adds	r7, #12
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop
 800e148:	60010000 	.word	0x60010000

0800e14c <ILI9341_SetAddress>:
/*!
 * @brief Podaj spominski naslov LCD krmilniku
 * @param *address *naslov* spremenljivke, v kateri je zapisan ukaz (register)
 */
void ILI9341_SetAddress(LCD_IO_Data_t *address)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
	// Ukazni register je le eden, zato podajanje dolžine podatka ni potrebno
	FMC_BANK1_SetAddress(*address);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	881b      	ldrh	r3, [r3, #0]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff ffd1 	bl	800e100 <FMC_BANK1_SetAddress>
}
 800e15e:	bf00      	nop
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <ILI9341_SendData>:
 * @brief Piši tabelo v grafični pomnilnik (GRAM) LCD krmilnika
 * @param *data  *naslov* tabele, v kateri so zapisani podatki
 * @param length dolžina tabele podatkov
 */
void ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b084      	sub	sp, #16
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
 800e16e:	6039      	str	r1, [r7, #0]
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;
 800e170:	2301      	movs	r3, #1
 800e172:	72fb      	strb	r3, [r7, #11]

	for (uint32_t i = 0; i < (length/increment); i += increment)
 800e174:	2300      	movs	r3, #0
 800e176:	60fb      	str	r3, [r7, #12]
 800e178:	e00b      	b.n	800e192 <ILI9341_SendData+0x2c>
		FMC_BANK1_WriteData(data[i]);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	005b      	lsls	r3, r3, #1
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	4413      	add	r3, r2
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	4618      	mov	r0, r3
 800e186:	f7ff ffcd 	bl	800e124 <FMC_BANK1_WriteData>
	for (uint32_t i = 0; i < (length/increment); i += increment)
 800e18a:	7afb      	ldrb	r3, [r7, #11]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	4413      	add	r3, r2
 800e190:	60fb      	str	r3, [r7, #12]
 800e192:	7afb      	ldrb	r3, [r7, #11]
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	fbb2 f3f3 	udiv	r3, r2, r3
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d3ec      	bcc.n	800e17a <ILI9341_SendData+0x14>
}
 800e1a0:	bf00      	nop
 800e1a2:	bf00      	nop
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <ILI9341_SendRepeatedData>:
 * @brief Večkrat zapiši isti podatek v grafični pomnilnik (GRAM) LCD krmilnika
 * @param data spremenljivka s podatkom
 * @param num_copies število kopij, ki se pošljejo
 */
void ILI9341_SendRepeatedData(LCD_IO_Data_t data, uint32_t num_copies)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b084      	sub	sp, #16
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	6039      	str	r1, [r7, #0]
 800e1b4:	80fb      	strh	r3, [r7, #6]
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	72fb      	strb	r3, [r7, #11]

	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	60fb      	str	r3, [r7, #12]
 800e1be:	e007      	b.n	800e1d0 <ILI9341_SendRepeatedData+0x26>
		FMC_BANK1_WriteData(data);
 800e1c0:	88fb      	ldrh	r3, [r7, #6]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff ffae 	bl	800e124 <FMC_BANK1_WriteData>
	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 800e1c8:	7afb      	ldrb	r3, [r7, #11]
 800e1ca:	68fa      	ldr	r2, [r7, #12]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	60fb      	str	r3, [r7, #12]
 800e1d0:	7afb      	ldrb	r3, [r7, #11]
 800e1d2:	683a      	ldr	r2, [r7, #0]
 800e1d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d3f0      	bcc.n	800e1c0 <ILI9341_SendRepeatedData+0x16>
}
 800e1de:	bf00      	nop
 800e1e0:	bf00      	nop
 800e1e2:	3710      	adds	r7, #16
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <ILI9341_SetOrientation>:
/*!
  * @brief  Nastavi orientacijo zaslona.
  * @param  orientation zasuk zaslona, podan v obliki ILI9341_MISKO_ROTATE_{0,90,180,270}
  */
void ILI9341_SetOrientation(uint32_t orientation)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 800e1f0:	2336      	movs	r3, #54	@ 0x36
 800e1f2:	81fb      	strh	r3, [r7, #14]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 800e1f4:	4a16      	ldr	r2, [pc, #88]	@ (800e250 <ILI9341_SetOrientation+0x68>)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	81bb      	strh	r3, [r7, #12]

	ILI9341_SetAddress(&command);
 800e200:	f107 030e 	add.w	r3, r7, #14
 800e204:	4618      	mov	r0, r3
 800e206:	f7ff ffa1 	bl	800e14c <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 800e20a:	f107 030c 	add.w	r3, r7, #12
 800e20e:	2101      	movs	r1, #1
 800e210:	4618      	mov	r0, r3
 800e212:	f7ff ffa8 	bl	800e166 <ILI9341_SendData>

	switch (orientation) {
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <ILI9341_SetOrientation+0x3a>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b03      	cmp	r3, #3
 800e220:	d107      	bne.n	800e232 <ILI9341_SetOrientation+0x4a>
	case ILI9341_MISKO_ROTATE_0:
	case ILI9341_MISKO_ROTATE_270:
		LCD.width  = ILI9341_HEIGHT;
 800e222:	4b0c      	ldr	r3, [pc, #48]	@ (800e254 <ILI9341_SetOrientation+0x6c>)
 800e224:	22f0      	movs	r2, #240	@ 0xf0
 800e226:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 800e228:	4b0a      	ldr	r3, [pc, #40]	@ (800e254 <ILI9341_SetOrientation+0x6c>)
 800e22a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800e22e:	605a      	str	r2, [r3, #4]
		break;
 800e230:	e007      	b.n	800e242 <ILI9341_SetOrientation+0x5a>
	default:
	case ILI9341_MISKO_ROTATE_90:
	case ILI9341_MISKO_ROTATE_180:
		LCD.width  = ILI9341_WIDTH;
 800e232:	4b08      	ldr	r3, [pc, #32]	@ (800e254 <ILI9341_SetOrientation+0x6c>)
 800e234:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800e238:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 800e23a:	4b06      	ldr	r3, [pc, #24]	@ (800e254 <ILI9341_SetOrientation+0x6c>)
 800e23c:	22f0      	movs	r2, #240	@ 0xf0
 800e23e:	605a      	str	r2, [r3, #4]
		break;
 800e240:	bf00      	nop
	}
	LCD.orientation = orientation;
 800e242:	4a04      	ldr	r2, [pc, #16]	@ (800e254 <ILI9341_SetOrientation+0x6c>)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6093      	str	r3, [r2, #8]
}
 800e248:	bf00      	nop
 800e24a:	3710      	adds	r7, #16
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	2000175c 	.word	0x2000175c
 800e254:	200019d8 	.word	0x200019d8

0800e258 <ILI9341_SetDisplayWindow>:
  * @param  Ypos   y koordinata izhodišča
  * @param  Height višina okna
  * @param  Width  širina okna
  */
void ILI9341_SetDisplayWindow(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b088      	sub	sp, #32
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
 800e264:	603b      	str	r3, [r7, #0]
	ILI9341_Data_t command;
	ILI9341_Data_t parameter[4];

	/* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
	command = ILI9341_CASET;
 800e266:	232a      	movs	r3, #42	@ 0x2a
 800e268:	83fb      	strh	r3, [r7, #30]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	0a1b      	lsrs	r3, r3, #8
 800e26e:	b29b      	uxth	r3, r3
 800e270:	82bb      	strh	r3, [r7, #20]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	b29b      	uxth	r3, r3
 800e276:	b2db      	uxtb	r3, r3
 800e278:	b29b      	uxth	r3, r3
 800e27a:	82fb      	strh	r3, [r7, #22]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4413      	add	r3, r2
 800e282:	3b01      	subs	r3, #1
 800e284:	0a1b      	lsrs	r3, r3, #8
 800e286:	b29b      	uxth	r3, r3
 800e288:	833b      	strh	r3, [r7, #24]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	b29a      	uxth	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	b29b      	uxth	r3, r3
 800e292:	4413      	add	r3, r2
 800e294:	b29b      	uxth	r3, r3
 800e296:	3b01      	subs	r3, #1
 800e298:	b29b      	uxth	r3, r3
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	837b      	strh	r3, [r7, #26]
	ILI9341_SetAddress(&command);
 800e2a0:	f107 031e 	add.w	r3, r7, #30
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7ff ff51 	bl	800e14c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800e2aa:	f107 0314 	add.w	r3, r7, #20
 800e2ae:	2104      	movs	r1, #4
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff ff58 	bl	800e166 <ILI9341_SendData>

	/* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
	command = ILI9341_RASET;
 800e2b6:	232b      	movs	r3, #43	@ 0x2b
 800e2b8:	83fb      	strh	r3, [r7, #30]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	0a1b      	lsrs	r3, r3, #8
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	82bb      	strh	r3, [r7, #20]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	82fb      	strh	r3, [r7, #22]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	0a1b      	lsrs	r3, r3, #8
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	833b      	strh	r3, [r7, #24]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	b29a      	uxth	r2, r3
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	4413      	add	r3, r2
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	837b      	strh	r3, [r7, #26]
	ILI9341_SetAddress(&command);
 800e2f0:	f107 031e 	add.w	r3, r7, #30
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff ff29 	bl	800e14c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800e2fa:	f107 0314 	add.w	r3, r7, #20
 800e2fe:	2104      	movs	r1, #4
 800e300:	4618      	mov	r0, r3
 800e302:	f7ff ff30 	bl	800e166 <ILI9341_SendData>

	// Zapusti nastavitev okna v načinu za vpis barve v GRAM
	command = ILI9341_GRAM;
 800e306:	232c      	movs	r3, #44	@ 0x2c
 800e308:	83fb      	strh	r3, [r7, #30]
	ILI9341_SetAddress(&command);
 800e30a:	f107 031e 	add.w	r3, r7, #30
 800e30e:	4618      	mov	r0, r3
 800e310:	f7ff ff1c 	bl	800e14c <ILI9341_SetAddress>
}
 800e314:	bf00      	nop
 800e316:	3720      	adds	r7, #32
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <ILI9341_Init>:
  * @param  color_space želen barvni prostor (ILI9341_COLORSPACE_RBG{565,666})
  * @param  orientation orientacija zaslona
  * @internal
  */
void ILI9341_Init(uint32_t color_space, uint32_t orientation)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b086      	sub	sp, #24
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
	ILI9341_Data_t command;
	ILI9341_Data_t parameter[5];

	ILI9341_SetOrientation(orientation);
 800e326:	6838      	ldr	r0, [r7, #0]
 800e328:	f7ff ff5e 	bl	800e1e8 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 800e32c:	4b35      	ldr	r3, [pc, #212]	@ (800e404 <ILI9341_Init+0xe8>)
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	4b34      	ldr	r3, [pc, #208]	@ (800e404 <ILI9341_Init+0xe8>)
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	2100      	movs	r1, #0
 800e336:	2000      	movs	r0, #0
 800e338:	f7ff ff8e 	bl	800e258 <ILI9341_SetDisplayWindow>

	// Sleep out
	command = ILI9341_SLEEP_OUT;
 800e33c:	2311      	movs	r3, #17
 800e33e:	82fb      	strh	r3, [r7, #22]
	ILI9341_SetAddress(&command);
 800e340:	f107 0316 	add.w	r3, r7, #22
 800e344:	4618      	mov	r0, r3
 800e346:	f7ff ff01 	bl	800e14c <ILI9341_SetAddress>
	HAL_Delay(200);
 800e34a:	20c8      	movs	r0, #200	@ 0xc8
 800e34c:	f7f5 fe48 	bl	8003fe0 <HAL_Delay>

	// Display Normal mode
	command = ILI9341_NORMAL_MODE_ON;
 800e350:	2313      	movs	r3, #19
 800e352:	82fb      	strh	r3, [r7, #22]
	ILI9341_SetAddress(&command);
 800e354:	f107 0316 	add.w	r3, r7, #22
 800e358:	4618      	mov	r0, r3
 800e35a:	f7ff fef7 	bl	800e14c <ILI9341_SetAddress>
	HAL_Delay(100);
 800e35e:	2064      	movs	r0, #100	@ 0x64
 800e360:	f7f5 fe3e 	bl	8003fe0 <HAL_Delay>

	// Pixel Format
	command = ILI9341_PIXEL_FORMAT;
 800e364:	233a      	movs	r3, #58	@ 0x3a
 800e366:	82fb      	strh	r3, [r7, #22]
	parameter[0] = color_space;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	81bb      	strh	r3, [r7, #12]
	ILI9341_SetAddress(&command);
 800e36e:	f107 0316 	add.w	r3, r7, #22
 800e372:	4618      	mov	r0, r3
 800e374:	f7ff feea 	bl	800e14c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 800e378:	f107 030c 	add.w	r3, r7, #12
 800e37c:	2101      	movs	r1, #1
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff fef1 	bl	800e166 <ILI9341_SendData>
	HAL_Delay(100);
 800e384:	2064      	movs	r0, #100	@ 0x64
 800e386:	f7f5 fe2b 	bl	8003fe0 <HAL_Delay>

	// Update Interface control
	command = ILI9341_INTERFACE;
 800e38a:	23f6      	movs	r3, #246	@ 0xf6
 800e38c:	82fb      	strh	r3, [r7, #22]
	parameter[0] = 0x49;
 800e38e:	2349      	movs	r3, #73	@ 0x49
 800e390:	81bb      	strh	r3, [r7, #12]
	parameter[1] = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	81fb      	strh	r3, [r7, #14]
	parameter[2] = 0x20;
 800e396:	2320      	movs	r3, #32
 800e398:	823b      	strh	r3, [r7, #16]
	ILI9341_SetAddress(&command);
 800e39a:	f107 0316 	add.w	r3, r7, #22
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7ff fed4 	bl	800e14c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 800e3a4:	f107 030c 	add.w	r3, r7, #12
 800e3a8:	2103      	movs	r1, #3
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7ff fedb 	bl	800e166 <ILI9341_SendData>

	// Enable TE
	command = ILI9341_TEON;
 800e3b0:	2335      	movs	r3, #53	@ 0x35
 800e3b2:	82fb      	strh	r3, [r7, #22]
	parameter[0] = 1; /* VSYNC + HSYNC */
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	81bb      	strh	r3, [r7, #12]
	ILI9341_SetAddress(&command);
 800e3b8:	f107 0316 	add.w	r3, r7, #22
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7ff fec5 	bl	800e14c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 800e3c2:	f107 030c 	add.w	r3, r7, #12
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7ff fecc 	bl	800e166 <ILI9341_SendData>
	HAL_Delay(100);
 800e3ce:	2064      	movs	r0, #100	@ 0x64
 800e3d0:	f7f5 fe06 	bl	8003fe0 <HAL_Delay>

	// Enable TE scan line
	command = ILI9341_SET_TEAR_SCANLINE;
 800e3d4:	2344      	movs	r3, #68	@ 0x44
 800e3d6:	82fb      	strh	r3, [r7, #22]
	parameter[0] = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	81bb      	strh	r3, [r7, #12]
	parameter[1] = 0;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	81fb      	strh	r3, [r7, #14]
	ILI9341_SetAddress(&command);
 800e3e0:	f107 0316 	add.w	r3, r7, #22
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7ff feb1 	bl	800e14c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 2);
 800e3ea:	f107 030c 	add.w	r3, r7, #12
 800e3ee:	2102      	movs	r1, #2
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7ff feb8 	bl	800e166 <ILI9341_SendData>
	HAL_Delay(100);
 800e3f6:	2064      	movs	r0, #100	@ 0x64
 800e3f8:	f7f5 fdf2 	bl	8003fe0 <HAL_Delay>
}
 800e3fc:	bf00      	nop
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	200019d8 	.word	0x200019d8

0800e408 <ILI9341_WaitTransfer>:

//! @brief Počakaj na prenos podatka FSMC->Ili9341. Možne dodelave.
void ILI9341_WaitTransfer()
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	af00      	add	r7, sp, #0
	// AddresSetupTime + 1 + DataSetupTime + 1. Glej `fmc.c'.
	// načeloma 6 + 1 + 5 + 1 ms (13 ms), vendar ni zadosti
	HAL_Delay(50);
 800e40c:	2032      	movs	r0, #50	@ 0x32
 800e40e:	f7f5 fde7 	bl	8003fe0 <HAL_Delay>
}
 800e412:	bf00      	nop
 800e414:	bd80      	pop	{r7, pc}

0800e416 <ILI9341_DisplayOn>:

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 800e41c:	2329      	movs	r3, #41	@ 0x29
 800e41e:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(&command);
 800e420:	1dbb      	adds	r3, r7, #6
 800e422:	4618      	mov	r0, r3
 800e424:	f7ff fe92 	bl	800e14c <ILI9341_SetAddress>
}
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <ILI9341_GetParam>:
 *
 * Možne opcije: LCD_WIDTH, LCD_HEIGHT, LCD_AREA, LCD_ORIENTATION.
 * @warning Zaslon mora biti predhodno inicializiran s funkcijo `LCD_Init()'!
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	4603      	mov	r3, r0
 800e438:	71fb      	strb	r3, [r7, #7]
	uint32_t value = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	60fb      	str	r3, [r7, #12]

	switch (param) {
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	2b03      	cmp	r3, #3
 800e442:	d81b      	bhi.n	800e47c <ILI9341_GetParam+0x4c>
 800e444:	a201      	add	r2, pc, #4	@ (adr r2, 800e44c <ILI9341_GetParam+0x1c>)
 800e446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e44a:	bf00      	nop
 800e44c:	0800e45d 	.word	0x0800e45d
 800e450:	0800e465 	.word	0x0800e465
 800e454:	0800e46d 	.word	0x0800e46d
 800e458:	0800e475 	.word	0x0800e475
	case LCD_WIDTH:
		value = LCD.width;
 800e45c:	4b0b      	ldr	r3, [pc, #44]	@ (800e48c <ILI9341_GetParam+0x5c>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	60fb      	str	r3, [r7, #12]
		break;
 800e462:	e00c      	b.n	800e47e <ILI9341_GetParam+0x4e>
	case LCD_HEIGHT:
		value = LCD.height;
 800e464:	4b09      	ldr	r3, [pc, #36]	@ (800e48c <ILI9341_GetParam+0x5c>)
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	60fb      	str	r3, [r7, #12]
		break;
 800e46a:	e008      	b.n	800e47e <ILI9341_GetParam+0x4e>
	case LCD_AREA:
		value = ILI9341_AREA;
 800e46c:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800e470:	60fb      	str	r3, [r7, #12]
		break;
 800e472:	e004      	b.n	800e47e <ILI9341_GetParam+0x4e>
	case LCD_ORIENTATION:
		value = LCD.orientation;
 800e474:	4b05      	ldr	r3, [pc, #20]	@ (800e48c <ILI9341_GetParam+0x5c>)
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	60fb      	str	r3, [r7, #12]
		break;
 800e47a:	e000      	b.n	800e47e <ILI9341_GetParam+0x4e>
	default:
		break;
 800e47c:	bf00      	nop
	}

	return value;
 800e47e:	68fb      	ldr	r3, [r7, #12]
}
 800e480:	4618      	mov	r0, r3
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr
 800e48c:	200019d8 	.word	0x200019d8

0800e490 <Matrix_MultiplyVector>:




	Vect3D Matrix_MultiplyVector(mat4x4 *m, Vect3D *i)
	{
 800e490:	b490      	push	{r4, r7}
 800e492:	b08e      	sub	sp, #56	@ 0x38
 800e494:	af00      	add	r7, sp, #0
 800e496:	6178      	str	r0, [r7, #20]
 800e498:	6139      	str	r1, [r7, #16]
		Vect3D v = {0};
 800e49a:	f107 0318 	add.w	r3, r7, #24
 800e49e:	2200      	movs	r2, #0
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	605a      	str	r2, [r3, #4]
 800e4a4:	609a      	str	r2, [r3, #8]
 800e4a6:	60da      	str	r2, [r3, #12]
		v.x = i->x * m->m[0][0] + i->y * m->m[0][1] + i->z * m->m[0][2] + i->w * m->m[0][3];
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	ed93 7a00 	vldr	s14, [r3]
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	edd3 7a00 	vldr	s15, [r3]
 800e4b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	edd3 6a01 	vldr	s13, [r3, #4]
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	edd3 7a01 	vldr	s15, [r3, #4]
 800e4c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	edd3 6a02 	vldr	s13, [r3, #8]
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	edd3 7a02 	vldr	s15, [r3, #8]
 800e4d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	edd3 6a03 	vldr	s13, [r3, #12]
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	edd3 7a03 	vldr	s15, [r3, #12]
 800e4ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4f4:	edc7 7a06 	vstr	s15, [r7, #24]
		v.y = i->x * m->m[1][0] + i->y * m->m[1][1] + i->z * m->m[1][2] + i->w * m->m[1][3];
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	ed93 7a00 	vldr	s14, [r3]
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	edd3 7a04 	vldr	s15, [r3, #16]
 800e504:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	edd3 6a01 	vldr	s13, [r3, #4]
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	edd3 7a05 	vldr	s15, [r3, #20]
 800e514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	edd3 6a02 	vldr	s13, [r3, #8]
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	edd3 7a06 	vldr	s15, [r3, #24]
 800e528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e52c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	edd3 6a03 	vldr	s13, [r3, #12]
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	edd3 7a07 	vldr	s15, [r3, #28]
 800e53c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e540:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e544:	edc7 7a07 	vstr	s15, [r7, #28]
		v.z = i->x * m->m[2][0] + i->y * m->m[2][1] + i->z * m->m[2][2] + i->w * m->m[2][3];
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	ed93 7a00 	vldr	s14, [r3]
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	edd3 7a08 	vldr	s15, [r3, #32]
 800e554:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	edd3 6a01 	vldr	s13, [r3, #4]
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	edd3 6a02 	vldr	s13, [r3, #8]
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e57c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	edd3 6a03 	vldr	s13, [r3, #12]
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e58c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e590:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e594:	edc7 7a08 	vstr	s15, [r7, #32]
		v.w = i->x * m->m[3][0] + i->y * m->m[3][1] + i->z * m->m[3][2] + i->w * m->m[3][3];
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	ed93 7a00 	vldr	s14, [r3]
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800e5a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	edd3 6a01 	vldr	s13, [r3, #4]
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800e5b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	edd3 6a02 	vldr	s13, [r3, #8]
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800e5c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	edd3 6a03 	vldr	s13, [r3, #12]
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800e5dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		if (v.w != 0.0f)
 800e5e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e5ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5f4:	d017      	beq.n	800e626 <Matrix_MultiplyVector+0x196>
		{
			v.x /= v.w; v.y /= v.w; v.z /= v.w;
 800e5f6:	edd7 6a06 	vldr	s13, [r7, #24]
 800e5fa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800e5fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e602:	edc7 7a06 	vstr	s15, [r7, #24]
 800e606:	edd7 6a07 	vldr	s13, [r7, #28]
 800e60a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800e60e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e612:	edc7 7a07 	vstr	s15, [r7, #28]
 800e616:	edd7 6a08 	vldr	s13, [r7, #32]
 800e61a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800e61e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e622:	edc7 7a08 	vstr	s15, [r7, #32]
		}
		return v;
 800e626:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800e62a:	f107 0318 	add.w	r3, r7, #24
 800e62e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e63c:	ee06 0a10 	vmov	s12, r0
 800e640:	ee06 1a90 	vmov	s13, r1
 800e644:	ee07 2a10 	vmov	s14, r2
 800e648:	ee07 3a90 	vmov	s15, r3
	}
 800e64c:	eeb0 0a46 	vmov.f32	s0, s12
 800e650:	eef0 0a66 	vmov.f32	s1, s13
 800e654:	eeb0 1a47 	vmov.f32	s2, s14
 800e658:	eef0 1a67 	vmov.f32	s3, s15
 800e65c:	3738      	adds	r7, #56	@ 0x38
 800e65e:	46bd      	mov	sp, r7
 800e660:	bc90      	pop	{r4, r7}
 800e662:	4770      	bx	lr

0800e664 <Matrix_MultiplyTriangle>:

	Triangle Matrix_MultiplyTriangle(mat4x4 *m, Triangle *i)
	{
 800e664:	b5b0      	push	{r4, r5, r7, lr}
 800e666:	b090      	sub	sp, #64	@ 0x40
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
		Triangle tri = {0};
 800e670:	f107 0310 	add.w	r3, r7, #16
 800e674:	2230      	movs	r2, #48	@ 0x30
 800e676:	2100      	movs	r1, #0
 800e678:	4618      	mov	r0, r3
 800e67a:	f003 fba7 	bl	8011dcc <memset>
		tri.v[0] = Matrix_MultiplyVector(m, &i->v[0]);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4619      	mov	r1, r3
 800e682:	68b8      	ldr	r0, [r7, #8]
 800e684:	f7ff ff04 	bl	800e490 <Matrix_MultiplyVector>
 800e688:	eeb0 6a40 	vmov.f32	s12, s0
 800e68c:	eef0 6a60 	vmov.f32	s13, s1
 800e690:	eeb0 7a41 	vmov.f32	s14, s2
 800e694:	eef0 7a61 	vmov.f32	s15, s3
 800e698:	ed87 6a04 	vstr	s12, [r7, #16]
 800e69c:	edc7 6a05 	vstr	s13, [r7, #20]
 800e6a0:	ed87 7a06 	vstr	s14, [r7, #24]
 800e6a4:	edc7 7a07 	vstr	s15, [r7, #28]
		tri.v[1] = Matrix_MultiplyVector(m, &i->v[1]);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	3310      	adds	r3, #16
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	68b8      	ldr	r0, [r7, #8]
 800e6b0:	f7ff feee 	bl	800e490 <Matrix_MultiplyVector>
 800e6b4:	eeb0 6a40 	vmov.f32	s12, s0
 800e6b8:	eef0 6a60 	vmov.f32	s13, s1
 800e6bc:	eeb0 7a41 	vmov.f32	s14, s2
 800e6c0:	eef0 7a61 	vmov.f32	s15, s3
 800e6c4:	ed87 6a08 	vstr	s12, [r7, #32]
 800e6c8:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 800e6cc:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 800e6d0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		tri.v[2] = Matrix_MultiplyVector(m, &i->v[2]);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	3320      	adds	r3, #32
 800e6d8:	4619      	mov	r1, r3
 800e6da:	68b8      	ldr	r0, [r7, #8]
 800e6dc:	f7ff fed8 	bl	800e490 <Matrix_MultiplyVector>
 800e6e0:	eeb0 6a40 	vmov.f32	s12, s0
 800e6e4:	eef0 6a60 	vmov.f32	s13, s1
 800e6e8:	eeb0 7a41 	vmov.f32	s14, s2
 800e6ec:	eef0 7a61 	vmov.f32	s15, s3
 800e6f0:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 800e6f4:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 800e6f8:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 800e6fc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		return tri;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	461d      	mov	r5, r3
 800e704:	f107 0410 	add.w	r4, r7, #16
 800e708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e70a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e70c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e70e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e710:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e714:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	3740      	adds	r7, #64	@ 0x40
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bdb0      	pop	{r4, r5, r7, pc}

0800e720 <Matrix_MakeRotationX>:
		matrix.m[3][3] = 1.0f;
		return matrix;
	}

	mat4x4 Matrix_MakeRotationX(float fAngleRad)
	{
 800e720:	b5b0      	push	{r4, r5, r7, lr}
 800e722:	b094      	sub	sp, #80	@ 0x50
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	ed87 0a00 	vstr	s0, [r7]
		mat4x4 matrix = {0};
 800e72c:	f107 0308 	add.w	r3, r7, #8
 800e730:	2240      	movs	r2, #64	@ 0x40
 800e732:	2100      	movs	r1, #0
 800e734:	4618      	mov	r0, r3
 800e736:	f003 fb49 	bl	8011dcc <memset>

		float cos = cosf(fAngleRad);
 800e73a:	ed97 0a00 	vldr	s0, [r7]
 800e73e:	f001 f92d 	bl	800f99c <cosf>
 800e742:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
		float sin = sinf(fAngleRad);
 800e746:	ed97 0a00 	vldr	s0, [r7]
 800e74a:	f001 f96b 	bl	800fa24 <sinf>
 800e74e:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48

		matrix.m[0][0] = 1.0f;
 800e752:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e756:	60bb      	str	r3, [r7, #8]
		matrix.m[1][1] = cos;
 800e758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e75a:	61fb      	str	r3, [r7, #28]
		matrix.m[1][2] = -sin;
 800e75c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e760:	eef1 7a67 	vneg.f32	s15, s15
 800e764:	edc7 7a08 	vstr	s15, [r7, #32]
		matrix.m[2][1] = sin;
 800e768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e76a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		matrix.m[2][2] = cos;
 800e76c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e76e:	633b      	str	r3, [r7, #48]	@ 0x30
		matrix.m[3][3] = 1.0f;
 800e770:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e774:	647b      	str	r3, [r7, #68]	@ 0x44
		return matrix;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	461d      	mov	r5, r3
 800e77a:	f107 0408 	add.w	r4, r7, #8
 800e77e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e78a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e78e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	3750      	adds	r7, #80	@ 0x50
 800e796:	46bd      	mov	sp, r7
 800e798:	bdb0      	pop	{r4, r5, r7, pc}

0800e79a <Matrix_MakeRotationAll>:
		matrix.m[3][3] = 1.0f;
		return matrix;
	}

	mat4x4 Matrix_MakeRotationAll(float fXAngleRad, float fYAngleRad, float fZAngleRad)
	{
 800e79a:	b5b0      	push	{r4, r5, r7, lr}
 800e79c:	b09a      	sub	sp, #104	@ 0x68
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	60f8      	str	r0, [r7, #12]
 800e7a2:	ed87 0a02 	vstr	s0, [r7, #8]
 800e7a6:	edc7 0a01 	vstr	s1, [r7, #4]
 800e7aa:	ed87 1a00 	vstr	s2, [r7]
		float cosa, cosb, cosc, sina, sinb, sinc;

		cosa = cosf(fZAngleRad);
 800e7ae:	ed97 0a00 	vldr	s0, [r7]
 800e7b2:	f001 f8f3 	bl	800f99c <cosf>
 800e7b6:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		cosb = cosf(fYAngleRad);
 800e7ba:	ed97 0a01 	vldr	s0, [r7, #4]
 800e7be:	f001 f8ed 	bl	800f99c <cosf>
 800e7c2:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
		cosc = cosf(fXAngleRad);
 800e7c6:	ed97 0a02 	vldr	s0, [r7, #8]
 800e7ca:	f001 f8e7 	bl	800f99c <cosf>
 800e7ce:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		sina = sinf(fZAngleRad);
 800e7d2:	ed97 0a00 	vldr	s0, [r7]
 800e7d6:	f001 f925 	bl	800fa24 <sinf>
 800e7da:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
		sinb = sinf(fYAngleRad);
 800e7de:	ed97 0a01 	vldr	s0, [r7, #4]
 800e7e2:	f001 f91f 	bl	800fa24 <sinf>
 800e7e6:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
		sinc = sinf(fXAngleRad);
 800e7ea:	ed97 0a02 	vldr	s0, [r7, #8]
 800e7ee:	f001 f919 	bl	800fa24 <sinf>
 800e7f2:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50

		mat4x4 matrix;
		matrix.m[0][0] = cosb*cosc;
 800e7f6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800e7fa:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800e7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e802:	edc7 7a04 	vstr	s15, [r7, #16]
		matrix.m[0][1] = sina*sinb*cosc-cosa*sinc;
 800e806:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800e80a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e80e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e812:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800e816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e81a:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 800e81e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e82a:	edc7 7a05 	vstr	s15, [r7, #20]
		matrix.m[0][2] = cosa*sinb*cosc+sina*sinc;
 800e82e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800e832:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e83a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800e83e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e842:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800e846:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e84a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e84e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e852:	edc7 7a06 	vstr	s15, [r7, #24]
		matrix.m[1][0] = cosb*sinc;
 800e856:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800e85a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e862:	edc7 7a08 	vstr	s15, [r7, #32]
		matrix.m[1][1] = sina*sinb*sinc+cosa*cosc;
 800e866:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800e86a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e86e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e872:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e87a:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 800e87e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800e882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e88a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		matrix.m[1][2] = cosa*sinb*sinc-sina*cosc;
 800e88e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800e892:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e89a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e89e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8a2:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800e8a6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800e8aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8b2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		matrix.m[2][0] = -sinb;
 800e8b6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e8ba:	eef1 7a67 	vneg.f32	s15, s15
 800e8be:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		matrix.m[2][1] = sina*cosb;
 800e8c2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800e8c6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800e8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ce:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		matrix.m[2][2] = cosa*cosb;
 800e8d2:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800e8d6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800e8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8de:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		matrix.m[3][3] = 1.0f;
 800e8e2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e8e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		return matrix;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	461d      	mov	r5, r3
 800e8ec:	f107 0410 	add.w	r4, r7, #16
 800e8f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e8f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e8f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e8fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e900:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	3768      	adds	r7, #104	@ 0x68
 800e908:	46bd      	mov	sp, r7
 800e90a:	bdb0      	pop	{r4, r5, r7, pc}

0800e90c <Matrix_MakeTranslation>:

	mat4x4 Matrix_MakeTranslation(float x, float y, float z)
	{
 800e90c:	b5b0      	push	{r4, r5, r7, lr}
 800e90e:	b094      	sub	sp, #80	@ 0x50
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	ed87 0a02 	vstr	s0, [r7, #8]
 800e918:	edc7 0a01 	vstr	s1, [r7, #4]
 800e91c:	ed87 1a00 	vstr	s2, [r7]
		mat4x4 matrix = {0};
 800e920:	f107 0310 	add.w	r3, r7, #16
 800e924:	2240      	movs	r2, #64	@ 0x40
 800e926:	2100      	movs	r1, #0
 800e928:	4618      	mov	r0, r3
 800e92a:	f003 fa4f 	bl	8011dcc <memset>
		matrix.m[0][0] = 1.0f;
 800e92e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e932:	613b      	str	r3, [r7, #16]
		matrix.m[1][1] = 1.0f;
 800e934:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e938:	627b      	str	r3, [r7, #36]	@ 0x24
		matrix.m[2][2] = 1.0f;
 800e93a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e93e:	63bb      	str	r3, [r7, #56]	@ 0x38
		matrix.m[3][3] = 1.0f;
 800e940:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e944:	64fb      	str	r3, [r7, #76]	@ 0x4c
		matrix.m[0][3] = x;
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	61fb      	str	r3, [r7, #28]
		matrix.m[1][3] = y;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		matrix.m[2][3] = z;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	63fb      	str	r3, [r7, #60]	@ 0x3c
		return matrix;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	461d      	mov	r5, r3
 800e956:	f107 0410 	add.w	r4, r7, #16
 800e95a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e95c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e95e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e966:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e96a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	3750      	adds	r7, #80	@ 0x50
 800e972:	46bd      	mov	sp, r7
 800e974:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e978 <Matrix_MakeProjection>:
		triTranslated.v[2].x = triRotated->v[2].x + x;
		return triTranslated;
	}

	mat4x4 Matrix_MakeProjection(float fFovDegrees, float fAspectRatio, float fNear, float fFar)
	{
 800e978:	b5b0      	push	{r4, r5, r7, lr}
 800e97a:	b098      	sub	sp, #96	@ 0x60
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6178      	str	r0, [r7, #20]
 800e980:	ed87 0a04 	vstr	s0, [r7, #16]
 800e984:	edc7 0a03 	vstr	s1, [r7, #12]
 800e988:	ed87 1a02 	vstr	s2, [r7, #8]
 800e98c:	edc7 1a01 	vstr	s3, [r7, #4]
		float fFovRad = 1.0 / tanf((fFovDegrees*0.5)/(180.0 * 3.14159));
 800e990:	6938      	ldr	r0, [r7, #16]
 800e992:	f7f1 fe01 	bl	8000598 <__aeabi_f2d>
 800e996:	f04f 0200 	mov.w	r2, #0
 800e99a:	4b35      	ldr	r3, [pc, #212]	@ (800ea70 <Matrix_MakeProjection+0xf8>)
 800e99c:	f7f1 fe54 	bl	8000648 <__aeabi_dmul>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	a32f      	add	r3, pc, #188	@ (adr r3, 800ea68 <Matrix_MakeProjection+0xf0>)
 800e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ae:	f7f1 ff75 	bl	800089c <__aeabi_ddiv>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	4610      	mov	r0, r2
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	f7f2 f91d 	bl	8000bf8 <__aeabi_d2f>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	ee00 3a10 	vmov	s0, r3
 800e9c4:	f001 f874 	bl	800fab0 <tanf>
 800e9c8:	eeb0 7a40 	vmov.f32	s14, s0
 800e9cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9d4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		mat4x4 matrix = {0};
 800e9d8:	f107 031c 	add.w	r3, r7, #28
 800e9dc:	2240      	movs	r2, #64	@ 0x40
 800e9de:	2100      	movs	r1, #0
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f003 f9f3 	bl	8011dcc <memset>
		matrix.m[0][0] = fAspectRatio * fFovRad;
 800e9e6:	ed97 7a03 	vldr	s14, [r7, #12]
 800e9ea:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800e9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9f2:	edc7 7a07 	vstr	s15, [r7, #28]
		matrix.m[1][1] = fFovRad;
 800e9f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9f8:	633b      	str	r3, [r7, #48]	@ 0x30
		matrix.m[2][2] = fFar / (fFar - fNear);
 800e9fa:	ed97 7a01 	vldr	s14, [r7, #4]
 800e9fe:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea02:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea06:	edd7 6a01 	vldr	s13, [r7, #4]
 800ea0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea0e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		matrix.m[2][3] = (-fFar * fNear) / (fFar - fNear);
 800ea12:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea16:	eeb1 7a67 	vneg.f32	s14, s15
 800ea1a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea1e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ea22:	ed97 7a01 	vldr	s14, [r7, #4]
 800ea26:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea32:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		matrix.m[3][2] = 1.0f;
 800ea36:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800ea3a:	657b      	str	r3, [r7, #84]	@ 0x54
		matrix.m[3][3] = 0.0f;
 800ea3c:	f04f 0300 	mov.w	r3, #0
 800ea40:	65bb      	str	r3, [r7, #88]	@ 0x58
		return matrix;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	461d      	mov	r5, r3
 800ea46:	f107 041c 	add.w	r4, r7, #28
 800ea4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ea5a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}
 800ea5e:	6978      	ldr	r0, [r7, #20]
 800ea60:	3760      	adds	r7, #96	@ 0x60
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bdb0      	pop	{r4, r5, r7, pc}
 800ea66:	bf00      	nop
 800ea68:	bcd35a85 	.word	0xbcd35a85
 800ea6c:	4081abe3 	.word	0x4081abe3
 800ea70:	3fe00000 	.word	0x3fe00000

0800ea74 <Matrix_MultiplyMatrix>:

	mat4x4 Matrix_MultiplyMatrix(mat4x4 *m1, mat4x4 *m2)
	{
 800ea74:	b4b0      	push	{r4, r5, r7}
 800ea76:	b097      	sub	sp, #92	@ 0x5c
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
		mat4x4 matrix;
		for (int c = 0; c < 4; c++)
 800ea80:	2300      	movs	r3, #0
 800ea82:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea84:	e059      	b.n	800eb3a <Matrix_MultiplyMatrix+0xc6>
			for (int r = 0; r < 4; r++)
 800ea86:	2300      	movs	r3, #0
 800ea88:	653b      	str	r3, [r7, #80]	@ 0x50
 800ea8a:	e050      	b.n	800eb2e <Matrix_MultiplyMatrix+0xba>
				matrix.m[r][c] = m1->m[r][0] * m2->m[0][c] + m1->m[r][1] * m2->m[1][c] + m1->m[r][2] * m2->m[2][c] + m1->m[r][3] * m2->m[3][c];
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea90:	011b      	lsls	r3, r3, #4
 800ea92:	4413      	add	r3, r2
 800ea94:	ed93 7a00 	vldr	s14, [r3]
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	edd3 7a00 	vldr	s15, [r3]
 800eaa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eaac:	011b      	lsls	r3, r3, #4
 800eaae:	4413      	add	r3, r2
 800eab0:	3304      	adds	r3, #4
 800eab2:	edd3 6a00 	vldr	s13, [r3]
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaba:	3304      	adds	r3, #4
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	4413      	add	r3, r2
 800eac0:	edd3 7a00 	vldr	s15, [r3]
 800eac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ead0:	011b      	lsls	r3, r3, #4
 800ead2:	4413      	add	r3, r2
 800ead4:	3308      	adds	r3, #8
 800ead6:	edd3 6a00 	vldr	s13, [r3]
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eade:	3308      	adds	r3, #8
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	edd3 7a00 	vldr	s15, [r3]
 800eae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eaec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eaf4:	011b      	lsls	r3, r3, #4
 800eaf6:	4413      	add	r3, r2
 800eaf8:	330c      	adds	r3, #12
 800eafa:	edd3 6a00 	vldr	s13, [r3]
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb02:	330c      	adds	r3, #12
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4413      	add	r3, r2
 800eb08:	edd3 7a00 	vldr	s15, [r3]
 800eb0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb16:	009a      	lsls	r2, r3, #2
 800eb18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb1a:	4413      	add	r3, r2
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	3358      	adds	r3, #88	@ 0x58
 800eb20:	443b      	add	r3, r7
 800eb22:	3b48      	subs	r3, #72	@ 0x48
 800eb24:	edc3 7a00 	vstr	s15, [r3]
			for (int r = 0; r < 4; r++)
 800eb28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb30:	2b03      	cmp	r3, #3
 800eb32:	ddab      	ble.n	800ea8c <Matrix_MultiplyMatrix+0x18>
		for (int c = 0; c < 4; c++)
 800eb34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb36:	3301      	adds	r3, #1
 800eb38:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb3c:	2b03      	cmp	r3, #3
 800eb3e:	dda2      	ble.n	800ea86 <Matrix_MultiplyMatrix+0x12>
		return matrix;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	461d      	mov	r5, r3
 800eb44:	f107 0410 	add.w	r4, r7, #16
 800eb48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800eb58:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}
 800eb5c:	68f8      	ldr	r0, [r7, #12]
 800eb5e:	375c      	adds	r7, #92	@ 0x5c
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bcb0      	pop	{r4, r5, r7}
 800eb64:	4770      	bx	lr

0800eb66 <MCP3464_ChipSelect>:
int direction[16] = {1,-1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1};



static void MCP3464_ChipSelect(uint8_t cs)
{
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	71fb      	strb	r3, [r7, #7]
	if(cs == 1){
 800eb70:	79fb      	ldrb	r3, [r7, #7]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d103      	bne.n	800eb7e <MCP3464_ChipSelect+0x18>
		WRITE_REG(MCP3464_CS1_GPIO_Port->BRR, MCP3464_CS1_Pin);
 800eb76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800eb7a:	2210      	movs	r2, #16
 800eb7c:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	if(cs == 2){
 800eb7e:	79fb      	ldrb	r3, [r7, #7]
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	d103      	bne.n	800eb8c <MCP3464_ChipSelect+0x26>
		WRITE_REG(MCP3464_CS2_GPIO_Port->BRR, MCP3464_CS2_Pin);
 800eb84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800eb88:	2240      	movs	r2, #64	@ 0x40
 800eb8a:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	if(cs == 0){
 800eb8c:	79fb      	ldrb	r3, [r7, #7]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d107      	bne.n	800eba2 <MCP3464_ChipSelect+0x3c>
		WRITE_REG(MCP3464_CS1_GPIO_Port->BRR, MCP3464_CS1_Pin);
 800eb92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800eb96:	2210      	movs	r2, #16
 800eb98:	629a      	str	r2, [r3, #40]	@ 0x28
		WRITE_REG(MCP3464_CS2_GPIO_Port->BRR, MCP3464_CS2_Pin);
 800eb9a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800eb9e:	2240      	movs	r2, #64	@ 0x40
 800eba0:	629a      	str	r2, [r3, #40]	@ 0x28
	}

}
 800eba2:	bf00      	nop
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <MCP3464_ChipsDeselect>:



static void MCP3464_ChipsDeselect()
{
 800ebae:	b480      	push	{r7}
 800ebb0:	af00      	add	r7, sp, #0
	WRITE_REG(MCP3464_CS1_GPIO_Port->BSRR, MCP3464_CS1_Pin);
 800ebb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ebb6:	2210      	movs	r2, #16
 800ebb8:	619a      	str	r2, [r3, #24]
	WRITE_REG(MCP3464_CS2_GPIO_Port->BSRR, MCP3464_CS2_Pin);
 800ebba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ebbe:	2240      	movs	r2, #64	@ 0x40
 800ebc0:	619a      	str	r2, [r3, #24]
}
 800ebc2:	bf00      	nop
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <MCP_init>:

void MCP_init(){
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
										//	conf0		conf1		conf2		conf3		IRQ			MUX			SCAN
	static const uint8_t mcp_init_data[] = {0b11100000, 0b00001100, 0b10001011, 0b10000000, 0b00000010, 0b00001000, 0b10000000, 0, 0b11111111};
	//uint8_t irq = 0b00000111;

	fastCMD(0b01111000, 0);
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	2078      	movs	r0, #120	@ 0x78
 800ebd6:	f000 f8af 	bl	800ed38 <fastCMD>
	HAL_Delay(50);
 800ebda:	2032      	movs	r0, #50	@ 0x32
 800ebdc:	f7f5 fa00 	bl	8003fe0 <HAL_Delay>
	writeReg(0x1, (uint8_t*) mcp_init_data, 9, 0);
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	2209      	movs	r2, #9
 800ebe4:	4918      	ldr	r1, [pc, #96]	@ (800ec48 <MCP_init+0x7c>)
 800ebe6:	2001      	movs	r0, #1
 800ebe8:	f000 f84a 	bl	800ec80 <writeReg>

	//start a simple adc test
	analogRead();
 800ebec:	f000 f836 	bl	800ec5c <analogRead>
	HAL_Delay(1000);
 800ebf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ebf4:	f7f5 f9f4 	bl	8003fe0 <HAL_Delay>
	if (hand.pointer != 16) {
 800ebf8:	4b14      	ldr	r3, [pc, #80]	@ (800ec4c <MCP_init+0x80>)
 800ebfa:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800ebfe:	2b10      	cmp	r3, #16
 800ec00:	d01a      	beq.n	800ec38 <MCP_init+0x6c>
		for (int i = 0; i < hand.pointer; i++) {
 800ec02:	2300      	movs	r3, #0
 800ec04:	607b      	str	r3, [r7, #4]
 800ec06:	e00c      	b.n	800ec22 <MCP_init+0x56>
			printf("adc val: %d, pointer: %d\r\n", (int16_t) hand.position_raw[i], i);
 800ec08:	4a10      	ldr	r2, [pc, #64]	@ (800ec4c <MCP_init+0x80>)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec10:	b21b      	sxth	r3, r3
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	4619      	mov	r1, r3
 800ec16:	480e      	ldr	r0, [pc, #56]	@ (800ec50 <MCP_init+0x84>)
 800ec18:	f002 fedc 	bl	80119d4 <iprintf>
		for (int i = 0; i < hand.pointer; i++) {
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	607b      	str	r3, [r7, #4]
 800ec22:	4b0a      	ldr	r3, [pc, #40]	@ (800ec4c <MCP_init+0x80>)
 800ec24:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800ec28:	461a      	mov	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	dbeb      	blt.n	800ec08 <MCP_init+0x3c>
		}
		printf("\r\n");
 800ec30:	4808      	ldr	r0, [pc, #32]	@ (800ec54 <MCP_init+0x88>)
 800ec32:	f002 ff37 	bl	8011aa4 <puts>
	}
	else{printf("ADC Initialisation finished\r\n");}

}
 800ec36:	e002      	b.n	800ec3e <MCP_init+0x72>
	else{printf("ADC Initialisation finished\r\n");}
 800ec38:	4807      	ldr	r0, [pc, #28]	@ (800ec58 <MCP_init+0x8c>)
 800ec3a:	f002 ff33 	bl	8011aa4 <puts>
}
 800ec3e:	bf00      	nop
 800ec40:	3708      	adds	r7, #8
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	08013e4c 	.word	0x08013e4c
 800ec4c:	200022d8 	.word	0x200022d8
 800ec50:	08013b94 	.word	0x08013b94
 800ec54:	08013bb0 	.word	0x08013bb0
 800ec58:	08013bb4 	.word	0x08013bb4

0800ec5c <analogRead>:

void analogRead(){
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	af00      	add	r7, sp, #0

	fastCMD(0b01101100, 0);
 800ec60:	2100      	movs	r1, #0
 800ec62:	206c      	movs	r0, #108	@ 0x6c
 800ec64:	f000 f868 	bl	800ed38 <fastCMD>
	hand.pointer = 0;
 800ec68:	4b04      	ldr	r3, [pc, #16]	@ (800ec7c <analogRead+0x20>)
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0

	//uint8_t data = (ch << 4) | 0b1000;

	//writeReg(0x6, &data, 1, 1);
	fastCMD(0b01101000, 1);
 800ec70:	2101      	movs	r1, #1
 800ec72:	2068      	movs	r0, #104	@ 0x68
 800ec74:	f000 f860 	bl	800ed38 <fastCMD>

}
 800ec78:	bf00      	nop
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	200022d8 	.word	0x200022d8

0800ec80 <writeReg>:

void writeReg(uint8_t reg, uint8_t* data, uint8_t len, uint8_t cs){
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6039      	str	r1, [r7, #0]
 800ec88:	4611      	mov	r1, r2
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	71fb      	strb	r3, [r7, #7]
 800ec90:	460b      	mov	r3, r1
 800ec92:	71bb      	strb	r3, [r7, #6]
 800ec94:	4613      	mov	r3, r2
 800ec96:	717b      	strb	r3, [r7, #5]

	uint8_t reg_data =  0b01000010 | (reg << 2);
 800ec98:	79fb      	ldrb	r3, [r7, #7]
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	b25b      	sxtb	r3, r3
 800ec9e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800eca2:	b25b      	sxtb	r3, r3
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	73fb      	strb	r3, [r7, #15]

	MCP3464_ChipSelect(cs);
 800eca8:	797b      	ldrb	r3, [r7, #5]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7ff ff5b 	bl	800eb66 <MCP3464_ChipSelect>
	HAL_SPI_Transmit(&MCP3464_SPI_PORT, &reg_data, 1, HAL_MAX_DELAY);
 800ecb0:	f107 010f 	add.w	r1, r7, #15
 800ecb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb8:	2201      	movs	r2, #1
 800ecba:	4808      	ldr	r0, [pc, #32]	@ (800ecdc <writeReg+0x5c>)
 800ecbc:	f7f8 ff71 	bl	8007ba2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&MCP3464_SPI_PORT, data, len, HAL_MAX_DELAY);
 800ecc0:	79bb      	ldrb	r3, [r7, #6]
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	4804      	ldr	r0, [pc, #16]	@ (800ecdc <writeReg+0x5c>)
 800eccc:	f7f8 ff69 	bl	8007ba2 <HAL_SPI_Transmit>
	MCP3464_ChipsDeselect();
 800ecd0:	f7ff ff6d 	bl	800ebae <MCP3464_ChipsDeselect>
}
 800ecd4:	bf00      	nop
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	20002178 	.word	0x20002178

0800ece0 <readReg>:

void readReg(uint8_t reg, uint8_t* data, uint8_t len, uint8_t cs){
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af02      	add	r7, sp, #8
 800ece6:	6039      	str	r1, [r7, #0]
 800ece8:	4611      	mov	r1, r2
 800ecea:	461a      	mov	r2, r3
 800ecec:	4603      	mov	r3, r0
 800ecee:	71fb      	strb	r3, [r7, #7]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	71bb      	strb	r3, [r7, #6]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	717b      	strb	r3, [r7, #5]

	uint8_t reg_data =  0b01000001 | (reg << 2);
 800ecf8:	79fb      	ldrb	r3, [r7, #7]
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	b25b      	sxtb	r3, r3
 800ecfe:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 800ed02:	b25b      	sxtb	r3, r3
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	73fb      	strb	r3, [r7, #15]

	MCP3464_ChipSelect(cs);
 800ed08:	797b      	ldrb	r3, [r7, #5]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7ff ff2b 	bl	800eb66 <MCP3464_ChipSelect>
	HAL_SPI_TransmitReceive(&MCP3464_SPI_PORT, &reg_data, data, len, HAL_MAX_DELAY);
 800ed10:	79bb      	ldrb	r3, [r7, #6]
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	f107 010f 	add.w	r1, r7, #15
 800ed18:	f04f 32ff 	mov.w	r2, #4294967295
 800ed1c:	9200      	str	r2, [sp, #0]
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	4804      	ldr	r0, [pc, #16]	@ (800ed34 <readReg+0x54>)
 800ed22:	f7f9 f8ac 	bl	8007e7e <HAL_SPI_TransmitReceive>
	MCP3464_ChipsDeselect();
 800ed26:	f7ff ff42 	bl	800ebae <MCP3464_ChipsDeselect>
	//printf("adc val: %d\r\n", (int16_t)hand.position_raw[hand.pointer]);
}
 800ed2a:	bf00      	nop
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	20002178 	.word	0x20002178

0800ed38 <fastCMD>:


void fastCMD(uint8_t cmd, uint8_t cs){
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	4603      	mov	r3, r0
 800ed40:	460a      	mov	r2, r1
 800ed42:	71fb      	strb	r3, [r7, #7]
 800ed44:	4613      	mov	r3, r2
 800ed46:	71bb      	strb	r3, [r7, #6]

	MCP3464_ChipSelect(cs);
 800ed48:	79bb      	ldrb	r3, [r7, #6]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff ff0b 	bl	800eb66 <MCP3464_ChipSelect>
	HAL_SPI_Transmit(&MCP3464_SPI_PORT, &cmd, 1, HAL_MAX_DELAY);
 800ed50:	1df9      	adds	r1, r7, #7
 800ed52:	f04f 33ff 	mov.w	r3, #4294967295
 800ed56:	2201      	movs	r2, #1
 800ed58:	4804      	ldr	r0, [pc, #16]	@ (800ed6c <fastCMD+0x34>)
 800ed5a:	f7f8 ff22 	bl	8007ba2 <HAL_SPI_Transmit>
	MCP3464_ChipsDeselect();
 800ed5e:	f7ff ff26 	bl	800ebae <MCP3464_ChipsDeselect>
}
 800ed62:	bf00      	nop
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	20002178 	.word	0x20002178

0800ed70 <MCP3464_Calibrate>:

void MCP3464_Calibrate(void){
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0

	printf("############################################\r\n");
 800ed76:	4846      	ldr	r0, [pc, #280]	@ (800ee90 <MCP3464_Calibrate+0x120>)
 800ed78:	f002 fe94 	bl	8011aa4 <puts>
	printf("Lay the hand flat on a table and press OK button\r\n");
 800ed7c:	4845      	ldr	r0, [pc, #276]	@ (800ee94 <MCP3464_Calibrate+0x124>)
 800ed7e:	f002 fe91 	bl	8011aa4 <puts>

	while(KBD_get_pressed_key() != BTN_OK){}
 800ed82:	bf00      	nop
 800ed84:	f7fe ff3c 	bl	800dc00 <KBD_get_pressed_key>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1fa      	bne.n	800ed84 <MCP3464_Calibrate+0x14>

	analogRead();
 800ed8e:	f7ff ff65 	bl	800ec5c <analogRead>
	HAL_Delay(300);
 800ed92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ed96:	f7f5 f923 	bl	8003fe0 <HAL_Delay>

	if (hand.pointer == 16) {
 800ed9a:	4b3f      	ldr	r3, [pc, #252]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800ed9c:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800eda0:	2b10      	cmp	r3, #16
 800eda2:	d118      	bne.n	800edd6 <MCP3464_Calibrate+0x66>
		for (int i = 0; i < hand.pointer; i++) {
 800eda4:	2300      	movs	r3, #0
 800eda6:	607b      	str	r3, [r7, #4]
 800eda8:	e00b      	b.n	800edc2 <MCP3464_Calibrate+0x52>
			//printf("adc val: %d, pointer: %d\r\n", (int16_t) hand.position_raw[i], i);
			hand.position_offset_streched[i] = hand.position_raw[i];
 800edaa:	4a3b      	ldr	r2, [pc, #236]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800edb2:	4a39      	ldr	r2, [pc, #228]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	3310      	adds	r3, #16
 800edb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < hand.pointer; i++) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	3301      	adds	r3, #1
 800edc0:	607b      	str	r3, [r7, #4]
 800edc2:	4b35      	ldr	r3, [pc, #212]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800edc4:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800edc8:	461a      	mov	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	4293      	cmp	r3, r2
 800edce:	dbec      	blt.n	800edaa <MCP3464_Calibrate+0x3a>
		}
		printf("\r\n");
 800edd0:	4832      	ldr	r0, [pc, #200]	@ (800ee9c <MCP3464_Calibrate+0x12c>)
 800edd2:	f002 fe67 	bl	8011aa4 <puts>
	}

	printf("Make a fist and press OK button\r\n");
 800edd6:	4832      	ldr	r0, [pc, #200]	@ (800eea0 <MCP3464_Calibrate+0x130>)
 800edd8:	f002 fe64 	bl	8011aa4 <puts>
	while(KBD_get_pressed_key() != BTN_OK){}
 800eddc:	bf00      	nop
 800edde:	f7fe ff0f 	bl	800dc00 <KBD_get_pressed_key>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1fa      	bne.n	800edde <MCP3464_Calibrate+0x6e>

	analogRead();
 800ede8:	f7ff ff38 	bl	800ec5c <analogRead>
	HAL_Delay(300);
 800edec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800edf0:	f7f5 f8f6 	bl	8003fe0 <HAL_Delay>

	if (hand.pointer == 16) {
 800edf4:	4b28      	ldr	r3, [pc, #160]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800edf6:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800edfa:	2b10      	cmp	r3, #16
 800edfc:	d13b      	bne.n	800ee76 <MCP3464_Calibrate+0x106>
		for (int i = 0; i < hand.pointer; i++) {
 800edfe:	2300      	movs	r3, #0
 800ee00:	603b      	str	r3, [r7, #0]
 800ee02:	e02e      	b.n	800ee62 <MCP3464_Calibrate+0xf2>
			//printf("adc val: %d, pointer: %d\r\n", (int16_t) hand.position_raw[i], i);
			hand.position_offset_squished[i] = hand.position_raw[i];
 800ee04:	4a24      	ldr	r2, [pc, #144]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee0c:	ee07 3a90 	vmov	s15, r3
 800ee10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee14:	4a20      	ldr	r2, [pc, #128]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	3310      	adds	r3, #16
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	4413      	add	r3, r2
 800ee1e:	edc3 7a00 	vstr	s15, [r3]
			hand.position_offset_squished[i] = M_PI / hand.position_offset_squished[i];
 800ee22:	4a1d      	ldr	r2, [pc, #116]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	3310      	adds	r3, #16
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4413      	add	r3, r2
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7f1 fbb2 	bl	8000598 <__aeabi_f2d>
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	a113      	add	r1, pc, #76	@ (adr r1, 800ee88 <MCP3464_Calibrate+0x118>)
 800ee3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee3e:	f7f1 fd2d 	bl	800089c <__aeabi_ddiv>
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	4610      	mov	r0, r2
 800ee48:	4619      	mov	r1, r3
 800ee4a:	f7f1 fed5 	bl	8000bf8 <__aeabi_d2f>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	4911      	ldr	r1, [pc, #68]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	3310      	adds	r3, #16
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	440b      	add	r3, r1
 800ee5a:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < hand.pointer; i++) {
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	603b      	str	r3, [r7, #0]
 800ee62:	4b0d      	ldr	r3, [pc, #52]	@ (800ee98 <MCP3464_Calibrate+0x128>)
 800ee64:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800ee68:	461a      	mov	r2, r3
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	dbc9      	blt.n	800ee04 <MCP3464_Calibrate+0x94>
		}
		printf("\r\n");
 800ee70:	480a      	ldr	r0, [pc, #40]	@ (800ee9c <MCP3464_Calibrate+0x12c>)
 800ee72:	f002 fe17 	bl	8011aa4 <puts>
	}

	printf("############################################\r\n");
 800ee76:	4806      	ldr	r0, [pc, #24]	@ (800ee90 <MCP3464_Calibrate+0x120>)
 800ee78:	f002 fe14 	bl	8011aa4 <puts>

}
 800ee7c:	bf00      	nop
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	f3af 8000 	nop.w
 800ee88:	54442d18 	.word	0x54442d18
 800ee8c:	400921fb 	.word	0x400921fb
 800ee90:	08013bd4 	.word	0x08013bd4
 800ee94:	08013c04 	.word	0x08013c04
 800ee98:	200022d8 	.word	0x200022d8
 800ee9c:	08013bb0 	.word	0x08013bb0
 800eea0:	08013c38 	.word	0x08013c38

0800eea4 <MCP3464_Radians>:

void MCP3464_Radians(void){
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0

	for (int i = 0; i < 16; i++) {
 800eeaa:	2300      	movs	r3, #0
 800eeac:	607b      	str	r3, [r7, #4]
 800eeae:	e01b      	b.n	800eee8 <MCP3464_Radians+0x44>
		//printf("adc val: %d, pointer: %d\r\n", (int16_t) hand.position_raw[i], i);
		hand.position_rad[i] = hand.position_call[i] * hand.position_offset_squished[i];
 800eeb0:	4a12      	ldr	r2, [pc, #72]	@ (800eefc <MCP3464_Radians+0x58>)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	3340      	adds	r3, #64	@ 0x40
 800eeb6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800eeba:	ee07 3a90 	vmov	s15, r3
 800eebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eec2:	4a0e      	ldr	r2, [pc, #56]	@ (800eefc <MCP3464_Radians+0x58>)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	3310      	adds	r3, #16
 800eec8:	009b      	lsls	r3, r3, #2
 800eeca:	4413      	add	r3, r2
 800eecc:	edd3 7a00 	vldr	s15, [r3]
 800eed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eed4:	4a09      	ldr	r2, [pc, #36]	@ (800eefc <MCP3464_Radians+0x58>)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3328      	adds	r3, #40	@ 0x28
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4413      	add	r3, r2
 800eede:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 16; i++) {
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	3301      	adds	r3, #1
 800eee6:	607b      	str	r3, [r7, #4]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b0f      	cmp	r3, #15
 800eeec:	dde0      	ble.n	800eeb0 <MCP3464_Radians+0xc>
	}
}
 800eeee:	bf00      	nop
 800eef0:	bf00      	nop
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	200022d8 	.word	0x200022d8

0800ef00 <EXTIValue_callback>:

void EXTIValue_callback() {
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0

	uint8_t buffer[3] = {0};
 800ef06:	4b32      	ldr	r3, [pc, #200]	@ (800efd0 <EXTIValue_callback+0xd0>)
 800ef08:	881b      	ldrh	r3, [r3, #0]
 800ef0a:	80bb      	strh	r3, [r7, #4]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	71bb      	strb	r3, [r7, #6]
	uint8_t n = 1;
 800ef10:	2301      	movs	r3, #1
 800ef12:	71fb      	strb	r3, [r7, #7]

	if(hand.pointer <= 7)n = 1;
 800ef14:	4b2f      	ldr	r3, [pc, #188]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef16:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800ef1a:	2b07      	cmp	r3, #7
 800ef1c:	d802      	bhi.n	800ef24 <EXTIValue_callback+0x24>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	71fb      	strb	r3, [r7, #7]
 800ef22:	e001      	b.n	800ef28 <EXTIValue_callback+0x28>
	else n = 2;
 800ef24:	2302      	movs	r3, #2
 800ef26:	71fb      	strb	r3, [r7, #7]

	readReg(0x0, buffer, 3, n);
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	1d39      	adds	r1, r7, #4
 800ef2c:	2203      	movs	r2, #3
 800ef2e:	2000      	movs	r0, #0
 800ef30:	f7ff fed6 	bl	800ece0 <readReg>

	if(!(buffer[0] & 0x04)){//check if this is the first reading of value
 800ef34:	793b      	ldrb	r3, [r7, #4]
 800ef36:	f003 0304 	and.w	r3, r3, #4
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d143      	bne.n	800efc6 <EXTIValue_callback+0xc6>

	hand.position_raw[hand.pointer] = buffer[1] << 8 | buffer[2];
 800ef3e:	797b      	ldrb	r3, [r7, #5]
 800ef40:	021b      	lsls	r3, r3, #8
 800ef42:	b21a      	sxth	r2, r3
 800ef44:	79bb      	ldrb	r3, [r7, #6]
 800ef46:	b21b      	sxth	r3, r3
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	b219      	sxth	r1, r3
 800ef4c:	4b21      	ldr	r3, [pc, #132]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef4e:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800ef52:	461a      	mov	r2, r3
 800ef54:	b289      	uxth	r1, r1
 800ef56:	4b1f      	ldr	r3, [pc, #124]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	hand.position_call[hand.pointer] = (hand.position_raw[hand.pointer] - hand.position_offset_streched[hand.pointer])*direction[hand.pointer];
 800ef5c:	4b1d      	ldr	r3, [pc, #116]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef5e:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800ef62:	461a      	mov	r2, r3
 800ef64:	4b1b      	ldr	r3, [pc, #108]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	4b19      	ldr	r3, [pc, #100]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef6e:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800ef72:	4a18      	ldr	r2, [pc, #96]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef74:	3310      	adds	r3, #16
 800ef76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef7a:	1acb      	subs	r3, r1, r3
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	4b15      	ldr	r3, [pc, #84]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef80:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800ef84:	4619      	mov	r1, r3
 800ef86:	4b14      	ldr	r3, [pc, #80]	@ (800efd8 <EXTIValue_callback+0xd8>)
 800ef88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	fb12 f303 	smulbb	r3, r2, r3
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	4b0f      	ldr	r3, [pc, #60]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef96:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800ef9a:	b211      	sxth	r1, r2
 800ef9c:	4a0d      	ldr	r2, [pc, #52]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800ef9e:	3340      	adds	r3, #64	@ 0x40
 800efa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//printf("adc val: %d, pointer: %d, mcpRead: %x\r\n", (int16_t)hand.position_raw[hand.pointer], hand.pointer, n);
	hand.pointer = hand.pointer + 1;
 800efa4:	4b0b      	ldr	r3, [pc, #44]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800efa6:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800efaa:	3301      	adds	r3, #1
 800efac:	b2da      	uxtb	r2, r3
 800efae:	4b09      	ldr	r3, [pc, #36]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800efb0:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0

	if (hand.pointer == 8){fastCMD(0b01101000, 2);}
 800efb4:	4b07      	ldr	r3, [pc, #28]	@ (800efd4 <EXTIValue_callback+0xd4>)
 800efb6:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800efba:	2b08      	cmp	r3, #8
 800efbc:	d103      	bne.n	800efc6 <EXTIValue_callback+0xc6>
 800efbe:	2102      	movs	r1, #2
 800efc0:	2068      	movs	r0, #104	@ 0x68
 800efc2:	f7ff feb9 	bl	800ed38 <fastCMD>
	}
}
 800efc6:	bf00      	nop
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	08013c5c 	.word	0x08013c5c
 800efd4:	200022d8 	.word	0x200022d8
 800efd8:	2000176c 	.word	0x2000176c

0800efdc <LL_EXTI_EnableIT_0_31>:
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800efe4:	4b05      	ldr	r3, [pc, #20]	@ (800effc <LL_EXTI_EnableIT_0_31+0x20>)
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	4904      	ldr	r1, [pc, #16]	@ (800effc <LL_EXTI_EnableIT_0_31+0x20>)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4313      	orrs	r3, r2
 800efee:	600b      	str	r3, [r1, #0]
}
 800eff0:	bf00      	nop
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr
 800effc:	40010400 	.word	0x40010400

0800f000 <LL_EXTI_DisableIT_0_31>:
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800f008:	4b06      	ldr	r3, [pc, #24]	@ (800f024 <LL_EXTI_DisableIT_0_31+0x24>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	43db      	mvns	r3, r3
 800f010:	4904      	ldr	r1, [pc, #16]	@ (800f024 <LL_EXTI_DisableIT_0_31+0x24>)
 800f012:	4013      	ands	r3, r2
 800f014:	600b      	str	r3, [r1, #0]
}
 800f016:	bf00      	nop
 800f018:	370c      	adds	r7, #12
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop
 800f024:	40010400 	.word	0x40010400

0800f028 <MPU6050_Init>:




void MPU6050_Init(void)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b086      	sub	sp, #24
 800f02c:	af04      	add	r7, sp, #16
	uint8_t check = 0;
 800f02e:	2300      	movs	r3, #0
 800f030:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_1);
 800f032:	2002      	movs	r0, #2
 800f034:	f7ff ffe4 	bl	800f000 <LL_EXTI_DisableIT_0_31>

	hand1_mpu.mpu_addr = MPU6050_ADDR;
 800f038:	4b4f      	ldr	r3, [pc, #316]	@ (800f178 <MPU6050_Init+0x150>)
 800f03a:	22d0      	movs	r2, #208	@ 0xd0
 800f03c:	701a      	strb	r2, [r3, #0]


	HAL_I2C_Mem_Read (&MPU6050_I2C_PORT, hand1_mpu.mpu_addr ,WHO_AM_I_REG, 1, &check, 1, HAL_MAX_DELAY);
 800f03e:	4b4e      	ldr	r3, [pc, #312]	@ (800f178 <MPU6050_Init+0x150>)
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	4619      	mov	r1, r3
 800f044:	f04f 33ff 	mov.w	r3, #4294967295
 800f048:	9302      	str	r3, [sp, #8]
 800f04a:	2301      	movs	r3, #1
 800f04c:	9301      	str	r3, [sp, #4]
 800f04e:	1dfb      	adds	r3, r7, #7
 800f050:	9300      	str	r3, [sp, #0]
 800f052:	2301      	movs	r3, #1
 800f054:	2275      	movs	r2, #117	@ 0x75
 800f056:	4849      	ldr	r0, [pc, #292]	@ (800f17c <MPU6050_Init+0x154>)
 800f058:	f7f6 ffa8 	bl	8005fac <HAL_I2C_Mem_Read>

	printf("check: %x\r\n", check);
 800f05c:	79fb      	ldrb	r3, [r7, #7]
 800f05e:	4619      	mov	r1, r3
 800f060:	4847      	ldr	r0, [pc, #284]	@ (800f180 <MPU6050_Init+0x158>)
 800f062:	f002 fcb7 	bl	80119d4 <iprintf>

	if (check == 0x98)
 800f066:	79fb      	ldrb	r3, [r7, #7]
 800f068:	2b98      	cmp	r3, #152	@ 0x98
 800f06a:	d17c      	bne.n	800f166 <MPU6050_Init+0x13e>
	{
		printf("mpu6050 exists\r\n");
 800f06c:	4845      	ldr	r0, [pc, #276]	@ (800f184 <MPU6050_Init+0x15c>)
 800f06e:	f002 fd19 	bl	8011aa4 <puts>
		// power management
		Data = 0;
 800f072:	2300      	movs	r3, #0
 800f074:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, PWR_MGMT_1_REG, 1,&Data, 1, HAL_MAX_DELAY);
 800f076:	4b40      	ldr	r3, [pc, #256]	@ (800f178 <MPU6050_Init+0x150>)
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	4619      	mov	r1, r3
 800f07c:	f04f 33ff 	mov.w	r3, #4294967295
 800f080:	9302      	str	r3, [sp, #8]
 800f082:	2301      	movs	r3, #1
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	1dbb      	adds	r3, r7, #6
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	2301      	movs	r3, #1
 800f08c:	226b      	movs	r2, #107	@ 0x6b
 800f08e:	483b      	ldr	r0, [pc, #236]	@ (800f17c <MPU6050_Init+0x154>)
 800f090:	f7f6 fe78 	bl	8005d84 <HAL_I2C_Mem_Write>

		//CONFIG
		Data = 0x03;
 800f094:	2303      	movs	r3, #3
 800f096:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, 0x1A, 1, &Data, 1, HAL_MAX_DELAY);
 800f098:	4b37      	ldr	r3, [pc, #220]	@ (800f178 <MPU6050_Init+0x150>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	4619      	mov	r1, r3
 800f09e:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a2:	9302      	str	r3, [sp, #8]
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	1dbb      	adds	r3, r7, #6
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	221a      	movs	r2, #26
 800f0b0:	4832      	ldr	r0, [pc, #200]	@ (800f17c <MPU6050_Init+0x154>)
 800f0b2:	f7f6 fe67 	bl	8005d84 <HAL_I2C_Mem_Write>

		//SMPLRT_DIV
		Data = 19;
 800f0b6:	2313      	movs	r3, #19
 800f0b8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, SMPLRT_DIV_REG, 1, &Data, 1, HAL_MAX_DELAY);
 800f0ba:	4b2f      	ldr	r3, [pc, #188]	@ (800f178 <MPU6050_Init+0x150>)
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	4619      	mov	r1, r3
 800f0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c4:	9302      	str	r3, [sp, #8]
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	9301      	str	r3, [sp, #4]
 800f0ca:	1dbb      	adds	r3, r7, #6
 800f0cc:	9300      	str	r3, [sp, #0]
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	2219      	movs	r2, #25
 800f0d2:	482a      	ldr	r0, [pc, #168]	@ (800f17c <MPU6050_Init+0x154>)
 800f0d4:	f7f6 fe56 	bl	8005d84 <HAL_I2C_Mem_Write>

		//ACCEL_CONFIG
		Data = 1<<3;
 800f0d8:	2308      	movs	r3, #8
 800f0da:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, ACCEL_CONFIG_REG, 1, &Data, 1, HAL_MAX_DELAY);
 800f0dc:	4b26      	ldr	r3, [pc, #152]	@ (800f178 <MPU6050_Init+0x150>)
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e6:	9302      	str	r3, [sp, #8]
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	9301      	str	r3, [sp, #4]
 800f0ec:	1dbb      	adds	r3, r7, #6
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	221c      	movs	r2, #28
 800f0f4:	4821      	ldr	r0, [pc, #132]	@ (800f17c <MPU6050_Init+0x154>)
 800f0f6:	f7f6 fe45 	bl	8005d84 <HAL_I2C_Mem_Write>

		//GYRO_CONFIG
		Data = 1<<3;
 800f0fa:	2308      	movs	r3, #8
 800f0fc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, GYRO_CONFIG_REG, 1, &Data, 1, HAL_MAX_DELAY);
 800f0fe:	4b1e      	ldr	r3, [pc, #120]	@ (800f178 <MPU6050_Init+0x150>)
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	4619      	mov	r1, r3
 800f104:	f04f 33ff 	mov.w	r3, #4294967295
 800f108:	9302      	str	r3, [sp, #8]
 800f10a:	2301      	movs	r3, #1
 800f10c:	9301      	str	r3, [sp, #4]
 800f10e:	1dbb      	adds	r3, r7, #6
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	2301      	movs	r3, #1
 800f114:	221b      	movs	r2, #27
 800f116:	4819      	ldr	r0, [pc, #100]	@ (800f17c <MPU6050_Init+0x154>)
 800f118:	f7f6 fe34 	bl	8005d84 <HAL_I2C_Mem_Write>

		//INT_CONFIG
		Data = 0b10110000;
 800f11c:	23b0      	movs	r3, #176	@ 0xb0
 800f11e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, 0x37, 1, &Data, 1, HAL_MAX_DELAY);
 800f120:	4b15      	ldr	r3, [pc, #84]	@ (800f178 <MPU6050_Init+0x150>)
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	4619      	mov	r1, r3
 800f126:	f04f 33ff 	mov.w	r3, #4294967295
 800f12a:	9302      	str	r3, [sp, #8]
 800f12c:	2301      	movs	r3, #1
 800f12e:	9301      	str	r3, [sp, #4]
 800f130:	1dbb      	adds	r3, r7, #6
 800f132:	9300      	str	r3, [sp, #0]
 800f134:	2301      	movs	r3, #1
 800f136:	2237      	movs	r2, #55	@ 0x37
 800f138:	4810      	ldr	r0, [pc, #64]	@ (800f17c <MPU6050_Init+0x154>)
 800f13a:	f7f6 fe23 	bl	8005d84 <HAL_I2C_Mem_Write>

		//INT_ENABLE
		Data = 0x01;
 800f13e:	2301      	movs	r3, #1
 800f140:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, 0x38, 1, &Data, 1, HAL_MAX_DELAY);
 800f142:	4b0d      	ldr	r3, [pc, #52]	@ (800f178 <MPU6050_Init+0x150>)
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	4619      	mov	r1, r3
 800f148:	f04f 33ff 	mov.w	r3, #4294967295
 800f14c:	9302      	str	r3, [sp, #8]
 800f14e:	2301      	movs	r3, #1
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	1dbb      	adds	r3, r7, #6
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	2301      	movs	r3, #1
 800f158:	2238      	movs	r2, #56	@ 0x38
 800f15a:	4808      	ldr	r0, [pc, #32]	@ (800f17c <MPU6050_Init+0x154>)
 800f15c:	f7f6 fe12 	bl	8005d84 <HAL_I2C_Mem_Write>


		printf("MPU init finished\r\n");
 800f160:	4809      	ldr	r0, [pc, #36]	@ (800f188 <MPU6050_Init+0x160>)
 800f162:	f002 fc9f 	bl	8011aa4 <puts>
	}


	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_1);
 800f166:	2002      	movs	r0, #2
 800f168:	f7ff ff38 	bl	800efdc <LL_EXTI_EnableIT_0_31>
	MPU6050_Read_All();
 800f16c:	f000 f9c8 	bl	800f500 <MPU6050_Read_All>

}
 800f170:	bf00      	nop
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	20001eec 	.word	0x20001eec
 800f17c:	20001c74 	.word	0x20001c74
 800f180:	08013c60 	.word	0x08013c60
 800f184:	08013c6c 	.word	0x08013c6c
 800f188:	08013c7c 	.word	0x08013c7c

0800f18c <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(void)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b086      	sub	sp, #24
 800f190:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, HAL_MAX_DELAY);
 800f192:	4b2a      	ldr	r3, [pc, #168]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	4619      	mov	r1, r3
 800f198:	f04f 33ff 	mov.w	r3, #4294967295
 800f19c:	9302      	str	r3, [sp, #8]
 800f19e:	2306      	movs	r3, #6
 800f1a0:	9301      	str	r3, [sp, #4]
 800f1a2:	463b      	mov	r3, r7
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	223b      	movs	r2, #59	@ 0x3b
 800f1aa:	4825      	ldr	r0, [pc, #148]	@ (800f240 <MPU6050_Read_Accel+0xb4>)
 800f1ac:	f7f6 fefe 	bl	8005fac <HAL_I2C_Mem_Read>

	hand1_mpu.accel_raw[MPU_X] = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800f1b0:	783b      	ldrb	r3, [r7, #0]
 800f1b2:	021b      	lsls	r3, r3, #8
 800f1b4:	b21a      	sxth	r2, r3
 800f1b6:	787b      	ldrb	r3, [r7, #1]
 800f1b8:	b21b      	sxth	r3, r3
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	b21a      	sxth	r2, r3
 800f1be:	4b1f      	ldr	r3, [pc, #124]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f1c0:	805a      	strh	r2, [r3, #2]
	hand1_mpu.accel_raw[MPU_Y] = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800f1c2:	78bb      	ldrb	r3, [r7, #2]
 800f1c4:	021b      	lsls	r3, r3, #8
 800f1c6:	b21a      	sxth	r2, r3
 800f1c8:	78fb      	ldrb	r3, [r7, #3]
 800f1ca:	b21b      	sxth	r3, r3
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	b21a      	sxth	r2, r3
 800f1d0:	4b1a      	ldr	r3, [pc, #104]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f1d2:	809a      	strh	r2, [r3, #4]
	hand1_mpu.accel_raw[MPU_Z] = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800f1d4:	793b      	ldrb	r3, [r7, #4]
 800f1d6:	021b      	lsls	r3, r3, #8
 800f1d8:	b21a      	sxth	r2, r3
 800f1da:	797b      	ldrb	r3, [r7, #5]
 800f1dc:	b21b      	sxth	r3, r3
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	b21a      	sxth	r2, r3
 800f1e2:	4b16      	ldr	r3, [pc, #88]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f1e4:	80da      	strh	r2, [r3, #6]

	hand1_mpu.accel_call[MPU_X] = hand1_mpu.accel_raw[MPU_X] - hand1_mpu.accel_offset[MPU_X];
 800f1e6:	4b15      	ldr	r3, [pc, #84]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f1e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	4b13      	ldr	r3, [pc, #76]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f1f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	1ad3      	subs	r3, r2, r3
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	b21a      	sxth	r2, r3
 800f1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f1fe:	835a      	strh	r2, [r3, #26]
	hand1_mpu.accel_call[MPU_Y] = hand1_mpu.accel_raw[MPU_Y] - hand1_mpu.accel_offset[MPU_Y];
 800f200:	4b0e      	ldr	r3, [pc, #56]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f202:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f206:	b29a      	uxth	r2, r3
 800f208:	4b0c      	ldr	r3, [pc, #48]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f20a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f20e:	b29b      	uxth	r3, r3
 800f210:	1ad3      	subs	r3, r2, r3
 800f212:	b29b      	uxth	r3, r3
 800f214:	b21a      	sxth	r2, r3
 800f216:	4b09      	ldr	r3, [pc, #36]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f218:	839a      	strh	r2, [r3, #28]
	hand1_mpu.accel_call[MPU_Z] = hand1_mpu.accel_raw[MPU_Z] - hand1_mpu.accel_offset[MPU_Z];
 800f21a:	4b08      	ldr	r3, [pc, #32]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f21c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f220:	b29a      	uxth	r2, r3
 800f222:	4b06      	ldr	r3, [pc, #24]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f224:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f228:	b29b      	uxth	r3, r3
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	b21a      	sxth	r2, r3
 800f230:	4b02      	ldr	r3, [pc, #8]	@ (800f23c <MPU6050_Read_Accel+0xb0>)
 800f232:	83da      	strh	r2, [r3, #30]
	hand1_mpu.accel_raw[MPU_X] = hand1_mpu.accel_raw[MPU_X]/16384.0;
	hand1_mpu.accel_raw[MPU_Y] = hand1_mpu.accel_raw[MPU_Y]/16384.0;
	hand1_mpu.accel_raw[MPU_Z] = hand1_mpu.accel_raw[MPU_Z]/16384.0;
#endif

}
 800f234:	bf00      	nop
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}
 800f23c:	20001eec 	.word	0x20001eec
 800f240:	20001c74 	.word	0x20001c74

0800f244 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro(void)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b086      	sub	sp, #24
 800f248:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, GYRO_XOUT_H_REG, 1, Rec_Data, 6, HAL_MAX_DELAY);
 800f24a:	4b2a      	ldr	r3, [pc, #168]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	4619      	mov	r1, r3
 800f250:	f04f 33ff 	mov.w	r3, #4294967295
 800f254:	9302      	str	r3, [sp, #8]
 800f256:	2306      	movs	r3, #6
 800f258:	9301      	str	r3, [sp, #4]
 800f25a:	463b      	mov	r3, r7
 800f25c:	9300      	str	r3, [sp, #0]
 800f25e:	2301      	movs	r3, #1
 800f260:	2243      	movs	r2, #67	@ 0x43
 800f262:	4825      	ldr	r0, [pc, #148]	@ (800f2f8 <MPU6050_Read_Gyro+0xb4>)
 800f264:	f7f6 fea2 	bl	8005fac <HAL_I2C_Mem_Read>

	hand1_mpu.gyro_raw[MPU_X] = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800f268:	783b      	ldrb	r3, [r7, #0]
 800f26a:	021b      	lsls	r3, r3, #8
 800f26c:	b21a      	sxth	r2, r3
 800f26e:	787b      	ldrb	r3, [r7, #1]
 800f270:	b21b      	sxth	r3, r3
 800f272:	4313      	orrs	r3, r2
 800f274:	b21a      	sxth	r2, r3
 800f276:	4b1f      	ldr	r3, [pc, #124]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f278:	811a      	strh	r2, [r3, #8]
	hand1_mpu.gyro_raw[MPU_Y] = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800f27a:	78bb      	ldrb	r3, [r7, #2]
 800f27c:	021b      	lsls	r3, r3, #8
 800f27e:	b21a      	sxth	r2, r3
 800f280:	78fb      	ldrb	r3, [r7, #3]
 800f282:	b21b      	sxth	r3, r3
 800f284:	4313      	orrs	r3, r2
 800f286:	b21a      	sxth	r2, r3
 800f288:	4b1a      	ldr	r3, [pc, #104]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f28a:	815a      	strh	r2, [r3, #10]
	hand1_mpu.gyro_raw[MPU_Z] = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800f28c:	793b      	ldrb	r3, [r7, #4]
 800f28e:	021b      	lsls	r3, r3, #8
 800f290:	b21a      	sxth	r2, r3
 800f292:	797b      	ldrb	r3, [r7, #5]
 800f294:	b21b      	sxth	r3, r3
 800f296:	4313      	orrs	r3, r2
 800f298:	b21a      	sxth	r2, r3
 800f29a:	4b16      	ldr	r3, [pc, #88]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f29c:	819a      	strh	r2, [r3, #12]

	hand1_mpu.gyro_call[MPU_X] = hand1_mpu.gyro_raw[MPU_X] - hand1_mpu.gyro_offset[MPU_X];
 800f29e:	4b15      	ldr	r3, [pc, #84]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f2a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	4b13      	ldr	r3, [pc, #76]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f2a8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	1ad3      	subs	r3, r2, r3
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	b21a      	sxth	r2, r3
 800f2b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f2b6:	841a      	strh	r2, [r3, #32]
	hand1_mpu.gyro_call[MPU_Y] = hand1_mpu.gyro_raw[MPU_Y] - hand1_mpu.gyro_offset[MPU_Y];
 800f2b8:	4b0e      	ldr	r3, [pc, #56]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f2ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f2c2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	b21a      	sxth	r2, r3
 800f2ce:	4b09      	ldr	r3, [pc, #36]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f2d0:	845a      	strh	r2, [r3, #34]	@ 0x22
	hand1_mpu.gyro_call[MPU_Z] = hand1_mpu.gyro_raw[MPU_Z] - hand1_mpu.gyro_offset[MPU_Z];
 800f2d2:	4b08      	ldr	r3, [pc, #32]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f2d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	4b06      	ldr	r3, [pc, #24]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f2dc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	1ad3      	subs	r3, r2, r3
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	b21a      	sxth	r2, r3
 800f2e8:	4b02      	ldr	r3, [pc, #8]	@ (800f2f4 <MPU6050_Read_Gyro+0xb0>)
 800f2ea:	849a      	strh	r2, [r3, #36]	@ 0x24
	hand1_mpu.gyro_raw[MPU_Y] = hand1_mpu.gyro_raw[MPU_Y]/131.0;
	hand1_mpu.gyro_raw[MPU_Z] = hand1_mpu.gyro_raw[MPU_Z]/131.0;
#endif


}
 800f2ec:	bf00      	nop
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	20001eec 	.word	0x20001eec
 800f2f8:	20001c74 	.word	0x20001c74

0800f2fc <MPU6050_Calc_Offsets>:

void MPU6050_Calc_Offsets(uint8_t is_calc_acc, uint8_t is_calc_gyro)
 {
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08a      	sub	sp, #40	@ 0x28
 800f300:	af00      	add	r7, sp, #0
 800f302:	4603      	mov	r3, r0
 800f304:	460a      	mov	r2, r1
 800f306:	71fb      	strb	r3, [r7, #7]
 800f308:	4613      	mov	r3, r2
 800f30a:	71bb      	strb	r3, [r7, #6]
	int32_t ag[6] = { 0, 0, 0, 0, 0, 0 };
 800f30c:	f107 030c 	add.w	r3, r7, #12
 800f310:	2200      	movs	r2, #0
 800f312:	601a      	str	r2, [r3, #0]
 800f314:	605a      	str	r2, [r3, #4]
 800f316:	609a      	str	r2, [r3, #8]
 800f318:	60da      	str	r2, [r3, #12]
 800f31a:	611a      	str	r2, [r3, #16]
 800f31c:	615a      	str	r2, [r3, #20]

	//MPU6050_Read_All();

	for (int i = 0; i < CALIB_OFFSET_REPEAT; i++) {
 800f31e:	2300      	movs	r3, #0
 800f320:	627b      	str	r3, [r7, #36]	@ 0x24
 800f322:	e02b      	b.n	800f37c <MPU6050_Calc_Offsets+0x80>
		//MPU6050_Read_All();
		ag[0] += hand1_mpu.accel_raw[MPU_X];
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	4a6e      	ldr	r2, [pc, #440]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f328:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f32c:	4413      	add	r3, r2
 800f32e:	60fb      	str	r3, [r7, #12]
		ag[1] += hand1_mpu.accel_raw[MPU_Y];
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	4a6b      	ldr	r2, [pc, #428]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f334:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f338:	4413      	add	r3, r2
 800f33a:	613b      	str	r3, [r7, #16]
		ag[2] += (hand1_mpu.accel_raw[MPU_Z] - 16384);
 800f33c:	697a      	ldr	r2, [r7, #20]
 800f33e:	4b68      	ldr	r3, [pc, #416]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f340:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f344:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f348:	4413      	add	r3, r2
 800f34a:	617b      	str	r3, [r7, #20]
		ag[3] += hand1_mpu.gyro_raw[MPU_X];
 800f34c:	69bb      	ldr	r3, [r7, #24]
 800f34e:	4a64      	ldr	r2, [pc, #400]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f350:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800f354:	4413      	add	r3, r2
 800f356:	61bb      	str	r3, [r7, #24]
		ag[4] += hand1_mpu.gyro_raw[MPU_Y];
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	4a61      	ldr	r2, [pc, #388]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f35c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800f360:	4413      	add	r3, r2
 800f362:	61fb      	str	r3, [r7, #28]
		ag[5] += hand1_mpu.gyro_raw[MPU_Z];
 800f364:	6a3b      	ldr	r3, [r7, #32]
 800f366:	4a5e      	ldr	r2, [pc, #376]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f368:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800f36c:	4413      	add	r3, r2
 800f36e:	623b      	str	r3, [r7, #32]
		HAL_Delay(1); // wait a little bit between 2 measurements
 800f370:	2001      	movs	r0, #1
 800f372:	f7f4 fe35 	bl	8003fe0 <HAL_Delay>
	for (int i = 0; i < CALIB_OFFSET_REPEAT; i++) {
 800f376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f378:	3301      	adds	r3, #1
 800f37a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f37e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800f382:	dbcf      	blt.n	800f324 <MPU6050_Calc_Offsets+0x28>
		//printf("c\r\n");
	}

	if (is_calc_acc) {
 800f384:	79fb      	ldrb	r3, [r7, #7]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d01d      	beq.n	800f3c6 <MPU6050_Calc_Offsets+0xca>
		hand1_mpu.accel_offset[MPU_X] = ag[0] / CALIB_OFFSET_REPEAT;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	4a55      	ldr	r2, [pc, #340]	@ (800f4e4 <MPU6050_Calc_Offsets+0x1e8>)
 800f38e:	fb82 1203 	smull	r1, r2, r2, r3
 800f392:	1152      	asrs	r2, r2, #5
 800f394:	17db      	asrs	r3, r3, #31
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	b21a      	sxth	r2, r3
 800f39a:	4b51      	ldr	r3, [pc, #324]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f39c:	81da      	strh	r2, [r3, #14]
		hand1_mpu.accel_offset[MPU_Y] = ag[1] / CALIB_OFFSET_REPEAT;
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	4a50      	ldr	r2, [pc, #320]	@ (800f4e4 <MPU6050_Calc_Offsets+0x1e8>)
 800f3a2:	fb82 1203 	smull	r1, r2, r2, r3
 800f3a6:	1152      	asrs	r2, r2, #5
 800f3a8:	17db      	asrs	r3, r3, #31
 800f3aa:	1ad3      	subs	r3, r2, r3
 800f3ac:	b21a      	sxth	r2, r3
 800f3ae:	4b4c      	ldr	r3, [pc, #304]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f3b0:	821a      	strh	r2, [r3, #16]
		hand1_mpu.accel_offset[MPU_Z] = ag[2] / CALIB_OFFSET_REPEAT;
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	4a4b      	ldr	r2, [pc, #300]	@ (800f4e4 <MPU6050_Calc_Offsets+0x1e8>)
 800f3b6:	fb82 1203 	smull	r1, r2, r2, r3
 800f3ba:	1152      	asrs	r2, r2, #5
 800f3bc:	17db      	asrs	r3, r3, #31
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	b21a      	sxth	r2, r3
 800f3c2:	4b47      	ldr	r3, [pc, #284]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f3c4:	825a      	strh	r2, [r3, #18]
	}

	if (is_calc_gyro) {
 800f3c6:	79bb      	ldrb	r3, [r7, #6]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01d      	beq.n	800f408 <MPU6050_Calc_Offsets+0x10c>
		hand1_mpu.gyro_offset[MPU_X] = ag[3] / CALIB_OFFSET_REPEAT;
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	4a45      	ldr	r2, [pc, #276]	@ (800f4e4 <MPU6050_Calc_Offsets+0x1e8>)
 800f3d0:	fb82 1203 	smull	r1, r2, r2, r3
 800f3d4:	1152      	asrs	r2, r2, #5
 800f3d6:	17db      	asrs	r3, r3, #31
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	b21a      	sxth	r2, r3
 800f3dc:	4b40      	ldr	r3, [pc, #256]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f3de:	829a      	strh	r2, [r3, #20]
		hand1_mpu.gyro_offset[MPU_Y] = ag[4] / CALIB_OFFSET_REPEAT;
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	4a40      	ldr	r2, [pc, #256]	@ (800f4e4 <MPU6050_Calc_Offsets+0x1e8>)
 800f3e4:	fb82 1203 	smull	r1, r2, r2, r3
 800f3e8:	1152      	asrs	r2, r2, #5
 800f3ea:	17db      	asrs	r3, r3, #31
 800f3ec:	1ad3      	subs	r3, r2, r3
 800f3ee:	b21a      	sxth	r2, r3
 800f3f0:	4b3b      	ldr	r3, [pc, #236]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f3f2:	82da      	strh	r2, [r3, #22]
		hand1_mpu.gyro_offset[MPU_Z] = ag[5] / CALIB_OFFSET_REPEAT;
 800f3f4:	6a3b      	ldr	r3, [r7, #32]
 800f3f6:	4a3b      	ldr	r2, [pc, #236]	@ (800f4e4 <MPU6050_Calc_Offsets+0x1e8>)
 800f3f8:	fb82 1203 	smull	r1, r2, r2, r3
 800f3fc:	1152      	asrs	r2, r2, #5
 800f3fe:	17db      	asrs	r3, r3, #31
 800f400:	1ad3      	subs	r3, r2, r3
 800f402:	b21a      	sxth	r2, r3
 800f404:	4b36      	ldr	r3, [pc, #216]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f406:	831a      	strh	r2, [r3, #24]
	}

	MPU6050_Read_All();
 800f408:	f000 f87a 	bl	800f500 <MPU6050_Read_All>

	LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_1);
 800f40c:	2002      	movs	r0, #2
 800f40e:	f7ff fdf7 	bl	800f000 <LL_EXTI_DisableIT_0_31>
	printf("################################################################################\r\n");
 800f412:	4835      	ldr	r0, [pc, #212]	@ (800f4e8 <MPU6050_Calc_Offsets+0x1ec>)
 800f414:	f002 fb46 	bl	8011aa4 <puts>
	printf("gyro x OFF: %d, gyro y OFF: %d, gyro z OFF: %d,\r\n",
			hand1_mpu.gyro_offset[MPU_X], hand1_mpu.gyro_offset[MPU_Y],
 800f418:	4b31      	ldr	r3, [pc, #196]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f41a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
	printf("gyro x OFF: %d, gyro y OFF: %d, gyro z OFF: %d,\r\n",
 800f41e:	4619      	mov	r1, r3
			hand1_mpu.gyro_offset[MPU_X], hand1_mpu.gyro_offset[MPU_Y],
 800f420:	4b2f      	ldr	r3, [pc, #188]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f422:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
	printf("gyro x OFF: %d, gyro y OFF: %d, gyro z OFF: %d,\r\n",
 800f426:	461a      	mov	r2, r3
			hand1_mpu.gyro_offset[MPU_Z]);
 800f428:	4b2d      	ldr	r3, [pc, #180]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f42a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
	printf("gyro x OFF: %d, gyro y OFF: %d, gyro z OFF: %d,\r\n",
 800f42e:	482f      	ldr	r0, [pc, #188]	@ (800f4ec <MPU6050_Calc_Offsets+0x1f0>)
 800f430:	f002 fad0 	bl	80119d4 <iprintf>

	printf("accel x OFF: %d, accel y OFF: %d, accel z OFF: %d,\r\n",
			hand1_mpu.accel_offset[MPU_X], hand1_mpu.accel_offset[MPU_Y],
 800f434:	4b2a      	ldr	r3, [pc, #168]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f436:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
	printf("accel x OFF: %d, accel y OFF: %d, accel z OFF: %d,\r\n",
 800f43a:	4619      	mov	r1, r3
			hand1_mpu.accel_offset[MPU_X], hand1_mpu.accel_offset[MPU_Y],
 800f43c:	4b28      	ldr	r3, [pc, #160]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f43e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	printf("accel x OFF: %d, accel y OFF: %d, accel z OFF: %d,\r\n",
 800f442:	461a      	mov	r2, r3
			hand1_mpu.accel_offset[MPU_Z]);
 800f444:	4b26      	ldr	r3, [pc, #152]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f446:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	printf("accel x OFF: %d, accel y OFF: %d, accel z OFF: %d,\r\n",
 800f44a:	4829      	ldr	r0, [pc, #164]	@ (800f4f0 <MPU6050_Calc_Offsets+0x1f4>)
 800f44c:	f002 fac2 	bl	80119d4 <iprintf>


	printf("gyro x call: %d, gyro y call: %d, gyro z call: %d,\r\n",
			hand1_mpu.gyro_call[MPU_X], hand1_mpu.gyro_call[MPU_Y],
 800f450:	4b23      	ldr	r3, [pc, #140]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f452:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
	printf("gyro x call: %d, gyro y call: %d, gyro z call: %d,\r\n",
 800f456:	4619      	mov	r1, r3
			hand1_mpu.gyro_call[MPU_X], hand1_mpu.gyro_call[MPU_Y],
 800f458:	4b21      	ldr	r3, [pc, #132]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f45a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
	printf("gyro x call: %d, gyro y call: %d, gyro z call: %d,\r\n",
 800f45e:	461a      	mov	r2, r3
			hand1_mpu.gyro_call[MPU_Z]);
 800f460:	4b1f      	ldr	r3, [pc, #124]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f462:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
	printf("gyro x call: %d, gyro y call: %d, gyro z call: %d,\r\n",
 800f466:	4823      	ldr	r0, [pc, #140]	@ (800f4f4 <MPU6050_Calc_Offsets+0x1f8>)
 800f468:	f002 fab4 	bl	80119d4 <iprintf>

	printf("accel x call: %d, accel y call: %d, accel z call: %d,\r\n",
			hand1_mpu.accel_call[MPU_X], hand1_mpu.accel_call[MPU_Y],
 800f46c:	4b1c      	ldr	r3, [pc, #112]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f46e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
	printf("accel x call: %d, accel y call: %d, accel z call: %d,\r\n",
 800f472:	4619      	mov	r1, r3
			hand1_mpu.accel_call[MPU_X], hand1_mpu.accel_call[MPU_Y],
 800f474:	4b1a      	ldr	r3, [pc, #104]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f476:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
	printf("accel x call: %d, accel y call: %d, accel z call: %d,\r\n",
 800f47a:	461a      	mov	r2, r3
			hand1_mpu.accel_call[MPU_Z]);
 800f47c:	4b18      	ldr	r3, [pc, #96]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f47e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
	printf("accel x call: %d, accel y call: %d, accel z call: %d,\r\n",
 800f482:	481d      	ldr	r0, [pc, #116]	@ (800f4f8 <MPU6050_Calc_Offsets+0x1fc>)
 800f484:	f002 faa6 	bl	80119d4 <iprintf>

	printf("################################################################################\r\n");
 800f488:	4817      	ldr	r0, [pc, #92]	@ (800f4e8 <MPU6050_Calc_Offsets+0x1ec>)
 800f48a:	f002 fb0b 	bl	8011aa4 <puts>
	printf("\r\n");
 800f48e:	481b      	ldr	r0, [pc, #108]	@ (800f4fc <MPU6050_Calc_Offsets+0x200>)
 800f490:	f002 fb08 	bl	8011aa4 <puts>

	hand1_mpu.yaw = 0;
 800f494:	4b12      	ldr	r3, [pc, #72]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f496:	f04f 0200 	mov.w	r2, #0
 800f49a:	641a      	str	r2, [r3, #64]	@ 0x40
	hand1_mpu.roll = 0;
 800f49c:	4b10      	ldr	r3, [pc, #64]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f49e:	f04f 0200 	mov.w	r2, #0
 800f4a2:	649a      	str	r2, [r3, #72]	@ 0x48
	hand1_mpu.pitch = 0;
 800f4a4:	4b0e      	ldr	r3, [pc, #56]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f4a6:	f04f 0200 	mov.w	r2, #0
 800f4aa:	645a      	str	r2, [r3, #68]	@ 0x44
	hand1_mpu.accel_angle[MPU_X] = 0;
 800f4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f4ae:	f04f 0200 	mov.w	r2, #0
 800f4b2:	629a      	str	r2, [r3, #40]	@ 0x28
	hand1_mpu.accel_angle[MPU_Y] = 0;
 800f4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f4b6:	f04f 0200 	mov.w	r2, #0
 800f4ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	hand1_mpu.gyro_angle[MPU_X] = 0;
 800f4bc:	4b08      	ldr	r3, [pc, #32]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f4be:	f04f 0200 	mov.w	r2, #0
 800f4c2:	635a      	str	r2, [r3, #52]	@ 0x34
	hand1_mpu.gyro_angle[MPU_Y] = 0;
 800f4c4:	4b06      	ldr	r3, [pc, #24]	@ (800f4e0 <MPU6050_Calc_Offsets+0x1e4>)
 800f4c6:	f04f 0200 	mov.w	r2, #0
 800f4ca:	639a      	str	r2, [r3, #56]	@ 0x38

	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_1);
 800f4cc:	2002      	movs	r0, #2
 800f4ce:	f7ff fd85 	bl	800efdc <LL_EXTI_EnableIT_0_31>
	MPU6050_Read_All();
 800f4d2:	f000 f815 	bl	800f500 <MPU6050_Read_All>
}
 800f4d6:	bf00      	nop
 800f4d8:	3728      	adds	r7, #40	@ 0x28
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	20001eec 	.word	0x20001eec
 800f4e4:	10624dd3 	.word	0x10624dd3
 800f4e8:	08013c90 	.word	0x08013c90
 800f4ec:	08013ce4 	.word	0x08013ce4
 800f4f0:	08013d18 	.word	0x08013d18
 800f4f4:	08013d50 	.word	0x08013d50
 800f4f8:	08013d88 	.word	0x08013d88
 800f4fc:	08013dc0 	.word	0x08013dc0

0800f500 <MPU6050_Read_All>:

void MPU6050_Read_All(void)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	af00      	add	r7, sp, #0
//	uint8_t Rec_Data = 0;

	MPU6050_Read_Gyro();
 800f504:	f7ff fe9e 	bl	800f244 <MPU6050_Read_Gyro>
	MPU6050_Read_Accel();
 800f508:	f7ff fe40 	bl	800f18c <MPU6050_Read_Accel>
//	HAL_I2C_Mem_Read (&MPU6050_I2C_PORT, hand1_mpu.mpu_addr, 0x3A, 1, &Rec_Data, 1, HAL_MAX_DELAY);
//	printf("int: %x\r\n", Rec_Data);
//
//	printf("A\r\n");

}
 800f50c:	bf00      	nop
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <EXTIValue_MPU_callback>:

void EXTIValue_MPU_callback(void) {
 800f510:	b5b0      	push	{r4, r5, r7, lr}
 800f512:	ed2d 8b02 	vpush	{d8}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0

	MPU6050_Read_All();
 800f51a:	f7ff fff1 	bl	800f500 <MPU6050_Read_All>

	//haram calculations


	float sgZ = hand1_mpu.accel_call[MPU_Z]<0 ? -1 : 1;
 800f51e:	4bc0      	ldr	r3, [pc, #768]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f520:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800f524:	2b00      	cmp	r3, #0
 800f526:	da01      	bge.n	800f52c <EXTIValue_MPU_callback+0x1c>
 800f528:	4bbe      	ldr	r3, [pc, #760]	@ (800f824 <EXTIValue_MPU_callback+0x314>)
 800f52a:	e001      	b.n	800f530 <EXTIValue_MPU_callback+0x20>
 800f52c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f530:	607b      	str	r3, [r7, #4]

	hand1_mpu.accel_angle[MPU_X] = (atan2f(hand1_mpu.accel_call[MPU_Y], sgZ * sqrtf(powf(hand1_mpu.accel_call[MPU_X], 2) + powf(hand1_mpu.accel_call[MPU_Z], 2))) * 57.29578);
 800f532:	4bbb      	ldr	r3, [pc, #748]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f534:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f538:	ee07 3a90 	vmov	s15, r3
 800f53c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f540:	4bb7      	ldr	r3, [pc, #732]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f542:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f546:	ee07 3a90 	vmov	s15, r3
 800f54a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f54e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f552:	eeb0 0a67 	vmov.f32	s0, s15
 800f556:	f000 f9ab 	bl	800f8b0 <powf>
 800f55a:	eef0 8a40 	vmov.f32	s17, s0
 800f55e:	4bb0      	ldr	r3, [pc, #704]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f560:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800f564:	ee07 3a90 	vmov	s15, r3
 800f568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f56c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f570:	eeb0 0a67 	vmov.f32	s0, s15
 800f574:	f000 f99c 	bl	800f8b0 <powf>
 800f578:	eef0 7a40 	vmov.f32	s15, s0
 800f57c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800f580:	eeb0 0a67 	vmov.f32	s0, s15
 800f584:	f000 f9ec 	bl	800f960 <sqrtf>
 800f588:	eeb0 7a40 	vmov.f32	s14, s0
 800f58c:	edd7 7a01 	vldr	s15, [r7, #4]
 800f590:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f594:	eef0 0a67 	vmov.f32	s1, s15
 800f598:	eeb0 0a48 	vmov.f32	s0, s16
 800f59c:	f000 f986 	bl	800f8ac <atan2f>
 800f5a0:	ee10 3a10 	vmov	r3, s0
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7f0 fff7 	bl	8000598 <__aeabi_f2d>
 800f5aa:	a393      	add	r3, pc, #588	@ (adr r3, 800f7f8 <EXTIValue_MPU_callback+0x2e8>)
 800f5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b0:	f7f1 f84a 	bl	8000648 <__aeabi_dmul>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	4610      	mov	r0, r2
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	f7f1 fb1c 	bl	8000bf8 <__aeabi_d2f>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	4a97      	ldr	r2, [pc, #604]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f5c4:	6293      	str	r3, [r2, #40]	@ 0x28
	hand1_mpu.accel_angle[MPU_Y] = (atan2f(hand1_mpu.accel_call[MPU_X], sqrtf(powf(hand1_mpu.accel_call[MPU_Y], 2) + powf(hand1_mpu.accel_call[MPU_Z], 2))) * 57.29578);
 800f5c6:	4b96      	ldr	r3, [pc, #600]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f5c8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f5cc:	ee07 3a90 	vmov	s15, r3
 800f5d0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f5d4:	4b92      	ldr	r3, [pc, #584]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f5d6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f5da:	ee07 3a90 	vmov	s15, r3
 800f5de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5e2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f5e6:	eeb0 0a67 	vmov.f32	s0, s15
 800f5ea:	f000 f961 	bl	800f8b0 <powf>
 800f5ee:	eef0 8a40 	vmov.f32	s17, s0
 800f5f2:	4b8b      	ldr	r3, [pc, #556]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f5f4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800f5f8:	ee07 3a90 	vmov	s15, r3
 800f5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f600:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f604:	eeb0 0a67 	vmov.f32	s0, s15
 800f608:	f000 f952 	bl	800f8b0 <powf>
 800f60c:	eef0 7a40 	vmov.f32	s15, s0
 800f610:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800f614:	eeb0 0a67 	vmov.f32	s0, s15
 800f618:	f000 f9a2 	bl	800f960 <sqrtf>
 800f61c:	eef0 7a40 	vmov.f32	s15, s0
 800f620:	eef0 0a67 	vmov.f32	s1, s15
 800f624:	eeb0 0a48 	vmov.f32	s0, s16
 800f628:	f000 f940 	bl	800f8ac <atan2f>
 800f62c:	ee10 3a10 	vmov	r3, s0
 800f630:	4618      	mov	r0, r3
 800f632:	f7f0 ffb1 	bl	8000598 <__aeabi_f2d>
 800f636:	a370      	add	r3, pc, #448	@ (adr r3, 800f7f8 <EXTIValue_MPU_callback+0x2e8>)
 800f638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63c:	f7f1 f804 	bl	8000648 <__aeabi_dmul>
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	4610      	mov	r0, r2
 800f646:	4619      	mov	r1, r3
 800f648:	f7f1 fad6 	bl	8000bf8 <__aeabi_d2f>
 800f64c:	4603      	mov	r3, r0
 800f64e:	4a74      	ldr	r2, [pc, #464]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f650:	62d3      	str	r3, [r2, #44]	@ 0x2c

	hand1_mpu.gyro_angle[MPU_X] = hand1_mpu.gyro_angle[MPU_X] + ((hand1_mpu.gyro_call[MPU_X] * 0.01)/131.0);
 800f652:	4b73      	ldr	r3, [pc, #460]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f656:	4618      	mov	r0, r3
 800f658:	f7f0 ff9e 	bl	8000598 <__aeabi_f2d>
 800f65c:	4604      	mov	r4, r0
 800f65e:	460d      	mov	r5, r1
 800f660:	4b6f      	ldr	r3, [pc, #444]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f662:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800f666:	4618      	mov	r0, r3
 800f668:	f7f0 ff84 	bl	8000574 <__aeabi_i2d>
 800f66c:	a364      	add	r3, pc, #400	@ (adr r3, 800f800 <EXTIValue_MPU_callback+0x2f0>)
 800f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f672:	f7f0 ffe9 	bl	8000648 <__aeabi_dmul>
 800f676:	4602      	mov	r2, r0
 800f678:	460b      	mov	r3, r1
 800f67a:	4610      	mov	r0, r2
 800f67c:	4619      	mov	r1, r3
 800f67e:	a362      	add	r3, pc, #392	@ (adr r3, 800f808 <EXTIValue_MPU_callback+0x2f8>)
 800f680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f684:	f7f1 f90a 	bl	800089c <__aeabi_ddiv>
 800f688:	4602      	mov	r2, r0
 800f68a:	460b      	mov	r3, r1
 800f68c:	4620      	mov	r0, r4
 800f68e:	4629      	mov	r1, r5
 800f690:	f7f0 fe24 	bl	80002dc <__adddf3>
 800f694:	4602      	mov	r2, r0
 800f696:	460b      	mov	r3, r1
 800f698:	4610      	mov	r0, r2
 800f69a:	4619      	mov	r1, r3
 800f69c:	f7f1 faac 	bl	8000bf8 <__aeabi_d2f>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	4a5f      	ldr	r2, [pc, #380]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f6a4:	6353      	str	r3, [r2, #52]	@ 0x34
	hand1_mpu.gyro_angle[MPU_Y] = hand1_mpu.gyro_angle[MPU_Y] + ((hand1_mpu.gyro_call[MPU_Y] * 0.01)/131.0);
 800f6a6:	4b5e      	ldr	r3, [pc, #376]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7f0 ff74 	bl	8000598 <__aeabi_f2d>
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	460d      	mov	r5, r1
 800f6b4:	4b5a      	ldr	r3, [pc, #360]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f6b6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7f0 ff5a 	bl	8000574 <__aeabi_i2d>
 800f6c0:	a34f      	add	r3, pc, #316	@ (adr r3, 800f800 <EXTIValue_MPU_callback+0x2f0>)
 800f6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c6:	f7f0 ffbf 	bl	8000648 <__aeabi_dmul>
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	4610      	mov	r0, r2
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	a34d      	add	r3, pc, #308	@ (adr r3, 800f808 <EXTIValue_MPU_callback+0x2f8>)
 800f6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d8:	f7f1 f8e0 	bl	800089c <__aeabi_ddiv>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	460b      	mov	r3, r1
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	4629      	mov	r1, r5
 800f6e4:	f7f0 fdfa 	bl	80002dc <__adddf3>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	f7f1 fa82 	bl	8000bf8 <__aeabi_d2f>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	4a4a      	ldr	r2, [pc, #296]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f6f8:	6393      	str	r3, [r2, #56]	@ 0x38

	hand1_mpu.yaw = hand1_mpu.yaw + ((hand1_mpu.gyro_call[MPU_Z] * 0.01)/131.0);
 800f6fa:	4b49      	ldr	r3, [pc, #292]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7f0 ff4a 	bl	8000598 <__aeabi_f2d>
 800f704:	4604      	mov	r4, r0
 800f706:	460d      	mov	r5, r1
 800f708:	4b45      	ldr	r3, [pc, #276]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f70a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800f70e:	4618      	mov	r0, r3
 800f710:	f7f0 ff30 	bl	8000574 <__aeabi_i2d>
 800f714:	a33a      	add	r3, pc, #232	@ (adr r3, 800f800 <EXTIValue_MPU_callback+0x2f0>)
 800f716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71a:	f7f0 ff95 	bl	8000648 <__aeabi_dmul>
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	4610      	mov	r0, r2
 800f724:	4619      	mov	r1, r3
 800f726:	a338      	add	r3, pc, #224	@ (adr r3, 800f808 <EXTIValue_MPU_callback+0x2f8>)
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	f7f1 f8b6 	bl	800089c <__aeabi_ddiv>
 800f730:	4602      	mov	r2, r0
 800f732:	460b      	mov	r3, r1
 800f734:	4620      	mov	r0, r4
 800f736:	4629      	mov	r1, r5
 800f738:	f7f0 fdd0 	bl	80002dc <__adddf3>
 800f73c:	4602      	mov	r2, r0
 800f73e:	460b      	mov	r3, r1
 800f740:	4610      	mov	r0, r2
 800f742:	4619      	mov	r1, r3
 800f744:	f7f1 fa58 	bl	8000bf8 <__aeabi_d2f>
 800f748:	4603      	mov	r3, r0
 800f74a:	4a35      	ldr	r2, [pc, #212]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f74c:	6413      	str	r3, [r2, #64]	@ 0x40
	hand1_mpu.roll = (0.96 * hand1_mpu.gyro_angle[MPU_X] + 0.04 * hand1_mpu.accel_angle[MPU_X]);
 800f74e:	4b34      	ldr	r3, [pc, #208]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f752:	4618      	mov	r0, r3
 800f754:	f7f0 ff20 	bl	8000598 <__aeabi_f2d>
 800f758:	a32d      	add	r3, pc, #180	@ (adr r3, 800f810 <EXTIValue_MPU_callback+0x300>)
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	f7f0 ff73 	bl	8000648 <__aeabi_dmul>
 800f762:	4602      	mov	r2, r0
 800f764:	460b      	mov	r3, r1
 800f766:	4614      	mov	r4, r2
 800f768:	461d      	mov	r5, r3
 800f76a:	4b2d      	ldr	r3, [pc, #180]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f76e:	4618      	mov	r0, r3
 800f770:	f7f0 ff12 	bl	8000598 <__aeabi_f2d>
 800f774:	a328      	add	r3, pc, #160	@ (adr r3, 800f818 <EXTIValue_MPU_callback+0x308>)
 800f776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77a:	f7f0 ff65 	bl	8000648 <__aeabi_dmul>
 800f77e:	4602      	mov	r2, r0
 800f780:	460b      	mov	r3, r1
 800f782:	4620      	mov	r0, r4
 800f784:	4629      	mov	r1, r5
 800f786:	f7f0 fda9 	bl	80002dc <__adddf3>
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	4610      	mov	r0, r2
 800f790:	4619      	mov	r1, r3
 800f792:	f7f1 fa31 	bl	8000bf8 <__aeabi_d2f>
 800f796:	4603      	mov	r3, r0
 800f798:	4a21      	ldr	r2, [pc, #132]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f79a:	6493      	str	r3, [r2, #72]	@ 0x48
	hand1_mpu.pitch = 0.96 * hand1_mpu.gyro_angle[MPU_Y] + 0.04 * hand1_mpu.accel_angle[MPU_Y];
 800f79c:	4b20      	ldr	r3, [pc, #128]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7f0 fef9 	bl	8000598 <__aeabi_f2d>
 800f7a6:	a31a      	add	r3, pc, #104	@ (adr r3, 800f810 <EXTIValue_MPU_callback+0x300>)
 800f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ac:	f7f0 ff4c 	bl	8000648 <__aeabi_dmul>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	4614      	mov	r4, r2
 800f7b6:	461d      	mov	r5, r3
 800f7b8:	4b19      	ldr	r3, [pc, #100]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7f0 feeb 	bl	8000598 <__aeabi_f2d>
 800f7c2:	a315      	add	r3, pc, #84	@ (adr r3, 800f818 <EXTIValue_MPU_callback+0x308>)
 800f7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c8:	f7f0 ff3e 	bl	8000648 <__aeabi_dmul>
 800f7cc:	4602      	mov	r2, r0
 800f7ce:	460b      	mov	r3, r1
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	f7f0 fd82 	bl	80002dc <__adddf3>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	460b      	mov	r3, r1
 800f7dc:	4610      	mov	r0, r2
 800f7de:	4619      	mov	r1, r3
 800f7e0:	f7f1 fa0a 	bl	8000bf8 <__aeabi_d2f>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	4a0e      	ldr	r2, [pc, #56]	@ (800f820 <EXTIValue_MPU_callback+0x310>)
 800f7e8:	6453      	str	r3, [r2, #68]	@ 0x44


}
 800f7ea:	bf00      	nop
 800f7ec:	3708      	adds	r7, #8
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	ecbd 8b02 	vpop	{d8}
 800f7f4:	bdb0      	pop	{r4, r5, r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	1e7967cb 	.word	0x1e7967cb
 800f7fc:	404ca5dc 	.word	0x404ca5dc
 800f800:	47ae147b 	.word	0x47ae147b
 800f804:	3f847ae1 	.word	0x3f847ae1
 800f808:	00000000 	.word	0x00000000
 800f80c:	40606000 	.word	0x40606000
 800f810:	eb851eb8 	.word	0xeb851eb8
 800f814:	3feeb851 	.word	0x3feeb851
 800f818:	47ae147b 	.word	0x47ae147b
 800f81c:	3fa47ae1 	.word	0x3fa47ae1
 800f820:	20001eec 	.word	0x20001eec
 800f824:	bf800000 	.word	0xbf800000

0800f828 <LL_TIM_EnableCounter>:
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f043 0201 	orr.w	r2, r3, #1
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	601a      	str	r2, [r3, #0]
}
 800f83c:	bf00      	nop
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <LL_TIM_EnableIT_UPDATE>:
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	f043 0201 	orr.w	r2, r3, #1
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	60da      	str	r2, [r3, #12]
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <PSERV_init>:
#include "kbd.h"

periodic_services_handle_t periodic_services;


void PSERV_init(void){
 800f868:	b580      	push	{r7, lr}
 800f86a:	af00      	add	r7, sp, #0

	periodic_services.timerN = TIM6;
 800f86c:	4b04      	ldr	r3, [pc, #16]	@ (800f880 <PSERV_init+0x18>)
 800f86e:	4a05      	ldr	r2, [pc, #20]	@ (800f884 <PSERV_init+0x1c>)
 800f870:	601a      	str	r2, [r3, #0]

	LL_TIM_EnableCounter (periodic_services.timerN);
 800f872:	4b03      	ldr	r3, [pc, #12]	@ (800f880 <PSERV_init+0x18>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4618      	mov	r0, r3
 800f878:	f7ff ffd6 	bl	800f828 <LL_TIM_EnableCounter>

}
 800f87c:	bf00      	nop
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	20002a04 	.word	0x20002a04
 800f884:	40001000 	.word	0x40001000

0800f888 <PSERV_enable>:


void PSERV_enable(void){
 800f888:	b580      	push	{r7, lr}
 800f88a:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE (periodic_services.timerN);
 800f88c:	4b03      	ldr	r3, [pc, #12]	@ (800f89c <PSERV_enable+0x14>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4618      	mov	r0, r3
 800f892:	f7ff ffd9 	bl	800f848 <LL_TIM_EnableIT_UPDATE>
}
 800f896:	bf00      	nop
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	20002a04 	.word	0x20002a04

0800f8a0 <PSERV_run_services_Callback>:
void PSERV_disable(void){
	LL_TIM_DisableIT_UPDATE (periodic_services.timerN);
}


void PSERV_run_services_Callback(void){
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	af00      	add	r7, sp, #0
	KBD_scan();
 800f8a4:	f7fe f958 	bl	800db58 <KBD_scan>
	//KBD_demo_toggle_LEDs_if_buttons_pressed();
}
 800f8a8:	bf00      	nop
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <atan2f>:
 800f8ac:	f000 baba 	b.w	800fe24 <__ieee754_atan2f>

0800f8b0 <powf>:
 800f8b0:	b508      	push	{r3, lr}
 800f8b2:	ed2d 8b04 	vpush	{d8-d9}
 800f8b6:	eeb0 8a60 	vmov.f32	s16, s1
 800f8ba:	eeb0 9a40 	vmov.f32	s18, s0
 800f8be:	f000 fb51 	bl	800ff64 <__ieee754_powf>
 800f8c2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ca:	eef0 8a40 	vmov.f32	s17, s0
 800f8ce:	d63e      	bvs.n	800f94e <powf+0x9e>
 800f8d0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d8:	d112      	bne.n	800f900 <powf+0x50>
 800f8da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e2:	d039      	beq.n	800f958 <powf+0xa8>
 800f8e4:	eeb0 0a48 	vmov.f32	s0, s16
 800f8e8:	f000 f90e 	bl	800fb08 <finitef>
 800f8ec:	b378      	cbz	r0, 800f94e <powf+0x9e>
 800f8ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f6:	d52a      	bpl.n	800f94e <powf+0x9e>
 800f8f8:	f002 faba 	bl	8011e70 <__errno>
 800f8fc:	2322      	movs	r3, #34	@ 0x22
 800f8fe:	e014      	b.n	800f92a <powf+0x7a>
 800f900:	f000 f902 	bl	800fb08 <finitef>
 800f904:	b998      	cbnz	r0, 800f92e <powf+0x7e>
 800f906:	eeb0 0a49 	vmov.f32	s0, s18
 800f90a:	f000 f8fd 	bl	800fb08 <finitef>
 800f90e:	b170      	cbz	r0, 800f92e <powf+0x7e>
 800f910:	eeb0 0a48 	vmov.f32	s0, s16
 800f914:	f000 f8f8 	bl	800fb08 <finitef>
 800f918:	b148      	cbz	r0, 800f92e <powf+0x7e>
 800f91a:	eef4 8a68 	vcmp.f32	s17, s17
 800f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f922:	d7e9      	bvc.n	800f8f8 <powf+0x48>
 800f924:	f002 faa4 	bl	8011e70 <__errno>
 800f928:	2321      	movs	r3, #33	@ 0x21
 800f92a:	6003      	str	r3, [r0, #0]
 800f92c:	e00f      	b.n	800f94e <powf+0x9e>
 800f92e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f936:	d10a      	bne.n	800f94e <powf+0x9e>
 800f938:	eeb0 0a49 	vmov.f32	s0, s18
 800f93c:	f000 f8e4 	bl	800fb08 <finitef>
 800f940:	b128      	cbz	r0, 800f94e <powf+0x9e>
 800f942:	eeb0 0a48 	vmov.f32	s0, s16
 800f946:	f000 f8df 	bl	800fb08 <finitef>
 800f94a:	2800      	cmp	r0, #0
 800f94c:	d1d4      	bne.n	800f8f8 <powf+0x48>
 800f94e:	eeb0 0a68 	vmov.f32	s0, s17
 800f952:	ecbd 8b04 	vpop	{d8-d9}
 800f956:	bd08      	pop	{r3, pc}
 800f958:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f95c:	e7f7      	b.n	800f94e <powf+0x9e>
	...

0800f960 <sqrtf>:
 800f960:	b508      	push	{r3, lr}
 800f962:	ed2d 8b02 	vpush	{d8}
 800f966:	eeb0 8a40 	vmov.f32	s16, s0
 800f96a:	f000 f8d7 	bl	800fb1c <__ieee754_sqrtf>
 800f96e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f976:	d60c      	bvs.n	800f992 <sqrtf+0x32>
 800f978:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f998 <sqrtf+0x38>
 800f97c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f984:	d505      	bpl.n	800f992 <sqrtf+0x32>
 800f986:	f002 fa73 	bl	8011e70 <__errno>
 800f98a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f98e:	2321      	movs	r3, #33	@ 0x21
 800f990:	6003      	str	r3, [r0, #0]
 800f992:	ecbd 8b02 	vpop	{d8}
 800f996:	bd08      	pop	{r3, pc}
 800f998:	00000000 	.word	0x00000000

0800f99c <cosf>:
 800f99c:	ee10 3a10 	vmov	r3, s0
 800f9a0:	b507      	push	{r0, r1, r2, lr}
 800f9a2:	4a1e      	ldr	r2, [pc, #120]	@ (800fa1c <cosf+0x80>)
 800f9a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d806      	bhi.n	800f9ba <cosf+0x1e>
 800f9ac:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800fa20 <cosf+0x84>
 800f9b0:	b003      	add	sp, #12
 800f9b2:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9b6:	f000 b8b5 	b.w	800fb24 <__kernel_cosf>
 800f9ba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f9be:	d304      	bcc.n	800f9ca <cosf+0x2e>
 800f9c0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f9c4:	b003      	add	sp, #12
 800f9c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9ca:	4668      	mov	r0, sp
 800f9cc:	f000 fd9a 	bl	8010504 <__ieee754_rem_pio2f>
 800f9d0:	f000 0003 	and.w	r0, r0, #3
 800f9d4:	2801      	cmp	r0, #1
 800f9d6:	d009      	beq.n	800f9ec <cosf+0x50>
 800f9d8:	2802      	cmp	r0, #2
 800f9da:	d010      	beq.n	800f9fe <cosf+0x62>
 800f9dc:	b9b0      	cbnz	r0, 800fa0c <cosf+0x70>
 800f9de:	eddd 0a01 	vldr	s1, [sp, #4]
 800f9e2:	ed9d 0a00 	vldr	s0, [sp]
 800f9e6:	f000 f89d 	bl	800fb24 <__kernel_cosf>
 800f9ea:	e7eb      	b.n	800f9c4 <cosf+0x28>
 800f9ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800f9f0:	ed9d 0a00 	vldr	s0, [sp]
 800f9f4:	f000 f8ee 	bl	800fbd4 <__kernel_sinf>
 800f9f8:	eeb1 0a40 	vneg.f32	s0, s0
 800f9fc:	e7e2      	b.n	800f9c4 <cosf+0x28>
 800f9fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800fa02:	ed9d 0a00 	vldr	s0, [sp]
 800fa06:	f000 f88d 	bl	800fb24 <__kernel_cosf>
 800fa0a:	e7f5      	b.n	800f9f8 <cosf+0x5c>
 800fa0c:	eddd 0a01 	vldr	s1, [sp, #4]
 800fa10:	ed9d 0a00 	vldr	s0, [sp]
 800fa14:	2001      	movs	r0, #1
 800fa16:	f000 f8dd 	bl	800fbd4 <__kernel_sinf>
 800fa1a:	e7d3      	b.n	800f9c4 <cosf+0x28>
 800fa1c:	3f490fd8 	.word	0x3f490fd8
 800fa20:	00000000 	.word	0x00000000

0800fa24 <sinf>:
 800fa24:	ee10 3a10 	vmov	r3, s0
 800fa28:	b507      	push	{r0, r1, r2, lr}
 800fa2a:	4a1f      	ldr	r2, [pc, #124]	@ (800faa8 <sinf+0x84>)
 800fa2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d807      	bhi.n	800fa44 <sinf+0x20>
 800fa34:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800faac <sinf+0x88>
 800fa38:	2000      	movs	r0, #0
 800fa3a:	b003      	add	sp, #12
 800fa3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa40:	f000 b8c8 	b.w	800fbd4 <__kernel_sinf>
 800fa44:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fa48:	d304      	bcc.n	800fa54 <sinf+0x30>
 800fa4a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fa4e:	b003      	add	sp, #12
 800fa50:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa54:	4668      	mov	r0, sp
 800fa56:	f000 fd55 	bl	8010504 <__ieee754_rem_pio2f>
 800fa5a:	f000 0003 	and.w	r0, r0, #3
 800fa5e:	2801      	cmp	r0, #1
 800fa60:	d00a      	beq.n	800fa78 <sinf+0x54>
 800fa62:	2802      	cmp	r0, #2
 800fa64:	d00f      	beq.n	800fa86 <sinf+0x62>
 800fa66:	b9c0      	cbnz	r0, 800fa9a <sinf+0x76>
 800fa68:	eddd 0a01 	vldr	s1, [sp, #4]
 800fa6c:	ed9d 0a00 	vldr	s0, [sp]
 800fa70:	2001      	movs	r0, #1
 800fa72:	f000 f8af 	bl	800fbd4 <__kernel_sinf>
 800fa76:	e7ea      	b.n	800fa4e <sinf+0x2a>
 800fa78:	eddd 0a01 	vldr	s1, [sp, #4]
 800fa7c:	ed9d 0a00 	vldr	s0, [sp]
 800fa80:	f000 f850 	bl	800fb24 <__kernel_cosf>
 800fa84:	e7e3      	b.n	800fa4e <sinf+0x2a>
 800fa86:	eddd 0a01 	vldr	s1, [sp, #4]
 800fa8a:	ed9d 0a00 	vldr	s0, [sp]
 800fa8e:	2001      	movs	r0, #1
 800fa90:	f000 f8a0 	bl	800fbd4 <__kernel_sinf>
 800fa94:	eeb1 0a40 	vneg.f32	s0, s0
 800fa98:	e7d9      	b.n	800fa4e <sinf+0x2a>
 800fa9a:	eddd 0a01 	vldr	s1, [sp, #4]
 800fa9e:	ed9d 0a00 	vldr	s0, [sp]
 800faa2:	f000 f83f 	bl	800fb24 <__kernel_cosf>
 800faa6:	e7f5      	b.n	800fa94 <sinf+0x70>
 800faa8:	3f490fd8 	.word	0x3f490fd8
 800faac:	00000000 	.word	0x00000000

0800fab0 <tanf>:
 800fab0:	ee10 3a10 	vmov	r3, s0
 800fab4:	b507      	push	{r0, r1, r2, lr}
 800fab6:	4a12      	ldr	r2, [pc, #72]	@ (800fb00 <tanf+0x50>)
 800fab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d807      	bhi.n	800fad0 <tanf+0x20>
 800fac0:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800fb04 <tanf+0x54>
 800fac4:	2001      	movs	r0, #1
 800fac6:	b003      	add	sp, #12
 800fac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800facc:	f000 b8ca 	b.w	800fc64 <__kernel_tanf>
 800fad0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fad4:	d304      	bcc.n	800fae0 <tanf+0x30>
 800fad6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fada:	b003      	add	sp, #12
 800fadc:	f85d fb04 	ldr.w	pc, [sp], #4
 800fae0:	4668      	mov	r0, sp
 800fae2:	f000 fd0f 	bl	8010504 <__ieee754_rem_pio2f>
 800fae6:	0040      	lsls	r0, r0, #1
 800fae8:	f000 0002 	and.w	r0, r0, #2
 800faec:	eddd 0a01 	vldr	s1, [sp, #4]
 800faf0:	ed9d 0a00 	vldr	s0, [sp]
 800faf4:	f1c0 0001 	rsb	r0, r0, #1
 800faf8:	f000 f8b4 	bl	800fc64 <__kernel_tanf>
 800fafc:	e7ed      	b.n	800fada <tanf+0x2a>
 800fafe:	bf00      	nop
 800fb00:	3f490fda 	.word	0x3f490fda
 800fb04:	00000000 	.word	0x00000000

0800fb08 <finitef>:
 800fb08:	ee10 3a10 	vmov	r3, s0
 800fb0c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800fb10:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800fb14:	bfac      	ite	ge
 800fb16:	2000      	movge	r0, #0
 800fb18:	2001      	movlt	r0, #1
 800fb1a:	4770      	bx	lr

0800fb1c <__ieee754_sqrtf>:
 800fb1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fb20:	4770      	bx	lr
	...

0800fb24 <__kernel_cosf>:
 800fb24:	ee10 3a10 	vmov	r3, s0
 800fb28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fb2c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fb30:	eef0 6a40 	vmov.f32	s13, s0
 800fb34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fb38:	d204      	bcs.n	800fb44 <__kernel_cosf+0x20>
 800fb3a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800fb3e:	ee17 2a90 	vmov	r2, s15
 800fb42:	b342      	cbz	r2, 800fb96 <__kernel_cosf+0x72>
 800fb44:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fb48:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800fbb4 <__kernel_cosf+0x90>
 800fb4c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800fbb8 <__kernel_cosf+0x94>
 800fb50:	4a1a      	ldr	r2, [pc, #104]	@ (800fbbc <__kernel_cosf+0x98>)
 800fb52:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fb56:	4293      	cmp	r3, r2
 800fb58:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fbc0 <__kernel_cosf+0x9c>
 800fb5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb60:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800fbc4 <__kernel_cosf+0xa0>
 800fb64:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fb68:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800fbc8 <__kernel_cosf+0xa4>
 800fb6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb70:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800fbcc <__kernel_cosf+0xa8>
 800fb74:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fb78:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800fb7c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800fb80:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fb84:	eee7 0a06 	vfma.f32	s1, s14, s12
 800fb88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb8c:	d804      	bhi.n	800fb98 <__kernel_cosf+0x74>
 800fb8e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fb92:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb96:	4770      	bx	lr
 800fb98:	4a0d      	ldr	r2, [pc, #52]	@ (800fbd0 <__kernel_cosf+0xac>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	bf9a      	itte	ls
 800fb9e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800fba2:	ee07 3a10 	vmovls	s14, r3
 800fba6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800fbaa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fbae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbb2:	e7ec      	b.n	800fb8e <__kernel_cosf+0x6a>
 800fbb4:	ad47d74e 	.word	0xad47d74e
 800fbb8:	310f74f6 	.word	0x310f74f6
 800fbbc:	3e999999 	.word	0x3e999999
 800fbc0:	b493f27c 	.word	0xb493f27c
 800fbc4:	37d00d01 	.word	0x37d00d01
 800fbc8:	bab60b61 	.word	0xbab60b61
 800fbcc:	3d2aaaab 	.word	0x3d2aaaab
 800fbd0:	3f480000 	.word	0x3f480000

0800fbd4 <__kernel_sinf>:
 800fbd4:	ee10 3a10 	vmov	r3, s0
 800fbd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fbdc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fbe0:	d204      	bcs.n	800fbec <__kernel_sinf+0x18>
 800fbe2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fbe6:	ee17 3a90 	vmov	r3, s15
 800fbea:	b35b      	cbz	r3, 800fc44 <__kernel_sinf+0x70>
 800fbec:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fbf0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fc48 <__kernel_sinf+0x74>
 800fbf4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800fc4c <__kernel_sinf+0x78>
 800fbf8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fbfc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800fc50 <__kernel_sinf+0x7c>
 800fc00:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fc04:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800fc54 <__kernel_sinf+0x80>
 800fc08:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fc0c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800fc58 <__kernel_sinf+0x84>
 800fc10:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fc14:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fc18:	b930      	cbnz	r0, 800fc28 <__kernel_sinf+0x54>
 800fc1a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800fc5c <__kernel_sinf+0x88>
 800fc1e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fc22:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fc26:	4770      	bx	lr
 800fc28:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fc2c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fc30:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fc34:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fc38:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800fc60 <__kernel_sinf+0x8c>
 800fc3c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fc40:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	2f2ec9d3 	.word	0x2f2ec9d3
 800fc4c:	b2d72f34 	.word	0xb2d72f34
 800fc50:	3638ef1b 	.word	0x3638ef1b
 800fc54:	b9500d01 	.word	0xb9500d01
 800fc58:	3c088889 	.word	0x3c088889
 800fc5c:	be2aaaab 	.word	0xbe2aaaab
 800fc60:	3e2aaaab 	.word	0x3e2aaaab

0800fc64 <__kernel_tanf>:
 800fc64:	b508      	push	{r3, lr}
 800fc66:	ee10 3a10 	vmov	r3, s0
 800fc6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fc6e:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 800fc72:	eef0 7a40 	vmov.f32	s15, s0
 800fc76:	d217      	bcs.n	800fca8 <__kernel_tanf+0x44>
 800fc78:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800fc7c:	ee17 1a10 	vmov	r1, s14
 800fc80:	bb41      	cbnz	r1, 800fcd4 <__kernel_tanf+0x70>
 800fc82:	1c43      	adds	r3, r0, #1
 800fc84:	4313      	orrs	r3, r2
 800fc86:	d108      	bne.n	800fc9a <__kernel_tanf+0x36>
 800fc88:	f000 fe40 	bl	801090c <fabsf>
 800fc8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fc94:	eeb0 0a67 	vmov.f32	s0, s15
 800fc98:	bd08      	pop	{r3, pc}
 800fc9a:	2801      	cmp	r0, #1
 800fc9c:	d0fa      	beq.n	800fc94 <__kernel_tanf+0x30>
 800fc9e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800fca2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fca6:	e7f5      	b.n	800fc94 <__kernel_tanf+0x30>
 800fca8:	494c      	ldr	r1, [pc, #304]	@ (800fddc <__kernel_tanf+0x178>)
 800fcaa:	428a      	cmp	r2, r1
 800fcac:	d312      	bcc.n	800fcd4 <__kernel_tanf+0x70>
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800fde0 <__kernel_tanf+0x17c>
 800fcb4:	bfb8      	it	lt
 800fcb6:	eef1 7a40 	vneglt.f32	s15, s0
 800fcba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fcbe:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800fde4 <__kernel_tanf+0x180>
 800fcc2:	bfb8      	it	lt
 800fcc4:	eef1 0a60 	vneglt.f32	s1, s1
 800fcc8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fccc:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800fde8 <__kernel_tanf+0x184>
 800fcd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcd4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800fcd8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800fdec <__kernel_tanf+0x188>
 800fcdc:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 800fdf0 <__kernel_tanf+0x18c>
 800fce0:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 800fdf4 <__kernel_tanf+0x190>
 800fce4:	493d      	ldr	r1, [pc, #244]	@ (800fddc <__kernel_tanf+0x178>)
 800fce6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fcea:	428a      	cmp	r2, r1
 800fcec:	eea7 6a25 	vfma.f32	s12, s14, s11
 800fcf0:	eddf 5a41 	vldr	s11, [pc, #260]	@ 800fdf8 <__kernel_tanf+0x194>
 800fcf4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fcf8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800fdfc <__kernel_tanf+0x198>
 800fcfc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fd00:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fe00 <__kernel_tanf+0x19c>
 800fd04:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fd08:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800fe04 <__kernel_tanf+0x1a0>
 800fd0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fd10:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800fe08 <__kernel_tanf+0x1a4>
 800fd14:	eee7 5a05 	vfma.f32	s11, s14, s10
 800fd18:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800fe0c <__kernel_tanf+0x1a8>
 800fd1c:	eea5 5a87 	vfma.f32	s10, s11, s14
 800fd20:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800fe10 <__kernel_tanf+0x1ac>
 800fd24:	eee5 5a07 	vfma.f32	s11, s10, s14
 800fd28:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800fe14 <__kernel_tanf+0x1b0>
 800fd2c:	eea5 5a87 	vfma.f32	s10, s11, s14
 800fd30:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800fe18 <__kernel_tanf+0x1b4>
 800fd34:	eee5 5a07 	vfma.f32	s11, s10, s14
 800fd38:	eeb0 7a46 	vmov.f32	s14, s12
 800fd3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fd40:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800fd44:	eeb0 6a60 	vmov.f32	s12, s1
 800fd48:	eea7 6a05 	vfma.f32	s12, s14, s10
 800fd4c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800fe1c <__kernel_tanf+0x1b8>
 800fd50:	eee6 0a26 	vfma.f32	s1, s12, s13
 800fd54:	eee5 0a07 	vfma.f32	s1, s10, s14
 800fd58:	ee37 6aa0 	vadd.f32	s12, s15, s1
 800fd5c:	d31d      	bcc.n	800fd9a <__kernel_tanf+0x136>
 800fd5e:	ee07 0a10 	vmov	s14, r0
 800fd62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fd66:	ee26 5a06 	vmul.f32	s10, s12, s12
 800fd6a:	ee36 6a07 	vadd.f32	s12, s12, s14
 800fd6e:	179b      	asrs	r3, r3, #30
 800fd70:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800fd74:	f003 0302 	and.w	r3, r3, #2
 800fd78:	f1c3 0301 	rsb	r3, r3, #1
 800fd7c:	ee06 3a90 	vmov	s13, r3
 800fd80:	ee35 6ae0 	vsub.f32	s12, s11, s1
 800fd84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fd88:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fd8c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800fd90:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800fd94:	ee66 7a87 	vmul.f32	s15, s13, s14
 800fd98:	e77c      	b.n	800fc94 <__kernel_tanf+0x30>
 800fd9a:	2801      	cmp	r0, #1
 800fd9c:	d01b      	beq.n	800fdd6 <__kernel_tanf+0x172>
 800fd9e:	4b20      	ldr	r3, [pc, #128]	@ (800fe20 <__kernel_tanf+0x1bc>)
 800fda0:	ee16 2a10 	vmov	r2, s12
 800fda4:	401a      	ands	r2, r3
 800fda6:	ee05 2a90 	vmov	s11, r2
 800fdaa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fdae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdb2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fdb6:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800fdba:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800fdbe:	ee16 2a90 	vmov	r2, s13
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	ee07 3a90 	vmov	s15, r3
 800fdc8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fdcc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800fdd0:	eee7 7a26 	vfma.f32	s15, s14, s13
 800fdd4:	e75e      	b.n	800fc94 <__kernel_tanf+0x30>
 800fdd6:	eef0 7a46 	vmov.f32	s15, s12
 800fdda:	e75b      	b.n	800fc94 <__kernel_tanf+0x30>
 800fddc:	3f2ca140 	.word	0x3f2ca140
 800fde0:	3f490fda 	.word	0x3f490fda
 800fde4:	33222168 	.word	0x33222168
 800fde8:	00000000 	.word	0x00000000
 800fdec:	b79bae5f 	.word	0xb79bae5f
 800fdf0:	38a3f445 	.word	0x38a3f445
 800fdf4:	37d95384 	.word	0x37d95384
 800fdf8:	3a1a26c8 	.word	0x3a1a26c8
 800fdfc:	3b6b6916 	.word	0x3b6b6916
 800fe00:	3cb327a4 	.word	0x3cb327a4
 800fe04:	3e088889 	.word	0x3e088889
 800fe08:	3895c07a 	.word	0x3895c07a
 800fe0c:	398137b9 	.word	0x398137b9
 800fe10:	3abede48 	.word	0x3abede48
 800fe14:	3c11371f 	.word	0x3c11371f
 800fe18:	3d5d0dd1 	.word	0x3d5d0dd1
 800fe1c:	3eaaaaab 	.word	0x3eaaaaab
 800fe20:	fffff000 	.word	0xfffff000

0800fe24 <__ieee754_atan2f>:
 800fe24:	ee10 2a90 	vmov	r2, s1
 800fe28:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800fe2c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fe30:	b510      	push	{r4, lr}
 800fe32:	eef0 7a40 	vmov.f32	s15, s0
 800fe36:	d806      	bhi.n	800fe46 <__ieee754_atan2f+0x22>
 800fe38:	ee10 0a10 	vmov	r0, s0
 800fe3c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800fe40:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fe44:	d904      	bls.n	800fe50 <__ieee754_atan2f+0x2c>
 800fe46:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fe4a:	eeb0 0a67 	vmov.f32	s0, s15
 800fe4e:	bd10      	pop	{r4, pc}
 800fe50:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800fe54:	d103      	bne.n	800fe5e <__ieee754_atan2f+0x3a>
 800fe56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe5a:	f000 bc83 	b.w	8010764 <atanf>
 800fe5e:	1794      	asrs	r4, r2, #30
 800fe60:	f004 0402 	and.w	r4, r4, #2
 800fe64:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800fe68:	b943      	cbnz	r3, 800fe7c <__ieee754_atan2f+0x58>
 800fe6a:	2c02      	cmp	r4, #2
 800fe6c:	d05e      	beq.n	800ff2c <__ieee754_atan2f+0x108>
 800fe6e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ff40 <__ieee754_atan2f+0x11c>
 800fe72:	2c03      	cmp	r4, #3
 800fe74:	bf08      	it	eq
 800fe76:	eef0 7a47 	vmoveq.f32	s15, s14
 800fe7a:	e7e6      	b.n	800fe4a <__ieee754_atan2f+0x26>
 800fe7c:	b941      	cbnz	r1, 800fe90 <__ieee754_atan2f+0x6c>
 800fe7e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ff44 <__ieee754_atan2f+0x120>
 800fe82:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ff48 <__ieee754_atan2f+0x124>
 800fe86:	2800      	cmp	r0, #0
 800fe88:	bfb8      	it	lt
 800fe8a:	eef0 7a47 	vmovlt.f32	s15, s14
 800fe8e:	e7dc      	b.n	800fe4a <__ieee754_atan2f+0x26>
 800fe90:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fe94:	d110      	bne.n	800feb8 <__ieee754_atan2f+0x94>
 800fe96:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fe9a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe9e:	d107      	bne.n	800feb0 <__ieee754_atan2f+0x8c>
 800fea0:	2c02      	cmp	r4, #2
 800fea2:	d846      	bhi.n	800ff32 <__ieee754_atan2f+0x10e>
 800fea4:	4b29      	ldr	r3, [pc, #164]	@ (800ff4c <__ieee754_atan2f+0x128>)
 800fea6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800feaa:	edd3 7a00 	vldr	s15, [r3]
 800feae:	e7cc      	b.n	800fe4a <__ieee754_atan2f+0x26>
 800feb0:	2c02      	cmp	r4, #2
 800feb2:	d841      	bhi.n	800ff38 <__ieee754_atan2f+0x114>
 800feb4:	4b26      	ldr	r3, [pc, #152]	@ (800ff50 <__ieee754_atan2f+0x12c>)
 800feb6:	e7f6      	b.n	800fea6 <__ieee754_atan2f+0x82>
 800feb8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800febc:	d0df      	beq.n	800fe7e <__ieee754_atan2f+0x5a>
 800febe:	1a5b      	subs	r3, r3, r1
 800fec0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800fec4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800fec8:	da1a      	bge.n	800ff00 <__ieee754_atan2f+0xdc>
 800feca:	2a00      	cmp	r2, #0
 800fecc:	da01      	bge.n	800fed2 <__ieee754_atan2f+0xae>
 800fece:	313c      	adds	r1, #60	@ 0x3c
 800fed0:	db19      	blt.n	800ff06 <__ieee754_atan2f+0xe2>
 800fed2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800fed6:	f000 fd19 	bl	801090c <fabsf>
 800feda:	f000 fc43 	bl	8010764 <atanf>
 800fede:	eef0 7a40 	vmov.f32	s15, s0
 800fee2:	2c01      	cmp	r4, #1
 800fee4:	d012      	beq.n	800ff0c <__ieee754_atan2f+0xe8>
 800fee6:	2c02      	cmp	r4, #2
 800fee8:	d017      	beq.n	800ff1a <__ieee754_atan2f+0xf6>
 800feea:	2c00      	cmp	r4, #0
 800feec:	d0ad      	beq.n	800fe4a <__ieee754_atan2f+0x26>
 800feee:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ff54 <__ieee754_atan2f+0x130>
 800fef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fef6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ff58 <__ieee754_atan2f+0x134>
 800fefa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fefe:	e7a4      	b.n	800fe4a <__ieee754_atan2f+0x26>
 800ff00:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ff44 <__ieee754_atan2f+0x120>
 800ff04:	e7ed      	b.n	800fee2 <__ieee754_atan2f+0xbe>
 800ff06:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ff5c <__ieee754_atan2f+0x138>
 800ff0a:	e7ea      	b.n	800fee2 <__ieee754_atan2f+0xbe>
 800ff0c:	ee17 3a90 	vmov	r3, s15
 800ff10:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ff14:	ee07 3a90 	vmov	s15, r3
 800ff18:	e797      	b.n	800fe4a <__ieee754_atan2f+0x26>
 800ff1a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ff54 <__ieee754_atan2f+0x130>
 800ff1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff22:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ff58 <__ieee754_atan2f+0x134>
 800ff26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff2a:	e78e      	b.n	800fe4a <__ieee754_atan2f+0x26>
 800ff2c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ff58 <__ieee754_atan2f+0x134>
 800ff30:	e78b      	b.n	800fe4a <__ieee754_atan2f+0x26>
 800ff32:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ff60 <__ieee754_atan2f+0x13c>
 800ff36:	e788      	b.n	800fe4a <__ieee754_atan2f+0x26>
 800ff38:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ff5c <__ieee754_atan2f+0x138>
 800ff3c:	e785      	b.n	800fe4a <__ieee754_atan2f+0x26>
 800ff3e:	bf00      	nop
 800ff40:	c0490fdb 	.word	0xc0490fdb
 800ff44:	3fc90fdb 	.word	0x3fc90fdb
 800ff48:	bfc90fdb 	.word	0xbfc90fdb
 800ff4c:	08013e64 	.word	0x08013e64
 800ff50:	08013e58 	.word	0x08013e58
 800ff54:	33bbbd2e 	.word	0x33bbbd2e
 800ff58:	40490fdb 	.word	0x40490fdb
 800ff5c:	00000000 	.word	0x00000000
 800ff60:	3f490fdb 	.word	0x3f490fdb

0800ff64 <__ieee754_powf>:
 800ff64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff68:	ee10 4a90 	vmov	r4, s1
 800ff6c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800ff70:	ed2d 8b02 	vpush	{d8}
 800ff74:	ee10 6a10 	vmov	r6, s0
 800ff78:	eeb0 8a40 	vmov.f32	s16, s0
 800ff7c:	eef0 8a60 	vmov.f32	s17, s1
 800ff80:	d10c      	bne.n	800ff9c <__ieee754_powf+0x38>
 800ff82:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800ff86:	0076      	lsls	r6, r6, #1
 800ff88:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ff8c:	f240 829c 	bls.w	80104c8 <__ieee754_powf+0x564>
 800ff90:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ff94:	ecbd 8b02 	vpop	{d8}
 800ff98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff9c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ffa0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ffa4:	d802      	bhi.n	800ffac <__ieee754_powf+0x48>
 800ffa6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ffaa:	d908      	bls.n	800ffbe <__ieee754_powf+0x5a>
 800ffac:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ffb0:	d1ee      	bne.n	800ff90 <__ieee754_powf+0x2c>
 800ffb2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ffb6:	0064      	lsls	r4, r4, #1
 800ffb8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ffbc:	e7e6      	b.n	800ff8c <__ieee754_powf+0x28>
 800ffbe:	2e00      	cmp	r6, #0
 800ffc0:	da1e      	bge.n	8010000 <__ieee754_powf+0x9c>
 800ffc2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ffc6:	d22b      	bcs.n	8010020 <__ieee754_powf+0xbc>
 800ffc8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ffcc:	d332      	bcc.n	8010034 <__ieee754_powf+0xd0>
 800ffce:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ffd2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ffd6:	fa49 f503 	asr.w	r5, r9, r3
 800ffda:	fa05 f303 	lsl.w	r3, r5, r3
 800ffde:	454b      	cmp	r3, r9
 800ffe0:	d126      	bne.n	8010030 <__ieee754_powf+0xcc>
 800ffe2:	f005 0501 	and.w	r5, r5, #1
 800ffe6:	f1c5 0502 	rsb	r5, r5, #2
 800ffea:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ffee:	d122      	bne.n	8010036 <__ieee754_powf+0xd2>
 800fff0:	2c00      	cmp	r4, #0
 800fff2:	f280 826f 	bge.w	80104d4 <__ieee754_powf+0x570>
 800fff6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fffa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800fffe:	e7c9      	b.n	800ff94 <__ieee754_powf+0x30>
 8010000:	2500      	movs	r5, #0
 8010002:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010006:	d1f0      	bne.n	800ffea <__ieee754_powf+0x86>
 8010008:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801000c:	f000 825c 	beq.w	80104c8 <__ieee754_powf+0x564>
 8010010:	d908      	bls.n	8010024 <__ieee754_powf+0xc0>
 8010012:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8010374 <__ieee754_powf+0x410>
 8010016:	2c00      	cmp	r4, #0
 8010018:	bfa8      	it	ge
 801001a:	eeb0 0a68 	vmovge.f32	s0, s17
 801001e:	e7b9      	b.n	800ff94 <__ieee754_powf+0x30>
 8010020:	2502      	movs	r5, #2
 8010022:	e7ee      	b.n	8010002 <__ieee754_powf+0x9e>
 8010024:	2c00      	cmp	r4, #0
 8010026:	f280 8252 	bge.w	80104ce <__ieee754_powf+0x56a>
 801002a:	eeb1 0a68 	vneg.f32	s0, s17
 801002e:	e7b1      	b.n	800ff94 <__ieee754_powf+0x30>
 8010030:	2500      	movs	r5, #0
 8010032:	e7da      	b.n	800ffea <__ieee754_powf+0x86>
 8010034:	2500      	movs	r5, #0
 8010036:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801003a:	d102      	bne.n	8010042 <__ieee754_powf+0xde>
 801003c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010040:	e7a8      	b.n	800ff94 <__ieee754_powf+0x30>
 8010042:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010046:	d109      	bne.n	801005c <__ieee754_powf+0xf8>
 8010048:	2e00      	cmp	r6, #0
 801004a:	db07      	blt.n	801005c <__ieee754_powf+0xf8>
 801004c:	eeb0 0a48 	vmov.f32	s0, s16
 8010050:	ecbd 8b02 	vpop	{d8}
 8010054:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010058:	f7ff bd60 	b.w	800fb1c <__ieee754_sqrtf>
 801005c:	eeb0 0a48 	vmov.f32	s0, s16
 8010060:	f000 fc54 	bl	801090c <fabsf>
 8010064:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8010068:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801006c:	4647      	mov	r7, r8
 801006e:	d002      	beq.n	8010076 <__ieee754_powf+0x112>
 8010070:	f1b8 0f00 	cmp.w	r8, #0
 8010074:	d117      	bne.n	80100a6 <__ieee754_powf+0x142>
 8010076:	2c00      	cmp	r4, #0
 8010078:	bfbc      	itt	lt
 801007a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801007e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010082:	2e00      	cmp	r6, #0
 8010084:	da86      	bge.n	800ff94 <__ieee754_powf+0x30>
 8010086:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801008a:	ea58 0805 	orrs.w	r8, r8, r5
 801008e:	d104      	bne.n	801009a <__ieee754_powf+0x136>
 8010090:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010094:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010098:	e77c      	b.n	800ff94 <__ieee754_powf+0x30>
 801009a:	2d01      	cmp	r5, #1
 801009c:	f47f af7a 	bne.w	800ff94 <__ieee754_powf+0x30>
 80100a0:	eeb1 0a40 	vneg.f32	s0, s0
 80100a4:	e776      	b.n	800ff94 <__ieee754_powf+0x30>
 80100a6:	0ff0      	lsrs	r0, r6, #31
 80100a8:	3801      	subs	r0, #1
 80100aa:	ea55 0300 	orrs.w	r3, r5, r0
 80100ae:	d104      	bne.n	80100ba <__ieee754_powf+0x156>
 80100b0:	ee38 8a48 	vsub.f32	s16, s16, s16
 80100b4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80100b8:	e76c      	b.n	800ff94 <__ieee754_powf+0x30>
 80100ba:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80100be:	d973      	bls.n	80101a8 <__ieee754_powf+0x244>
 80100c0:	4bad      	ldr	r3, [pc, #692]	@ (8010378 <__ieee754_powf+0x414>)
 80100c2:	4598      	cmp	r8, r3
 80100c4:	d808      	bhi.n	80100d8 <__ieee754_powf+0x174>
 80100c6:	2c00      	cmp	r4, #0
 80100c8:	da0b      	bge.n	80100e2 <__ieee754_powf+0x17e>
 80100ca:	2000      	movs	r0, #0
 80100cc:	ecbd 8b02 	vpop	{d8}
 80100d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100d4:	f000 bca8 	b.w	8010a28 <__math_oflowf>
 80100d8:	4ba8      	ldr	r3, [pc, #672]	@ (801037c <__ieee754_powf+0x418>)
 80100da:	4598      	cmp	r8, r3
 80100dc:	d908      	bls.n	80100f0 <__ieee754_powf+0x18c>
 80100de:	2c00      	cmp	r4, #0
 80100e0:	dcf3      	bgt.n	80100ca <__ieee754_powf+0x166>
 80100e2:	2000      	movs	r0, #0
 80100e4:	ecbd 8b02 	vpop	{d8}
 80100e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100ec:	f000 bc96 	b.w	8010a1c <__math_uflowf>
 80100f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80100f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80100f8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8010380 <__ieee754_powf+0x41c>
 80100fc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010100:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010104:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010108:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801010c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010114:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8010384 <__ieee754_powf+0x420>
 8010118:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801011c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8010388 <__ieee754_powf+0x424>
 8010120:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010124:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801038c <__ieee754_powf+0x428>
 8010128:	eef0 6a67 	vmov.f32	s13, s15
 801012c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8010130:	ee16 3a90 	vmov	r3, s13
 8010134:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010138:	f023 030f 	bic.w	r3, r3, #15
 801013c:	ee06 3a90 	vmov	s13, r3
 8010140:	eee0 6a47 	vfms.f32	s13, s0, s14
 8010144:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010148:	3d01      	subs	r5, #1
 801014a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801014e:	4305      	orrs	r5, r0
 8010150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010154:	f024 040f 	bic.w	r4, r4, #15
 8010158:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801015c:	bf18      	it	ne
 801015e:	eeb0 8a47 	vmovne.f32	s16, s14
 8010162:	ee07 4a10 	vmov	s14, r4
 8010166:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801016a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801016e:	ee07 3a90 	vmov	s15, r3
 8010172:	eee7 0a27 	vfma.f32	s1, s14, s15
 8010176:	ee07 4a10 	vmov	s14, r4
 801017a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801017e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010182:	ee17 1a10 	vmov	r1, s14
 8010186:	2900      	cmp	r1, #0
 8010188:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801018c:	f340 80dd 	ble.w	801034a <__ieee754_powf+0x3e6>
 8010190:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010194:	f240 80ca 	bls.w	801032c <__ieee754_powf+0x3c8>
 8010198:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801019c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a0:	bf4c      	ite	mi
 80101a2:	2001      	movmi	r0, #1
 80101a4:	2000      	movpl	r0, #0
 80101a6:	e791      	b.n	80100cc <__ieee754_powf+0x168>
 80101a8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80101ac:	bf01      	itttt	eq
 80101ae:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010390 <__ieee754_powf+0x42c>
 80101b2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80101b6:	f06f 0317 	mvneq.w	r3, #23
 80101ba:	ee17 7a90 	vmoveq	r7, s15
 80101be:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80101c2:	bf18      	it	ne
 80101c4:	2300      	movne	r3, #0
 80101c6:	3a7f      	subs	r2, #127	@ 0x7f
 80101c8:	441a      	add	r2, r3
 80101ca:	4b72      	ldr	r3, [pc, #456]	@ (8010394 <__ieee754_powf+0x430>)
 80101cc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80101d0:	429f      	cmp	r7, r3
 80101d2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80101d6:	dd06      	ble.n	80101e6 <__ieee754_powf+0x282>
 80101d8:	4b6f      	ldr	r3, [pc, #444]	@ (8010398 <__ieee754_powf+0x434>)
 80101da:	429f      	cmp	r7, r3
 80101dc:	f340 80a4 	ble.w	8010328 <__ieee754_powf+0x3c4>
 80101e0:	3201      	adds	r2, #1
 80101e2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80101e6:	2600      	movs	r6, #0
 80101e8:	4b6c      	ldr	r3, [pc, #432]	@ (801039c <__ieee754_powf+0x438>)
 80101ea:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80101ee:	ee07 1a10 	vmov	s14, r1
 80101f2:	edd3 5a00 	vldr	s11, [r3]
 80101f6:	4b6a      	ldr	r3, [pc, #424]	@ (80103a0 <__ieee754_powf+0x43c>)
 80101f8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80101fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010200:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010204:	1049      	asrs	r1, r1, #1
 8010206:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801020a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801020e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010212:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010216:	ee07 1a90 	vmov	s15, r1
 801021a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801021e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010222:	ee15 7a10 	vmov	r7, s10
 8010226:	401f      	ands	r7, r3
 8010228:	ee06 7a90 	vmov	s13, r7
 801022c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010230:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010234:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010238:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801023c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80103a4 <__ieee754_powf+0x440>
 8010240:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80103a8 <__ieee754_powf+0x444>
 8010244:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010248:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80103ac <__ieee754_powf+0x448>
 801024c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010250:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8010380 <__ieee754_powf+0x41c>
 8010254:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010258:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80103b0 <__ieee754_powf+0x44c>
 801025c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010260:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80103b4 <__ieee754_powf+0x450>
 8010264:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010268:	eee7 5a27 	vfma.f32	s11, s14, s15
 801026c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8010270:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010274:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010278:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801027c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8010280:	eef0 5a67 	vmov.f32	s11, s15
 8010284:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8010288:	ee75 5a87 	vadd.f32	s11, s11, s14
 801028c:	ee15 1a90 	vmov	r1, s11
 8010290:	4019      	ands	r1, r3
 8010292:	ee05 1a90 	vmov	s11, r1
 8010296:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801029a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801029e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102a2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80102a6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80102aa:	eeb0 6a67 	vmov.f32	s12, s15
 80102ae:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80102b2:	ee16 1a10 	vmov	r1, s12
 80102b6:	4019      	ands	r1, r3
 80102b8:	ee06 1a10 	vmov	s12, r1
 80102bc:	eeb0 7a46 	vmov.f32	s14, s12
 80102c0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80102c4:	493c      	ldr	r1, [pc, #240]	@ (80103b8 <__ieee754_powf+0x454>)
 80102c6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80102ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102ce:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80103bc <__ieee754_powf+0x458>
 80102d2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80103c0 <__ieee754_powf+0x45c>
 80102d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102da:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80103c4 <__ieee754_powf+0x460>
 80102de:	eee6 7a07 	vfma.f32	s15, s12, s14
 80102e2:	ed91 7a00 	vldr	s14, [r1]
 80102e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102ea:	ee07 2a10 	vmov	s14, r2
 80102ee:	eef0 6a67 	vmov.f32	s13, s15
 80102f2:	4a35      	ldr	r2, [pc, #212]	@ (80103c8 <__ieee754_powf+0x464>)
 80102f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80102f8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80102fc:	ed92 5a00 	vldr	s10, [r2]
 8010300:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010304:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010308:	ee76 6a87 	vadd.f32	s13, s13, s14
 801030c:	ee16 2a90 	vmov	r2, s13
 8010310:	4013      	ands	r3, r2
 8010312:	ee06 3a90 	vmov	s13, r3
 8010316:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801031a:	ee37 7a45 	vsub.f32	s14, s14, s10
 801031e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8010322:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010326:	e70f      	b.n	8010148 <__ieee754_powf+0x1e4>
 8010328:	2601      	movs	r6, #1
 801032a:	e75d      	b.n	80101e8 <__ieee754_powf+0x284>
 801032c:	d152      	bne.n	80103d4 <__ieee754_powf+0x470>
 801032e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80103cc <__ieee754_powf+0x468>
 8010332:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010336:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801033a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010342:	f73f af29 	bgt.w	8010198 <__ieee754_powf+0x234>
 8010346:	2386      	movs	r3, #134	@ 0x86
 8010348:	e048      	b.n	80103dc <__ieee754_powf+0x478>
 801034a:	4a21      	ldr	r2, [pc, #132]	@ (80103d0 <__ieee754_powf+0x46c>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d907      	bls.n	8010360 <__ieee754_powf+0x3fc>
 8010350:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010358:	bf4c      	ite	mi
 801035a:	2001      	movmi	r0, #1
 801035c:	2000      	movpl	r0, #0
 801035e:	e6c1      	b.n	80100e4 <__ieee754_powf+0x180>
 8010360:	d138      	bne.n	80103d4 <__ieee754_powf+0x470>
 8010362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010366:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801036a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036e:	dbea      	blt.n	8010346 <__ieee754_powf+0x3e2>
 8010370:	e7ee      	b.n	8010350 <__ieee754_powf+0x3ec>
 8010372:	bf00      	nop
 8010374:	00000000 	.word	0x00000000
 8010378:	3f7ffff3 	.word	0x3f7ffff3
 801037c:	3f800007 	.word	0x3f800007
 8010380:	3eaaaaab 	.word	0x3eaaaaab
 8010384:	3fb8aa3b 	.word	0x3fb8aa3b
 8010388:	36eca570 	.word	0x36eca570
 801038c:	3fb8aa00 	.word	0x3fb8aa00
 8010390:	4b800000 	.word	0x4b800000
 8010394:	001cc471 	.word	0x001cc471
 8010398:	005db3d6 	.word	0x005db3d6
 801039c:	08013e80 	.word	0x08013e80
 80103a0:	fffff000 	.word	0xfffff000
 80103a4:	3e6c3255 	.word	0x3e6c3255
 80103a8:	3e53f142 	.word	0x3e53f142
 80103ac:	3e8ba305 	.word	0x3e8ba305
 80103b0:	3edb6db7 	.word	0x3edb6db7
 80103b4:	3f19999a 	.word	0x3f19999a
 80103b8:	08013e70 	.word	0x08013e70
 80103bc:	3f76384f 	.word	0x3f76384f
 80103c0:	3f763800 	.word	0x3f763800
 80103c4:	369dc3a0 	.word	0x369dc3a0
 80103c8:	08013e78 	.word	0x08013e78
 80103cc:	3338aa3c 	.word	0x3338aa3c
 80103d0:	43160000 	.word	0x43160000
 80103d4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80103d8:	d971      	bls.n	80104be <__ieee754_powf+0x55a>
 80103da:	15db      	asrs	r3, r3, #23
 80103dc:	3b7e      	subs	r3, #126	@ 0x7e
 80103de:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80103e2:	4118      	asrs	r0, r3
 80103e4:	4408      	add	r0, r1
 80103e6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80103ea:	4a3c      	ldr	r2, [pc, #240]	@ (80104dc <__ieee754_powf+0x578>)
 80103ec:	3b7f      	subs	r3, #127	@ 0x7f
 80103ee:	411a      	asrs	r2, r3
 80103f0:	4002      	ands	r2, r0
 80103f2:	ee07 2a10 	vmov	s14, r2
 80103f6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80103fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80103fe:	f1c3 0317 	rsb	r3, r3, #23
 8010402:	4118      	asrs	r0, r3
 8010404:	2900      	cmp	r1, #0
 8010406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801040a:	bfb8      	it	lt
 801040c:	4240      	neglt	r0, r0
 801040e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010412:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80104e0 <__ieee754_powf+0x57c>
 8010416:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80104e4 <__ieee754_powf+0x580>
 801041a:	ee17 3a10 	vmov	r3, s14
 801041e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010422:	f023 030f 	bic.w	r3, r3, #15
 8010426:	ee07 3a10 	vmov	s14, r3
 801042a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801042e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010432:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010436:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80104e8 <__ieee754_powf+0x584>
 801043a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801043e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8010442:	eef0 6a67 	vmov.f32	s13, s15
 8010446:	eee7 6a06 	vfma.f32	s13, s14, s12
 801044a:	eef0 5a66 	vmov.f32	s11, s13
 801044e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8010452:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010456:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801045a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80104ec <__ieee754_powf+0x588>
 801045e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80104f0 <__ieee754_powf+0x58c>
 8010462:	eea7 6a25 	vfma.f32	s12, s14, s11
 8010466:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80104f4 <__ieee754_powf+0x590>
 801046a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801046e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80104f8 <__ieee754_powf+0x594>
 8010472:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010476:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80104fc <__ieee754_powf+0x598>
 801047a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801047e:	eeb0 6a66 	vmov.f32	s12, s13
 8010482:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8010486:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801048a:	ee66 5a86 	vmul.f32	s11, s13, s12
 801048e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8010492:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8010496:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801049a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801049e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80104a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80104a6:	ee10 3a10 	vmov	r3, s0
 80104aa:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80104ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80104b2:	da06      	bge.n	80104c2 <__ieee754_powf+0x55e>
 80104b4:	f000 fa32 	bl	801091c <scalbnf>
 80104b8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80104bc:	e56a      	b.n	800ff94 <__ieee754_powf+0x30>
 80104be:	2000      	movs	r0, #0
 80104c0:	e7a5      	b.n	801040e <__ieee754_powf+0x4aa>
 80104c2:	ee00 3a10 	vmov	s0, r3
 80104c6:	e7f7      	b.n	80104b8 <__ieee754_powf+0x554>
 80104c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80104cc:	e562      	b.n	800ff94 <__ieee754_powf+0x30>
 80104ce:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8010500 <__ieee754_powf+0x59c>
 80104d2:	e55f      	b.n	800ff94 <__ieee754_powf+0x30>
 80104d4:	eeb0 0a48 	vmov.f32	s0, s16
 80104d8:	e55c      	b.n	800ff94 <__ieee754_powf+0x30>
 80104da:	bf00      	nop
 80104dc:	ff800000 	.word	0xff800000
 80104e0:	3f317218 	.word	0x3f317218
 80104e4:	3f317200 	.word	0x3f317200
 80104e8:	35bfbe8c 	.word	0x35bfbe8c
 80104ec:	b5ddea0e 	.word	0xb5ddea0e
 80104f0:	3331bb4c 	.word	0x3331bb4c
 80104f4:	388ab355 	.word	0x388ab355
 80104f8:	bb360b61 	.word	0xbb360b61
 80104fc:	3e2aaaab 	.word	0x3e2aaaab
 8010500:	00000000 	.word	0x00000000

08010504 <__ieee754_rem_pio2f>:
 8010504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010506:	ee10 6a10 	vmov	r6, s0
 801050a:	4b88      	ldr	r3, [pc, #544]	@ (801072c <__ieee754_rem_pio2f+0x228>)
 801050c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010510:	429d      	cmp	r5, r3
 8010512:	b087      	sub	sp, #28
 8010514:	4604      	mov	r4, r0
 8010516:	d805      	bhi.n	8010524 <__ieee754_rem_pio2f+0x20>
 8010518:	2300      	movs	r3, #0
 801051a:	ed80 0a00 	vstr	s0, [r0]
 801051e:	6043      	str	r3, [r0, #4]
 8010520:	2000      	movs	r0, #0
 8010522:	e022      	b.n	801056a <__ieee754_rem_pio2f+0x66>
 8010524:	4b82      	ldr	r3, [pc, #520]	@ (8010730 <__ieee754_rem_pio2f+0x22c>)
 8010526:	429d      	cmp	r5, r3
 8010528:	d83a      	bhi.n	80105a0 <__ieee754_rem_pio2f+0x9c>
 801052a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801052e:	2e00      	cmp	r6, #0
 8010530:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8010734 <__ieee754_rem_pio2f+0x230>
 8010534:	4a80      	ldr	r2, [pc, #512]	@ (8010738 <__ieee754_rem_pio2f+0x234>)
 8010536:	f023 030f 	bic.w	r3, r3, #15
 801053a:	dd18      	ble.n	801056e <__ieee754_rem_pio2f+0x6a>
 801053c:	4293      	cmp	r3, r2
 801053e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8010542:	bf09      	itett	eq
 8010544:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801073c <__ieee754_rem_pio2f+0x238>
 8010548:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010740 <__ieee754_rem_pio2f+0x23c>
 801054c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8010744 <__ieee754_rem_pio2f+0x240>
 8010550:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8010554:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8010558:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801055c:	ed80 7a00 	vstr	s14, [r0]
 8010560:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010564:	edc0 7a01 	vstr	s15, [r0, #4]
 8010568:	2001      	movs	r0, #1
 801056a:	b007      	add	sp, #28
 801056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801056e:	4293      	cmp	r3, r2
 8010570:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010574:	bf09      	itett	eq
 8010576:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801073c <__ieee754_rem_pio2f+0x238>
 801057a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010740 <__ieee754_rem_pio2f+0x23c>
 801057e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8010744 <__ieee754_rem_pio2f+0x240>
 8010582:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8010586:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801058a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801058e:	ed80 7a00 	vstr	s14, [r0]
 8010592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010596:	edc0 7a01 	vstr	s15, [r0, #4]
 801059a:	f04f 30ff 	mov.w	r0, #4294967295
 801059e:	e7e4      	b.n	801056a <__ieee754_rem_pio2f+0x66>
 80105a0:	4b69      	ldr	r3, [pc, #420]	@ (8010748 <__ieee754_rem_pio2f+0x244>)
 80105a2:	429d      	cmp	r5, r3
 80105a4:	d873      	bhi.n	801068e <__ieee754_rem_pio2f+0x18a>
 80105a6:	f000 f9b1 	bl	801090c <fabsf>
 80105aa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801074c <__ieee754_rem_pio2f+0x248>
 80105ae:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80105b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80105b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80105ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80105be:	ee17 0a90 	vmov	r0, s15
 80105c2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010734 <__ieee754_rem_pio2f+0x230>
 80105c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80105ca:	281f      	cmp	r0, #31
 80105cc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010740 <__ieee754_rem_pio2f+0x23c>
 80105d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105d4:	eeb1 6a47 	vneg.f32	s12, s14
 80105d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80105dc:	ee16 1a90 	vmov	r1, s13
 80105e0:	dc09      	bgt.n	80105f6 <__ieee754_rem_pio2f+0xf2>
 80105e2:	4a5b      	ldr	r2, [pc, #364]	@ (8010750 <__ieee754_rem_pio2f+0x24c>)
 80105e4:	1e47      	subs	r7, r0, #1
 80105e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80105ea:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80105ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d107      	bne.n	8010606 <__ieee754_rem_pio2f+0x102>
 80105f6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80105fa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80105fe:	2a08      	cmp	r2, #8
 8010600:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010604:	dc14      	bgt.n	8010630 <__ieee754_rem_pio2f+0x12c>
 8010606:	6021      	str	r1, [r4, #0]
 8010608:	ed94 7a00 	vldr	s14, [r4]
 801060c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010610:	2e00      	cmp	r6, #0
 8010612:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010616:	ed84 0a01 	vstr	s0, [r4, #4]
 801061a:	daa6      	bge.n	801056a <__ieee754_rem_pio2f+0x66>
 801061c:	eeb1 7a47 	vneg.f32	s14, s14
 8010620:	eeb1 0a40 	vneg.f32	s0, s0
 8010624:	ed84 7a00 	vstr	s14, [r4]
 8010628:	ed84 0a01 	vstr	s0, [r4, #4]
 801062c:	4240      	negs	r0, r0
 801062e:	e79c      	b.n	801056a <__ieee754_rem_pio2f+0x66>
 8010630:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801073c <__ieee754_rem_pio2f+0x238>
 8010634:	eef0 6a40 	vmov.f32	s13, s0
 8010638:	eee6 6a25 	vfma.f32	s13, s12, s11
 801063c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010640:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010644:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010744 <__ieee754_rem_pio2f+0x240>
 8010648:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801064c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010650:	ee15 2a90 	vmov	r2, s11
 8010654:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010658:	1a5b      	subs	r3, r3, r1
 801065a:	2b19      	cmp	r3, #25
 801065c:	dc04      	bgt.n	8010668 <__ieee754_rem_pio2f+0x164>
 801065e:	edc4 5a00 	vstr	s11, [r4]
 8010662:	eeb0 0a66 	vmov.f32	s0, s13
 8010666:	e7cf      	b.n	8010608 <__ieee754_rem_pio2f+0x104>
 8010668:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010754 <__ieee754_rem_pio2f+0x250>
 801066c:	eeb0 0a66 	vmov.f32	s0, s13
 8010670:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010674:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010678:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010758 <__ieee754_rem_pio2f+0x254>
 801067c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010680:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010684:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010688:	ed84 7a00 	vstr	s14, [r4]
 801068c:	e7bc      	b.n	8010608 <__ieee754_rem_pio2f+0x104>
 801068e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010692:	d306      	bcc.n	80106a2 <__ieee754_rem_pio2f+0x19e>
 8010694:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010698:	edc0 7a01 	vstr	s15, [r0, #4]
 801069c:	edc0 7a00 	vstr	s15, [r0]
 80106a0:	e73e      	b.n	8010520 <__ieee754_rem_pio2f+0x1c>
 80106a2:	15ea      	asrs	r2, r5, #23
 80106a4:	3a86      	subs	r2, #134	@ 0x86
 80106a6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80106aa:	ee07 3a90 	vmov	s15, r3
 80106ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80106b2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801075c <__ieee754_rem_pio2f+0x258>
 80106b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106be:	ed8d 7a03 	vstr	s14, [sp, #12]
 80106c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80106ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106d2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80106d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80106de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e2:	edcd 7a05 	vstr	s15, [sp, #20]
 80106e6:	d11e      	bne.n	8010726 <__ieee754_rem_pio2f+0x222>
 80106e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80106ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f0:	bf0c      	ite	eq
 80106f2:	2301      	moveq	r3, #1
 80106f4:	2302      	movne	r3, #2
 80106f6:	491a      	ldr	r1, [pc, #104]	@ (8010760 <__ieee754_rem_pio2f+0x25c>)
 80106f8:	9101      	str	r1, [sp, #4]
 80106fa:	2102      	movs	r1, #2
 80106fc:	9100      	str	r1, [sp, #0]
 80106fe:	a803      	add	r0, sp, #12
 8010700:	4621      	mov	r1, r4
 8010702:	f000 f997 	bl	8010a34 <__kernel_rem_pio2f>
 8010706:	2e00      	cmp	r6, #0
 8010708:	f6bf af2f 	bge.w	801056a <__ieee754_rem_pio2f+0x66>
 801070c:	edd4 7a00 	vldr	s15, [r4]
 8010710:	eef1 7a67 	vneg.f32	s15, s15
 8010714:	edc4 7a00 	vstr	s15, [r4]
 8010718:	edd4 7a01 	vldr	s15, [r4, #4]
 801071c:	eef1 7a67 	vneg.f32	s15, s15
 8010720:	edc4 7a01 	vstr	s15, [r4, #4]
 8010724:	e782      	b.n	801062c <__ieee754_rem_pio2f+0x128>
 8010726:	2303      	movs	r3, #3
 8010728:	e7e5      	b.n	80106f6 <__ieee754_rem_pio2f+0x1f2>
 801072a:	bf00      	nop
 801072c:	3f490fd8 	.word	0x3f490fd8
 8010730:	4016cbe3 	.word	0x4016cbe3
 8010734:	3fc90f80 	.word	0x3fc90f80
 8010738:	3fc90fd0 	.word	0x3fc90fd0
 801073c:	37354400 	.word	0x37354400
 8010740:	37354443 	.word	0x37354443
 8010744:	2e85a308 	.word	0x2e85a308
 8010748:	43490f80 	.word	0x43490f80
 801074c:	3f22f984 	.word	0x3f22f984
 8010750:	08013e88 	.word	0x08013e88
 8010754:	2e85a300 	.word	0x2e85a300
 8010758:	248d3132 	.word	0x248d3132
 801075c:	43800000 	.word	0x43800000
 8010760:	08013f08 	.word	0x08013f08

08010764 <atanf>:
 8010764:	b538      	push	{r3, r4, r5, lr}
 8010766:	ee10 5a10 	vmov	r5, s0
 801076a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801076e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010772:	eef0 7a40 	vmov.f32	s15, s0
 8010776:	d310      	bcc.n	801079a <atanf+0x36>
 8010778:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801077c:	d904      	bls.n	8010788 <atanf+0x24>
 801077e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010782:	eeb0 0a67 	vmov.f32	s0, s15
 8010786:	bd38      	pop	{r3, r4, r5, pc}
 8010788:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80108c0 <atanf+0x15c>
 801078c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80108c4 <atanf+0x160>
 8010790:	2d00      	cmp	r5, #0
 8010792:	bfc8      	it	gt
 8010794:	eef0 7a47 	vmovgt.f32	s15, s14
 8010798:	e7f3      	b.n	8010782 <atanf+0x1e>
 801079a:	4b4b      	ldr	r3, [pc, #300]	@ (80108c8 <atanf+0x164>)
 801079c:	429c      	cmp	r4, r3
 801079e:	d810      	bhi.n	80107c2 <atanf+0x5e>
 80107a0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80107a4:	d20a      	bcs.n	80107bc <atanf+0x58>
 80107a6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80108cc <atanf+0x168>
 80107aa:	ee30 7a07 	vadd.f32	s14, s0, s14
 80107ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80107b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80107b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ba:	dce2      	bgt.n	8010782 <atanf+0x1e>
 80107bc:	f04f 33ff 	mov.w	r3, #4294967295
 80107c0:	e013      	b.n	80107ea <atanf+0x86>
 80107c2:	f000 f8a3 	bl	801090c <fabsf>
 80107c6:	4b42      	ldr	r3, [pc, #264]	@ (80108d0 <atanf+0x16c>)
 80107c8:	429c      	cmp	r4, r3
 80107ca:	d84f      	bhi.n	801086c <atanf+0x108>
 80107cc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80107d0:	429c      	cmp	r4, r3
 80107d2:	d841      	bhi.n	8010858 <atanf+0xf4>
 80107d4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80107d8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80107dc:	eea0 7a27 	vfma.f32	s14, s0, s15
 80107e0:	2300      	movs	r3, #0
 80107e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80107e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80107ea:	1c5a      	adds	r2, r3, #1
 80107ec:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80107f0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80108d4 <atanf+0x170>
 80107f4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80108d8 <atanf+0x174>
 80107f8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80108dc <atanf+0x178>
 80107fc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010800:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010804:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80108e0 <atanf+0x17c>
 8010808:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801080c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80108e4 <atanf+0x180>
 8010810:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010814:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80108e8 <atanf+0x184>
 8010818:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801081c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80108ec <atanf+0x188>
 8010820:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010824:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80108f0 <atanf+0x18c>
 8010828:	eea6 5a87 	vfma.f32	s10, s13, s14
 801082c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80108f4 <atanf+0x190>
 8010830:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010834:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80108f8 <atanf+0x194>
 8010838:	eea7 5a26 	vfma.f32	s10, s14, s13
 801083c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80108fc <atanf+0x198>
 8010840:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010844:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010848:	eea5 7a86 	vfma.f32	s14, s11, s12
 801084c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010850:	d121      	bne.n	8010896 <atanf+0x132>
 8010852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010856:	e794      	b.n	8010782 <atanf+0x1e>
 8010858:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801085c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010860:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010864:	2301      	movs	r3, #1
 8010866:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801086a:	e7be      	b.n	80107ea <atanf+0x86>
 801086c:	4b24      	ldr	r3, [pc, #144]	@ (8010900 <atanf+0x19c>)
 801086e:	429c      	cmp	r4, r3
 8010870:	d80b      	bhi.n	801088a <atanf+0x126>
 8010872:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801087a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801087e:	2302      	movs	r3, #2
 8010880:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010888:	e7af      	b.n	80107ea <atanf+0x86>
 801088a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801088e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010892:	2303      	movs	r3, #3
 8010894:	e7a9      	b.n	80107ea <atanf+0x86>
 8010896:	4a1b      	ldr	r2, [pc, #108]	@ (8010904 <atanf+0x1a0>)
 8010898:	491b      	ldr	r1, [pc, #108]	@ (8010908 <atanf+0x1a4>)
 801089a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801089e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80108a2:	edd3 6a00 	vldr	s13, [r3]
 80108a6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80108aa:	2d00      	cmp	r5, #0
 80108ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80108b0:	edd2 7a00 	vldr	s15, [r2]
 80108b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80108b8:	bfb8      	it	lt
 80108ba:	eef1 7a67 	vneglt.f32	s15, s15
 80108be:	e760      	b.n	8010782 <atanf+0x1e>
 80108c0:	bfc90fdb 	.word	0xbfc90fdb
 80108c4:	3fc90fdb 	.word	0x3fc90fdb
 80108c8:	3edfffff 	.word	0x3edfffff
 80108cc:	7149f2ca 	.word	0x7149f2ca
 80108d0:	3f97ffff 	.word	0x3f97ffff
 80108d4:	3c8569d7 	.word	0x3c8569d7
 80108d8:	3d4bda59 	.word	0x3d4bda59
 80108dc:	bd6ef16b 	.word	0xbd6ef16b
 80108e0:	3d886b35 	.word	0x3d886b35
 80108e4:	3dba2e6e 	.word	0x3dba2e6e
 80108e8:	3e124925 	.word	0x3e124925
 80108ec:	3eaaaaab 	.word	0x3eaaaaab
 80108f0:	bd15a221 	.word	0xbd15a221
 80108f4:	bd9d8795 	.word	0xbd9d8795
 80108f8:	bde38e38 	.word	0xbde38e38
 80108fc:	be4ccccd 	.word	0xbe4ccccd
 8010900:	401bffff 	.word	0x401bffff
 8010904:	08014230 	.word	0x08014230
 8010908:	08014220 	.word	0x08014220

0801090c <fabsf>:
 801090c:	ee10 3a10 	vmov	r3, s0
 8010910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010914:	ee00 3a10 	vmov	s0, r3
 8010918:	4770      	bx	lr
	...

0801091c <scalbnf>:
 801091c:	ee10 3a10 	vmov	r3, s0
 8010920:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010924:	d02b      	beq.n	801097e <scalbnf+0x62>
 8010926:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801092a:	d302      	bcc.n	8010932 <scalbnf+0x16>
 801092c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010930:	4770      	bx	lr
 8010932:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010936:	d123      	bne.n	8010980 <scalbnf+0x64>
 8010938:	4b24      	ldr	r3, [pc, #144]	@ (80109cc <scalbnf+0xb0>)
 801093a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80109d0 <scalbnf+0xb4>
 801093e:	4298      	cmp	r0, r3
 8010940:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010944:	db17      	blt.n	8010976 <scalbnf+0x5a>
 8010946:	ee10 3a10 	vmov	r3, s0
 801094a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801094e:	3a19      	subs	r2, #25
 8010950:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010954:	4288      	cmp	r0, r1
 8010956:	dd15      	ble.n	8010984 <scalbnf+0x68>
 8010958:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80109d4 <scalbnf+0xb8>
 801095c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80109d8 <scalbnf+0xbc>
 8010960:	ee10 3a10 	vmov	r3, s0
 8010964:	eeb0 7a67 	vmov.f32	s14, s15
 8010968:	2b00      	cmp	r3, #0
 801096a:	bfb8      	it	lt
 801096c:	eef0 7a66 	vmovlt.f32	s15, s13
 8010970:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010974:	4770      	bx	lr
 8010976:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80109dc <scalbnf+0xc0>
 801097a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801097e:	4770      	bx	lr
 8010980:	0dd2      	lsrs	r2, r2, #23
 8010982:	e7e5      	b.n	8010950 <scalbnf+0x34>
 8010984:	4410      	add	r0, r2
 8010986:	28fe      	cmp	r0, #254	@ 0xfe
 8010988:	dce6      	bgt.n	8010958 <scalbnf+0x3c>
 801098a:	2800      	cmp	r0, #0
 801098c:	dd06      	ble.n	801099c <scalbnf+0x80>
 801098e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010992:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010996:	ee00 3a10 	vmov	s0, r3
 801099a:	4770      	bx	lr
 801099c:	f110 0f16 	cmn.w	r0, #22
 80109a0:	da09      	bge.n	80109b6 <scalbnf+0x9a>
 80109a2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80109dc <scalbnf+0xc0>
 80109a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80109e0 <scalbnf+0xc4>
 80109aa:	ee10 3a10 	vmov	r3, s0
 80109ae:	eeb0 7a67 	vmov.f32	s14, s15
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	e7d9      	b.n	801096a <scalbnf+0x4e>
 80109b6:	3019      	adds	r0, #25
 80109b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80109bc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80109c0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80109e4 <scalbnf+0xc8>
 80109c4:	ee07 3a90 	vmov	s15, r3
 80109c8:	e7d7      	b.n	801097a <scalbnf+0x5e>
 80109ca:	bf00      	nop
 80109cc:	ffff3cb0 	.word	0xffff3cb0
 80109d0:	4c000000 	.word	0x4c000000
 80109d4:	7149f2ca 	.word	0x7149f2ca
 80109d8:	f149f2ca 	.word	0xf149f2ca
 80109dc:	0da24260 	.word	0x0da24260
 80109e0:	8da24260 	.word	0x8da24260
 80109e4:	33000000 	.word	0x33000000

080109e8 <with_errnof>:
 80109e8:	b510      	push	{r4, lr}
 80109ea:	ed2d 8b02 	vpush	{d8}
 80109ee:	eeb0 8a40 	vmov.f32	s16, s0
 80109f2:	4604      	mov	r4, r0
 80109f4:	f001 fa3c 	bl	8011e70 <__errno>
 80109f8:	eeb0 0a48 	vmov.f32	s0, s16
 80109fc:	ecbd 8b02 	vpop	{d8}
 8010a00:	6004      	str	r4, [r0, #0]
 8010a02:	bd10      	pop	{r4, pc}

08010a04 <xflowf>:
 8010a04:	b130      	cbz	r0, 8010a14 <xflowf+0x10>
 8010a06:	eef1 7a40 	vneg.f32	s15, s0
 8010a0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010a0e:	2022      	movs	r0, #34	@ 0x22
 8010a10:	f7ff bfea 	b.w	80109e8 <with_errnof>
 8010a14:	eef0 7a40 	vmov.f32	s15, s0
 8010a18:	e7f7      	b.n	8010a0a <xflowf+0x6>
	...

08010a1c <__math_uflowf>:
 8010a1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010a24 <__math_uflowf+0x8>
 8010a20:	f7ff bff0 	b.w	8010a04 <xflowf>
 8010a24:	10000000 	.word	0x10000000

08010a28 <__math_oflowf>:
 8010a28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010a30 <__math_oflowf+0x8>
 8010a2c:	f7ff bfea 	b.w	8010a04 <xflowf>
 8010a30:	70000000 	.word	0x70000000

08010a34 <__kernel_rem_pio2f>:
 8010a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a38:	ed2d 8b04 	vpush	{d8-d9}
 8010a3c:	b0d9      	sub	sp, #356	@ 0x164
 8010a3e:	4690      	mov	r8, r2
 8010a40:	9001      	str	r0, [sp, #4]
 8010a42:	4ab9      	ldr	r2, [pc, #740]	@ (8010d28 <__kernel_rem_pio2f+0x2f4>)
 8010a44:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010a46:	f118 0f04 	cmn.w	r8, #4
 8010a4a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010a4e:	460f      	mov	r7, r1
 8010a50:	f103 3bff 	add.w	fp, r3, #4294967295
 8010a54:	db27      	blt.n	8010aa6 <__kernel_rem_pio2f+0x72>
 8010a56:	f1b8 0203 	subs.w	r2, r8, #3
 8010a5a:	bf48      	it	mi
 8010a5c:	f108 0204 	addmi.w	r2, r8, #4
 8010a60:	10d2      	asrs	r2, r2, #3
 8010a62:	1c55      	adds	r5, r2, #1
 8010a64:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010a66:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8010d38 <__kernel_rem_pio2f+0x304>
 8010a6a:	00e8      	lsls	r0, r5, #3
 8010a6c:	eba2 060b 	sub.w	r6, r2, fp
 8010a70:	9002      	str	r0, [sp, #8]
 8010a72:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010a76:	eb0a 0c0b 	add.w	ip, sl, fp
 8010a7a:	ac1c      	add	r4, sp, #112	@ 0x70
 8010a7c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010a80:	2000      	movs	r0, #0
 8010a82:	4560      	cmp	r0, ip
 8010a84:	dd11      	ble.n	8010aaa <__kernel_rem_pio2f+0x76>
 8010a86:	a91c      	add	r1, sp, #112	@ 0x70
 8010a88:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010a8c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010a90:	f04f 0c00 	mov.w	ip, #0
 8010a94:	45d4      	cmp	ip, sl
 8010a96:	dc27      	bgt.n	8010ae8 <__kernel_rem_pio2f+0xb4>
 8010a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010a9c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8010d38 <__kernel_rem_pio2f+0x304>
 8010aa0:	4606      	mov	r6, r0
 8010aa2:	2400      	movs	r4, #0
 8010aa4:	e016      	b.n	8010ad4 <__kernel_rem_pio2f+0xa0>
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	e7db      	b.n	8010a62 <__kernel_rem_pio2f+0x2e>
 8010aaa:	42c6      	cmn	r6, r0
 8010aac:	bf5d      	ittte	pl
 8010aae:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010ab2:	ee07 1a90 	vmovpl	s15, r1
 8010ab6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010aba:	eef0 7a47 	vmovmi.f32	s15, s14
 8010abe:	ece4 7a01 	vstmia	r4!, {s15}
 8010ac2:	3001      	adds	r0, #1
 8010ac4:	e7dd      	b.n	8010a82 <__kernel_rem_pio2f+0x4e>
 8010ac6:	ecfe 6a01 	vldmia	lr!, {s13}
 8010aca:	ed96 7a00 	vldr	s14, [r6]
 8010ace:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010ad2:	3401      	adds	r4, #1
 8010ad4:	455c      	cmp	r4, fp
 8010ad6:	f1a6 0604 	sub.w	r6, r6, #4
 8010ada:	ddf4      	ble.n	8010ac6 <__kernel_rem_pio2f+0x92>
 8010adc:	ece9 7a01 	vstmia	r9!, {s15}
 8010ae0:	f10c 0c01 	add.w	ip, ip, #1
 8010ae4:	3004      	adds	r0, #4
 8010ae6:	e7d5      	b.n	8010a94 <__kernel_rem_pio2f+0x60>
 8010ae8:	a908      	add	r1, sp, #32
 8010aea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010aee:	9104      	str	r1, [sp, #16]
 8010af0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010af2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8010d34 <__kernel_rem_pio2f+0x300>
 8010af6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8010d30 <__kernel_rem_pio2f+0x2fc>
 8010afa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010afe:	9203      	str	r2, [sp, #12]
 8010b00:	4654      	mov	r4, sl
 8010b02:	00a2      	lsls	r2, r4, #2
 8010b04:	9205      	str	r2, [sp, #20]
 8010b06:	aa58      	add	r2, sp, #352	@ 0x160
 8010b08:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010b0c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010b10:	a944      	add	r1, sp, #272	@ 0x110
 8010b12:	aa08      	add	r2, sp, #32
 8010b14:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010b18:	4694      	mov	ip, r2
 8010b1a:	4626      	mov	r6, r4
 8010b1c:	2e00      	cmp	r6, #0
 8010b1e:	f1a0 0004 	sub.w	r0, r0, #4
 8010b22:	dc4c      	bgt.n	8010bbe <__kernel_rem_pio2f+0x18a>
 8010b24:	4628      	mov	r0, r5
 8010b26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010b2a:	f7ff fef7 	bl	801091c <scalbnf>
 8010b2e:	eeb0 8a40 	vmov.f32	s16, s0
 8010b32:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010b36:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010b3a:	f000 f9ed 	bl	8010f18 <floorf>
 8010b3e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010b42:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010b46:	2d00      	cmp	r5, #0
 8010b48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b4c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010b50:	ee17 9a90 	vmov	r9, s15
 8010b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b58:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010b5c:	dd41      	ble.n	8010be2 <__kernel_rem_pio2f+0x1ae>
 8010b5e:	f104 3cff 	add.w	ip, r4, #4294967295
 8010b62:	a908      	add	r1, sp, #32
 8010b64:	f1c5 0e08 	rsb	lr, r5, #8
 8010b68:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010b6c:	fa46 f00e 	asr.w	r0, r6, lr
 8010b70:	4481      	add	r9, r0
 8010b72:	fa00 f00e 	lsl.w	r0, r0, lr
 8010b76:	1a36      	subs	r6, r6, r0
 8010b78:	f1c5 0007 	rsb	r0, r5, #7
 8010b7c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010b80:	4106      	asrs	r6, r0
 8010b82:	2e00      	cmp	r6, #0
 8010b84:	dd3c      	ble.n	8010c00 <__kernel_rem_pio2f+0x1cc>
 8010b86:	f04f 0e00 	mov.w	lr, #0
 8010b8a:	f109 0901 	add.w	r9, r9, #1
 8010b8e:	4670      	mov	r0, lr
 8010b90:	4574      	cmp	r4, lr
 8010b92:	dc68      	bgt.n	8010c66 <__kernel_rem_pio2f+0x232>
 8010b94:	2d00      	cmp	r5, #0
 8010b96:	dd03      	ble.n	8010ba0 <__kernel_rem_pio2f+0x16c>
 8010b98:	2d01      	cmp	r5, #1
 8010b9a:	d074      	beq.n	8010c86 <__kernel_rem_pio2f+0x252>
 8010b9c:	2d02      	cmp	r5, #2
 8010b9e:	d07d      	beq.n	8010c9c <__kernel_rem_pio2f+0x268>
 8010ba0:	2e02      	cmp	r6, #2
 8010ba2:	d12d      	bne.n	8010c00 <__kernel_rem_pio2f+0x1cc>
 8010ba4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010ba8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010bac:	b340      	cbz	r0, 8010c00 <__kernel_rem_pio2f+0x1cc>
 8010bae:	4628      	mov	r0, r5
 8010bb0:	9306      	str	r3, [sp, #24]
 8010bb2:	f7ff feb3 	bl	801091c <scalbnf>
 8010bb6:	9b06      	ldr	r3, [sp, #24]
 8010bb8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010bbc:	e020      	b.n	8010c00 <__kernel_rem_pio2f+0x1cc>
 8010bbe:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010bc2:	3e01      	subs	r6, #1
 8010bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bcc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010bd0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010bd4:	ecac 0a01 	vstmia	ip!, {s0}
 8010bd8:	ed90 0a00 	vldr	s0, [r0]
 8010bdc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010be0:	e79c      	b.n	8010b1c <__kernel_rem_pio2f+0xe8>
 8010be2:	d105      	bne.n	8010bf0 <__kernel_rem_pio2f+0x1bc>
 8010be4:	1e60      	subs	r0, r4, #1
 8010be6:	a908      	add	r1, sp, #32
 8010be8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010bec:	11f6      	asrs	r6, r6, #7
 8010bee:	e7c8      	b.n	8010b82 <__kernel_rem_pio2f+0x14e>
 8010bf0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010bf4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfc:	da31      	bge.n	8010c62 <__kernel_rem_pio2f+0x22e>
 8010bfe:	2600      	movs	r6, #0
 8010c00:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c08:	f040 8098 	bne.w	8010d3c <__kernel_rem_pio2f+0x308>
 8010c0c:	1e60      	subs	r0, r4, #1
 8010c0e:	2200      	movs	r2, #0
 8010c10:	4550      	cmp	r0, sl
 8010c12:	da4b      	bge.n	8010cac <__kernel_rem_pio2f+0x278>
 8010c14:	2a00      	cmp	r2, #0
 8010c16:	d065      	beq.n	8010ce4 <__kernel_rem_pio2f+0x2b0>
 8010c18:	3c01      	subs	r4, #1
 8010c1a:	ab08      	add	r3, sp, #32
 8010c1c:	3d08      	subs	r5, #8
 8010c1e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d0f8      	beq.n	8010c18 <__kernel_rem_pio2f+0x1e4>
 8010c26:	4628      	mov	r0, r5
 8010c28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010c2c:	f7ff fe76 	bl	801091c <scalbnf>
 8010c30:	1c63      	adds	r3, r4, #1
 8010c32:	aa44      	add	r2, sp, #272	@ 0x110
 8010c34:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010d34 <__kernel_rem_pio2f+0x300>
 8010c38:	0099      	lsls	r1, r3, #2
 8010c3a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010c3e:	4623      	mov	r3, r4
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f280 80a9 	bge.w	8010d98 <__kernel_rem_pio2f+0x364>
 8010c46:	4623      	mov	r3, r4
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	f2c0 80c7 	blt.w	8010ddc <__kernel_rem_pio2f+0x3a8>
 8010c4e:	aa44      	add	r2, sp, #272	@ 0x110
 8010c50:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010c54:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010d2c <__kernel_rem_pio2f+0x2f8>
 8010c58:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8010d38 <__kernel_rem_pio2f+0x304>
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	1ae2      	subs	r2, r4, r3
 8010c60:	e0b1      	b.n	8010dc6 <__kernel_rem_pio2f+0x392>
 8010c62:	2602      	movs	r6, #2
 8010c64:	e78f      	b.n	8010b86 <__kernel_rem_pio2f+0x152>
 8010c66:	f852 1b04 	ldr.w	r1, [r2], #4
 8010c6a:	b948      	cbnz	r0, 8010c80 <__kernel_rem_pio2f+0x24c>
 8010c6c:	b121      	cbz	r1, 8010c78 <__kernel_rem_pio2f+0x244>
 8010c6e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010c72:	f842 1c04 	str.w	r1, [r2, #-4]
 8010c76:	2101      	movs	r1, #1
 8010c78:	f10e 0e01 	add.w	lr, lr, #1
 8010c7c:	4608      	mov	r0, r1
 8010c7e:	e787      	b.n	8010b90 <__kernel_rem_pio2f+0x15c>
 8010c80:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010c84:	e7f5      	b.n	8010c72 <__kernel_rem_pio2f+0x23e>
 8010c86:	f104 3cff 	add.w	ip, r4, #4294967295
 8010c8a:	aa08      	add	r2, sp, #32
 8010c8c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010c90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010c94:	a908      	add	r1, sp, #32
 8010c96:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010c9a:	e781      	b.n	8010ba0 <__kernel_rem_pio2f+0x16c>
 8010c9c:	f104 3cff 	add.w	ip, r4, #4294967295
 8010ca0:	aa08      	add	r2, sp, #32
 8010ca2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010ca6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010caa:	e7f3      	b.n	8010c94 <__kernel_rem_pio2f+0x260>
 8010cac:	a908      	add	r1, sp, #32
 8010cae:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010cb2:	3801      	subs	r0, #1
 8010cb4:	430a      	orrs	r2, r1
 8010cb6:	e7ab      	b.n	8010c10 <__kernel_rem_pio2f+0x1dc>
 8010cb8:	3201      	adds	r2, #1
 8010cba:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010cbe:	2e00      	cmp	r6, #0
 8010cc0:	d0fa      	beq.n	8010cb8 <__kernel_rem_pio2f+0x284>
 8010cc2:	9905      	ldr	r1, [sp, #20]
 8010cc4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010cc8:	eb0d 0001 	add.w	r0, sp, r1
 8010ccc:	18e6      	adds	r6, r4, r3
 8010cce:	a91c      	add	r1, sp, #112	@ 0x70
 8010cd0:	f104 0c01 	add.w	ip, r4, #1
 8010cd4:	384c      	subs	r0, #76	@ 0x4c
 8010cd6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010cda:	4422      	add	r2, r4
 8010cdc:	4562      	cmp	r2, ip
 8010cde:	da04      	bge.n	8010cea <__kernel_rem_pio2f+0x2b6>
 8010ce0:	4614      	mov	r4, r2
 8010ce2:	e70e      	b.n	8010b02 <__kernel_rem_pio2f+0xce>
 8010ce4:	9804      	ldr	r0, [sp, #16]
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	e7e7      	b.n	8010cba <__kernel_rem_pio2f+0x286>
 8010cea:	9903      	ldr	r1, [sp, #12]
 8010cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010cf4:	9105      	str	r1, [sp, #20]
 8010cf6:	ee07 1a90 	vmov	s15, r1
 8010cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010cfe:	2400      	movs	r4, #0
 8010d00:	ece6 7a01 	vstmia	r6!, {s15}
 8010d04:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8010d38 <__kernel_rem_pio2f+0x304>
 8010d08:	46b1      	mov	r9, r6
 8010d0a:	455c      	cmp	r4, fp
 8010d0c:	dd04      	ble.n	8010d18 <__kernel_rem_pio2f+0x2e4>
 8010d0e:	ece0 7a01 	vstmia	r0!, {s15}
 8010d12:	f10c 0c01 	add.w	ip, ip, #1
 8010d16:	e7e1      	b.n	8010cdc <__kernel_rem_pio2f+0x2a8>
 8010d18:	ecfe 6a01 	vldmia	lr!, {s13}
 8010d1c:	ed39 7a01 	vldmdb	r9!, {s14}
 8010d20:	3401      	adds	r4, #1
 8010d22:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010d26:	e7f0      	b.n	8010d0a <__kernel_rem_pio2f+0x2d6>
 8010d28:	0801426c 	.word	0x0801426c
 8010d2c:	08014240 	.word	0x08014240
 8010d30:	43800000 	.word	0x43800000
 8010d34:	3b800000 	.word	0x3b800000
 8010d38:	00000000 	.word	0x00000000
 8010d3c:	9b02      	ldr	r3, [sp, #8]
 8010d3e:	eeb0 0a48 	vmov.f32	s0, s16
 8010d42:	eba3 0008 	sub.w	r0, r3, r8
 8010d46:	f7ff fde9 	bl	801091c <scalbnf>
 8010d4a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010d30 <__kernel_rem_pio2f+0x2fc>
 8010d4e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d56:	db19      	blt.n	8010d8c <__kernel_rem_pio2f+0x358>
 8010d58:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010d34 <__kernel_rem_pio2f+0x300>
 8010d5c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010d60:	aa08      	add	r2, sp, #32
 8010d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d66:	3508      	adds	r5, #8
 8010d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d6c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010d78:	ee10 3a10 	vmov	r3, s0
 8010d7c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010d80:	ee17 3a90 	vmov	r3, s15
 8010d84:	3401      	adds	r4, #1
 8010d86:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010d8a:	e74c      	b.n	8010c26 <__kernel_rem_pio2f+0x1f2>
 8010d8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010d90:	aa08      	add	r2, sp, #32
 8010d92:	ee10 3a10 	vmov	r3, s0
 8010d96:	e7f6      	b.n	8010d86 <__kernel_rem_pio2f+0x352>
 8010d98:	a808      	add	r0, sp, #32
 8010d9a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010d9e:	9001      	str	r0, [sp, #4]
 8010da0:	ee07 0a90 	vmov	s15, r0
 8010da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010da8:	3b01      	subs	r3, #1
 8010daa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010dae:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010db2:	ed62 7a01 	vstmdb	r2!, {s15}
 8010db6:	e743      	b.n	8010c40 <__kernel_rem_pio2f+0x20c>
 8010db8:	ecfc 6a01 	vldmia	ip!, {s13}
 8010dbc:	ecb5 7a01 	vldmia	r5!, {s14}
 8010dc0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010dc4:	3001      	adds	r0, #1
 8010dc6:	4550      	cmp	r0, sl
 8010dc8:	dc01      	bgt.n	8010dce <__kernel_rem_pio2f+0x39a>
 8010dca:	4282      	cmp	r2, r0
 8010dcc:	daf4      	bge.n	8010db8 <__kernel_rem_pio2f+0x384>
 8010dce:	a858      	add	r0, sp, #352	@ 0x160
 8010dd0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010dd4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	e735      	b.n	8010c48 <__kernel_rem_pio2f+0x214>
 8010ddc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010dde:	2b02      	cmp	r3, #2
 8010de0:	dc09      	bgt.n	8010df6 <__kernel_rem_pio2f+0x3c2>
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	dc2b      	bgt.n	8010e3e <__kernel_rem_pio2f+0x40a>
 8010de6:	d044      	beq.n	8010e72 <__kernel_rem_pio2f+0x43e>
 8010de8:	f009 0007 	and.w	r0, r9, #7
 8010dec:	b059      	add	sp, #356	@ 0x164
 8010dee:	ecbd 8b04 	vpop	{d8-d9}
 8010df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010df8:	2b03      	cmp	r3, #3
 8010dfa:	d1f5      	bne.n	8010de8 <__kernel_rem_pio2f+0x3b4>
 8010dfc:	aa30      	add	r2, sp, #192	@ 0xc0
 8010dfe:	1f0b      	subs	r3, r1, #4
 8010e00:	4413      	add	r3, r2
 8010e02:	461a      	mov	r2, r3
 8010e04:	4620      	mov	r0, r4
 8010e06:	2800      	cmp	r0, #0
 8010e08:	f1a2 0204 	sub.w	r2, r2, #4
 8010e0c:	dc52      	bgt.n	8010eb4 <__kernel_rem_pio2f+0x480>
 8010e0e:	4622      	mov	r2, r4
 8010e10:	2a01      	cmp	r2, #1
 8010e12:	f1a3 0304 	sub.w	r3, r3, #4
 8010e16:	dc5d      	bgt.n	8010ed4 <__kernel_rem_pio2f+0x4a0>
 8010e18:	ab30      	add	r3, sp, #192	@ 0xc0
 8010e1a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8010d38 <__kernel_rem_pio2f+0x304>
 8010e1e:	440b      	add	r3, r1
 8010e20:	2c01      	cmp	r4, #1
 8010e22:	dc67      	bgt.n	8010ef4 <__kernel_rem_pio2f+0x4c0>
 8010e24:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010e28:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8010e2c:	2e00      	cmp	r6, #0
 8010e2e:	d167      	bne.n	8010f00 <__kernel_rem_pio2f+0x4cc>
 8010e30:	edc7 6a00 	vstr	s13, [r7]
 8010e34:	ed87 7a01 	vstr	s14, [r7, #4]
 8010e38:	edc7 7a02 	vstr	s15, [r7, #8]
 8010e3c:	e7d4      	b.n	8010de8 <__kernel_rem_pio2f+0x3b4>
 8010e3e:	ab30      	add	r3, sp, #192	@ 0xc0
 8010e40:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8010d38 <__kernel_rem_pio2f+0x304>
 8010e44:	440b      	add	r3, r1
 8010e46:	4622      	mov	r2, r4
 8010e48:	2a00      	cmp	r2, #0
 8010e4a:	da24      	bge.n	8010e96 <__kernel_rem_pio2f+0x462>
 8010e4c:	b34e      	cbz	r6, 8010ea2 <__kernel_rem_pio2f+0x46e>
 8010e4e:	eef1 7a47 	vneg.f32	s15, s14
 8010e52:	edc7 7a00 	vstr	s15, [r7]
 8010e56:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8010e5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e5e:	aa31      	add	r2, sp, #196	@ 0xc4
 8010e60:	2301      	movs	r3, #1
 8010e62:	429c      	cmp	r4, r3
 8010e64:	da20      	bge.n	8010ea8 <__kernel_rem_pio2f+0x474>
 8010e66:	b10e      	cbz	r6, 8010e6c <__kernel_rem_pio2f+0x438>
 8010e68:	eef1 7a67 	vneg.f32	s15, s15
 8010e6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8010e70:	e7ba      	b.n	8010de8 <__kernel_rem_pio2f+0x3b4>
 8010e72:	ab30      	add	r3, sp, #192	@ 0xc0
 8010e74:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8010d38 <__kernel_rem_pio2f+0x304>
 8010e78:	440b      	add	r3, r1
 8010e7a:	2c00      	cmp	r4, #0
 8010e7c:	da05      	bge.n	8010e8a <__kernel_rem_pio2f+0x456>
 8010e7e:	b10e      	cbz	r6, 8010e84 <__kernel_rem_pio2f+0x450>
 8010e80:	eef1 7a67 	vneg.f32	s15, s15
 8010e84:	edc7 7a00 	vstr	s15, [r7]
 8010e88:	e7ae      	b.n	8010de8 <__kernel_rem_pio2f+0x3b4>
 8010e8a:	ed33 7a01 	vldmdb	r3!, {s14}
 8010e8e:	3c01      	subs	r4, #1
 8010e90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e94:	e7f1      	b.n	8010e7a <__kernel_rem_pio2f+0x446>
 8010e96:	ed73 7a01 	vldmdb	r3!, {s15}
 8010e9a:	3a01      	subs	r2, #1
 8010e9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ea0:	e7d2      	b.n	8010e48 <__kernel_rem_pio2f+0x414>
 8010ea2:	eef0 7a47 	vmov.f32	s15, s14
 8010ea6:	e7d4      	b.n	8010e52 <__kernel_rem_pio2f+0x41e>
 8010ea8:	ecb2 7a01 	vldmia	r2!, {s14}
 8010eac:	3301      	adds	r3, #1
 8010eae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010eb2:	e7d6      	b.n	8010e62 <__kernel_rem_pio2f+0x42e>
 8010eb4:	edd2 7a00 	vldr	s15, [r2]
 8010eb8:	edd2 6a01 	vldr	s13, [r2, #4]
 8010ebc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010ec0:	3801      	subs	r0, #1
 8010ec2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ec6:	ed82 7a00 	vstr	s14, [r2]
 8010eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ece:	edc2 7a01 	vstr	s15, [r2, #4]
 8010ed2:	e798      	b.n	8010e06 <__kernel_rem_pio2f+0x3d2>
 8010ed4:	edd3 7a00 	vldr	s15, [r3]
 8010ed8:	edd3 6a01 	vldr	s13, [r3, #4]
 8010edc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010ee0:	3a01      	subs	r2, #1
 8010ee2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ee6:	ed83 7a00 	vstr	s14, [r3]
 8010eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eee:	edc3 7a01 	vstr	s15, [r3, #4]
 8010ef2:	e78d      	b.n	8010e10 <__kernel_rem_pio2f+0x3dc>
 8010ef4:	ed33 7a01 	vldmdb	r3!, {s14}
 8010ef8:	3c01      	subs	r4, #1
 8010efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010efe:	e78f      	b.n	8010e20 <__kernel_rem_pio2f+0x3ec>
 8010f00:	eef1 6a66 	vneg.f32	s13, s13
 8010f04:	eeb1 7a47 	vneg.f32	s14, s14
 8010f08:	edc7 6a00 	vstr	s13, [r7]
 8010f0c:	ed87 7a01 	vstr	s14, [r7, #4]
 8010f10:	eef1 7a67 	vneg.f32	s15, s15
 8010f14:	e790      	b.n	8010e38 <__kernel_rem_pio2f+0x404>
 8010f16:	bf00      	nop

08010f18 <floorf>:
 8010f18:	ee10 3a10 	vmov	r3, s0
 8010f1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010f20:	3a7f      	subs	r2, #127	@ 0x7f
 8010f22:	2a16      	cmp	r2, #22
 8010f24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010f28:	dc2b      	bgt.n	8010f82 <floorf+0x6a>
 8010f2a:	2a00      	cmp	r2, #0
 8010f2c:	da12      	bge.n	8010f54 <floorf+0x3c>
 8010f2e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010f94 <floorf+0x7c>
 8010f32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010f36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3e:	dd06      	ble.n	8010f4e <floorf+0x36>
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	da24      	bge.n	8010f8e <floorf+0x76>
 8010f44:	2900      	cmp	r1, #0
 8010f46:	4b14      	ldr	r3, [pc, #80]	@ (8010f98 <floorf+0x80>)
 8010f48:	bf08      	it	eq
 8010f4a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010f4e:	ee00 3a10 	vmov	s0, r3
 8010f52:	4770      	bx	lr
 8010f54:	4911      	ldr	r1, [pc, #68]	@ (8010f9c <floorf+0x84>)
 8010f56:	4111      	asrs	r1, r2
 8010f58:	420b      	tst	r3, r1
 8010f5a:	d0fa      	beq.n	8010f52 <floorf+0x3a>
 8010f5c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010f94 <floorf+0x7c>
 8010f60:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010f64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6c:	ddef      	ble.n	8010f4e <floorf+0x36>
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	bfbe      	ittt	lt
 8010f72:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010f76:	fa40 f202 	asrlt.w	r2, r0, r2
 8010f7a:	189b      	addlt	r3, r3, r2
 8010f7c:	ea23 0301 	bic.w	r3, r3, r1
 8010f80:	e7e5      	b.n	8010f4e <floorf+0x36>
 8010f82:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010f86:	d3e4      	bcc.n	8010f52 <floorf+0x3a>
 8010f88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010f8c:	4770      	bx	lr
 8010f8e:	2300      	movs	r3, #0
 8010f90:	e7dd      	b.n	8010f4e <floorf+0x36>
 8010f92:	bf00      	nop
 8010f94:	7149f2ca 	.word	0x7149f2ca
 8010f98:	bf800000 	.word	0xbf800000
 8010f9c:	007fffff 	.word	0x007fffff

08010fa0 <__cvt>:
 8010fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fa4:	ec57 6b10 	vmov	r6, r7, d0
 8010fa8:	2f00      	cmp	r7, #0
 8010faa:	460c      	mov	r4, r1
 8010fac:	4619      	mov	r1, r3
 8010fae:	463b      	mov	r3, r7
 8010fb0:	bfbb      	ittet	lt
 8010fb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010fb6:	461f      	movlt	r7, r3
 8010fb8:	2300      	movge	r3, #0
 8010fba:	232d      	movlt	r3, #45	@ 0x2d
 8010fbc:	700b      	strb	r3, [r1, #0]
 8010fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010fc0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010fc4:	4691      	mov	r9, r2
 8010fc6:	f023 0820 	bic.w	r8, r3, #32
 8010fca:	bfbc      	itt	lt
 8010fcc:	4632      	movlt	r2, r6
 8010fce:	4616      	movlt	r6, r2
 8010fd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010fd4:	d005      	beq.n	8010fe2 <__cvt+0x42>
 8010fd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010fda:	d100      	bne.n	8010fde <__cvt+0x3e>
 8010fdc:	3401      	adds	r4, #1
 8010fde:	2102      	movs	r1, #2
 8010fe0:	e000      	b.n	8010fe4 <__cvt+0x44>
 8010fe2:	2103      	movs	r1, #3
 8010fe4:	ab03      	add	r3, sp, #12
 8010fe6:	9301      	str	r3, [sp, #4]
 8010fe8:	ab02      	add	r3, sp, #8
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	ec47 6b10 	vmov	d0, r6, r7
 8010ff0:	4653      	mov	r3, sl
 8010ff2:	4622      	mov	r2, r4
 8010ff4:	f001 f800 	bl	8011ff8 <_dtoa_r>
 8010ff8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010ffc:	4605      	mov	r5, r0
 8010ffe:	d119      	bne.n	8011034 <__cvt+0x94>
 8011000:	f019 0f01 	tst.w	r9, #1
 8011004:	d00e      	beq.n	8011024 <__cvt+0x84>
 8011006:	eb00 0904 	add.w	r9, r0, r4
 801100a:	2200      	movs	r2, #0
 801100c:	2300      	movs	r3, #0
 801100e:	4630      	mov	r0, r6
 8011010:	4639      	mov	r1, r7
 8011012:	f7ef fd81 	bl	8000b18 <__aeabi_dcmpeq>
 8011016:	b108      	cbz	r0, 801101c <__cvt+0x7c>
 8011018:	f8cd 900c 	str.w	r9, [sp, #12]
 801101c:	2230      	movs	r2, #48	@ 0x30
 801101e:	9b03      	ldr	r3, [sp, #12]
 8011020:	454b      	cmp	r3, r9
 8011022:	d31e      	bcc.n	8011062 <__cvt+0xc2>
 8011024:	9b03      	ldr	r3, [sp, #12]
 8011026:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011028:	1b5b      	subs	r3, r3, r5
 801102a:	4628      	mov	r0, r5
 801102c:	6013      	str	r3, [r2, #0]
 801102e:	b004      	add	sp, #16
 8011030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011034:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011038:	eb00 0904 	add.w	r9, r0, r4
 801103c:	d1e5      	bne.n	801100a <__cvt+0x6a>
 801103e:	7803      	ldrb	r3, [r0, #0]
 8011040:	2b30      	cmp	r3, #48	@ 0x30
 8011042:	d10a      	bne.n	801105a <__cvt+0xba>
 8011044:	2200      	movs	r2, #0
 8011046:	2300      	movs	r3, #0
 8011048:	4630      	mov	r0, r6
 801104a:	4639      	mov	r1, r7
 801104c:	f7ef fd64 	bl	8000b18 <__aeabi_dcmpeq>
 8011050:	b918      	cbnz	r0, 801105a <__cvt+0xba>
 8011052:	f1c4 0401 	rsb	r4, r4, #1
 8011056:	f8ca 4000 	str.w	r4, [sl]
 801105a:	f8da 3000 	ldr.w	r3, [sl]
 801105e:	4499      	add	r9, r3
 8011060:	e7d3      	b.n	801100a <__cvt+0x6a>
 8011062:	1c59      	adds	r1, r3, #1
 8011064:	9103      	str	r1, [sp, #12]
 8011066:	701a      	strb	r2, [r3, #0]
 8011068:	e7d9      	b.n	801101e <__cvt+0x7e>

0801106a <__exponent>:
 801106a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801106c:	2900      	cmp	r1, #0
 801106e:	bfba      	itte	lt
 8011070:	4249      	neglt	r1, r1
 8011072:	232d      	movlt	r3, #45	@ 0x2d
 8011074:	232b      	movge	r3, #43	@ 0x2b
 8011076:	2909      	cmp	r1, #9
 8011078:	7002      	strb	r2, [r0, #0]
 801107a:	7043      	strb	r3, [r0, #1]
 801107c:	dd29      	ble.n	80110d2 <__exponent+0x68>
 801107e:	f10d 0307 	add.w	r3, sp, #7
 8011082:	461d      	mov	r5, r3
 8011084:	270a      	movs	r7, #10
 8011086:	461a      	mov	r2, r3
 8011088:	fbb1 f6f7 	udiv	r6, r1, r7
 801108c:	fb07 1416 	mls	r4, r7, r6, r1
 8011090:	3430      	adds	r4, #48	@ 0x30
 8011092:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011096:	460c      	mov	r4, r1
 8011098:	2c63      	cmp	r4, #99	@ 0x63
 801109a:	f103 33ff 	add.w	r3, r3, #4294967295
 801109e:	4631      	mov	r1, r6
 80110a0:	dcf1      	bgt.n	8011086 <__exponent+0x1c>
 80110a2:	3130      	adds	r1, #48	@ 0x30
 80110a4:	1e94      	subs	r4, r2, #2
 80110a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80110aa:	1c41      	adds	r1, r0, #1
 80110ac:	4623      	mov	r3, r4
 80110ae:	42ab      	cmp	r3, r5
 80110b0:	d30a      	bcc.n	80110c8 <__exponent+0x5e>
 80110b2:	f10d 0309 	add.w	r3, sp, #9
 80110b6:	1a9b      	subs	r3, r3, r2
 80110b8:	42ac      	cmp	r4, r5
 80110ba:	bf88      	it	hi
 80110bc:	2300      	movhi	r3, #0
 80110be:	3302      	adds	r3, #2
 80110c0:	4403      	add	r3, r0
 80110c2:	1a18      	subs	r0, r3, r0
 80110c4:	b003      	add	sp, #12
 80110c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80110cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80110d0:	e7ed      	b.n	80110ae <__exponent+0x44>
 80110d2:	2330      	movs	r3, #48	@ 0x30
 80110d4:	3130      	adds	r1, #48	@ 0x30
 80110d6:	7083      	strb	r3, [r0, #2]
 80110d8:	70c1      	strb	r1, [r0, #3]
 80110da:	1d03      	adds	r3, r0, #4
 80110dc:	e7f1      	b.n	80110c2 <__exponent+0x58>
	...

080110e0 <_printf_float>:
 80110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e4:	b08d      	sub	sp, #52	@ 0x34
 80110e6:	460c      	mov	r4, r1
 80110e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80110ec:	4616      	mov	r6, r2
 80110ee:	461f      	mov	r7, r3
 80110f0:	4605      	mov	r5, r0
 80110f2:	f000 fe73 	bl	8011ddc <_localeconv_r>
 80110f6:	6803      	ldr	r3, [r0, #0]
 80110f8:	9304      	str	r3, [sp, #16]
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7ef f8e0 	bl	80002c0 <strlen>
 8011100:	2300      	movs	r3, #0
 8011102:	930a      	str	r3, [sp, #40]	@ 0x28
 8011104:	f8d8 3000 	ldr.w	r3, [r8]
 8011108:	9005      	str	r0, [sp, #20]
 801110a:	3307      	adds	r3, #7
 801110c:	f023 0307 	bic.w	r3, r3, #7
 8011110:	f103 0208 	add.w	r2, r3, #8
 8011114:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011118:	f8d4 b000 	ldr.w	fp, [r4]
 801111c:	f8c8 2000 	str.w	r2, [r8]
 8011120:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011124:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011128:	9307      	str	r3, [sp, #28]
 801112a:	f8cd 8018 	str.w	r8, [sp, #24]
 801112e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011136:	4b9c      	ldr	r3, [pc, #624]	@ (80113a8 <_printf_float+0x2c8>)
 8011138:	f04f 32ff 	mov.w	r2, #4294967295
 801113c:	f7ef fd1e 	bl	8000b7c <__aeabi_dcmpun>
 8011140:	bb70      	cbnz	r0, 80111a0 <_printf_float+0xc0>
 8011142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011146:	4b98      	ldr	r3, [pc, #608]	@ (80113a8 <_printf_float+0x2c8>)
 8011148:	f04f 32ff 	mov.w	r2, #4294967295
 801114c:	f7ef fcf8 	bl	8000b40 <__aeabi_dcmple>
 8011150:	bb30      	cbnz	r0, 80111a0 <_printf_float+0xc0>
 8011152:	2200      	movs	r2, #0
 8011154:	2300      	movs	r3, #0
 8011156:	4640      	mov	r0, r8
 8011158:	4649      	mov	r1, r9
 801115a:	f7ef fce7 	bl	8000b2c <__aeabi_dcmplt>
 801115e:	b110      	cbz	r0, 8011166 <_printf_float+0x86>
 8011160:	232d      	movs	r3, #45	@ 0x2d
 8011162:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011166:	4a91      	ldr	r2, [pc, #580]	@ (80113ac <_printf_float+0x2cc>)
 8011168:	4b91      	ldr	r3, [pc, #580]	@ (80113b0 <_printf_float+0x2d0>)
 801116a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801116e:	bf94      	ite	ls
 8011170:	4690      	movls	r8, r2
 8011172:	4698      	movhi	r8, r3
 8011174:	2303      	movs	r3, #3
 8011176:	6123      	str	r3, [r4, #16]
 8011178:	f02b 0304 	bic.w	r3, fp, #4
 801117c:	6023      	str	r3, [r4, #0]
 801117e:	f04f 0900 	mov.w	r9, #0
 8011182:	9700      	str	r7, [sp, #0]
 8011184:	4633      	mov	r3, r6
 8011186:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011188:	4621      	mov	r1, r4
 801118a:	4628      	mov	r0, r5
 801118c:	f000 f9d2 	bl	8011534 <_printf_common>
 8011190:	3001      	adds	r0, #1
 8011192:	f040 808d 	bne.w	80112b0 <_printf_float+0x1d0>
 8011196:	f04f 30ff 	mov.w	r0, #4294967295
 801119a:	b00d      	add	sp, #52	@ 0x34
 801119c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a0:	4642      	mov	r2, r8
 80111a2:	464b      	mov	r3, r9
 80111a4:	4640      	mov	r0, r8
 80111a6:	4649      	mov	r1, r9
 80111a8:	f7ef fce8 	bl	8000b7c <__aeabi_dcmpun>
 80111ac:	b140      	cbz	r0, 80111c0 <_printf_float+0xe0>
 80111ae:	464b      	mov	r3, r9
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	bfbc      	itt	lt
 80111b4:	232d      	movlt	r3, #45	@ 0x2d
 80111b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80111ba:	4a7e      	ldr	r2, [pc, #504]	@ (80113b4 <_printf_float+0x2d4>)
 80111bc:	4b7e      	ldr	r3, [pc, #504]	@ (80113b8 <_printf_float+0x2d8>)
 80111be:	e7d4      	b.n	801116a <_printf_float+0x8a>
 80111c0:	6863      	ldr	r3, [r4, #4]
 80111c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80111c6:	9206      	str	r2, [sp, #24]
 80111c8:	1c5a      	adds	r2, r3, #1
 80111ca:	d13b      	bne.n	8011244 <_printf_float+0x164>
 80111cc:	2306      	movs	r3, #6
 80111ce:	6063      	str	r3, [r4, #4]
 80111d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80111d4:	2300      	movs	r3, #0
 80111d6:	6022      	str	r2, [r4, #0]
 80111d8:	9303      	str	r3, [sp, #12]
 80111da:	ab0a      	add	r3, sp, #40	@ 0x28
 80111dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80111e0:	ab09      	add	r3, sp, #36	@ 0x24
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	6861      	ldr	r1, [r4, #4]
 80111e6:	ec49 8b10 	vmov	d0, r8, r9
 80111ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80111ee:	4628      	mov	r0, r5
 80111f0:	f7ff fed6 	bl	8010fa0 <__cvt>
 80111f4:	9b06      	ldr	r3, [sp, #24]
 80111f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80111f8:	2b47      	cmp	r3, #71	@ 0x47
 80111fa:	4680      	mov	r8, r0
 80111fc:	d129      	bne.n	8011252 <_printf_float+0x172>
 80111fe:	1cc8      	adds	r0, r1, #3
 8011200:	db02      	blt.n	8011208 <_printf_float+0x128>
 8011202:	6863      	ldr	r3, [r4, #4]
 8011204:	4299      	cmp	r1, r3
 8011206:	dd41      	ble.n	801128c <_printf_float+0x1ac>
 8011208:	f1aa 0a02 	sub.w	sl, sl, #2
 801120c:	fa5f fa8a 	uxtb.w	sl, sl
 8011210:	3901      	subs	r1, #1
 8011212:	4652      	mov	r2, sl
 8011214:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011218:	9109      	str	r1, [sp, #36]	@ 0x24
 801121a:	f7ff ff26 	bl	801106a <__exponent>
 801121e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011220:	1813      	adds	r3, r2, r0
 8011222:	2a01      	cmp	r2, #1
 8011224:	4681      	mov	r9, r0
 8011226:	6123      	str	r3, [r4, #16]
 8011228:	dc02      	bgt.n	8011230 <_printf_float+0x150>
 801122a:	6822      	ldr	r2, [r4, #0]
 801122c:	07d2      	lsls	r2, r2, #31
 801122e:	d501      	bpl.n	8011234 <_printf_float+0x154>
 8011230:	3301      	adds	r3, #1
 8011232:	6123      	str	r3, [r4, #16]
 8011234:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011238:	2b00      	cmp	r3, #0
 801123a:	d0a2      	beq.n	8011182 <_printf_float+0xa2>
 801123c:	232d      	movs	r3, #45	@ 0x2d
 801123e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011242:	e79e      	b.n	8011182 <_printf_float+0xa2>
 8011244:	9a06      	ldr	r2, [sp, #24]
 8011246:	2a47      	cmp	r2, #71	@ 0x47
 8011248:	d1c2      	bne.n	80111d0 <_printf_float+0xf0>
 801124a:	2b00      	cmp	r3, #0
 801124c:	d1c0      	bne.n	80111d0 <_printf_float+0xf0>
 801124e:	2301      	movs	r3, #1
 8011250:	e7bd      	b.n	80111ce <_printf_float+0xee>
 8011252:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011256:	d9db      	bls.n	8011210 <_printf_float+0x130>
 8011258:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801125c:	d118      	bne.n	8011290 <_printf_float+0x1b0>
 801125e:	2900      	cmp	r1, #0
 8011260:	6863      	ldr	r3, [r4, #4]
 8011262:	dd0b      	ble.n	801127c <_printf_float+0x19c>
 8011264:	6121      	str	r1, [r4, #16]
 8011266:	b913      	cbnz	r3, 801126e <_printf_float+0x18e>
 8011268:	6822      	ldr	r2, [r4, #0]
 801126a:	07d0      	lsls	r0, r2, #31
 801126c:	d502      	bpl.n	8011274 <_printf_float+0x194>
 801126e:	3301      	adds	r3, #1
 8011270:	440b      	add	r3, r1
 8011272:	6123      	str	r3, [r4, #16]
 8011274:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011276:	f04f 0900 	mov.w	r9, #0
 801127a:	e7db      	b.n	8011234 <_printf_float+0x154>
 801127c:	b913      	cbnz	r3, 8011284 <_printf_float+0x1a4>
 801127e:	6822      	ldr	r2, [r4, #0]
 8011280:	07d2      	lsls	r2, r2, #31
 8011282:	d501      	bpl.n	8011288 <_printf_float+0x1a8>
 8011284:	3302      	adds	r3, #2
 8011286:	e7f4      	b.n	8011272 <_printf_float+0x192>
 8011288:	2301      	movs	r3, #1
 801128a:	e7f2      	b.n	8011272 <_printf_float+0x192>
 801128c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011292:	4299      	cmp	r1, r3
 8011294:	db05      	blt.n	80112a2 <_printf_float+0x1c2>
 8011296:	6823      	ldr	r3, [r4, #0]
 8011298:	6121      	str	r1, [r4, #16]
 801129a:	07d8      	lsls	r0, r3, #31
 801129c:	d5ea      	bpl.n	8011274 <_printf_float+0x194>
 801129e:	1c4b      	adds	r3, r1, #1
 80112a0:	e7e7      	b.n	8011272 <_printf_float+0x192>
 80112a2:	2900      	cmp	r1, #0
 80112a4:	bfd4      	ite	le
 80112a6:	f1c1 0202 	rsble	r2, r1, #2
 80112aa:	2201      	movgt	r2, #1
 80112ac:	4413      	add	r3, r2
 80112ae:	e7e0      	b.n	8011272 <_printf_float+0x192>
 80112b0:	6823      	ldr	r3, [r4, #0]
 80112b2:	055a      	lsls	r2, r3, #21
 80112b4:	d407      	bmi.n	80112c6 <_printf_float+0x1e6>
 80112b6:	6923      	ldr	r3, [r4, #16]
 80112b8:	4642      	mov	r2, r8
 80112ba:	4631      	mov	r1, r6
 80112bc:	4628      	mov	r0, r5
 80112be:	47b8      	blx	r7
 80112c0:	3001      	adds	r0, #1
 80112c2:	d12b      	bne.n	801131c <_printf_float+0x23c>
 80112c4:	e767      	b.n	8011196 <_printf_float+0xb6>
 80112c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80112ca:	f240 80dd 	bls.w	8011488 <_printf_float+0x3a8>
 80112ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80112d2:	2200      	movs	r2, #0
 80112d4:	2300      	movs	r3, #0
 80112d6:	f7ef fc1f 	bl	8000b18 <__aeabi_dcmpeq>
 80112da:	2800      	cmp	r0, #0
 80112dc:	d033      	beq.n	8011346 <_printf_float+0x266>
 80112de:	4a37      	ldr	r2, [pc, #220]	@ (80113bc <_printf_float+0x2dc>)
 80112e0:	2301      	movs	r3, #1
 80112e2:	4631      	mov	r1, r6
 80112e4:	4628      	mov	r0, r5
 80112e6:	47b8      	blx	r7
 80112e8:	3001      	adds	r0, #1
 80112ea:	f43f af54 	beq.w	8011196 <_printf_float+0xb6>
 80112ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80112f2:	4543      	cmp	r3, r8
 80112f4:	db02      	blt.n	80112fc <_printf_float+0x21c>
 80112f6:	6823      	ldr	r3, [r4, #0]
 80112f8:	07d8      	lsls	r0, r3, #31
 80112fa:	d50f      	bpl.n	801131c <_printf_float+0x23c>
 80112fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011300:	4631      	mov	r1, r6
 8011302:	4628      	mov	r0, r5
 8011304:	47b8      	blx	r7
 8011306:	3001      	adds	r0, #1
 8011308:	f43f af45 	beq.w	8011196 <_printf_float+0xb6>
 801130c:	f04f 0900 	mov.w	r9, #0
 8011310:	f108 38ff 	add.w	r8, r8, #4294967295
 8011314:	f104 0a1a 	add.w	sl, r4, #26
 8011318:	45c8      	cmp	r8, r9
 801131a:	dc09      	bgt.n	8011330 <_printf_float+0x250>
 801131c:	6823      	ldr	r3, [r4, #0]
 801131e:	079b      	lsls	r3, r3, #30
 8011320:	f100 8103 	bmi.w	801152a <_printf_float+0x44a>
 8011324:	68e0      	ldr	r0, [r4, #12]
 8011326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011328:	4298      	cmp	r0, r3
 801132a:	bfb8      	it	lt
 801132c:	4618      	movlt	r0, r3
 801132e:	e734      	b.n	801119a <_printf_float+0xba>
 8011330:	2301      	movs	r3, #1
 8011332:	4652      	mov	r2, sl
 8011334:	4631      	mov	r1, r6
 8011336:	4628      	mov	r0, r5
 8011338:	47b8      	blx	r7
 801133a:	3001      	adds	r0, #1
 801133c:	f43f af2b 	beq.w	8011196 <_printf_float+0xb6>
 8011340:	f109 0901 	add.w	r9, r9, #1
 8011344:	e7e8      	b.n	8011318 <_printf_float+0x238>
 8011346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011348:	2b00      	cmp	r3, #0
 801134a:	dc39      	bgt.n	80113c0 <_printf_float+0x2e0>
 801134c:	4a1b      	ldr	r2, [pc, #108]	@ (80113bc <_printf_float+0x2dc>)
 801134e:	2301      	movs	r3, #1
 8011350:	4631      	mov	r1, r6
 8011352:	4628      	mov	r0, r5
 8011354:	47b8      	blx	r7
 8011356:	3001      	adds	r0, #1
 8011358:	f43f af1d 	beq.w	8011196 <_printf_float+0xb6>
 801135c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011360:	ea59 0303 	orrs.w	r3, r9, r3
 8011364:	d102      	bne.n	801136c <_printf_float+0x28c>
 8011366:	6823      	ldr	r3, [r4, #0]
 8011368:	07d9      	lsls	r1, r3, #31
 801136a:	d5d7      	bpl.n	801131c <_printf_float+0x23c>
 801136c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011370:	4631      	mov	r1, r6
 8011372:	4628      	mov	r0, r5
 8011374:	47b8      	blx	r7
 8011376:	3001      	adds	r0, #1
 8011378:	f43f af0d 	beq.w	8011196 <_printf_float+0xb6>
 801137c:	f04f 0a00 	mov.w	sl, #0
 8011380:	f104 0b1a 	add.w	fp, r4, #26
 8011384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011386:	425b      	negs	r3, r3
 8011388:	4553      	cmp	r3, sl
 801138a:	dc01      	bgt.n	8011390 <_printf_float+0x2b0>
 801138c:	464b      	mov	r3, r9
 801138e:	e793      	b.n	80112b8 <_printf_float+0x1d8>
 8011390:	2301      	movs	r3, #1
 8011392:	465a      	mov	r2, fp
 8011394:	4631      	mov	r1, r6
 8011396:	4628      	mov	r0, r5
 8011398:	47b8      	blx	r7
 801139a:	3001      	adds	r0, #1
 801139c:	f43f aefb 	beq.w	8011196 <_printf_float+0xb6>
 80113a0:	f10a 0a01 	add.w	sl, sl, #1
 80113a4:	e7ee      	b.n	8011384 <_printf_float+0x2a4>
 80113a6:	bf00      	nop
 80113a8:	7fefffff 	.word	0x7fefffff
 80113ac:	08014278 	.word	0x08014278
 80113b0:	0801427c 	.word	0x0801427c
 80113b4:	08014280 	.word	0x08014280
 80113b8:	08014284 	.word	0x08014284
 80113bc:	08014288 	.word	0x08014288
 80113c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80113c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80113c6:	4553      	cmp	r3, sl
 80113c8:	bfa8      	it	ge
 80113ca:	4653      	movge	r3, sl
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	4699      	mov	r9, r3
 80113d0:	dc36      	bgt.n	8011440 <_printf_float+0x360>
 80113d2:	f04f 0b00 	mov.w	fp, #0
 80113d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113da:	f104 021a 	add.w	r2, r4, #26
 80113de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80113e0:	9306      	str	r3, [sp, #24]
 80113e2:	eba3 0309 	sub.w	r3, r3, r9
 80113e6:	455b      	cmp	r3, fp
 80113e8:	dc31      	bgt.n	801144e <_printf_float+0x36e>
 80113ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113ec:	459a      	cmp	sl, r3
 80113ee:	dc3a      	bgt.n	8011466 <_printf_float+0x386>
 80113f0:	6823      	ldr	r3, [r4, #0]
 80113f2:	07da      	lsls	r2, r3, #31
 80113f4:	d437      	bmi.n	8011466 <_printf_float+0x386>
 80113f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113f8:	ebaa 0903 	sub.w	r9, sl, r3
 80113fc:	9b06      	ldr	r3, [sp, #24]
 80113fe:	ebaa 0303 	sub.w	r3, sl, r3
 8011402:	4599      	cmp	r9, r3
 8011404:	bfa8      	it	ge
 8011406:	4699      	movge	r9, r3
 8011408:	f1b9 0f00 	cmp.w	r9, #0
 801140c:	dc33      	bgt.n	8011476 <_printf_float+0x396>
 801140e:	f04f 0800 	mov.w	r8, #0
 8011412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011416:	f104 0b1a 	add.w	fp, r4, #26
 801141a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801141c:	ebaa 0303 	sub.w	r3, sl, r3
 8011420:	eba3 0309 	sub.w	r3, r3, r9
 8011424:	4543      	cmp	r3, r8
 8011426:	f77f af79 	ble.w	801131c <_printf_float+0x23c>
 801142a:	2301      	movs	r3, #1
 801142c:	465a      	mov	r2, fp
 801142e:	4631      	mov	r1, r6
 8011430:	4628      	mov	r0, r5
 8011432:	47b8      	blx	r7
 8011434:	3001      	adds	r0, #1
 8011436:	f43f aeae 	beq.w	8011196 <_printf_float+0xb6>
 801143a:	f108 0801 	add.w	r8, r8, #1
 801143e:	e7ec      	b.n	801141a <_printf_float+0x33a>
 8011440:	4642      	mov	r2, r8
 8011442:	4631      	mov	r1, r6
 8011444:	4628      	mov	r0, r5
 8011446:	47b8      	blx	r7
 8011448:	3001      	adds	r0, #1
 801144a:	d1c2      	bne.n	80113d2 <_printf_float+0x2f2>
 801144c:	e6a3      	b.n	8011196 <_printf_float+0xb6>
 801144e:	2301      	movs	r3, #1
 8011450:	4631      	mov	r1, r6
 8011452:	4628      	mov	r0, r5
 8011454:	9206      	str	r2, [sp, #24]
 8011456:	47b8      	blx	r7
 8011458:	3001      	adds	r0, #1
 801145a:	f43f ae9c 	beq.w	8011196 <_printf_float+0xb6>
 801145e:	9a06      	ldr	r2, [sp, #24]
 8011460:	f10b 0b01 	add.w	fp, fp, #1
 8011464:	e7bb      	b.n	80113de <_printf_float+0x2fe>
 8011466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801146a:	4631      	mov	r1, r6
 801146c:	4628      	mov	r0, r5
 801146e:	47b8      	blx	r7
 8011470:	3001      	adds	r0, #1
 8011472:	d1c0      	bne.n	80113f6 <_printf_float+0x316>
 8011474:	e68f      	b.n	8011196 <_printf_float+0xb6>
 8011476:	9a06      	ldr	r2, [sp, #24]
 8011478:	464b      	mov	r3, r9
 801147a:	4442      	add	r2, r8
 801147c:	4631      	mov	r1, r6
 801147e:	4628      	mov	r0, r5
 8011480:	47b8      	blx	r7
 8011482:	3001      	adds	r0, #1
 8011484:	d1c3      	bne.n	801140e <_printf_float+0x32e>
 8011486:	e686      	b.n	8011196 <_printf_float+0xb6>
 8011488:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801148c:	f1ba 0f01 	cmp.w	sl, #1
 8011490:	dc01      	bgt.n	8011496 <_printf_float+0x3b6>
 8011492:	07db      	lsls	r3, r3, #31
 8011494:	d536      	bpl.n	8011504 <_printf_float+0x424>
 8011496:	2301      	movs	r3, #1
 8011498:	4642      	mov	r2, r8
 801149a:	4631      	mov	r1, r6
 801149c:	4628      	mov	r0, r5
 801149e:	47b8      	blx	r7
 80114a0:	3001      	adds	r0, #1
 80114a2:	f43f ae78 	beq.w	8011196 <_printf_float+0xb6>
 80114a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114aa:	4631      	mov	r1, r6
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b8      	blx	r7
 80114b0:	3001      	adds	r0, #1
 80114b2:	f43f ae70 	beq.w	8011196 <_printf_float+0xb6>
 80114b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80114ba:	2200      	movs	r2, #0
 80114bc:	2300      	movs	r3, #0
 80114be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114c2:	f7ef fb29 	bl	8000b18 <__aeabi_dcmpeq>
 80114c6:	b9c0      	cbnz	r0, 80114fa <_printf_float+0x41a>
 80114c8:	4653      	mov	r3, sl
 80114ca:	f108 0201 	add.w	r2, r8, #1
 80114ce:	4631      	mov	r1, r6
 80114d0:	4628      	mov	r0, r5
 80114d2:	47b8      	blx	r7
 80114d4:	3001      	adds	r0, #1
 80114d6:	d10c      	bne.n	80114f2 <_printf_float+0x412>
 80114d8:	e65d      	b.n	8011196 <_printf_float+0xb6>
 80114da:	2301      	movs	r3, #1
 80114dc:	465a      	mov	r2, fp
 80114de:	4631      	mov	r1, r6
 80114e0:	4628      	mov	r0, r5
 80114e2:	47b8      	blx	r7
 80114e4:	3001      	adds	r0, #1
 80114e6:	f43f ae56 	beq.w	8011196 <_printf_float+0xb6>
 80114ea:	f108 0801 	add.w	r8, r8, #1
 80114ee:	45d0      	cmp	r8, sl
 80114f0:	dbf3      	blt.n	80114da <_printf_float+0x3fa>
 80114f2:	464b      	mov	r3, r9
 80114f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80114f8:	e6df      	b.n	80112ba <_printf_float+0x1da>
 80114fa:	f04f 0800 	mov.w	r8, #0
 80114fe:	f104 0b1a 	add.w	fp, r4, #26
 8011502:	e7f4      	b.n	80114ee <_printf_float+0x40e>
 8011504:	2301      	movs	r3, #1
 8011506:	4642      	mov	r2, r8
 8011508:	e7e1      	b.n	80114ce <_printf_float+0x3ee>
 801150a:	2301      	movs	r3, #1
 801150c:	464a      	mov	r2, r9
 801150e:	4631      	mov	r1, r6
 8011510:	4628      	mov	r0, r5
 8011512:	47b8      	blx	r7
 8011514:	3001      	adds	r0, #1
 8011516:	f43f ae3e 	beq.w	8011196 <_printf_float+0xb6>
 801151a:	f108 0801 	add.w	r8, r8, #1
 801151e:	68e3      	ldr	r3, [r4, #12]
 8011520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011522:	1a5b      	subs	r3, r3, r1
 8011524:	4543      	cmp	r3, r8
 8011526:	dcf0      	bgt.n	801150a <_printf_float+0x42a>
 8011528:	e6fc      	b.n	8011324 <_printf_float+0x244>
 801152a:	f04f 0800 	mov.w	r8, #0
 801152e:	f104 0919 	add.w	r9, r4, #25
 8011532:	e7f4      	b.n	801151e <_printf_float+0x43e>

08011534 <_printf_common>:
 8011534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011538:	4616      	mov	r6, r2
 801153a:	4698      	mov	r8, r3
 801153c:	688a      	ldr	r2, [r1, #8]
 801153e:	690b      	ldr	r3, [r1, #16]
 8011540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011544:	4293      	cmp	r3, r2
 8011546:	bfb8      	it	lt
 8011548:	4613      	movlt	r3, r2
 801154a:	6033      	str	r3, [r6, #0]
 801154c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011550:	4607      	mov	r7, r0
 8011552:	460c      	mov	r4, r1
 8011554:	b10a      	cbz	r2, 801155a <_printf_common+0x26>
 8011556:	3301      	adds	r3, #1
 8011558:	6033      	str	r3, [r6, #0]
 801155a:	6823      	ldr	r3, [r4, #0]
 801155c:	0699      	lsls	r1, r3, #26
 801155e:	bf42      	ittt	mi
 8011560:	6833      	ldrmi	r3, [r6, #0]
 8011562:	3302      	addmi	r3, #2
 8011564:	6033      	strmi	r3, [r6, #0]
 8011566:	6825      	ldr	r5, [r4, #0]
 8011568:	f015 0506 	ands.w	r5, r5, #6
 801156c:	d106      	bne.n	801157c <_printf_common+0x48>
 801156e:	f104 0a19 	add.w	sl, r4, #25
 8011572:	68e3      	ldr	r3, [r4, #12]
 8011574:	6832      	ldr	r2, [r6, #0]
 8011576:	1a9b      	subs	r3, r3, r2
 8011578:	42ab      	cmp	r3, r5
 801157a:	dc26      	bgt.n	80115ca <_printf_common+0x96>
 801157c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011580:	6822      	ldr	r2, [r4, #0]
 8011582:	3b00      	subs	r3, #0
 8011584:	bf18      	it	ne
 8011586:	2301      	movne	r3, #1
 8011588:	0692      	lsls	r2, r2, #26
 801158a:	d42b      	bmi.n	80115e4 <_printf_common+0xb0>
 801158c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011590:	4641      	mov	r1, r8
 8011592:	4638      	mov	r0, r7
 8011594:	47c8      	blx	r9
 8011596:	3001      	adds	r0, #1
 8011598:	d01e      	beq.n	80115d8 <_printf_common+0xa4>
 801159a:	6823      	ldr	r3, [r4, #0]
 801159c:	6922      	ldr	r2, [r4, #16]
 801159e:	f003 0306 	and.w	r3, r3, #6
 80115a2:	2b04      	cmp	r3, #4
 80115a4:	bf02      	ittt	eq
 80115a6:	68e5      	ldreq	r5, [r4, #12]
 80115a8:	6833      	ldreq	r3, [r6, #0]
 80115aa:	1aed      	subeq	r5, r5, r3
 80115ac:	68a3      	ldr	r3, [r4, #8]
 80115ae:	bf0c      	ite	eq
 80115b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115b4:	2500      	movne	r5, #0
 80115b6:	4293      	cmp	r3, r2
 80115b8:	bfc4      	itt	gt
 80115ba:	1a9b      	subgt	r3, r3, r2
 80115bc:	18ed      	addgt	r5, r5, r3
 80115be:	2600      	movs	r6, #0
 80115c0:	341a      	adds	r4, #26
 80115c2:	42b5      	cmp	r5, r6
 80115c4:	d11a      	bne.n	80115fc <_printf_common+0xc8>
 80115c6:	2000      	movs	r0, #0
 80115c8:	e008      	b.n	80115dc <_printf_common+0xa8>
 80115ca:	2301      	movs	r3, #1
 80115cc:	4652      	mov	r2, sl
 80115ce:	4641      	mov	r1, r8
 80115d0:	4638      	mov	r0, r7
 80115d2:	47c8      	blx	r9
 80115d4:	3001      	adds	r0, #1
 80115d6:	d103      	bne.n	80115e0 <_printf_common+0xac>
 80115d8:	f04f 30ff 	mov.w	r0, #4294967295
 80115dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115e0:	3501      	adds	r5, #1
 80115e2:	e7c6      	b.n	8011572 <_printf_common+0x3e>
 80115e4:	18e1      	adds	r1, r4, r3
 80115e6:	1c5a      	adds	r2, r3, #1
 80115e8:	2030      	movs	r0, #48	@ 0x30
 80115ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80115ee:	4422      	add	r2, r4
 80115f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80115f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80115f8:	3302      	adds	r3, #2
 80115fa:	e7c7      	b.n	801158c <_printf_common+0x58>
 80115fc:	2301      	movs	r3, #1
 80115fe:	4622      	mov	r2, r4
 8011600:	4641      	mov	r1, r8
 8011602:	4638      	mov	r0, r7
 8011604:	47c8      	blx	r9
 8011606:	3001      	adds	r0, #1
 8011608:	d0e6      	beq.n	80115d8 <_printf_common+0xa4>
 801160a:	3601      	adds	r6, #1
 801160c:	e7d9      	b.n	80115c2 <_printf_common+0x8e>
	...

08011610 <_printf_i>:
 8011610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011614:	7e0f      	ldrb	r7, [r1, #24]
 8011616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011618:	2f78      	cmp	r7, #120	@ 0x78
 801161a:	4691      	mov	r9, r2
 801161c:	4680      	mov	r8, r0
 801161e:	460c      	mov	r4, r1
 8011620:	469a      	mov	sl, r3
 8011622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011626:	d807      	bhi.n	8011638 <_printf_i+0x28>
 8011628:	2f62      	cmp	r7, #98	@ 0x62
 801162a:	d80a      	bhi.n	8011642 <_printf_i+0x32>
 801162c:	2f00      	cmp	r7, #0
 801162e:	f000 80d2 	beq.w	80117d6 <_printf_i+0x1c6>
 8011632:	2f58      	cmp	r7, #88	@ 0x58
 8011634:	f000 80b9 	beq.w	80117aa <_printf_i+0x19a>
 8011638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801163c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011640:	e03a      	b.n	80116b8 <_printf_i+0xa8>
 8011642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011646:	2b15      	cmp	r3, #21
 8011648:	d8f6      	bhi.n	8011638 <_printf_i+0x28>
 801164a:	a101      	add	r1, pc, #4	@ (adr r1, 8011650 <_printf_i+0x40>)
 801164c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011650:	080116a9 	.word	0x080116a9
 8011654:	080116bd 	.word	0x080116bd
 8011658:	08011639 	.word	0x08011639
 801165c:	08011639 	.word	0x08011639
 8011660:	08011639 	.word	0x08011639
 8011664:	08011639 	.word	0x08011639
 8011668:	080116bd 	.word	0x080116bd
 801166c:	08011639 	.word	0x08011639
 8011670:	08011639 	.word	0x08011639
 8011674:	08011639 	.word	0x08011639
 8011678:	08011639 	.word	0x08011639
 801167c:	080117bd 	.word	0x080117bd
 8011680:	080116e7 	.word	0x080116e7
 8011684:	08011777 	.word	0x08011777
 8011688:	08011639 	.word	0x08011639
 801168c:	08011639 	.word	0x08011639
 8011690:	080117df 	.word	0x080117df
 8011694:	08011639 	.word	0x08011639
 8011698:	080116e7 	.word	0x080116e7
 801169c:	08011639 	.word	0x08011639
 80116a0:	08011639 	.word	0x08011639
 80116a4:	0801177f 	.word	0x0801177f
 80116a8:	6833      	ldr	r3, [r6, #0]
 80116aa:	1d1a      	adds	r2, r3, #4
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	6032      	str	r2, [r6, #0]
 80116b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80116b8:	2301      	movs	r3, #1
 80116ba:	e09d      	b.n	80117f8 <_printf_i+0x1e8>
 80116bc:	6833      	ldr	r3, [r6, #0]
 80116be:	6820      	ldr	r0, [r4, #0]
 80116c0:	1d19      	adds	r1, r3, #4
 80116c2:	6031      	str	r1, [r6, #0]
 80116c4:	0606      	lsls	r6, r0, #24
 80116c6:	d501      	bpl.n	80116cc <_printf_i+0xbc>
 80116c8:	681d      	ldr	r5, [r3, #0]
 80116ca:	e003      	b.n	80116d4 <_printf_i+0xc4>
 80116cc:	0645      	lsls	r5, r0, #25
 80116ce:	d5fb      	bpl.n	80116c8 <_printf_i+0xb8>
 80116d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80116d4:	2d00      	cmp	r5, #0
 80116d6:	da03      	bge.n	80116e0 <_printf_i+0xd0>
 80116d8:	232d      	movs	r3, #45	@ 0x2d
 80116da:	426d      	negs	r5, r5
 80116dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116e0:	4859      	ldr	r0, [pc, #356]	@ (8011848 <_printf_i+0x238>)
 80116e2:	230a      	movs	r3, #10
 80116e4:	e011      	b.n	801170a <_printf_i+0xfa>
 80116e6:	6821      	ldr	r1, [r4, #0]
 80116e8:	6833      	ldr	r3, [r6, #0]
 80116ea:	0608      	lsls	r0, r1, #24
 80116ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80116f0:	d402      	bmi.n	80116f8 <_printf_i+0xe8>
 80116f2:	0649      	lsls	r1, r1, #25
 80116f4:	bf48      	it	mi
 80116f6:	b2ad      	uxthmi	r5, r5
 80116f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80116fa:	4853      	ldr	r0, [pc, #332]	@ (8011848 <_printf_i+0x238>)
 80116fc:	6033      	str	r3, [r6, #0]
 80116fe:	bf14      	ite	ne
 8011700:	230a      	movne	r3, #10
 8011702:	2308      	moveq	r3, #8
 8011704:	2100      	movs	r1, #0
 8011706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801170a:	6866      	ldr	r6, [r4, #4]
 801170c:	60a6      	str	r6, [r4, #8]
 801170e:	2e00      	cmp	r6, #0
 8011710:	bfa2      	ittt	ge
 8011712:	6821      	ldrge	r1, [r4, #0]
 8011714:	f021 0104 	bicge.w	r1, r1, #4
 8011718:	6021      	strge	r1, [r4, #0]
 801171a:	b90d      	cbnz	r5, 8011720 <_printf_i+0x110>
 801171c:	2e00      	cmp	r6, #0
 801171e:	d04b      	beq.n	80117b8 <_printf_i+0x1a8>
 8011720:	4616      	mov	r6, r2
 8011722:	fbb5 f1f3 	udiv	r1, r5, r3
 8011726:	fb03 5711 	mls	r7, r3, r1, r5
 801172a:	5dc7      	ldrb	r7, [r0, r7]
 801172c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011730:	462f      	mov	r7, r5
 8011732:	42bb      	cmp	r3, r7
 8011734:	460d      	mov	r5, r1
 8011736:	d9f4      	bls.n	8011722 <_printf_i+0x112>
 8011738:	2b08      	cmp	r3, #8
 801173a:	d10b      	bne.n	8011754 <_printf_i+0x144>
 801173c:	6823      	ldr	r3, [r4, #0]
 801173e:	07df      	lsls	r7, r3, #31
 8011740:	d508      	bpl.n	8011754 <_printf_i+0x144>
 8011742:	6923      	ldr	r3, [r4, #16]
 8011744:	6861      	ldr	r1, [r4, #4]
 8011746:	4299      	cmp	r1, r3
 8011748:	bfde      	ittt	le
 801174a:	2330      	movle	r3, #48	@ 0x30
 801174c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011754:	1b92      	subs	r2, r2, r6
 8011756:	6122      	str	r2, [r4, #16]
 8011758:	f8cd a000 	str.w	sl, [sp]
 801175c:	464b      	mov	r3, r9
 801175e:	aa03      	add	r2, sp, #12
 8011760:	4621      	mov	r1, r4
 8011762:	4640      	mov	r0, r8
 8011764:	f7ff fee6 	bl	8011534 <_printf_common>
 8011768:	3001      	adds	r0, #1
 801176a:	d14a      	bne.n	8011802 <_printf_i+0x1f2>
 801176c:	f04f 30ff 	mov.w	r0, #4294967295
 8011770:	b004      	add	sp, #16
 8011772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011776:	6823      	ldr	r3, [r4, #0]
 8011778:	f043 0320 	orr.w	r3, r3, #32
 801177c:	6023      	str	r3, [r4, #0]
 801177e:	4833      	ldr	r0, [pc, #204]	@ (801184c <_printf_i+0x23c>)
 8011780:	2778      	movs	r7, #120	@ 0x78
 8011782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011786:	6823      	ldr	r3, [r4, #0]
 8011788:	6831      	ldr	r1, [r6, #0]
 801178a:	061f      	lsls	r7, r3, #24
 801178c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011790:	d402      	bmi.n	8011798 <_printf_i+0x188>
 8011792:	065f      	lsls	r7, r3, #25
 8011794:	bf48      	it	mi
 8011796:	b2ad      	uxthmi	r5, r5
 8011798:	6031      	str	r1, [r6, #0]
 801179a:	07d9      	lsls	r1, r3, #31
 801179c:	bf44      	itt	mi
 801179e:	f043 0320 	orrmi.w	r3, r3, #32
 80117a2:	6023      	strmi	r3, [r4, #0]
 80117a4:	b11d      	cbz	r5, 80117ae <_printf_i+0x19e>
 80117a6:	2310      	movs	r3, #16
 80117a8:	e7ac      	b.n	8011704 <_printf_i+0xf4>
 80117aa:	4827      	ldr	r0, [pc, #156]	@ (8011848 <_printf_i+0x238>)
 80117ac:	e7e9      	b.n	8011782 <_printf_i+0x172>
 80117ae:	6823      	ldr	r3, [r4, #0]
 80117b0:	f023 0320 	bic.w	r3, r3, #32
 80117b4:	6023      	str	r3, [r4, #0]
 80117b6:	e7f6      	b.n	80117a6 <_printf_i+0x196>
 80117b8:	4616      	mov	r6, r2
 80117ba:	e7bd      	b.n	8011738 <_printf_i+0x128>
 80117bc:	6833      	ldr	r3, [r6, #0]
 80117be:	6825      	ldr	r5, [r4, #0]
 80117c0:	6961      	ldr	r1, [r4, #20]
 80117c2:	1d18      	adds	r0, r3, #4
 80117c4:	6030      	str	r0, [r6, #0]
 80117c6:	062e      	lsls	r6, r5, #24
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	d501      	bpl.n	80117d0 <_printf_i+0x1c0>
 80117cc:	6019      	str	r1, [r3, #0]
 80117ce:	e002      	b.n	80117d6 <_printf_i+0x1c6>
 80117d0:	0668      	lsls	r0, r5, #25
 80117d2:	d5fb      	bpl.n	80117cc <_printf_i+0x1bc>
 80117d4:	8019      	strh	r1, [r3, #0]
 80117d6:	2300      	movs	r3, #0
 80117d8:	6123      	str	r3, [r4, #16]
 80117da:	4616      	mov	r6, r2
 80117dc:	e7bc      	b.n	8011758 <_printf_i+0x148>
 80117de:	6833      	ldr	r3, [r6, #0]
 80117e0:	1d1a      	adds	r2, r3, #4
 80117e2:	6032      	str	r2, [r6, #0]
 80117e4:	681e      	ldr	r6, [r3, #0]
 80117e6:	6862      	ldr	r2, [r4, #4]
 80117e8:	2100      	movs	r1, #0
 80117ea:	4630      	mov	r0, r6
 80117ec:	f7ee fd18 	bl	8000220 <memchr>
 80117f0:	b108      	cbz	r0, 80117f6 <_printf_i+0x1e6>
 80117f2:	1b80      	subs	r0, r0, r6
 80117f4:	6060      	str	r0, [r4, #4]
 80117f6:	6863      	ldr	r3, [r4, #4]
 80117f8:	6123      	str	r3, [r4, #16]
 80117fa:	2300      	movs	r3, #0
 80117fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011800:	e7aa      	b.n	8011758 <_printf_i+0x148>
 8011802:	6923      	ldr	r3, [r4, #16]
 8011804:	4632      	mov	r2, r6
 8011806:	4649      	mov	r1, r9
 8011808:	4640      	mov	r0, r8
 801180a:	47d0      	blx	sl
 801180c:	3001      	adds	r0, #1
 801180e:	d0ad      	beq.n	801176c <_printf_i+0x15c>
 8011810:	6823      	ldr	r3, [r4, #0]
 8011812:	079b      	lsls	r3, r3, #30
 8011814:	d413      	bmi.n	801183e <_printf_i+0x22e>
 8011816:	68e0      	ldr	r0, [r4, #12]
 8011818:	9b03      	ldr	r3, [sp, #12]
 801181a:	4298      	cmp	r0, r3
 801181c:	bfb8      	it	lt
 801181e:	4618      	movlt	r0, r3
 8011820:	e7a6      	b.n	8011770 <_printf_i+0x160>
 8011822:	2301      	movs	r3, #1
 8011824:	4632      	mov	r2, r6
 8011826:	4649      	mov	r1, r9
 8011828:	4640      	mov	r0, r8
 801182a:	47d0      	blx	sl
 801182c:	3001      	adds	r0, #1
 801182e:	d09d      	beq.n	801176c <_printf_i+0x15c>
 8011830:	3501      	adds	r5, #1
 8011832:	68e3      	ldr	r3, [r4, #12]
 8011834:	9903      	ldr	r1, [sp, #12]
 8011836:	1a5b      	subs	r3, r3, r1
 8011838:	42ab      	cmp	r3, r5
 801183a:	dcf2      	bgt.n	8011822 <_printf_i+0x212>
 801183c:	e7eb      	b.n	8011816 <_printf_i+0x206>
 801183e:	2500      	movs	r5, #0
 8011840:	f104 0619 	add.w	r6, r4, #25
 8011844:	e7f5      	b.n	8011832 <_printf_i+0x222>
 8011846:	bf00      	nop
 8011848:	0801428a 	.word	0x0801428a
 801184c:	0801429b 	.word	0x0801429b

08011850 <std>:
 8011850:	2300      	movs	r3, #0
 8011852:	b510      	push	{r4, lr}
 8011854:	4604      	mov	r4, r0
 8011856:	e9c0 3300 	strd	r3, r3, [r0]
 801185a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801185e:	6083      	str	r3, [r0, #8]
 8011860:	8181      	strh	r1, [r0, #12]
 8011862:	6643      	str	r3, [r0, #100]	@ 0x64
 8011864:	81c2      	strh	r2, [r0, #14]
 8011866:	6183      	str	r3, [r0, #24]
 8011868:	4619      	mov	r1, r3
 801186a:	2208      	movs	r2, #8
 801186c:	305c      	adds	r0, #92	@ 0x5c
 801186e:	f000 faad 	bl	8011dcc <memset>
 8011872:	4b0d      	ldr	r3, [pc, #52]	@ (80118a8 <std+0x58>)
 8011874:	6263      	str	r3, [r4, #36]	@ 0x24
 8011876:	4b0d      	ldr	r3, [pc, #52]	@ (80118ac <std+0x5c>)
 8011878:	62a3      	str	r3, [r4, #40]	@ 0x28
 801187a:	4b0d      	ldr	r3, [pc, #52]	@ (80118b0 <std+0x60>)
 801187c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801187e:	4b0d      	ldr	r3, [pc, #52]	@ (80118b4 <std+0x64>)
 8011880:	6323      	str	r3, [r4, #48]	@ 0x30
 8011882:	4b0d      	ldr	r3, [pc, #52]	@ (80118b8 <std+0x68>)
 8011884:	6224      	str	r4, [r4, #32]
 8011886:	429c      	cmp	r4, r3
 8011888:	d006      	beq.n	8011898 <std+0x48>
 801188a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801188e:	4294      	cmp	r4, r2
 8011890:	d002      	beq.n	8011898 <std+0x48>
 8011892:	33d0      	adds	r3, #208	@ 0xd0
 8011894:	429c      	cmp	r4, r3
 8011896:	d105      	bne.n	80118a4 <std+0x54>
 8011898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801189c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118a0:	f000 bb10 	b.w	8011ec4 <__retarget_lock_init_recursive>
 80118a4:	bd10      	pop	{r4, pc}
 80118a6:	bf00      	nop
 80118a8:	08011c1d 	.word	0x08011c1d
 80118ac:	08011c3f 	.word	0x08011c3f
 80118b0:	08011c77 	.word	0x08011c77
 80118b4:	08011c9b 	.word	0x08011c9b
 80118b8:	200019e4 	.word	0x200019e4

080118bc <stdio_exit_handler>:
 80118bc:	4a02      	ldr	r2, [pc, #8]	@ (80118c8 <stdio_exit_handler+0xc>)
 80118be:	4903      	ldr	r1, [pc, #12]	@ (80118cc <stdio_exit_handler+0x10>)
 80118c0:	4803      	ldr	r0, [pc, #12]	@ (80118d0 <stdio_exit_handler+0x14>)
 80118c2:	f000 b869 	b.w	8011998 <_fwalk_sglue>
 80118c6:	bf00      	nop
 80118c8:	200017ac 	.word	0x200017ac
 80118cc:	08013811 	.word	0x08013811
 80118d0:	200017bc 	.word	0x200017bc

080118d4 <cleanup_stdio>:
 80118d4:	6841      	ldr	r1, [r0, #4]
 80118d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011908 <cleanup_stdio+0x34>)
 80118d8:	4299      	cmp	r1, r3
 80118da:	b510      	push	{r4, lr}
 80118dc:	4604      	mov	r4, r0
 80118de:	d001      	beq.n	80118e4 <cleanup_stdio+0x10>
 80118e0:	f001 ff96 	bl	8013810 <_fflush_r>
 80118e4:	68a1      	ldr	r1, [r4, #8]
 80118e6:	4b09      	ldr	r3, [pc, #36]	@ (801190c <cleanup_stdio+0x38>)
 80118e8:	4299      	cmp	r1, r3
 80118ea:	d002      	beq.n	80118f2 <cleanup_stdio+0x1e>
 80118ec:	4620      	mov	r0, r4
 80118ee:	f001 ff8f 	bl	8013810 <_fflush_r>
 80118f2:	68e1      	ldr	r1, [r4, #12]
 80118f4:	4b06      	ldr	r3, [pc, #24]	@ (8011910 <cleanup_stdio+0x3c>)
 80118f6:	4299      	cmp	r1, r3
 80118f8:	d004      	beq.n	8011904 <cleanup_stdio+0x30>
 80118fa:	4620      	mov	r0, r4
 80118fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011900:	f001 bf86 	b.w	8013810 <_fflush_r>
 8011904:	bd10      	pop	{r4, pc}
 8011906:	bf00      	nop
 8011908:	200019e4 	.word	0x200019e4
 801190c:	20001a4c 	.word	0x20001a4c
 8011910:	20001ab4 	.word	0x20001ab4

08011914 <global_stdio_init.part.0>:
 8011914:	b510      	push	{r4, lr}
 8011916:	4b0b      	ldr	r3, [pc, #44]	@ (8011944 <global_stdio_init.part.0+0x30>)
 8011918:	4c0b      	ldr	r4, [pc, #44]	@ (8011948 <global_stdio_init.part.0+0x34>)
 801191a:	4a0c      	ldr	r2, [pc, #48]	@ (801194c <global_stdio_init.part.0+0x38>)
 801191c:	601a      	str	r2, [r3, #0]
 801191e:	4620      	mov	r0, r4
 8011920:	2200      	movs	r2, #0
 8011922:	2104      	movs	r1, #4
 8011924:	f7ff ff94 	bl	8011850 <std>
 8011928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801192c:	2201      	movs	r2, #1
 801192e:	2109      	movs	r1, #9
 8011930:	f7ff ff8e 	bl	8011850 <std>
 8011934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011938:	2202      	movs	r2, #2
 801193a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801193e:	2112      	movs	r1, #18
 8011940:	f7ff bf86 	b.w	8011850 <std>
 8011944:	20001b1c 	.word	0x20001b1c
 8011948:	200019e4 	.word	0x200019e4
 801194c:	080118bd 	.word	0x080118bd

08011950 <__sfp_lock_acquire>:
 8011950:	4801      	ldr	r0, [pc, #4]	@ (8011958 <__sfp_lock_acquire+0x8>)
 8011952:	f000 bab8 	b.w	8011ec6 <__retarget_lock_acquire_recursive>
 8011956:	bf00      	nop
 8011958:	20001b25 	.word	0x20001b25

0801195c <__sfp_lock_release>:
 801195c:	4801      	ldr	r0, [pc, #4]	@ (8011964 <__sfp_lock_release+0x8>)
 801195e:	f000 bab3 	b.w	8011ec8 <__retarget_lock_release_recursive>
 8011962:	bf00      	nop
 8011964:	20001b25 	.word	0x20001b25

08011968 <__sinit>:
 8011968:	b510      	push	{r4, lr}
 801196a:	4604      	mov	r4, r0
 801196c:	f7ff fff0 	bl	8011950 <__sfp_lock_acquire>
 8011970:	6a23      	ldr	r3, [r4, #32]
 8011972:	b11b      	cbz	r3, 801197c <__sinit+0x14>
 8011974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011978:	f7ff bff0 	b.w	801195c <__sfp_lock_release>
 801197c:	4b04      	ldr	r3, [pc, #16]	@ (8011990 <__sinit+0x28>)
 801197e:	6223      	str	r3, [r4, #32]
 8011980:	4b04      	ldr	r3, [pc, #16]	@ (8011994 <__sinit+0x2c>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1f5      	bne.n	8011974 <__sinit+0xc>
 8011988:	f7ff ffc4 	bl	8011914 <global_stdio_init.part.0>
 801198c:	e7f2      	b.n	8011974 <__sinit+0xc>
 801198e:	bf00      	nop
 8011990:	080118d5 	.word	0x080118d5
 8011994:	20001b1c 	.word	0x20001b1c

08011998 <_fwalk_sglue>:
 8011998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801199c:	4607      	mov	r7, r0
 801199e:	4688      	mov	r8, r1
 80119a0:	4614      	mov	r4, r2
 80119a2:	2600      	movs	r6, #0
 80119a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119a8:	f1b9 0901 	subs.w	r9, r9, #1
 80119ac:	d505      	bpl.n	80119ba <_fwalk_sglue+0x22>
 80119ae:	6824      	ldr	r4, [r4, #0]
 80119b0:	2c00      	cmp	r4, #0
 80119b2:	d1f7      	bne.n	80119a4 <_fwalk_sglue+0xc>
 80119b4:	4630      	mov	r0, r6
 80119b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ba:	89ab      	ldrh	r3, [r5, #12]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d907      	bls.n	80119d0 <_fwalk_sglue+0x38>
 80119c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119c4:	3301      	adds	r3, #1
 80119c6:	d003      	beq.n	80119d0 <_fwalk_sglue+0x38>
 80119c8:	4629      	mov	r1, r5
 80119ca:	4638      	mov	r0, r7
 80119cc:	47c0      	blx	r8
 80119ce:	4306      	orrs	r6, r0
 80119d0:	3568      	adds	r5, #104	@ 0x68
 80119d2:	e7e9      	b.n	80119a8 <_fwalk_sglue+0x10>

080119d4 <iprintf>:
 80119d4:	b40f      	push	{r0, r1, r2, r3}
 80119d6:	b507      	push	{r0, r1, r2, lr}
 80119d8:	4906      	ldr	r1, [pc, #24]	@ (80119f4 <iprintf+0x20>)
 80119da:	ab04      	add	r3, sp, #16
 80119dc:	6808      	ldr	r0, [r1, #0]
 80119de:	f853 2b04 	ldr.w	r2, [r3], #4
 80119e2:	6881      	ldr	r1, [r0, #8]
 80119e4:	9301      	str	r3, [sp, #4]
 80119e6:	f001 fd77 	bl	80134d8 <_vfiprintf_r>
 80119ea:	b003      	add	sp, #12
 80119ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80119f0:	b004      	add	sp, #16
 80119f2:	4770      	bx	lr
 80119f4:	200017b8 	.word	0x200017b8

080119f8 <_puts_r>:
 80119f8:	6a03      	ldr	r3, [r0, #32]
 80119fa:	b570      	push	{r4, r5, r6, lr}
 80119fc:	6884      	ldr	r4, [r0, #8]
 80119fe:	4605      	mov	r5, r0
 8011a00:	460e      	mov	r6, r1
 8011a02:	b90b      	cbnz	r3, 8011a08 <_puts_r+0x10>
 8011a04:	f7ff ffb0 	bl	8011968 <__sinit>
 8011a08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a0a:	07db      	lsls	r3, r3, #31
 8011a0c:	d405      	bmi.n	8011a1a <_puts_r+0x22>
 8011a0e:	89a3      	ldrh	r3, [r4, #12]
 8011a10:	0598      	lsls	r0, r3, #22
 8011a12:	d402      	bmi.n	8011a1a <_puts_r+0x22>
 8011a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a16:	f000 fa56 	bl	8011ec6 <__retarget_lock_acquire_recursive>
 8011a1a:	89a3      	ldrh	r3, [r4, #12]
 8011a1c:	0719      	lsls	r1, r3, #28
 8011a1e:	d502      	bpl.n	8011a26 <_puts_r+0x2e>
 8011a20:	6923      	ldr	r3, [r4, #16]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d135      	bne.n	8011a92 <_puts_r+0x9a>
 8011a26:	4621      	mov	r1, r4
 8011a28:	4628      	mov	r0, r5
 8011a2a:	f000 f979 	bl	8011d20 <__swsetup_r>
 8011a2e:	b380      	cbz	r0, 8011a92 <_puts_r+0x9a>
 8011a30:	f04f 35ff 	mov.w	r5, #4294967295
 8011a34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a36:	07da      	lsls	r2, r3, #31
 8011a38:	d405      	bmi.n	8011a46 <_puts_r+0x4e>
 8011a3a:	89a3      	ldrh	r3, [r4, #12]
 8011a3c:	059b      	lsls	r3, r3, #22
 8011a3e:	d402      	bmi.n	8011a46 <_puts_r+0x4e>
 8011a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a42:	f000 fa41 	bl	8011ec8 <__retarget_lock_release_recursive>
 8011a46:	4628      	mov	r0, r5
 8011a48:	bd70      	pop	{r4, r5, r6, pc}
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	da04      	bge.n	8011a58 <_puts_r+0x60>
 8011a4e:	69a2      	ldr	r2, [r4, #24]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	dc17      	bgt.n	8011a84 <_puts_r+0x8c>
 8011a54:	290a      	cmp	r1, #10
 8011a56:	d015      	beq.n	8011a84 <_puts_r+0x8c>
 8011a58:	6823      	ldr	r3, [r4, #0]
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	6022      	str	r2, [r4, #0]
 8011a5e:	7019      	strb	r1, [r3, #0]
 8011a60:	68a3      	ldr	r3, [r4, #8]
 8011a62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011a66:	3b01      	subs	r3, #1
 8011a68:	60a3      	str	r3, [r4, #8]
 8011a6a:	2900      	cmp	r1, #0
 8011a6c:	d1ed      	bne.n	8011a4a <_puts_r+0x52>
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	da11      	bge.n	8011a96 <_puts_r+0x9e>
 8011a72:	4622      	mov	r2, r4
 8011a74:	210a      	movs	r1, #10
 8011a76:	4628      	mov	r0, r5
 8011a78:	f000 f913 	bl	8011ca2 <__swbuf_r>
 8011a7c:	3001      	adds	r0, #1
 8011a7e:	d0d7      	beq.n	8011a30 <_puts_r+0x38>
 8011a80:	250a      	movs	r5, #10
 8011a82:	e7d7      	b.n	8011a34 <_puts_r+0x3c>
 8011a84:	4622      	mov	r2, r4
 8011a86:	4628      	mov	r0, r5
 8011a88:	f000 f90b 	bl	8011ca2 <__swbuf_r>
 8011a8c:	3001      	adds	r0, #1
 8011a8e:	d1e7      	bne.n	8011a60 <_puts_r+0x68>
 8011a90:	e7ce      	b.n	8011a30 <_puts_r+0x38>
 8011a92:	3e01      	subs	r6, #1
 8011a94:	e7e4      	b.n	8011a60 <_puts_r+0x68>
 8011a96:	6823      	ldr	r3, [r4, #0]
 8011a98:	1c5a      	adds	r2, r3, #1
 8011a9a:	6022      	str	r2, [r4, #0]
 8011a9c:	220a      	movs	r2, #10
 8011a9e:	701a      	strb	r2, [r3, #0]
 8011aa0:	e7ee      	b.n	8011a80 <_puts_r+0x88>
	...

08011aa4 <puts>:
 8011aa4:	4b02      	ldr	r3, [pc, #8]	@ (8011ab0 <puts+0xc>)
 8011aa6:	4601      	mov	r1, r0
 8011aa8:	6818      	ldr	r0, [r3, #0]
 8011aaa:	f7ff bfa5 	b.w	80119f8 <_puts_r>
 8011aae:	bf00      	nop
 8011ab0:	200017b8 	.word	0x200017b8

08011ab4 <setvbuf>:
 8011ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ab8:	461d      	mov	r5, r3
 8011aba:	4b57      	ldr	r3, [pc, #348]	@ (8011c18 <setvbuf+0x164>)
 8011abc:	681f      	ldr	r7, [r3, #0]
 8011abe:	4604      	mov	r4, r0
 8011ac0:	460e      	mov	r6, r1
 8011ac2:	4690      	mov	r8, r2
 8011ac4:	b127      	cbz	r7, 8011ad0 <setvbuf+0x1c>
 8011ac6:	6a3b      	ldr	r3, [r7, #32]
 8011ac8:	b913      	cbnz	r3, 8011ad0 <setvbuf+0x1c>
 8011aca:	4638      	mov	r0, r7
 8011acc:	f7ff ff4c 	bl	8011968 <__sinit>
 8011ad0:	f1b8 0f02 	cmp.w	r8, #2
 8011ad4:	d006      	beq.n	8011ae4 <setvbuf+0x30>
 8011ad6:	f1b8 0f01 	cmp.w	r8, #1
 8011ada:	f200 809a 	bhi.w	8011c12 <setvbuf+0x15e>
 8011ade:	2d00      	cmp	r5, #0
 8011ae0:	f2c0 8097 	blt.w	8011c12 <setvbuf+0x15e>
 8011ae4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ae6:	07d9      	lsls	r1, r3, #31
 8011ae8:	d405      	bmi.n	8011af6 <setvbuf+0x42>
 8011aea:	89a3      	ldrh	r3, [r4, #12]
 8011aec:	059a      	lsls	r2, r3, #22
 8011aee:	d402      	bmi.n	8011af6 <setvbuf+0x42>
 8011af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011af2:	f000 f9e8 	bl	8011ec6 <__retarget_lock_acquire_recursive>
 8011af6:	4621      	mov	r1, r4
 8011af8:	4638      	mov	r0, r7
 8011afa:	f001 fe89 	bl	8013810 <_fflush_r>
 8011afe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b00:	b141      	cbz	r1, 8011b14 <setvbuf+0x60>
 8011b02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b06:	4299      	cmp	r1, r3
 8011b08:	d002      	beq.n	8011b10 <setvbuf+0x5c>
 8011b0a:	4638      	mov	r0, r7
 8011b0c:	f001 f838 	bl	8012b80 <_free_r>
 8011b10:	2300      	movs	r3, #0
 8011b12:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b14:	2300      	movs	r3, #0
 8011b16:	61a3      	str	r3, [r4, #24]
 8011b18:	6063      	str	r3, [r4, #4]
 8011b1a:	89a3      	ldrh	r3, [r4, #12]
 8011b1c:	061b      	lsls	r3, r3, #24
 8011b1e:	d503      	bpl.n	8011b28 <setvbuf+0x74>
 8011b20:	6921      	ldr	r1, [r4, #16]
 8011b22:	4638      	mov	r0, r7
 8011b24:	f001 f82c 	bl	8012b80 <_free_r>
 8011b28:	89a3      	ldrh	r3, [r4, #12]
 8011b2a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8011b2e:	f023 0303 	bic.w	r3, r3, #3
 8011b32:	f1b8 0f02 	cmp.w	r8, #2
 8011b36:	81a3      	strh	r3, [r4, #12]
 8011b38:	d061      	beq.n	8011bfe <setvbuf+0x14a>
 8011b3a:	ab01      	add	r3, sp, #4
 8011b3c:	466a      	mov	r2, sp
 8011b3e:	4621      	mov	r1, r4
 8011b40:	4638      	mov	r0, r7
 8011b42:	f001 fe8d 	bl	8013860 <__swhatbuf_r>
 8011b46:	89a3      	ldrh	r3, [r4, #12]
 8011b48:	4318      	orrs	r0, r3
 8011b4a:	81a0      	strh	r0, [r4, #12]
 8011b4c:	bb2d      	cbnz	r5, 8011b9a <setvbuf+0xe6>
 8011b4e:	9d00      	ldr	r5, [sp, #0]
 8011b50:	4628      	mov	r0, r5
 8011b52:	f001 f85f 	bl	8012c14 <malloc>
 8011b56:	4606      	mov	r6, r0
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d152      	bne.n	8011c02 <setvbuf+0x14e>
 8011b5c:	f8dd 9000 	ldr.w	r9, [sp]
 8011b60:	45a9      	cmp	r9, r5
 8011b62:	d140      	bne.n	8011be6 <setvbuf+0x132>
 8011b64:	f04f 35ff 	mov.w	r5, #4294967295
 8011b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b6c:	f043 0202 	orr.w	r2, r3, #2
 8011b70:	81a2      	strh	r2, [r4, #12]
 8011b72:	2200      	movs	r2, #0
 8011b74:	60a2      	str	r2, [r4, #8]
 8011b76:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8011b7a:	6022      	str	r2, [r4, #0]
 8011b7c:	6122      	str	r2, [r4, #16]
 8011b7e:	2201      	movs	r2, #1
 8011b80:	6162      	str	r2, [r4, #20]
 8011b82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b84:	07d6      	lsls	r6, r2, #31
 8011b86:	d404      	bmi.n	8011b92 <setvbuf+0xde>
 8011b88:	0598      	lsls	r0, r3, #22
 8011b8a:	d402      	bmi.n	8011b92 <setvbuf+0xde>
 8011b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b8e:	f000 f99b 	bl	8011ec8 <__retarget_lock_release_recursive>
 8011b92:	4628      	mov	r0, r5
 8011b94:	b003      	add	sp, #12
 8011b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b9a:	2e00      	cmp	r6, #0
 8011b9c:	d0d8      	beq.n	8011b50 <setvbuf+0x9c>
 8011b9e:	6a3b      	ldr	r3, [r7, #32]
 8011ba0:	b913      	cbnz	r3, 8011ba8 <setvbuf+0xf4>
 8011ba2:	4638      	mov	r0, r7
 8011ba4:	f7ff fee0 	bl	8011968 <__sinit>
 8011ba8:	f1b8 0f01 	cmp.w	r8, #1
 8011bac:	bf08      	it	eq
 8011bae:	89a3      	ldrheq	r3, [r4, #12]
 8011bb0:	6026      	str	r6, [r4, #0]
 8011bb2:	bf04      	itt	eq
 8011bb4:	f043 0301 	orreq.w	r3, r3, #1
 8011bb8:	81a3      	strheq	r3, [r4, #12]
 8011bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bbe:	f013 0208 	ands.w	r2, r3, #8
 8011bc2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8011bc6:	d01e      	beq.n	8011c06 <setvbuf+0x152>
 8011bc8:	07d9      	lsls	r1, r3, #31
 8011bca:	bf41      	itttt	mi
 8011bcc:	2200      	movmi	r2, #0
 8011bce:	426d      	negmi	r5, r5
 8011bd0:	60a2      	strmi	r2, [r4, #8]
 8011bd2:	61a5      	strmi	r5, [r4, #24]
 8011bd4:	bf58      	it	pl
 8011bd6:	60a5      	strpl	r5, [r4, #8]
 8011bd8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011bda:	07d2      	lsls	r2, r2, #31
 8011bdc:	d401      	bmi.n	8011be2 <setvbuf+0x12e>
 8011bde:	059b      	lsls	r3, r3, #22
 8011be0:	d513      	bpl.n	8011c0a <setvbuf+0x156>
 8011be2:	2500      	movs	r5, #0
 8011be4:	e7d5      	b.n	8011b92 <setvbuf+0xde>
 8011be6:	4648      	mov	r0, r9
 8011be8:	f001 f814 	bl	8012c14 <malloc>
 8011bec:	4606      	mov	r6, r0
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	d0b8      	beq.n	8011b64 <setvbuf+0xb0>
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bf8:	81a3      	strh	r3, [r4, #12]
 8011bfa:	464d      	mov	r5, r9
 8011bfc:	e7cf      	b.n	8011b9e <setvbuf+0xea>
 8011bfe:	2500      	movs	r5, #0
 8011c00:	e7b2      	b.n	8011b68 <setvbuf+0xb4>
 8011c02:	46a9      	mov	r9, r5
 8011c04:	e7f5      	b.n	8011bf2 <setvbuf+0x13e>
 8011c06:	60a2      	str	r2, [r4, #8]
 8011c08:	e7e6      	b.n	8011bd8 <setvbuf+0x124>
 8011c0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c0c:	f000 f95c 	bl	8011ec8 <__retarget_lock_release_recursive>
 8011c10:	e7e7      	b.n	8011be2 <setvbuf+0x12e>
 8011c12:	f04f 35ff 	mov.w	r5, #4294967295
 8011c16:	e7bc      	b.n	8011b92 <setvbuf+0xde>
 8011c18:	200017b8 	.word	0x200017b8

08011c1c <__sread>:
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	460c      	mov	r4, r1
 8011c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c24:	f000 f900 	bl	8011e28 <_read_r>
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	bfab      	itete	ge
 8011c2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8011c30:	181b      	addge	r3, r3, r0
 8011c32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011c36:	bfac      	ite	ge
 8011c38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011c3a:	81a3      	strhlt	r3, [r4, #12]
 8011c3c:	bd10      	pop	{r4, pc}

08011c3e <__swrite>:
 8011c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c42:	461f      	mov	r7, r3
 8011c44:	898b      	ldrh	r3, [r1, #12]
 8011c46:	05db      	lsls	r3, r3, #23
 8011c48:	4605      	mov	r5, r0
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	4616      	mov	r6, r2
 8011c4e:	d505      	bpl.n	8011c5c <__swrite+0x1e>
 8011c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c54:	2302      	movs	r3, #2
 8011c56:	2200      	movs	r2, #0
 8011c58:	f000 f8d4 	bl	8011e04 <_lseek_r>
 8011c5c:	89a3      	ldrh	r3, [r4, #12]
 8011c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011c66:	81a3      	strh	r3, [r4, #12]
 8011c68:	4632      	mov	r2, r6
 8011c6a:	463b      	mov	r3, r7
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c72:	f000 b8eb 	b.w	8011e4c <_write_r>

08011c76 <__sseek>:
 8011c76:	b510      	push	{r4, lr}
 8011c78:	460c      	mov	r4, r1
 8011c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c7e:	f000 f8c1 	bl	8011e04 <_lseek_r>
 8011c82:	1c43      	adds	r3, r0, #1
 8011c84:	89a3      	ldrh	r3, [r4, #12]
 8011c86:	bf15      	itete	ne
 8011c88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011c8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011c8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011c92:	81a3      	strheq	r3, [r4, #12]
 8011c94:	bf18      	it	ne
 8011c96:	81a3      	strhne	r3, [r4, #12]
 8011c98:	bd10      	pop	{r4, pc}

08011c9a <__sclose>:
 8011c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c9e:	f000 b8a1 	b.w	8011de4 <_close_r>

08011ca2 <__swbuf_r>:
 8011ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ca4:	460e      	mov	r6, r1
 8011ca6:	4614      	mov	r4, r2
 8011ca8:	4605      	mov	r5, r0
 8011caa:	b118      	cbz	r0, 8011cb4 <__swbuf_r+0x12>
 8011cac:	6a03      	ldr	r3, [r0, #32]
 8011cae:	b90b      	cbnz	r3, 8011cb4 <__swbuf_r+0x12>
 8011cb0:	f7ff fe5a 	bl	8011968 <__sinit>
 8011cb4:	69a3      	ldr	r3, [r4, #24]
 8011cb6:	60a3      	str	r3, [r4, #8]
 8011cb8:	89a3      	ldrh	r3, [r4, #12]
 8011cba:	071a      	lsls	r2, r3, #28
 8011cbc:	d501      	bpl.n	8011cc2 <__swbuf_r+0x20>
 8011cbe:	6923      	ldr	r3, [r4, #16]
 8011cc0:	b943      	cbnz	r3, 8011cd4 <__swbuf_r+0x32>
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f000 f82b 	bl	8011d20 <__swsetup_r>
 8011cca:	b118      	cbz	r0, 8011cd4 <__swbuf_r+0x32>
 8011ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8011cd0:	4638      	mov	r0, r7
 8011cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cd4:	6823      	ldr	r3, [r4, #0]
 8011cd6:	6922      	ldr	r2, [r4, #16]
 8011cd8:	1a98      	subs	r0, r3, r2
 8011cda:	6963      	ldr	r3, [r4, #20]
 8011cdc:	b2f6      	uxtb	r6, r6
 8011cde:	4283      	cmp	r3, r0
 8011ce0:	4637      	mov	r7, r6
 8011ce2:	dc05      	bgt.n	8011cf0 <__swbuf_r+0x4e>
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	f001 fd92 	bl	8013810 <_fflush_r>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d1ed      	bne.n	8011ccc <__swbuf_r+0x2a>
 8011cf0:	68a3      	ldr	r3, [r4, #8]
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	60a3      	str	r3, [r4, #8]
 8011cf6:	6823      	ldr	r3, [r4, #0]
 8011cf8:	1c5a      	adds	r2, r3, #1
 8011cfa:	6022      	str	r2, [r4, #0]
 8011cfc:	701e      	strb	r6, [r3, #0]
 8011cfe:	6962      	ldr	r2, [r4, #20]
 8011d00:	1c43      	adds	r3, r0, #1
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d004      	beq.n	8011d10 <__swbuf_r+0x6e>
 8011d06:	89a3      	ldrh	r3, [r4, #12]
 8011d08:	07db      	lsls	r3, r3, #31
 8011d0a:	d5e1      	bpl.n	8011cd0 <__swbuf_r+0x2e>
 8011d0c:	2e0a      	cmp	r6, #10
 8011d0e:	d1df      	bne.n	8011cd0 <__swbuf_r+0x2e>
 8011d10:	4621      	mov	r1, r4
 8011d12:	4628      	mov	r0, r5
 8011d14:	f001 fd7c 	bl	8013810 <_fflush_r>
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	d0d9      	beq.n	8011cd0 <__swbuf_r+0x2e>
 8011d1c:	e7d6      	b.n	8011ccc <__swbuf_r+0x2a>
	...

08011d20 <__swsetup_r>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	4b29      	ldr	r3, [pc, #164]	@ (8011dc8 <__swsetup_r+0xa8>)
 8011d24:	4605      	mov	r5, r0
 8011d26:	6818      	ldr	r0, [r3, #0]
 8011d28:	460c      	mov	r4, r1
 8011d2a:	b118      	cbz	r0, 8011d34 <__swsetup_r+0x14>
 8011d2c:	6a03      	ldr	r3, [r0, #32]
 8011d2e:	b90b      	cbnz	r3, 8011d34 <__swsetup_r+0x14>
 8011d30:	f7ff fe1a 	bl	8011968 <__sinit>
 8011d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d38:	0719      	lsls	r1, r3, #28
 8011d3a:	d422      	bmi.n	8011d82 <__swsetup_r+0x62>
 8011d3c:	06da      	lsls	r2, r3, #27
 8011d3e:	d407      	bmi.n	8011d50 <__swsetup_r+0x30>
 8011d40:	2209      	movs	r2, #9
 8011d42:	602a      	str	r2, [r5, #0]
 8011d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d48:	81a3      	strh	r3, [r4, #12]
 8011d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d4e:	e033      	b.n	8011db8 <__swsetup_r+0x98>
 8011d50:	0758      	lsls	r0, r3, #29
 8011d52:	d512      	bpl.n	8011d7a <__swsetup_r+0x5a>
 8011d54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d56:	b141      	cbz	r1, 8011d6a <__swsetup_r+0x4a>
 8011d58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d5c:	4299      	cmp	r1, r3
 8011d5e:	d002      	beq.n	8011d66 <__swsetup_r+0x46>
 8011d60:	4628      	mov	r0, r5
 8011d62:	f000 ff0d 	bl	8012b80 <_free_r>
 8011d66:	2300      	movs	r3, #0
 8011d68:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d6a:	89a3      	ldrh	r3, [r4, #12]
 8011d6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d70:	81a3      	strh	r3, [r4, #12]
 8011d72:	2300      	movs	r3, #0
 8011d74:	6063      	str	r3, [r4, #4]
 8011d76:	6923      	ldr	r3, [r4, #16]
 8011d78:	6023      	str	r3, [r4, #0]
 8011d7a:	89a3      	ldrh	r3, [r4, #12]
 8011d7c:	f043 0308 	orr.w	r3, r3, #8
 8011d80:	81a3      	strh	r3, [r4, #12]
 8011d82:	6923      	ldr	r3, [r4, #16]
 8011d84:	b94b      	cbnz	r3, 8011d9a <__swsetup_r+0x7a>
 8011d86:	89a3      	ldrh	r3, [r4, #12]
 8011d88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d90:	d003      	beq.n	8011d9a <__swsetup_r+0x7a>
 8011d92:	4621      	mov	r1, r4
 8011d94:	4628      	mov	r0, r5
 8011d96:	f001 fd89 	bl	80138ac <__smakebuf_r>
 8011d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d9e:	f013 0201 	ands.w	r2, r3, #1
 8011da2:	d00a      	beq.n	8011dba <__swsetup_r+0x9a>
 8011da4:	2200      	movs	r2, #0
 8011da6:	60a2      	str	r2, [r4, #8]
 8011da8:	6962      	ldr	r2, [r4, #20]
 8011daa:	4252      	negs	r2, r2
 8011dac:	61a2      	str	r2, [r4, #24]
 8011dae:	6922      	ldr	r2, [r4, #16]
 8011db0:	b942      	cbnz	r2, 8011dc4 <__swsetup_r+0xa4>
 8011db2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011db6:	d1c5      	bne.n	8011d44 <__swsetup_r+0x24>
 8011db8:	bd38      	pop	{r3, r4, r5, pc}
 8011dba:	0799      	lsls	r1, r3, #30
 8011dbc:	bf58      	it	pl
 8011dbe:	6962      	ldrpl	r2, [r4, #20]
 8011dc0:	60a2      	str	r2, [r4, #8]
 8011dc2:	e7f4      	b.n	8011dae <__swsetup_r+0x8e>
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	e7f7      	b.n	8011db8 <__swsetup_r+0x98>
 8011dc8:	200017b8 	.word	0x200017b8

08011dcc <memset>:
 8011dcc:	4402      	add	r2, r0
 8011dce:	4603      	mov	r3, r0
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d100      	bne.n	8011dd6 <memset+0xa>
 8011dd4:	4770      	bx	lr
 8011dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8011dda:	e7f9      	b.n	8011dd0 <memset+0x4>

08011ddc <_localeconv_r>:
 8011ddc:	4800      	ldr	r0, [pc, #0]	@ (8011de0 <_localeconv_r+0x4>)
 8011dde:	4770      	bx	lr
 8011de0:	200018f8 	.word	0x200018f8

08011de4 <_close_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	4d06      	ldr	r5, [pc, #24]	@ (8011e00 <_close_r+0x1c>)
 8011de8:	2300      	movs	r3, #0
 8011dea:	4604      	mov	r4, r0
 8011dec:	4608      	mov	r0, r1
 8011dee:	602b      	str	r3, [r5, #0]
 8011df0:	f7f1 ffe0 	bl	8003db4 <_close>
 8011df4:	1c43      	adds	r3, r0, #1
 8011df6:	d102      	bne.n	8011dfe <_close_r+0x1a>
 8011df8:	682b      	ldr	r3, [r5, #0]
 8011dfa:	b103      	cbz	r3, 8011dfe <_close_r+0x1a>
 8011dfc:	6023      	str	r3, [r4, #0]
 8011dfe:	bd38      	pop	{r3, r4, r5, pc}
 8011e00:	20001b20 	.word	0x20001b20

08011e04 <_lseek_r>:
 8011e04:	b538      	push	{r3, r4, r5, lr}
 8011e06:	4d07      	ldr	r5, [pc, #28]	@ (8011e24 <_lseek_r+0x20>)
 8011e08:	4604      	mov	r4, r0
 8011e0a:	4608      	mov	r0, r1
 8011e0c:	4611      	mov	r1, r2
 8011e0e:	2200      	movs	r2, #0
 8011e10:	602a      	str	r2, [r5, #0]
 8011e12:	461a      	mov	r2, r3
 8011e14:	f7f1 fff5 	bl	8003e02 <_lseek>
 8011e18:	1c43      	adds	r3, r0, #1
 8011e1a:	d102      	bne.n	8011e22 <_lseek_r+0x1e>
 8011e1c:	682b      	ldr	r3, [r5, #0]
 8011e1e:	b103      	cbz	r3, 8011e22 <_lseek_r+0x1e>
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	bd38      	pop	{r3, r4, r5, pc}
 8011e24:	20001b20 	.word	0x20001b20

08011e28 <_read_r>:
 8011e28:	b538      	push	{r3, r4, r5, lr}
 8011e2a:	4d07      	ldr	r5, [pc, #28]	@ (8011e48 <_read_r+0x20>)
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	4608      	mov	r0, r1
 8011e30:	4611      	mov	r1, r2
 8011e32:	2200      	movs	r2, #0
 8011e34:	602a      	str	r2, [r5, #0]
 8011e36:	461a      	mov	r2, r3
 8011e38:	f7f1 ff9f 	bl	8003d7a <_read>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_read_r+0x1e>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_read_r+0x1e>
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	20001b20 	.word	0x20001b20

08011e4c <_write_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	4d07      	ldr	r5, [pc, #28]	@ (8011e6c <_write_r+0x20>)
 8011e50:	4604      	mov	r4, r0
 8011e52:	4608      	mov	r0, r1
 8011e54:	4611      	mov	r1, r2
 8011e56:	2200      	movs	r2, #0
 8011e58:	602a      	str	r2, [r5, #0]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	f7fb fd5b 	bl	800d916 <_write>
 8011e60:	1c43      	adds	r3, r0, #1
 8011e62:	d102      	bne.n	8011e6a <_write_r+0x1e>
 8011e64:	682b      	ldr	r3, [r5, #0]
 8011e66:	b103      	cbz	r3, 8011e6a <_write_r+0x1e>
 8011e68:	6023      	str	r3, [r4, #0]
 8011e6a:	bd38      	pop	{r3, r4, r5, pc}
 8011e6c:	20001b20 	.word	0x20001b20

08011e70 <__errno>:
 8011e70:	4b01      	ldr	r3, [pc, #4]	@ (8011e78 <__errno+0x8>)
 8011e72:	6818      	ldr	r0, [r3, #0]
 8011e74:	4770      	bx	lr
 8011e76:	bf00      	nop
 8011e78:	200017b8 	.word	0x200017b8

08011e7c <__libc_init_array>:
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8011eb4 <__libc_init_array+0x38>)
 8011e80:	4c0d      	ldr	r4, [pc, #52]	@ (8011eb8 <__libc_init_array+0x3c>)
 8011e82:	1b64      	subs	r4, r4, r5
 8011e84:	10a4      	asrs	r4, r4, #2
 8011e86:	2600      	movs	r6, #0
 8011e88:	42a6      	cmp	r6, r4
 8011e8a:	d109      	bne.n	8011ea0 <__libc_init_array+0x24>
 8011e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8011ebc <__libc_init_array+0x40>)
 8011e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8011ec0 <__libc_init_array+0x44>)
 8011e90:	f001 fe2a 	bl	8013ae8 <_init>
 8011e94:	1b64      	subs	r4, r4, r5
 8011e96:	10a4      	asrs	r4, r4, #2
 8011e98:	2600      	movs	r6, #0
 8011e9a:	42a6      	cmp	r6, r4
 8011e9c:	d105      	bne.n	8011eaa <__libc_init_array+0x2e>
 8011e9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ea4:	4798      	blx	r3
 8011ea6:	3601      	adds	r6, #1
 8011ea8:	e7ee      	b.n	8011e88 <__libc_init_array+0xc>
 8011eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8011eae:	4798      	blx	r3
 8011eb0:	3601      	adds	r6, #1
 8011eb2:	e7f2      	b.n	8011e9a <__libc_init_array+0x1e>
 8011eb4:	080145f0 	.word	0x080145f0
 8011eb8:	080145f0 	.word	0x080145f0
 8011ebc:	080145f0 	.word	0x080145f0
 8011ec0:	080145f4 	.word	0x080145f4

08011ec4 <__retarget_lock_init_recursive>:
 8011ec4:	4770      	bx	lr

08011ec6 <__retarget_lock_acquire_recursive>:
 8011ec6:	4770      	bx	lr

08011ec8 <__retarget_lock_release_recursive>:
 8011ec8:	4770      	bx	lr

08011eca <memcpy>:
 8011eca:	440a      	add	r2, r1
 8011ecc:	4291      	cmp	r1, r2
 8011ece:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ed2:	d100      	bne.n	8011ed6 <memcpy+0xc>
 8011ed4:	4770      	bx	lr
 8011ed6:	b510      	push	{r4, lr}
 8011ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ee0:	4291      	cmp	r1, r2
 8011ee2:	d1f9      	bne.n	8011ed8 <memcpy+0xe>
 8011ee4:	bd10      	pop	{r4, pc}

08011ee6 <quorem>:
 8011ee6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eea:	6903      	ldr	r3, [r0, #16]
 8011eec:	690c      	ldr	r4, [r1, #16]
 8011eee:	42a3      	cmp	r3, r4
 8011ef0:	4607      	mov	r7, r0
 8011ef2:	db7e      	blt.n	8011ff2 <quorem+0x10c>
 8011ef4:	3c01      	subs	r4, #1
 8011ef6:	f101 0814 	add.w	r8, r1, #20
 8011efa:	00a3      	lsls	r3, r4, #2
 8011efc:	f100 0514 	add.w	r5, r0, #20
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f06:	9301      	str	r3, [sp, #4]
 8011f08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f10:	3301      	adds	r3, #1
 8011f12:	429a      	cmp	r2, r3
 8011f14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f18:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f1c:	d32e      	bcc.n	8011f7c <quorem+0x96>
 8011f1e:	f04f 0a00 	mov.w	sl, #0
 8011f22:	46c4      	mov	ip, r8
 8011f24:	46ae      	mov	lr, r5
 8011f26:	46d3      	mov	fp, sl
 8011f28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011f2c:	b298      	uxth	r0, r3
 8011f2e:	fb06 a000 	mla	r0, r6, r0, sl
 8011f32:	0c02      	lsrs	r2, r0, #16
 8011f34:	0c1b      	lsrs	r3, r3, #16
 8011f36:	fb06 2303 	mla	r3, r6, r3, r2
 8011f3a:	f8de 2000 	ldr.w	r2, [lr]
 8011f3e:	b280      	uxth	r0, r0
 8011f40:	b292      	uxth	r2, r2
 8011f42:	1a12      	subs	r2, r2, r0
 8011f44:	445a      	add	r2, fp
 8011f46:	f8de 0000 	ldr.w	r0, [lr]
 8011f4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011f54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011f58:	b292      	uxth	r2, r2
 8011f5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011f5e:	45e1      	cmp	r9, ip
 8011f60:	f84e 2b04 	str.w	r2, [lr], #4
 8011f64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011f68:	d2de      	bcs.n	8011f28 <quorem+0x42>
 8011f6a:	9b00      	ldr	r3, [sp, #0]
 8011f6c:	58eb      	ldr	r3, [r5, r3]
 8011f6e:	b92b      	cbnz	r3, 8011f7c <quorem+0x96>
 8011f70:	9b01      	ldr	r3, [sp, #4]
 8011f72:	3b04      	subs	r3, #4
 8011f74:	429d      	cmp	r5, r3
 8011f76:	461a      	mov	r2, r3
 8011f78:	d32f      	bcc.n	8011fda <quorem+0xf4>
 8011f7a:	613c      	str	r4, [r7, #16]
 8011f7c:	4638      	mov	r0, r7
 8011f7e:	f001 f979 	bl	8013274 <__mcmp>
 8011f82:	2800      	cmp	r0, #0
 8011f84:	db25      	blt.n	8011fd2 <quorem+0xec>
 8011f86:	4629      	mov	r1, r5
 8011f88:	2000      	movs	r0, #0
 8011f8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f8e:	f8d1 c000 	ldr.w	ip, [r1]
 8011f92:	fa1f fe82 	uxth.w	lr, r2
 8011f96:	fa1f f38c 	uxth.w	r3, ip
 8011f9a:	eba3 030e 	sub.w	r3, r3, lr
 8011f9e:	4403      	add	r3, r0
 8011fa0:	0c12      	lsrs	r2, r2, #16
 8011fa2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011fa6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fb0:	45c1      	cmp	r9, r8
 8011fb2:	f841 3b04 	str.w	r3, [r1], #4
 8011fb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011fba:	d2e6      	bcs.n	8011f8a <quorem+0xa4>
 8011fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fc4:	b922      	cbnz	r2, 8011fd0 <quorem+0xea>
 8011fc6:	3b04      	subs	r3, #4
 8011fc8:	429d      	cmp	r5, r3
 8011fca:	461a      	mov	r2, r3
 8011fcc:	d30b      	bcc.n	8011fe6 <quorem+0x100>
 8011fce:	613c      	str	r4, [r7, #16]
 8011fd0:	3601      	adds	r6, #1
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	b003      	add	sp, #12
 8011fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fda:	6812      	ldr	r2, [r2, #0]
 8011fdc:	3b04      	subs	r3, #4
 8011fde:	2a00      	cmp	r2, #0
 8011fe0:	d1cb      	bne.n	8011f7a <quorem+0x94>
 8011fe2:	3c01      	subs	r4, #1
 8011fe4:	e7c6      	b.n	8011f74 <quorem+0x8e>
 8011fe6:	6812      	ldr	r2, [r2, #0]
 8011fe8:	3b04      	subs	r3, #4
 8011fea:	2a00      	cmp	r2, #0
 8011fec:	d1ef      	bne.n	8011fce <quorem+0xe8>
 8011fee:	3c01      	subs	r4, #1
 8011ff0:	e7ea      	b.n	8011fc8 <quorem+0xe2>
 8011ff2:	2000      	movs	r0, #0
 8011ff4:	e7ee      	b.n	8011fd4 <quorem+0xee>
	...

08011ff8 <_dtoa_r>:
 8011ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ffc:	69c7      	ldr	r7, [r0, #28]
 8011ffe:	b099      	sub	sp, #100	@ 0x64
 8012000:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012004:	ec55 4b10 	vmov	r4, r5, d0
 8012008:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801200a:	9109      	str	r1, [sp, #36]	@ 0x24
 801200c:	4683      	mov	fp, r0
 801200e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012010:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012012:	b97f      	cbnz	r7, 8012034 <_dtoa_r+0x3c>
 8012014:	2010      	movs	r0, #16
 8012016:	f000 fdfd 	bl	8012c14 <malloc>
 801201a:	4602      	mov	r2, r0
 801201c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012020:	b920      	cbnz	r0, 801202c <_dtoa_r+0x34>
 8012022:	4ba7      	ldr	r3, [pc, #668]	@ (80122c0 <_dtoa_r+0x2c8>)
 8012024:	21ef      	movs	r1, #239	@ 0xef
 8012026:	48a7      	ldr	r0, [pc, #668]	@ (80122c4 <_dtoa_r+0x2cc>)
 8012028:	f001 fcae 	bl	8013988 <__assert_func>
 801202c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012030:	6007      	str	r7, [r0, #0]
 8012032:	60c7      	str	r7, [r0, #12]
 8012034:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012038:	6819      	ldr	r1, [r3, #0]
 801203a:	b159      	cbz	r1, 8012054 <_dtoa_r+0x5c>
 801203c:	685a      	ldr	r2, [r3, #4]
 801203e:	604a      	str	r2, [r1, #4]
 8012040:	2301      	movs	r3, #1
 8012042:	4093      	lsls	r3, r2
 8012044:	608b      	str	r3, [r1, #8]
 8012046:	4658      	mov	r0, fp
 8012048:	f000 feda 	bl	8012e00 <_Bfree>
 801204c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012050:	2200      	movs	r2, #0
 8012052:	601a      	str	r2, [r3, #0]
 8012054:	1e2b      	subs	r3, r5, #0
 8012056:	bfb9      	ittee	lt
 8012058:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801205c:	9303      	strlt	r3, [sp, #12]
 801205e:	2300      	movge	r3, #0
 8012060:	6033      	strge	r3, [r6, #0]
 8012062:	9f03      	ldr	r7, [sp, #12]
 8012064:	4b98      	ldr	r3, [pc, #608]	@ (80122c8 <_dtoa_r+0x2d0>)
 8012066:	bfbc      	itt	lt
 8012068:	2201      	movlt	r2, #1
 801206a:	6032      	strlt	r2, [r6, #0]
 801206c:	43bb      	bics	r3, r7
 801206e:	d112      	bne.n	8012096 <_dtoa_r+0x9e>
 8012070:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012072:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012076:	6013      	str	r3, [r2, #0]
 8012078:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801207c:	4323      	orrs	r3, r4
 801207e:	f000 854d 	beq.w	8012b1c <_dtoa_r+0xb24>
 8012082:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012084:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80122dc <_dtoa_r+0x2e4>
 8012088:	2b00      	cmp	r3, #0
 801208a:	f000 854f 	beq.w	8012b2c <_dtoa_r+0xb34>
 801208e:	f10a 0303 	add.w	r3, sl, #3
 8012092:	f000 bd49 	b.w	8012b28 <_dtoa_r+0xb30>
 8012096:	ed9d 7b02 	vldr	d7, [sp, #8]
 801209a:	2200      	movs	r2, #0
 801209c:	ec51 0b17 	vmov	r0, r1, d7
 80120a0:	2300      	movs	r3, #0
 80120a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80120a6:	f7ee fd37 	bl	8000b18 <__aeabi_dcmpeq>
 80120aa:	4680      	mov	r8, r0
 80120ac:	b158      	cbz	r0, 80120c6 <_dtoa_r+0xce>
 80120ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80120b0:	2301      	movs	r3, #1
 80120b2:	6013      	str	r3, [r2, #0]
 80120b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80120b6:	b113      	cbz	r3, 80120be <_dtoa_r+0xc6>
 80120b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80120ba:	4b84      	ldr	r3, [pc, #528]	@ (80122cc <_dtoa_r+0x2d4>)
 80120bc:	6013      	str	r3, [r2, #0]
 80120be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80122e0 <_dtoa_r+0x2e8>
 80120c2:	f000 bd33 	b.w	8012b2c <_dtoa_r+0xb34>
 80120c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80120ca:	aa16      	add	r2, sp, #88	@ 0x58
 80120cc:	a917      	add	r1, sp, #92	@ 0x5c
 80120ce:	4658      	mov	r0, fp
 80120d0:	f001 f980 	bl	80133d4 <__d2b>
 80120d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80120d8:	4681      	mov	r9, r0
 80120da:	2e00      	cmp	r6, #0
 80120dc:	d077      	beq.n	80121ce <_dtoa_r+0x1d6>
 80120de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80120e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80120e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80120ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80120f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80120f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80120f8:	4619      	mov	r1, r3
 80120fa:	2200      	movs	r2, #0
 80120fc:	4b74      	ldr	r3, [pc, #464]	@ (80122d0 <_dtoa_r+0x2d8>)
 80120fe:	f7ee f8eb 	bl	80002d8 <__aeabi_dsub>
 8012102:	a369      	add	r3, pc, #420	@ (adr r3, 80122a8 <_dtoa_r+0x2b0>)
 8012104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012108:	f7ee fa9e 	bl	8000648 <__aeabi_dmul>
 801210c:	a368      	add	r3, pc, #416	@ (adr r3, 80122b0 <_dtoa_r+0x2b8>)
 801210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012112:	f7ee f8e3 	bl	80002dc <__adddf3>
 8012116:	4604      	mov	r4, r0
 8012118:	4630      	mov	r0, r6
 801211a:	460d      	mov	r5, r1
 801211c:	f7ee fa2a 	bl	8000574 <__aeabi_i2d>
 8012120:	a365      	add	r3, pc, #404	@ (adr r3, 80122b8 <_dtoa_r+0x2c0>)
 8012122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012126:	f7ee fa8f 	bl	8000648 <__aeabi_dmul>
 801212a:	4602      	mov	r2, r0
 801212c:	460b      	mov	r3, r1
 801212e:	4620      	mov	r0, r4
 8012130:	4629      	mov	r1, r5
 8012132:	f7ee f8d3 	bl	80002dc <__adddf3>
 8012136:	4604      	mov	r4, r0
 8012138:	460d      	mov	r5, r1
 801213a:	f7ee fd35 	bl	8000ba8 <__aeabi_d2iz>
 801213e:	2200      	movs	r2, #0
 8012140:	4607      	mov	r7, r0
 8012142:	2300      	movs	r3, #0
 8012144:	4620      	mov	r0, r4
 8012146:	4629      	mov	r1, r5
 8012148:	f7ee fcf0 	bl	8000b2c <__aeabi_dcmplt>
 801214c:	b140      	cbz	r0, 8012160 <_dtoa_r+0x168>
 801214e:	4638      	mov	r0, r7
 8012150:	f7ee fa10 	bl	8000574 <__aeabi_i2d>
 8012154:	4622      	mov	r2, r4
 8012156:	462b      	mov	r3, r5
 8012158:	f7ee fcde 	bl	8000b18 <__aeabi_dcmpeq>
 801215c:	b900      	cbnz	r0, 8012160 <_dtoa_r+0x168>
 801215e:	3f01      	subs	r7, #1
 8012160:	2f16      	cmp	r7, #22
 8012162:	d851      	bhi.n	8012208 <_dtoa_r+0x210>
 8012164:	4b5b      	ldr	r3, [pc, #364]	@ (80122d4 <_dtoa_r+0x2dc>)
 8012166:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012172:	f7ee fcdb 	bl	8000b2c <__aeabi_dcmplt>
 8012176:	2800      	cmp	r0, #0
 8012178:	d048      	beq.n	801220c <_dtoa_r+0x214>
 801217a:	3f01      	subs	r7, #1
 801217c:	2300      	movs	r3, #0
 801217e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012180:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012182:	1b9b      	subs	r3, r3, r6
 8012184:	1e5a      	subs	r2, r3, #1
 8012186:	bf44      	itt	mi
 8012188:	f1c3 0801 	rsbmi	r8, r3, #1
 801218c:	2300      	movmi	r3, #0
 801218e:	9208      	str	r2, [sp, #32]
 8012190:	bf54      	ite	pl
 8012192:	f04f 0800 	movpl.w	r8, #0
 8012196:	9308      	strmi	r3, [sp, #32]
 8012198:	2f00      	cmp	r7, #0
 801219a:	db39      	blt.n	8012210 <_dtoa_r+0x218>
 801219c:	9b08      	ldr	r3, [sp, #32]
 801219e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80121a0:	443b      	add	r3, r7
 80121a2:	9308      	str	r3, [sp, #32]
 80121a4:	2300      	movs	r3, #0
 80121a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80121a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121aa:	2b09      	cmp	r3, #9
 80121ac:	d864      	bhi.n	8012278 <_dtoa_r+0x280>
 80121ae:	2b05      	cmp	r3, #5
 80121b0:	bfc4      	itt	gt
 80121b2:	3b04      	subgt	r3, #4
 80121b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80121b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121b8:	f1a3 0302 	sub.w	r3, r3, #2
 80121bc:	bfcc      	ite	gt
 80121be:	2400      	movgt	r4, #0
 80121c0:	2401      	movle	r4, #1
 80121c2:	2b03      	cmp	r3, #3
 80121c4:	d863      	bhi.n	801228e <_dtoa_r+0x296>
 80121c6:	e8df f003 	tbb	[pc, r3]
 80121ca:	372a      	.short	0x372a
 80121cc:	5535      	.short	0x5535
 80121ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80121d2:	441e      	add	r6, r3
 80121d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80121d8:	2b20      	cmp	r3, #32
 80121da:	bfc1      	itttt	gt
 80121dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80121e0:	409f      	lslgt	r7, r3
 80121e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80121e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80121ea:	bfd6      	itet	le
 80121ec:	f1c3 0320 	rsble	r3, r3, #32
 80121f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80121f4:	fa04 f003 	lslle.w	r0, r4, r3
 80121f8:	f7ee f9ac 	bl	8000554 <__aeabi_ui2d>
 80121fc:	2201      	movs	r2, #1
 80121fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012202:	3e01      	subs	r6, #1
 8012204:	9214      	str	r2, [sp, #80]	@ 0x50
 8012206:	e777      	b.n	80120f8 <_dtoa_r+0x100>
 8012208:	2301      	movs	r3, #1
 801220a:	e7b8      	b.n	801217e <_dtoa_r+0x186>
 801220c:	9012      	str	r0, [sp, #72]	@ 0x48
 801220e:	e7b7      	b.n	8012180 <_dtoa_r+0x188>
 8012210:	427b      	negs	r3, r7
 8012212:	930a      	str	r3, [sp, #40]	@ 0x28
 8012214:	2300      	movs	r3, #0
 8012216:	eba8 0807 	sub.w	r8, r8, r7
 801221a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801221c:	e7c4      	b.n	80121a8 <_dtoa_r+0x1b0>
 801221e:	2300      	movs	r3, #0
 8012220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012224:	2b00      	cmp	r3, #0
 8012226:	dc35      	bgt.n	8012294 <_dtoa_r+0x29c>
 8012228:	2301      	movs	r3, #1
 801222a:	9300      	str	r3, [sp, #0]
 801222c:	9307      	str	r3, [sp, #28]
 801222e:	461a      	mov	r2, r3
 8012230:	920e      	str	r2, [sp, #56]	@ 0x38
 8012232:	e00b      	b.n	801224c <_dtoa_r+0x254>
 8012234:	2301      	movs	r3, #1
 8012236:	e7f3      	b.n	8012220 <_dtoa_r+0x228>
 8012238:	2300      	movs	r3, #0
 801223a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801223c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801223e:	18fb      	adds	r3, r7, r3
 8012240:	9300      	str	r3, [sp, #0]
 8012242:	3301      	adds	r3, #1
 8012244:	2b01      	cmp	r3, #1
 8012246:	9307      	str	r3, [sp, #28]
 8012248:	bfb8      	it	lt
 801224a:	2301      	movlt	r3, #1
 801224c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012250:	2100      	movs	r1, #0
 8012252:	2204      	movs	r2, #4
 8012254:	f102 0514 	add.w	r5, r2, #20
 8012258:	429d      	cmp	r5, r3
 801225a:	d91f      	bls.n	801229c <_dtoa_r+0x2a4>
 801225c:	6041      	str	r1, [r0, #4]
 801225e:	4658      	mov	r0, fp
 8012260:	f000 fd8e 	bl	8012d80 <_Balloc>
 8012264:	4682      	mov	sl, r0
 8012266:	2800      	cmp	r0, #0
 8012268:	d13c      	bne.n	80122e4 <_dtoa_r+0x2ec>
 801226a:	4b1b      	ldr	r3, [pc, #108]	@ (80122d8 <_dtoa_r+0x2e0>)
 801226c:	4602      	mov	r2, r0
 801226e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012272:	e6d8      	b.n	8012026 <_dtoa_r+0x2e>
 8012274:	2301      	movs	r3, #1
 8012276:	e7e0      	b.n	801223a <_dtoa_r+0x242>
 8012278:	2401      	movs	r4, #1
 801227a:	2300      	movs	r3, #0
 801227c:	9309      	str	r3, [sp, #36]	@ 0x24
 801227e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012280:	f04f 33ff 	mov.w	r3, #4294967295
 8012284:	9300      	str	r3, [sp, #0]
 8012286:	9307      	str	r3, [sp, #28]
 8012288:	2200      	movs	r2, #0
 801228a:	2312      	movs	r3, #18
 801228c:	e7d0      	b.n	8012230 <_dtoa_r+0x238>
 801228e:	2301      	movs	r3, #1
 8012290:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012292:	e7f5      	b.n	8012280 <_dtoa_r+0x288>
 8012294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012296:	9300      	str	r3, [sp, #0]
 8012298:	9307      	str	r3, [sp, #28]
 801229a:	e7d7      	b.n	801224c <_dtoa_r+0x254>
 801229c:	3101      	adds	r1, #1
 801229e:	0052      	lsls	r2, r2, #1
 80122a0:	e7d8      	b.n	8012254 <_dtoa_r+0x25c>
 80122a2:	bf00      	nop
 80122a4:	f3af 8000 	nop.w
 80122a8:	636f4361 	.word	0x636f4361
 80122ac:	3fd287a7 	.word	0x3fd287a7
 80122b0:	8b60c8b3 	.word	0x8b60c8b3
 80122b4:	3fc68a28 	.word	0x3fc68a28
 80122b8:	509f79fb 	.word	0x509f79fb
 80122bc:	3fd34413 	.word	0x3fd34413
 80122c0:	080142b9 	.word	0x080142b9
 80122c4:	080142d0 	.word	0x080142d0
 80122c8:	7ff00000 	.word	0x7ff00000
 80122cc:	08014289 	.word	0x08014289
 80122d0:	3ff80000 	.word	0x3ff80000
 80122d4:	080143c8 	.word	0x080143c8
 80122d8:	08014328 	.word	0x08014328
 80122dc:	080142b5 	.word	0x080142b5
 80122e0:	08014288 	.word	0x08014288
 80122e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80122e8:	6018      	str	r0, [r3, #0]
 80122ea:	9b07      	ldr	r3, [sp, #28]
 80122ec:	2b0e      	cmp	r3, #14
 80122ee:	f200 80a4 	bhi.w	801243a <_dtoa_r+0x442>
 80122f2:	2c00      	cmp	r4, #0
 80122f4:	f000 80a1 	beq.w	801243a <_dtoa_r+0x442>
 80122f8:	2f00      	cmp	r7, #0
 80122fa:	dd33      	ble.n	8012364 <_dtoa_r+0x36c>
 80122fc:	4bad      	ldr	r3, [pc, #692]	@ (80125b4 <_dtoa_r+0x5bc>)
 80122fe:	f007 020f 	and.w	r2, r7, #15
 8012302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012306:	ed93 7b00 	vldr	d7, [r3]
 801230a:	05f8      	lsls	r0, r7, #23
 801230c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012310:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012314:	d516      	bpl.n	8012344 <_dtoa_r+0x34c>
 8012316:	4ba8      	ldr	r3, [pc, #672]	@ (80125b8 <_dtoa_r+0x5c0>)
 8012318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801231c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012320:	f7ee fabc 	bl	800089c <__aeabi_ddiv>
 8012324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012328:	f004 040f 	and.w	r4, r4, #15
 801232c:	2603      	movs	r6, #3
 801232e:	4da2      	ldr	r5, [pc, #648]	@ (80125b8 <_dtoa_r+0x5c0>)
 8012330:	b954      	cbnz	r4, 8012348 <_dtoa_r+0x350>
 8012332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801233a:	f7ee faaf 	bl	800089c <__aeabi_ddiv>
 801233e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012342:	e028      	b.n	8012396 <_dtoa_r+0x39e>
 8012344:	2602      	movs	r6, #2
 8012346:	e7f2      	b.n	801232e <_dtoa_r+0x336>
 8012348:	07e1      	lsls	r1, r4, #31
 801234a:	d508      	bpl.n	801235e <_dtoa_r+0x366>
 801234c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012350:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012354:	f7ee f978 	bl	8000648 <__aeabi_dmul>
 8012358:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801235c:	3601      	adds	r6, #1
 801235e:	1064      	asrs	r4, r4, #1
 8012360:	3508      	adds	r5, #8
 8012362:	e7e5      	b.n	8012330 <_dtoa_r+0x338>
 8012364:	f000 80d2 	beq.w	801250c <_dtoa_r+0x514>
 8012368:	427c      	negs	r4, r7
 801236a:	4b92      	ldr	r3, [pc, #584]	@ (80125b4 <_dtoa_r+0x5bc>)
 801236c:	4d92      	ldr	r5, [pc, #584]	@ (80125b8 <_dtoa_r+0x5c0>)
 801236e:	f004 020f 	and.w	r2, r4, #15
 8012372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801237e:	f7ee f963 	bl	8000648 <__aeabi_dmul>
 8012382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012386:	1124      	asrs	r4, r4, #4
 8012388:	2300      	movs	r3, #0
 801238a:	2602      	movs	r6, #2
 801238c:	2c00      	cmp	r4, #0
 801238e:	f040 80b2 	bne.w	80124f6 <_dtoa_r+0x4fe>
 8012392:	2b00      	cmp	r3, #0
 8012394:	d1d3      	bne.n	801233e <_dtoa_r+0x346>
 8012396:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012398:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801239c:	2b00      	cmp	r3, #0
 801239e:	f000 80b7 	beq.w	8012510 <_dtoa_r+0x518>
 80123a2:	4b86      	ldr	r3, [pc, #536]	@ (80125bc <_dtoa_r+0x5c4>)
 80123a4:	2200      	movs	r2, #0
 80123a6:	4620      	mov	r0, r4
 80123a8:	4629      	mov	r1, r5
 80123aa:	f7ee fbbf 	bl	8000b2c <__aeabi_dcmplt>
 80123ae:	2800      	cmp	r0, #0
 80123b0:	f000 80ae 	beq.w	8012510 <_dtoa_r+0x518>
 80123b4:	9b07      	ldr	r3, [sp, #28]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f000 80aa 	beq.w	8012510 <_dtoa_r+0x518>
 80123bc:	9b00      	ldr	r3, [sp, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	dd37      	ble.n	8012432 <_dtoa_r+0x43a>
 80123c2:	1e7b      	subs	r3, r7, #1
 80123c4:	9304      	str	r3, [sp, #16]
 80123c6:	4620      	mov	r0, r4
 80123c8:	4b7d      	ldr	r3, [pc, #500]	@ (80125c0 <_dtoa_r+0x5c8>)
 80123ca:	2200      	movs	r2, #0
 80123cc:	4629      	mov	r1, r5
 80123ce:	f7ee f93b 	bl	8000648 <__aeabi_dmul>
 80123d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123d6:	9c00      	ldr	r4, [sp, #0]
 80123d8:	3601      	adds	r6, #1
 80123da:	4630      	mov	r0, r6
 80123dc:	f7ee f8ca 	bl	8000574 <__aeabi_i2d>
 80123e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123e4:	f7ee f930 	bl	8000648 <__aeabi_dmul>
 80123e8:	4b76      	ldr	r3, [pc, #472]	@ (80125c4 <_dtoa_r+0x5cc>)
 80123ea:	2200      	movs	r2, #0
 80123ec:	f7ed ff76 	bl	80002dc <__adddf3>
 80123f0:	4605      	mov	r5, r0
 80123f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80123f6:	2c00      	cmp	r4, #0
 80123f8:	f040 808d 	bne.w	8012516 <_dtoa_r+0x51e>
 80123fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012400:	4b71      	ldr	r3, [pc, #452]	@ (80125c8 <_dtoa_r+0x5d0>)
 8012402:	2200      	movs	r2, #0
 8012404:	f7ed ff68 	bl	80002d8 <__aeabi_dsub>
 8012408:	4602      	mov	r2, r0
 801240a:	460b      	mov	r3, r1
 801240c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012410:	462a      	mov	r2, r5
 8012412:	4633      	mov	r3, r6
 8012414:	f7ee fba8 	bl	8000b68 <__aeabi_dcmpgt>
 8012418:	2800      	cmp	r0, #0
 801241a:	f040 828b 	bne.w	8012934 <_dtoa_r+0x93c>
 801241e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012422:	462a      	mov	r2, r5
 8012424:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012428:	f7ee fb80 	bl	8000b2c <__aeabi_dcmplt>
 801242c:	2800      	cmp	r0, #0
 801242e:	f040 8128 	bne.w	8012682 <_dtoa_r+0x68a>
 8012432:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012436:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801243a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801243c:	2b00      	cmp	r3, #0
 801243e:	f2c0 815a 	blt.w	80126f6 <_dtoa_r+0x6fe>
 8012442:	2f0e      	cmp	r7, #14
 8012444:	f300 8157 	bgt.w	80126f6 <_dtoa_r+0x6fe>
 8012448:	4b5a      	ldr	r3, [pc, #360]	@ (80125b4 <_dtoa_r+0x5bc>)
 801244a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801244e:	ed93 7b00 	vldr	d7, [r3]
 8012452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012454:	2b00      	cmp	r3, #0
 8012456:	ed8d 7b00 	vstr	d7, [sp]
 801245a:	da03      	bge.n	8012464 <_dtoa_r+0x46c>
 801245c:	9b07      	ldr	r3, [sp, #28]
 801245e:	2b00      	cmp	r3, #0
 8012460:	f340 8101 	ble.w	8012666 <_dtoa_r+0x66e>
 8012464:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012468:	4656      	mov	r6, sl
 801246a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801246e:	4620      	mov	r0, r4
 8012470:	4629      	mov	r1, r5
 8012472:	f7ee fa13 	bl	800089c <__aeabi_ddiv>
 8012476:	f7ee fb97 	bl	8000ba8 <__aeabi_d2iz>
 801247a:	4680      	mov	r8, r0
 801247c:	f7ee f87a 	bl	8000574 <__aeabi_i2d>
 8012480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012484:	f7ee f8e0 	bl	8000648 <__aeabi_dmul>
 8012488:	4602      	mov	r2, r0
 801248a:	460b      	mov	r3, r1
 801248c:	4620      	mov	r0, r4
 801248e:	4629      	mov	r1, r5
 8012490:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012494:	f7ed ff20 	bl	80002d8 <__aeabi_dsub>
 8012498:	f806 4b01 	strb.w	r4, [r6], #1
 801249c:	9d07      	ldr	r5, [sp, #28]
 801249e:	eba6 040a 	sub.w	r4, r6, sl
 80124a2:	42a5      	cmp	r5, r4
 80124a4:	4602      	mov	r2, r0
 80124a6:	460b      	mov	r3, r1
 80124a8:	f040 8117 	bne.w	80126da <_dtoa_r+0x6e2>
 80124ac:	f7ed ff16 	bl	80002dc <__adddf3>
 80124b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124b4:	4604      	mov	r4, r0
 80124b6:	460d      	mov	r5, r1
 80124b8:	f7ee fb56 	bl	8000b68 <__aeabi_dcmpgt>
 80124bc:	2800      	cmp	r0, #0
 80124be:	f040 80f9 	bne.w	80126b4 <_dtoa_r+0x6bc>
 80124c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124c6:	4620      	mov	r0, r4
 80124c8:	4629      	mov	r1, r5
 80124ca:	f7ee fb25 	bl	8000b18 <__aeabi_dcmpeq>
 80124ce:	b118      	cbz	r0, 80124d8 <_dtoa_r+0x4e0>
 80124d0:	f018 0f01 	tst.w	r8, #1
 80124d4:	f040 80ee 	bne.w	80126b4 <_dtoa_r+0x6bc>
 80124d8:	4649      	mov	r1, r9
 80124da:	4658      	mov	r0, fp
 80124dc:	f000 fc90 	bl	8012e00 <_Bfree>
 80124e0:	2300      	movs	r3, #0
 80124e2:	7033      	strb	r3, [r6, #0]
 80124e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80124e6:	3701      	adds	r7, #1
 80124e8:	601f      	str	r7, [r3, #0]
 80124ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f000 831d 	beq.w	8012b2c <_dtoa_r+0xb34>
 80124f2:	601e      	str	r6, [r3, #0]
 80124f4:	e31a      	b.n	8012b2c <_dtoa_r+0xb34>
 80124f6:	07e2      	lsls	r2, r4, #31
 80124f8:	d505      	bpl.n	8012506 <_dtoa_r+0x50e>
 80124fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80124fe:	f7ee f8a3 	bl	8000648 <__aeabi_dmul>
 8012502:	3601      	adds	r6, #1
 8012504:	2301      	movs	r3, #1
 8012506:	1064      	asrs	r4, r4, #1
 8012508:	3508      	adds	r5, #8
 801250a:	e73f      	b.n	801238c <_dtoa_r+0x394>
 801250c:	2602      	movs	r6, #2
 801250e:	e742      	b.n	8012396 <_dtoa_r+0x39e>
 8012510:	9c07      	ldr	r4, [sp, #28]
 8012512:	9704      	str	r7, [sp, #16]
 8012514:	e761      	b.n	80123da <_dtoa_r+0x3e2>
 8012516:	4b27      	ldr	r3, [pc, #156]	@ (80125b4 <_dtoa_r+0x5bc>)
 8012518:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801251a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801251e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012522:	4454      	add	r4, sl
 8012524:	2900      	cmp	r1, #0
 8012526:	d053      	beq.n	80125d0 <_dtoa_r+0x5d8>
 8012528:	4928      	ldr	r1, [pc, #160]	@ (80125cc <_dtoa_r+0x5d4>)
 801252a:	2000      	movs	r0, #0
 801252c:	f7ee f9b6 	bl	800089c <__aeabi_ddiv>
 8012530:	4633      	mov	r3, r6
 8012532:	462a      	mov	r2, r5
 8012534:	f7ed fed0 	bl	80002d8 <__aeabi_dsub>
 8012538:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801253c:	4656      	mov	r6, sl
 801253e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012542:	f7ee fb31 	bl	8000ba8 <__aeabi_d2iz>
 8012546:	4605      	mov	r5, r0
 8012548:	f7ee f814 	bl	8000574 <__aeabi_i2d>
 801254c:	4602      	mov	r2, r0
 801254e:	460b      	mov	r3, r1
 8012550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012554:	f7ed fec0 	bl	80002d8 <__aeabi_dsub>
 8012558:	3530      	adds	r5, #48	@ 0x30
 801255a:	4602      	mov	r2, r0
 801255c:	460b      	mov	r3, r1
 801255e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012562:	f806 5b01 	strb.w	r5, [r6], #1
 8012566:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801256a:	f7ee fadf 	bl	8000b2c <__aeabi_dcmplt>
 801256e:	2800      	cmp	r0, #0
 8012570:	d171      	bne.n	8012656 <_dtoa_r+0x65e>
 8012572:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012576:	4911      	ldr	r1, [pc, #68]	@ (80125bc <_dtoa_r+0x5c4>)
 8012578:	2000      	movs	r0, #0
 801257a:	f7ed fead 	bl	80002d8 <__aeabi_dsub>
 801257e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012582:	f7ee fad3 	bl	8000b2c <__aeabi_dcmplt>
 8012586:	2800      	cmp	r0, #0
 8012588:	f040 8095 	bne.w	80126b6 <_dtoa_r+0x6be>
 801258c:	42a6      	cmp	r6, r4
 801258e:	f43f af50 	beq.w	8012432 <_dtoa_r+0x43a>
 8012592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012596:	4b0a      	ldr	r3, [pc, #40]	@ (80125c0 <_dtoa_r+0x5c8>)
 8012598:	2200      	movs	r2, #0
 801259a:	f7ee f855 	bl	8000648 <__aeabi_dmul>
 801259e:	4b08      	ldr	r3, [pc, #32]	@ (80125c0 <_dtoa_r+0x5c8>)
 80125a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80125a4:	2200      	movs	r2, #0
 80125a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125aa:	f7ee f84d 	bl	8000648 <__aeabi_dmul>
 80125ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125b2:	e7c4      	b.n	801253e <_dtoa_r+0x546>
 80125b4:	080143c8 	.word	0x080143c8
 80125b8:	080143a0 	.word	0x080143a0
 80125bc:	3ff00000 	.word	0x3ff00000
 80125c0:	40240000 	.word	0x40240000
 80125c4:	401c0000 	.word	0x401c0000
 80125c8:	40140000 	.word	0x40140000
 80125cc:	3fe00000 	.word	0x3fe00000
 80125d0:	4631      	mov	r1, r6
 80125d2:	4628      	mov	r0, r5
 80125d4:	f7ee f838 	bl	8000648 <__aeabi_dmul>
 80125d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80125dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80125de:	4656      	mov	r6, sl
 80125e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125e4:	f7ee fae0 	bl	8000ba8 <__aeabi_d2iz>
 80125e8:	4605      	mov	r5, r0
 80125ea:	f7ed ffc3 	bl	8000574 <__aeabi_i2d>
 80125ee:	4602      	mov	r2, r0
 80125f0:	460b      	mov	r3, r1
 80125f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125f6:	f7ed fe6f 	bl	80002d8 <__aeabi_dsub>
 80125fa:	3530      	adds	r5, #48	@ 0x30
 80125fc:	f806 5b01 	strb.w	r5, [r6], #1
 8012600:	4602      	mov	r2, r0
 8012602:	460b      	mov	r3, r1
 8012604:	42a6      	cmp	r6, r4
 8012606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801260a:	f04f 0200 	mov.w	r2, #0
 801260e:	d124      	bne.n	801265a <_dtoa_r+0x662>
 8012610:	4bac      	ldr	r3, [pc, #688]	@ (80128c4 <_dtoa_r+0x8cc>)
 8012612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012616:	f7ed fe61 	bl	80002dc <__adddf3>
 801261a:	4602      	mov	r2, r0
 801261c:	460b      	mov	r3, r1
 801261e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012622:	f7ee faa1 	bl	8000b68 <__aeabi_dcmpgt>
 8012626:	2800      	cmp	r0, #0
 8012628:	d145      	bne.n	80126b6 <_dtoa_r+0x6be>
 801262a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801262e:	49a5      	ldr	r1, [pc, #660]	@ (80128c4 <_dtoa_r+0x8cc>)
 8012630:	2000      	movs	r0, #0
 8012632:	f7ed fe51 	bl	80002d8 <__aeabi_dsub>
 8012636:	4602      	mov	r2, r0
 8012638:	460b      	mov	r3, r1
 801263a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801263e:	f7ee fa75 	bl	8000b2c <__aeabi_dcmplt>
 8012642:	2800      	cmp	r0, #0
 8012644:	f43f aef5 	beq.w	8012432 <_dtoa_r+0x43a>
 8012648:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801264a:	1e73      	subs	r3, r6, #1
 801264c:	9315      	str	r3, [sp, #84]	@ 0x54
 801264e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012652:	2b30      	cmp	r3, #48	@ 0x30
 8012654:	d0f8      	beq.n	8012648 <_dtoa_r+0x650>
 8012656:	9f04      	ldr	r7, [sp, #16]
 8012658:	e73e      	b.n	80124d8 <_dtoa_r+0x4e0>
 801265a:	4b9b      	ldr	r3, [pc, #620]	@ (80128c8 <_dtoa_r+0x8d0>)
 801265c:	f7ed fff4 	bl	8000648 <__aeabi_dmul>
 8012660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012664:	e7bc      	b.n	80125e0 <_dtoa_r+0x5e8>
 8012666:	d10c      	bne.n	8012682 <_dtoa_r+0x68a>
 8012668:	4b98      	ldr	r3, [pc, #608]	@ (80128cc <_dtoa_r+0x8d4>)
 801266a:	2200      	movs	r2, #0
 801266c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012670:	f7ed ffea 	bl	8000648 <__aeabi_dmul>
 8012674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012678:	f7ee fa6c 	bl	8000b54 <__aeabi_dcmpge>
 801267c:	2800      	cmp	r0, #0
 801267e:	f000 8157 	beq.w	8012930 <_dtoa_r+0x938>
 8012682:	2400      	movs	r4, #0
 8012684:	4625      	mov	r5, r4
 8012686:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012688:	43db      	mvns	r3, r3
 801268a:	9304      	str	r3, [sp, #16]
 801268c:	4656      	mov	r6, sl
 801268e:	2700      	movs	r7, #0
 8012690:	4621      	mov	r1, r4
 8012692:	4658      	mov	r0, fp
 8012694:	f000 fbb4 	bl	8012e00 <_Bfree>
 8012698:	2d00      	cmp	r5, #0
 801269a:	d0dc      	beq.n	8012656 <_dtoa_r+0x65e>
 801269c:	b12f      	cbz	r7, 80126aa <_dtoa_r+0x6b2>
 801269e:	42af      	cmp	r7, r5
 80126a0:	d003      	beq.n	80126aa <_dtoa_r+0x6b2>
 80126a2:	4639      	mov	r1, r7
 80126a4:	4658      	mov	r0, fp
 80126a6:	f000 fbab 	bl	8012e00 <_Bfree>
 80126aa:	4629      	mov	r1, r5
 80126ac:	4658      	mov	r0, fp
 80126ae:	f000 fba7 	bl	8012e00 <_Bfree>
 80126b2:	e7d0      	b.n	8012656 <_dtoa_r+0x65e>
 80126b4:	9704      	str	r7, [sp, #16]
 80126b6:	4633      	mov	r3, r6
 80126b8:	461e      	mov	r6, r3
 80126ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126be:	2a39      	cmp	r2, #57	@ 0x39
 80126c0:	d107      	bne.n	80126d2 <_dtoa_r+0x6da>
 80126c2:	459a      	cmp	sl, r3
 80126c4:	d1f8      	bne.n	80126b8 <_dtoa_r+0x6c0>
 80126c6:	9a04      	ldr	r2, [sp, #16]
 80126c8:	3201      	adds	r2, #1
 80126ca:	9204      	str	r2, [sp, #16]
 80126cc:	2230      	movs	r2, #48	@ 0x30
 80126ce:	f88a 2000 	strb.w	r2, [sl]
 80126d2:	781a      	ldrb	r2, [r3, #0]
 80126d4:	3201      	adds	r2, #1
 80126d6:	701a      	strb	r2, [r3, #0]
 80126d8:	e7bd      	b.n	8012656 <_dtoa_r+0x65e>
 80126da:	4b7b      	ldr	r3, [pc, #492]	@ (80128c8 <_dtoa_r+0x8d0>)
 80126dc:	2200      	movs	r2, #0
 80126de:	f7ed ffb3 	bl	8000648 <__aeabi_dmul>
 80126e2:	2200      	movs	r2, #0
 80126e4:	2300      	movs	r3, #0
 80126e6:	4604      	mov	r4, r0
 80126e8:	460d      	mov	r5, r1
 80126ea:	f7ee fa15 	bl	8000b18 <__aeabi_dcmpeq>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f43f aebb 	beq.w	801246a <_dtoa_r+0x472>
 80126f4:	e6f0      	b.n	80124d8 <_dtoa_r+0x4e0>
 80126f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80126f8:	2a00      	cmp	r2, #0
 80126fa:	f000 80db 	beq.w	80128b4 <_dtoa_r+0x8bc>
 80126fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012700:	2a01      	cmp	r2, #1
 8012702:	f300 80bf 	bgt.w	8012884 <_dtoa_r+0x88c>
 8012706:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012708:	2a00      	cmp	r2, #0
 801270a:	f000 80b7 	beq.w	801287c <_dtoa_r+0x884>
 801270e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012712:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012714:	4646      	mov	r6, r8
 8012716:	9a08      	ldr	r2, [sp, #32]
 8012718:	2101      	movs	r1, #1
 801271a:	441a      	add	r2, r3
 801271c:	4658      	mov	r0, fp
 801271e:	4498      	add	r8, r3
 8012720:	9208      	str	r2, [sp, #32]
 8012722:	f000 fc21 	bl	8012f68 <__i2b>
 8012726:	4605      	mov	r5, r0
 8012728:	b15e      	cbz	r6, 8012742 <_dtoa_r+0x74a>
 801272a:	9b08      	ldr	r3, [sp, #32]
 801272c:	2b00      	cmp	r3, #0
 801272e:	dd08      	ble.n	8012742 <_dtoa_r+0x74a>
 8012730:	42b3      	cmp	r3, r6
 8012732:	9a08      	ldr	r2, [sp, #32]
 8012734:	bfa8      	it	ge
 8012736:	4633      	movge	r3, r6
 8012738:	eba8 0803 	sub.w	r8, r8, r3
 801273c:	1af6      	subs	r6, r6, r3
 801273e:	1ad3      	subs	r3, r2, r3
 8012740:	9308      	str	r3, [sp, #32]
 8012742:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012744:	b1f3      	cbz	r3, 8012784 <_dtoa_r+0x78c>
 8012746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012748:	2b00      	cmp	r3, #0
 801274a:	f000 80b7 	beq.w	80128bc <_dtoa_r+0x8c4>
 801274e:	b18c      	cbz	r4, 8012774 <_dtoa_r+0x77c>
 8012750:	4629      	mov	r1, r5
 8012752:	4622      	mov	r2, r4
 8012754:	4658      	mov	r0, fp
 8012756:	f000 fcc7 	bl	80130e8 <__pow5mult>
 801275a:	464a      	mov	r2, r9
 801275c:	4601      	mov	r1, r0
 801275e:	4605      	mov	r5, r0
 8012760:	4658      	mov	r0, fp
 8012762:	f000 fc17 	bl	8012f94 <__multiply>
 8012766:	4649      	mov	r1, r9
 8012768:	9004      	str	r0, [sp, #16]
 801276a:	4658      	mov	r0, fp
 801276c:	f000 fb48 	bl	8012e00 <_Bfree>
 8012770:	9b04      	ldr	r3, [sp, #16]
 8012772:	4699      	mov	r9, r3
 8012774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012776:	1b1a      	subs	r2, r3, r4
 8012778:	d004      	beq.n	8012784 <_dtoa_r+0x78c>
 801277a:	4649      	mov	r1, r9
 801277c:	4658      	mov	r0, fp
 801277e:	f000 fcb3 	bl	80130e8 <__pow5mult>
 8012782:	4681      	mov	r9, r0
 8012784:	2101      	movs	r1, #1
 8012786:	4658      	mov	r0, fp
 8012788:	f000 fbee 	bl	8012f68 <__i2b>
 801278c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801278e:	4604      	mov	r4, r0
 8012790:	2b00      	cmp	r3, #0
 8012792:	f000 81cf 	beq.w	8012b34 <_dtoa_r+0xb3c>
 8012796:	461a      	mov	r2, r3
 8012798:	4601      	mov	r1, r0
 801279a:	4658      	mov	r0, fp
 801279c:	f000 fca4 	bl	80130e8 <__pow5mult>
 80127a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	4604      	mov	r4, r0
 80127a6:	f300 8095 	bgt.w	80128d4 <_dtoa_r+0x8dc>
 80127aa:	9b02      	ldr	r3, [sp, #8]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	f040 8087 	bne.w	80128c0 <_dtoa_r+0x8c8>
 80127b2:	9b03      	ldr	r3, [sp, #12]
 80127b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f040 8089 	bne.w	80128d0 <_dtoa_r+0x8d8>
 80127be:	9b03      	ldr	r3, [sp, #12]
 80127c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80127c4:	0d1b      	lsrs	r3, r3, #20
 80127c6:	051b      	lsls	r3, r3, #20
 80127c8:	b12b      	cbz	r3, 80127d6 <_dtoa_r+0x7de>
 80127ca:	9b08      	ldr	r3, [sp, #32]
 80127cc:	3301      	adds	r3, #1
 80127ce:	9308      	str	r3, [sp, #32]
 80127d0:	f108 0801 	add.w	r8, r8, #1
 80127d4:	2301      	movs	r3, #1
 80127d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80127d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f000 81b0 	beq.w	8012b40 <_dtoa_r+0xb48>
 80127e0:	6923      	ldr	r3, [r4, #16]
 80127e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80127e6:	6918      	ldr	r0, [r3, #16]
 80127e8:	f000 fb72 	bl	8012ed0 <__hi0bits>
 80127ec:	f1c0 0020 	rsb	r0, r0, #32
 80127f0:	9b08      	ldr	r3, [sp, #32]
 80127f2:	4418      	add	r0, r3
 80127f4:	f010 001f 	ands.w	r0, r0, #31
 80127f8:	d077      	beq.n	80128ea <_dtoa_r+0x8f2>
 80127fa:	f1c0 0320 	rsb	r3, r0, #32
 80127fe:	2b04      	cmp	r3, #4
 8012800:	dd6b      	ble.n	80128da <_dtoa_r+0x8e2>
 8012802:	9b08      	ldr	r3, [sp, #32]
 8012804:	f1c0 001c 	rsb	r0, r0, #28
 8012808:	4403      	add	r3, r0
 801280a:	4480      	add	r8, r0
 801280c:	4406      	add	r6, r0
 801280e:	9308      	str	r3, [sp, #32]
 8012810:	f1b8 0f00 	cmp.w	r8, #0
 8012814:	dd05      	ble.n	8012822 <_dtoa_r+0x82a>
 8012816:	4649      	mov	r1, r9
 8012818:	4642      	mov	r2, r8
 801281a:	4658      	mov	r0, fp
 801281c:	f000 fcbe 	bl	801319c <__lshift>
 8012820:	4681      	mov	r9, r0
 8012822:	9b08      	ldr	r3, [sp, #32]
 8012824:	2b00      	cmp	r3, #0
 8012826:	dd05      	ble.n	8012834 <_dtoa_r+0x83c>
 8012828:	4621      	mov	r1, r4
 801282a:	461a      	mov	r2, r3
 801282c:	4658      	mov	r0, fp
 801282e:	f000 fcb5 	bl	801319c <__lshift>
 8012832:	4604      	mov	r4, r0
 8012834:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012836:	2b00      	cmp	r3, #0
 8012838:	d059      	beq.n	80128ee <_dtoa_r+0x8f6>
 801283a:	4621      	mov	r1, r4
 801283c:	4648      	mov	r0, r9
 801283e:	f000 fd19 	bl	8013274 <__mcmp>
 8012842:	2800      	cmp	r0, #0
 8012844:	da53      	bge.n	80128ee <_dtoa_r+0x8f6>
 8012846:	1e7b      	subs	r3, r7, #1
 8012848:	9304      	str	r3, [sp, #16]
 801284a:	4649      	mov	r1, r9
 801284c:	2300      	movs	r3, #0
 801284e:	220a      	movs	r2, #10
 8012850:	4658      	mov	r0, fp
 8012852:	f000 faf7 	bl	8012e44 <__multadd>
 8012856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012858:	4681      	mov	r9, r0
 801285a:	2b00      	cmp	r3, #0
 801285c:	f000 8172 	beq.w	8012b44 <_dtoa_r+0xb4c>
 8012860:	2300      	movs	r3, #0
 8012862:	4629      	mov	r1, r5
 8012864:	220a      	movs	r2, #10
 8012866:	4658      	mov	r0, fp
 8012868:	f000 faec 	bl	8012e44 <__multadd>
 801286c:	9b00      	ldr	r3, [sp, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	4605      	mov	r5, r0
 8012872:	dc67      	bgt.n	8012944 <_dtoa_r+0x94c>
 8012874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012876:	2b02      	cmp	r3, #2
 8012878:	dc41      	bgt.n	80128fe <_dtoa_r+0x906>
 801287a:	e063      	b.n	8012944 <_dtoa_r+0x94c>
 801287c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801287e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012882:	e746      	b.n	8012712 <_dtoa_r+0x71a>
 8012884:	9b07      	ldr	r3, [sp, #28]
 8012886:	1e5c      	subs	r4, r3, #1
 8012888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801288a:	42a3      	cmp	r3, r4
 801288c:	bfbf      	itttt	lt
 801288e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012890:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012892:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012894:	1ae3      	sublt	r3, r4, r3
 8012896:	bfb4      	ite	lt
 8012898:	18d2      	addlt	r2, r2, r3
 801289a:	1b1c      	subge	r4, r3, r4
 801289c:	9b07      	ldr	r3, [sp, #28]
 801289e:	bfbc      	itt	lt
 80128a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80128a2:	2400      	movlt	r4, #0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	bfb5      	itete	lt
 80128a8:	eba8 0603 	sublt.w	r6, r8, r3
 80128ac:	9b07      	ldrge	r3, [sp, #28]
 80128ae:	2300      	movlt	r3, #0
 80128b0:	4646      	movge	r6, r8
 80128b2:	e730      	b.n	8012716 <_dtoa_r+0x71e>
 80128b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80128b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80128b8:	4646      	mov	r6, r8
 80128ba:	e735      	b.n	8012728 <_dtoa_r+0x730>
 80128bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128be:	e75c      	b.n	801277a <_dtoa_r+0x782>
 80128c0:	2300      	movs	r3, #0
 80128c2:	e788      	b.n	80127d6 <_dtoa_r+0x7de>
 80128c4:	3fe00000 	.word	0x3fe00000
 80128c8:	40240000 	.word	0x40240000
 80128cc:	40140000 	.word	0x40140000
 80128d0:	9b02      	ldr	r3, [sp, #8]
 80128d2:	e780      	b.n	80127d6 <_dtoa_r+0x7de>
 80128d4:	2300      	movs	r3, #0
 80128d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80128d8:	e782      	b.n	80127e0 <_dtoa_r+0x7e8>
 80128da:	d099      	beq.n	8012810 <_dtoa_r+0x818>
 80128dc:	9a08      	ldr	r2, [sp, #32]
 80128de:	331c      	adds	r3, #28
 80128e0:	441a      	add	r2, r3
 80128e2:	4498      	add	r8, r3
 80128e4:	441e      	add	r6, r3
 80128e6:	9208      	str	r2, [sp, #32]
 80128e8:	e792      	b.n	8012810 <_dtoa_r+0x818>
 80128ea:	4603      	mov	r3, r0
 80128ec:	e7f6      	b.n	80128dc <_dtoa_r+0x8e4>
 80128ee:	9b07      	ldr	r3, [sp, #28]
 80128f0:	9704      	str	r7, [sp, #16]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	dc20      	bgt.n	8012938 <_dtoa_r+0x940>
 80128f6:	9300      	str	r3, [sp, #0]
 80128f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128fa:	2b02      	cmp	r3, #2
 80128fc:	dd1e      	ble.n	801293c <_dtoa_r+0x944>
 80128fe:	9b00      	ldr	r3, [sp, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	f47f aec0 	bne.w	8012686 <_dtoa_r+0x68e>
 8012906:	4621      	mov	r1, r4
 8012908:	2205      	movs	r2, #5
 801290a:	4658      	mov	r0, fp
 801290c:	f000 fa9a 	bl	8012e44 <__multadd>
 8012910:	4601      	mov	r1, r0
 8012912:	4604      	mov	r4, r0
 8012914:	4648      	mov	r0, r9
 8012916:	f000 fcad 	bl	8013274 <__mcmp>
 801291a:	2800      	cmp	r0, #0
 801291c:	f77f aeb3 	ble.w	8012686 <_dtoa_r+0x68e>
 8012920:	4656      	mov	r6, sl
 8012922:	2331      	movs	r3, #49	@ 0x31
 8012924:	f806 3b01 	strb.w	r3, [r6], #1
 8012928:	9b04      	ldr	r3, [sp, #16]
 801292a:	3301      	adds	r3, #1
 801292c:	9304      	str	r3, [sp, #16]
 801292e:	e6ae      	b.n	801268e <_dtoa_r+0x696>
 8012930:	9c07      	ldr	r4, [sp, #28]
 8012932:	9704      	str	r7, [sp, #16]
 8012934:	4625      	mov	r5, r4
 8012936:	e7f3      	b.n	8012920 <_dtoa_r+0x928>
 8012938:	9b07      	ldr	r3, [sp, #28]
 801293a:	9300      	str	r3, [sp, #0]
 801293c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801293e:	2b00      	cmp	r3, #0
 8012940:	f000 8104 	beq.w	8012b4c <_dtoa_r+0xb54>
 8012944:	2e00      	cmp	r6, #0
 8012946:	dd05      	ble.n	8012954 <_dtoa_r+0x95c>
 8012948:	4629      	mov	r1, r5
 801294a:	4632      	mov	r2, r6
 801294c:	4658      	mov	r0, fp
 801294e:	f000 fc25 	bl	801319c <__lshift>
 8012952:	4605      	mov	r5, r0
 8012954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012956:	2b00      	cmp	r3, #0
 8012958:	d05a      	beq.n	8012a10 <_dtoa_r+0xa18>
 801295a:	6869      	ldr	r1, [r5, #4]
 801295c:	4658      	mov	r0, fp
 801295e:	f000 fa0f 	bl	8012d80 <_Balloc>
 8012962:	4606      	mov	r6, r0
 8012964:	b928      	cbnz	r0, 8012972 <_dtoa_r+0x97a>
 8012966:	4b84      	ldr	r3, [pc, #528]	@ (8012b78 <_dtoa_r+0xb80>)
 8012968:	4602      	mov	r2, r0
 801296a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801296e:	f7ff bb5a 	b.w	8012026 <_dtoa_r+0x2e>
 8012972:	692a      	ldr	r2, [r5, #16]
 8012974:	3202      	adds	r2, #2
 8012976:	0092      	lsls	r2, r2, #2
 8012978:	f105 010c 	add.w	r1, r5, #12
 801297c:	300c      	adds	r0, #12
 801297e:	f7ff faa4 	bl	8011eca <memcpy>
 8012982:	2201      	movs	r2, #1
 8012984:	4631      	mov	r1, r6
 8012986:	4658      	mov	r0, fp
 8012988:	f000 fc08 	bl	801319c <__lshift>
 801298c:	f10a 0301 	add.w	r3, sl, #1
 8012990:	9307      	str	r3, [sp, #28]
 8012992:	9b00      	ldr	r3, [sp, #0]
 8012994:	4453      	add	r3, sl
 8012996:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012998:	9b02      	ldr	r3, [sp, #8]
 801299a:	f003 0301 	and.w	r3, r3, #1
 801299e:	462f      	mov	r7, r5
 80129a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80129a2:	4605      	mov	r5, r0
 80129a4:	9b07      	ldr	r3, [sp, #28]
 80129a6:	4621      	mov	r1, r4
 80129a8:	3b01      	subs	r3, #1
 80129aa:	4648      	mov	r0, r9
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	f7ff fa9a 	bl	8011ee6 <quorem>
 80129b2:	4639      	mov	r1, r7
 80129b4:	9002      	str	r0, [sp, #8]
 80129b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80129ba:	4648      	mov	r0, r9
 80129bc:	f000 fc5a 	bl	8013274 <__mcmp>
 80129c0:	462a      	mov	r2, r5
 80129c2:	9008      	str	r0, [sp, #32]
 80129c4:	4621      	mov	r1, r4
 80129c6:	4658      	mov	r0, fp
 80129c8:	f000 fc70 	bl	80132ac <__mdiff>
 80129cc:	68c2      	ldr	r2, [r0, #12]
 80129ce:	4606      	mov	r6, r0
 80129d0:	bb02      	cbnz	r2, 8012a14 <_dtoa_r+0xa1c>
 80129d2:	4601      	mov	r1, r0
 80129d4:	4648      	mov	r0, r9
 80129d6:	f000 fc4d 	bl	8013274 <__mcmp>
 80129da:	4602      	mov	r2, r0
 80129dc:	4631      	mov	r1, r6
 80129de:	4658      	mov	r0, fp
 80129e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80129e2:	f000 fa0d 	bl	8012e00 <_Bfree>
 80129e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129ea:	9e07      	ldr	r6, [sp, #28]
 80129ec:	ea43 0102 	orr.w	r1, r3, r2
 80129f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80129f2:	4319      	orrs	r1, r3
 80129f4:	d110      	bne.n	8012a18 <_dtoa_r+0xa20>
 80129f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80129fa:	d029      	beq.n	8012a50 <_dtoa_r+0xa58>
 80129fc:	9b08      	ldr	r3, [sp, #32]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	dd02      	ble.n	8012a08 <_dtoa_r+0xa10>
 8012a02:	9b02      	ldr	r3, [sp, #8]
 8012a04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012a08:	9b00      	ldr	r3, [sp, #0]
 8012a0a:	f883 8000 	strb.w	r8, [r3]
 8012a0e:	e63f      	b.n	8012690 <_dtoa_r+0x698>
 8012a10:	4628      	mov	r0, r5
 8012a12:	e7bb      	b.n	801298c <_dtoa_r+0x994>
 8012a14:	2201      	movs	r2, #1
 8012a16:	e7e1      	b.n	80129dc <_dtoa_r+0x9e4>
 8012a18:	9b08      	ldr	r3, [sp, #32]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	db04      	blt.n	8012a28 <_dtoa_r+0xa30>
 8012a1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a20:	430b      	orrs	r3, r1
 8012a22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a24:	430b      	orrs	r3, r1
 8012a26:	d120      	bne.n	8012a6a <_dtoa_r+0xa72>
 8012a28:	2a00      	cmp	r2, #0
 8012a2a:	dded      	ble.n	8012a08 <_dtoa_r+0xa10>
 8012a2c:	4649      	mov	r1, r9
 8012a2e:	2201      	movs	r2, #1
 8012a30:	4658      	mov	r0, fp
 8012a32:	f000 fbb3 	bl	801319c <__lshift>
 8012a36:	4621      	mov	r1, r4
 8012a38:	4681      	mov	r9, r0
 8012a3a:	f000 fc1b 	bl	8013274 <__mcmp>
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	dc03      	bgt.n	8012a4a <_dtoa_r+0xa52>
 8012a42:	d1e1      	bne.n	8012a08 <_dtoa_r+0xa10>
 8012a44:	f018 0f01 	tst.w	r8, #1
 8012a48:	d0de      	beq.n	8012a08 <_dtoa_r+0xa10>
 8012a4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a4e:	d1d8      	bne.n	8012a02 <_dtoa_r+0xa0a>
 8012a50:	9a00      	ldr	r2, [sp, #0]
 8012a52:	2339      	movs	r3, #57	@ 0x39
 8012a54:	7013      	strb	r3, [r2, #0]
 8012a56:	4633      	mov	r3, r6
 8012a58:	461e      	mov	r6, r3
 8012a5a:	3b01      	subs	r3, #1
 8012a5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012a60:	2a39      	cmp	r2, #57	@ 0x39
 8012a62:	d052      	beq.n	8012b0a <_dtoa_r+0xb12>
 8012a64:	3201      	adds	r2, #1
 8012a66:	701a      	strb	r2, [r3, #0]
 8012a68:	e612      	b.n	8012690 <_dtoa_r+0x698>
 8012a6a:	2a00      	cmp	r2, #0
 8012a6c:	dd07      	ble.n	8012a7e <_dtoa_r+0xa86>
 8012a6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a72:	d0ed      	beq.n	8012a50 <_dtoa_r+0xa58>
 8012a74:	9a00      	ldr	r2, [sp, #0]
 8012a76:	f108 0301 	add.w	r3, r8, #1
 8012a7a:	7013      	strb	r3, [r2, #0]
 8012a7c:	e608      	b.n	8012690 <_dtoa_r+0x698>
 8012a7e:	9b07      	ldr	r3, [sp, #28]
 8012a80:	9a07      	ldr	r2, [sp, #28]
 8012a82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012a86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a88:	4293      	cmp	r3, r2
 8012a8a:	d028      	beq.n	8012ade <_dtoa_r+0xae6>
 8012a8c:	4649      	mov	r1, r9
 8012a8e:	2300      	movs	r3, #0
 8012a90:	220a      	movs	r2, #10
 8012a92:	4658      	mov	r0, fp
 8012a94:	f000 f9d6 	bl	8012e44 <__multadd>
 8012a98:	42af      	cmp	r7, r5
 8012a9a:	4681      	mov	r9, r0
 8012a9c:	f04f 0300 	mov.w	r3, #0
 8012aa0:	f04f 020a 	mov.w	r2, #10
 8012aa4:	4639      	mov	r1, r7
 8012aa6:	4658      	mov	r0, fp
 8012aa8:	d107      	bne.n	8012aba <_dtoa_r+0xac2>
 8012aaa:	f000 f9cb 	bl	8012e44 <__multadd>
 8012aae:	4607      	mov	r7, r0
 8012ab0:	4605      	mov	r5, r0
 8012ab2:	9b07      	ldr	r3, [sp, #28]
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	9307      	str	r3, [sp, #28]
 8012ab8:	e774      	b.n	80129a4 <_dtoa_r+0x9ac>
 8012aba:	f000 f9c3 	bl	8012e44 <__multadd>
 8012abe:	4629      	mov	r1, r5
 8012ac0:	4607      	mov	r7, r0
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	220a      	movs	r2, #10
 8012ac6:	4658      	mov	r0, fp
 8012ac8:	f000 f9bc 	bl	8012e44 <__multadd>
 8012acc:	4605      	mov	r5, r0
 8012ace:	e7f0      	b.n	8012ab2 <_dtoa_r+0xaba>
 8012ad0:	9b00      	ldr	r3, [sp, #0]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	bfcc      	ite	gt
 8012ad6:	461e      	movgt	r6, r3
 8012ad8:	2601      	movle	r6, #1
 8012ada:	4456      	add	r6, sl
 8012adc:	2700      	movs	r7, #0
 8012ade:	4649      	mov	r1, r9
 8012ae0:	2201      	movs	r2, #1
 8012ae2:	4658      	mov	r0, fp
 8012ae4:	f000 fb5a 	bl	801319c <__lshift>
 8012ae8:	4621      	mov	r1, r4
 8012aea:	4681      	mov	r9, r0
 8012aec:	f000 fbc2 	bl	8013274 <__mcmp>
 8012af0:	2800      	cmp	r0, #0
 8012af2:	dcb0      	bgt.n	8012a56 <_dtoa_r+0xa5e>
 8012af4:	d102      	bne.n	8012afc <_dtoa_r+0xb04>
 8012af6:	f018 0f01 	tst.w	r8, #1
 8012afa:	d1ac      	bne.n	8012a56 <_dtoa_r+0xa5e>
 8012afc:	4633      	mov	r3, r6
 8012afe:	461e      	mov	r6, r3
 8012b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b04:	2a30      	cmp	r2, #48	@ 0x30
 8012b06:	d0fa      	beq.n	8012afe <_dtoa_r+0xb06>
 8012b08:	e5c2      	b.n	8012690 <_dtoa_r+0x698>
 8012b0a:	459a      	cmp	sl, r3
 8012b0c:	d1a4      	bne.n	8012a58 <_dtoa_r+0xa60>
 8012b0e:	9b04      	ldr	r3, [sp, #16]
 8012b10:	3301      	adds	r3, #1
 8012b12:	9304      	str	r3, [sp, #16]
 8012b14:	2331      	movs	r3, #49	@ 0x31
 8012b16:	f88a 3000 	strb.w	r3, [sl]
 8012b1a:	e5b9      	b.n	8012690 <_dtoa_r+0x698>
 8012b1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012b1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012b7c <_dtoa_r+0xb84>
 8012b22:	b11b      	cbz	r3, 8012b2c <_dtoa_r+0xb34>
 8012b24:	f10a 0308 	add.w	r3, sl, #8
 8012b28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012b2a:	6013      	str	r3, [r2, #0]
 8012b2c:	4650      	mov	r0, sl
 8012b2e:	b019      	add	sp, #100	@ 0x64
 8012b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	f77f ae37 	ble.w	80127aa <_dtoa_r+0x7b2>
 8012b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b40:	2001      	movs	r0, #1
 8012b42:	e655      	b.n	80127f0 <_dtoa_r+0x7f8>
 8012b44:	9b00      	ldr	r3, [sp, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	f77f aed6 	ble.w	80128f8 <_dtoa_r+0x900>
 8012b4c:	4656      	mov	r6, sl
 8012b4e:	4621      	mov	r1, r4
 8012b50:	4648      	mov	r0, r9
 8012b52:	f7ff f9c8 	bl	8011ee6 <quorem>
 8012b56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012b5a:	f806 8b01 	strb.w	r8, [r6], #1
 8012b5e:	9b00      	ldr	r3, [sp, #0]
 8012b60:	eba6 020a 	sub.w	r2, r6, sl
 8012b64:	4293      	cmp	r3, r2
 8012b66:	ddb3      	ble.n	8012ad0 <_dtoa_r+0xad8>
 8012b68:	4649      	mov	r1, r9
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	220a      	movs	r2, #10
 8012b6e:	4658      	mov	r0, fp
 8012b70:	f000 f968 	bl	8012e44 <__multadd>
 8012b74:	4681      	mov	r9, r0
 8012b76:	e7ea      	b.n	8012b4e <_dtoa_r+0xb56>
 8012b78:	08014328 	.word	0x08014328
 8012b7c:	080142ac 	.word	0x080142ac

08012b80 <_free_r>:
 8012b80:	b538      	push	{r3, r4, r5, lr}
 8012b82:	4605      	mov	r5, r0
 8012b84:	2900      	cmp	r1, #0
 8012b86:	d041      	beq.n	8012c0c <_free_r+0x8c>
 8012b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b8c:	1f0c      	subs	r4, r1, #4
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	bfb8      	it	lt
 8012b92:	18e4      	addlt	r4, r4, r3
 8012b94:	f000 f8e8 	bl	8012d68 <__malloc_lock>
 8012b98:	4a1d      	ldr	r2, [pc, #116]	@ (8012c10 <_free_r+0x90>)
 8012b9a:	6813      	ldr	r3, [r2, #0]
 8012b9c:	b933      	cbnz	r3, 8012bac <_free_r+0x2c>
 8012b9e:	6063      	str	r3, [r4, #4]
 8012ba0:	6014      	str	r4, [r2, #0]
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ba8:	f000 b8e4 	b.w	8012d74 <__malloc_unlock>
 8012bac:	42a3      	cmp	r3, r4
 8012bae:	d908      	bls.n	8012bc2 <_free_r+0x42>
 8012bb0:	6820      	ldr	r0, [r4, #0]
 8012bb2:	1821      	adds	r1, r4, r0
 8012bb4:	428b      	cmp	r3, r1
 8012bb6:	bf01      	itttt	eq
 8012bb8:	6819      	ldreq	r1, [r3, #0]
 8012bba:	685b      	ldreq	r3, [r3, #4]
 8012bbc:	1809      	addeq	r1, r1, r0
 8012bbe:	6021      	streq	r1, [r4, #0]
 8012bc0:	e7ed      	b.n	8012b9e <_free_r+0x1e>
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	b10b      	cbz	r3, 8012bcc <_free_r+0x4c>
 8012bc8:	42a3      	cmp	r3, r4
 8012bca:	d9fa      	bls.n	8012bc2 <_free_r+0x42>
 8012bcc:	6811      	ldr	r1, [r2, #0]
 8012bce:	1850      	adds	r0, r2, r1
 8012bd0:	42a0      	cmp	r0, r4
 8012bd2:	d10b      	bne.n	8012bec <_free_r+0x6c>
 8012bd4:	6820      	ldr	r0, [r4, #0]
 8012bd6:	4401      	add	r1, r0
 8012bd8:	1850      	adds	r0, r2, r1
 8012bda:	4283      	cmp	r3, r0
 8012bdc:	6011      	str	r1, [r2, #0]
 8012bde:	d1e0      	bne.n	8012ba2 <_free_r+0x22>
 8012be0:	6818      	ldr	r0, [r3, #0]
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	6053      	str	r3, [r2, #4]
 8012be6:	4408      	add	r0, r1
 8012be8:	6010      	str	r0, [r2, #0]
 8012bea:	e7da      	b.n	8012ba2 <_free_r+0x22>
 8012bec:	d902      	bls.n	8012bf4 <_free_r+0x74>
 8012bee:	230c      	movs	r3, #12
 8012bf0:	602b      	str	r3, [r5, #0]
 8012bf2:	e7d6      	b.n	8012ba2 <_free_r+0x22>
 8012bf4:	6820      	ldr	r0, [r4, #0]
 8012bf6:	1821      	adds	r1, r4, r0
 8012bf8:	428b      	cmp	r3, r1
 8012bfa:	bf04      	itt	eq
 8012bfc:	6819      	ldreq	r1, [r3, #0]
 8012bfe:	685b      	ldreq	r3, [r3, #4]
 8012c00:	6063      	str	r3, [r4, #4]
 8012c02:	bf04      	itt	eq
 8012c04:	1809      	addeq	r1, r1, r0
 8012c06:	6021      	streq	r1, [r4, #0]
 8012c08:	6054      	str	r4, [r2, #4]
 8012c0a:	e7ca      	b.n	8012ba2 <_free_r+0x22>
 8012c0c:	bd38      	pop	{r3, r4, r5, pc}
 8012c0e:	bf00      	nop
 8012c10:	20001b2c 	.word	0x20001b2c

08012c14 <malloc>:
 8012c14:	4b02      	ldr	r3, [pc, #8]	@ (8012c20 <malloc+0xc>)
 8012c16:	4601      	mov	r1, r0
 8012c18:	6818      	ldr	r0, [r3, #0]
 8012c1a:	f000 b825 	b.w	8012c68 <_malloc_r>
 8012c1e:	bf00      	nop
 8012c20:	200017b8 	.word	0x200017b8

08012c24 <sbrk_aligned>:
 8012c24:	b570      	push	{r4, r5, r6, lr}
 8012c26:	4e0f      	ldr	r6, [pc, #60]	@ (8012c64 <sbrk_aligned+0x40>)
 8012c28:	460c      	mov	r4, r1
 8012c2a:	6831      	ldr	r1, [r6, #0]
 8012c2c:	4605      	mov	r5, r0
 8012c2e:	b911      	cbnz	r1, 8012c36 <sbrk_aligned+0x12>
 8012c30:	f000 fe9a 	bl	8013968 <_sbrk_r>
 8012c34:	6030      	str	r0, [r6, #0]
 8012c36:	4621      	mov	r1, r4
 8012c38:	4628      	mov	r0, r5
 8012c3a:	f000 fe95 	bl	8013968 <_sbrk_r>
 8012c3e:	1c43      	adds	r3, r0, #1
 8012c40:	d103      	bne.n	8012c4a <sbrk_aligned+0x26>
 8012c42:	f04f 34ff 	mov.w	r4, #4294967295
 8012c46:	4620      	mov	r0, r4
 8012c48:	bd70      	pop	{r4, r5, r6, pc}
 8012c4a:	1cc4      	adds	r4, r0, #3
 8012c4c:	f024 0403 	bic.w	r4, r4, #3
 8012c50:	42a0      	cmp	r0, r4
 8012c52:	d0f8      	beq.n	8012c46 <sbrk_aligned+0x22>
 8012c54:	1a21      	subs	r1, r4, r0
 8012c56:	4628      	mov	r0, r5
 8012c58:	f000 fe86 	bl	8013968 <_sbrk_r>
 8012c5c:	3001      	adds	r0, #1
 8012c5e:	d1f2      	bne.n	8012c46 <sbrk_aligned+0x22>
 8012c60:	e7ef      	b.n	8012c42 <sbrk_aligned+0x1e>
 8012c62:	bf00      	nop
 8012c64:	20001b28 	.word	0x20001b28

08012c68 <_malloc_r>:
 8012c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c6c:	1ccd      	adds	r5, r1, #3
 8012c6e:	f025 0503 	bic.w	r5, r5, #3
 8012c72:	3508      	adds	r5, #8
 8012c74:	2d0c      	cmp	r5, #12
 8012c76:	bf38      	it	cc
 8012c78:	250c      	movcc	r5, #12
 8012c7a:	2d00      	cmp	r5, #0
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	db01      	blt.n	8012c84 <_malloc_r+0x1c>
 8012c80:	42a9      	cmp	r1, r5
 8012c82:	d904      	bls.n	8012c8e <_malloc_r+0x26>
 8012c84:	230c      	movs	r3, #12
 8012c86:	6033      	str	r3, [r6, #0]
 8012c88:	2000      	movs	r0, #0
 8012c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d64 <_malloc_r+0xfc>
 8012c92:	f000 f869 	bl	8012d68 <__malloc_lock>
 8012c96:	f8d8 3000 	ldr.w	r3, [r8]
 8012c9a:	461c      	mov	r4, r3
 8012c9c:	bb44      	cbnz	r4, 8012cf0 <_malloc_r+0x88>
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	f7ff ffbf 	bl	8012c24 <sbrk_aligned>
 8012ca6:	1c43      	adds	r3, r0, #1
 8012ca8:	4604      	mov	r4, r0
 8012caa:	d158      	bne.n	8012d5e <_malloc_r+0xf6>
 8012cac:	f8d8 4000 	ldr.w	r4, [r8]
 8012cb0:	4627      	mov	r7, r4
 8012cb2:	2f00      	cmp	r7, #0
 8012cb4:	d143      	bne.n	8012d3e <_malloc_r+0xd6>
 8012cb6:	2c00      	cmp	r4, #0
 8012cb8:	d04b      	beq.n	8012d52 <_malloc_r+0xea>
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	4639      	mov	r1, r7
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	eb04 0903 	add.w	r9, r4, r3
 8012cc4:	f000 fe50 	bl	8013968 <_sbrk_r>
 8012cc8:	4581      	cmp	r9, r0
 8012cca:	d142      	bne.n	8012d52 <_malloc_r+0xea>
 8012ccc:	6821      	ldr	r1, [r4, #0]
 8012cce:	1a6d      	subs	r5, r5, r1
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	f7ff ffa6 	bl	8012c24 <sbrk_aligned>
 8012cd8:	3001      	adds	r0, #1
 8012cda:	d03a      	beq.n	8012d52 <_malloc_r+0xea>
 8012cdc:	6823      	ldr	r3, [r4, #0]
 8012cde:	442b      	add	r3, r5
 8012ce0:	6023      	str	r3, [r4, #0]
 8012ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8012ce6:	685a      	ldr	r2, [r3, #4]
 8012ce8:	bb62      	cbnz	r2, 8012d44 <_malloc_r+0xdc>
 8012cea:	f8c8 7000 	str.w	r7, [r8]
 8012cee:	e00f      	b.n	8012d10 <_malloc_r+0xa8>
 8012cf0:	6822      	ldr	r2, [r4, #0]
 8012cf2:	1b52      	subs	r2, r2, r5
 8012cf4:	d420      	bmi.n	8012d38 <_malloc_r+0xd0>
 8012cf6:	2a0b      	cmp	r2, #11
 8012cf8:	d917      	bls.n	8012d2a <_malloc_r+0xc2>
 8012cfa:	1961      	adds	r1, r4, r5
 8012cfc:	42a3      	cmp	r3, r4
 8012cfe:	6025      	str	r5, [r4, #0]
 8012d00:	bf18      	it	ne
 8012d02:	6059      	strne	r1, [r3, #4]
 8012d04:	6863      	ldr	r3, [r4, #4]
 8012d06:	bf08      	it	eq
 8012d08:	f8c8 1000 	streq.w	r1, [r8]
 8012d0c:	5162      	str	r2, [r4, r5]
 8012d0e:	604b      	str	r3, [r1, #4]
 8012d10:	4630      	mov	r0, r6
 8012d12:	f000 f82f 	bl	8012d74 <__malloc_unlock>
 8012d16:	f104 000b 	add.w	r0, r4, #11
 8012d1a:	1d23      	adds	r3, r4, #4
 8012d1c:	f020 0007 	bic.w	r0, r0, #7
 8012d20:	1ac2      	subs	r2, r0, r3
 8012d22:	bf1c      	itt	ne
 8012d24:	1a1b      	subne	r3, r3, r0
 8012d26:	50a3      	strne	r3, [r4, r2]
 8012d28:	e7af      	b.n	8012c8a <_malloc_r+0x22>
 8012d2a:	6862      	ldr	r2, [r4, #4]
 8012d2c:	42a3      	cmp	r3, r4
 8012d2e:	bf0c      	ite	eq
 8012d30:	f8c8 2000 	streq.w	r2, [r8]
 8012d34:	605a      	strne	r2, [r3, #4]
 8012d36:	e7eb      	b.n	8012d10 <_malloc_r+0xa8>
 8012d38:	4623      	mov	r3, r4
 8012d3a:	6864      	ldr	r4, [r4, #4]
 8012d3c:	e7ae      	b.n	8012c9c <_malloc_r+0x34>
 8012d3e:	463c      	mov	r4, r7
 8012d40:	687f      	ldr	r7, [r7, #4]
 8012d42:	e7b6      	b.n	8012cb2 <_malloc_r+0x4a>
 8012d44:	461a      	mov	r2, r3
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	42a3      	cmp	r3, r4
 8012d4a:	d1fb      	bne.n	8012d44 <_malloc_r+0xdc>
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	6053      	str	r3, [r2, #4]
 8012d50:	e7de      	b.n	8012d10 <_malloc_r+0xa8>
 8012d52:	230c      	movs	r3, #12
 8012d54:	6033      	str	r3, [r6, #0]
 8012d56:	4630      	mov	r0, r6
 8012d58:	f000 f80c 	bl	8012d74 <__malloc_unlock>
 8012d5c:	e794      	b.n	8012c88 <_malloc_r+0x20>
 8012d5e:	6005      	str	r5, [r0, #0]
 8012d60:	e7d6      	b.n	8012d10 <_malloc_r+0xa8>
 8012d62:	bf00      	nop
 8012d64:	20001b2c 	.word	0x20001b2c

08012d68 <__malloc_lock>:
 8012d68:	4801      	ldr	r0, [pc, #4]	@ (8012d70 <__malloc_lock+0x8>)
 8012d6a:	f7ff b8ac 	b.w	8011ec6 <__retarget_lock_acquire_recursive>
 8012d6e:	bf00      	nop
 8012d70:	20001b24 	.word	0x20001b24

08012d74 <__malloc_unlock>:
 8012d74:	4801      	ldr	r0, [pc, #4]	@ (8012d7c <__malloc_unlock+0x8>)
 8012d76:	f7ff b8a7 	b.w	8011ec8 <__retarget_lock_release_recursive>
 8012d7a:	bf00      	nop
 8012d7c:	20001b24 	.word	0x20001b24

08012d80 <_Balloc>:
 8012d80:	b570      	push	{r4, r5, r6, lr}
 8012d82:	69c6      	ldr	r6, [r0, #28]
 8012d84:	4604      	mov	r4, r0
 8012d86:	460d      	mov	r5, r1
 8012d88:	b976      	cbnz	r6, 8012da8 <_Balloc+0x28>
 8012d8a:	2010      	movs	r0, #16
 8012d8c:	f7ff ff42 	bl	8012c14 <malloc>
 8012d90:	4602      	mov	r2, r0
 8012d92:	61e0      	str	r0, [r4, #28]
 8012d94:	b920      	cbnz	r0, 8012da0 <_Balloc+0x20>
 8012d96:	4b18      	ldr	r3, [pc, #96]	@ (8012df8 <_Balloc+0x78>)
 8012d98:	4818      	ldr	r0, [pc, #96]	@ (8012dfc <_Balloc+0x7c>)
 8012d9a:	216b      	movs	r1, #107	@ 0x6b
 8012d9c:	f000 fdf4 	bl	8013988 <__assert_func>
 8012da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012da4:	6006      	str	r6, [r0, #0]
 8012da6:	60c6      	str	r6, [r0, #12]
 8012da8:	69e6      	ldr	r6, [r4, #28]
 8012daa:	68f3      	ldr	r3, [r6, #12]
 8012dac:	b183      	cbz	r3, 8012dd0 <_Balloc+0x50>
 8012dae:	69e3      	ldr	r3, [r4, #28]
 8012db0:	68db      	ldr	r3, [r3, #12]
 8012db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012db6:	b9b8      	cbnz	r0, 8012de8 <_Balloc+0x68>
 8012db8:	2101      	movs	r1, #1
 8012dba:	fa01 f605 	lsl.w	r6, r1, r5
 8012dbe:	1d72      	adds	r2, r6, #5
 8012dc0:	0092      	lsls	r2, r2, #2
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f000 fdfe 	bl	80139c4 <_calloc_r>
 8012dc8:	b160      	cbz	r0, 8012de4 <_Balloc+0x64>
 8012dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012dce:	e00e      	b.n	8012dee <_Balloc+0x6e>
 8012dd0:	2221      	movs	r2, #33	@ 0x21
 8012dd2:	2104      	movs	r1, #4
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f000 fdf5 	bl	80139c4 <_calloc_r>
 8012dda:	69e3      	ldr	r3, [r4, #28]
 8012ddc:	60f0      	str	r0, [r6, #12]
 8012dde:	68db      	ldr	r3, [r3, #12]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d1e4      	bne.n	8012dae <_Balloc+0x2e>
 8012de4:	2000      	movs	r0, #0
 8012de6:	bd70      	pop	{r4, r5, r6, pc}
 8012de8:	6802      	ldr	r2, [r0, #0]
 8012dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dee:	2300      	movs	r3, #0
 8012df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012df4:	e7f7      	b.n	8012de6 <_Balloc+0x66>
 8012df6:	bf00      	nop
 8012df8:	080142b9 	.word	0x080142b9
 8012dfc:	08014339 	.word	0x08014339

08012e00 <_Bfree>:
 8012e00:	b570      	push	{r4, r5, r6, lr}
 8012e02:	69c6      	ldr	r6, [r0, #28]
 8012e04:	4605      	mov	r5, r0
 8012e06:	460c      	mov	r4, r1
 8012e08:	b976      	cbnz	r6, 8012e28 <_Bfree+0x28>
 8012e0a:	2010      	movs	r0, #16
 8012e0c:	f7ff ff02 	bl	8012c14 <malloc>
 8012e10:	4602      	mov	r2, r0
 8012e12:	61e8      	str	r0, [r5, #28]
 8012e14:	b920      	cbnz	r0, 8012e20 <_Bfree+0x20>
 8012e16:	4b09      	ldr	r3, [pc, #36]	@ (8012e3c <_Bfree+0x3c>)
 8012e18:	4809      	ldr	r0, [pc, #36]	@ (8012e40 <_Bfree+0x40>)
 8012e1a:	218f      	movs	r1, #143	@ 0x8f
 8012e1c:	f000 fdb4 	bl	8013988 <__assert_func>
 8012e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e24:	6006      	str	r6, [r0, #0]
 8012e26:	60c6      	str	r6, [r0, #12]
 8012e28:	b13c      	cbz	r4, 8012e3a <_Bfree+0x3a>
 8012e2a:	69eb      	ldr	r3, [r5, #28]
 8012e2c:	6862      	ldr	r2, [r4, #4]
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e34:	6021      	str	r1, [r4, #0]
 8012e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e3a:	bd70      	pop	{r4, r5, r6, pc}
 8012e3c:	080142b9 	.word	0x080142b9
 8012e40:	08014339 	.word	0x08014339

08012e44 <__multadd>:
 8012e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e48:	690d      	ldr	r5, [r1, #16]
 8012e4a:	4607      	mov	r7, r0
 8012e4c:	460c      	mov	r4, r1
 8012e4e:	461e      	mov	r6, r3
 8012e50:	f101 0c14 	add.w	ip, r1, #20
 8012e54:	2000      	movs	r0, #0
 8012e56:	f8dc 3000 	ldr.w	r3, [ip]
 8012e5a:	b299      	uxth	r1, r3
 8012e5c:	fb02 6101 	mla	r1, r2, r1, r6
 8012e60:	0c1e      	lsrs	r6, r3, #16
 8012e62:	0c0b      	lsrs	r3, r1, #16
 8012e64:	fb02 3306 	mla	r3, r2, r6, r3
 8012e68:	b289      	uxth	r1, r1
 8012e6a:	3001      	adds	r0, #1
 8012e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e70:	4285      	cmp	r5, r0
 8012e72:	f84c 1b04 	str.w	r1, [ip], #4
 8012e76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e7a:	dcec      	bgt.n	8012e56 <__multadd+0x12>
 8012e7c:	b30e      	cbz	r6, 8012ec2 <__multadd+0x7e>
 8012e7e:	68a3      	ldr	r3, [r4, #8]
 8012e80:	42ab      	cmp	r3, r5
 8012e82:	dc19      	bgt.n	8012eb8 <__multadd+0x74>
 8012e84:	6861      	ldr	r1, [r4, #4]
 8012e86:	4638      	mov	r0, r7
 8012e88:	3101      	adds	r1, #1
 8012e8a:	f7ff ff79 	bl	8012d80 <_Balloc>
 8012e8e:	4680      	mov	r8, r0
 8012e90:	b928      	cbnz	r0, 8012e9e <__multadd+0x5a>
 8012e92:	4602      	mov	r2, r0
 8012e94:	4b0c      	ldr	r3, [pc, #48]	@ (8012ec8 <__multadd+0x84>)
 8012e96:	480d      	ldr	r0, [pc, #52]	@ (8012ecc <__multadd+0x88>)
 8012e98:	21ba      	movs	r1, #186	@ 0xba
 8012e9a:	f000 fd75 	bl	8013988 <__assert_func>
 8012e9e:	6922      	ldr	r2, [r4, #16]
 8012ea0:	3202      	adds	r2, #2
 8012ea2:	f104 010c 	add.w	r1, r4, #12
 8012ea6:	0092      	lsls	r2, r2, #2
 8012ea8:	300c      	adds	r0, #12
 8012eaa:	f7ff f80e 	bl	8011eca <memcpy>
 8012eae:	4621      	mov	r1, r4
 8012eb0:	4638      	mov	r0, r7
 8012eb2:	f7ff ffa5 	bl	8012e00 <_Bfree>
 8012eb6:	4644      	mov	r4, r8
 8012eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ebc:	3501      	adds	r5, #1
 8012ebe:	615e      	str	r6, [r3, #20]
 8012ec0:	6125      	str	r5, [r4, #16]
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ec8:	08014328 	.word	0x08014328
 8012ecc:	08014339 	.word	0x08014339

08012ed0 <__hi0bits>:
 8012ed0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	bf36      	itet	cc
 8012ed8:	0403      	lslcc	r3, r0, #16
 8012eda:	2000      	movcs	r0, #0
 8012edc:	2010      	movcc	r0, #16
 8012ede:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012ee2:	bf3c      	itt	cc
 8012ee4:	021b      	lslcc	r3, r3, #8
 8012ee6:	3008      	addcc	r0, #8
 8012ee8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012eec:	bf3c      	itt	cc
 8012eee:	011b      	lslcc	r3, r3, #4
 8012ef0:	3004      	addcc	r0, #4
 8012ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ef6:	bf3c      	itt	cc
 8012ef8:	009b      	lslcc	r3, r3, #2
 8012efa:	3002      	addcc	r0, #2
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	db05      	blt.n	8012f0c <__hi0bits+0x3c>
 8012f00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012f04:	f100 0001 	add.w	r0, r0, #1
 8012f08:	bf08      	it	eq
 8012f0a:	2020      	moveq	r0, #32
 8012f0c:	4770      	bx	lr

08012f0e <__lo0bits>:
 8012f0e:	6803      	ldr	r3, [r0, #0]
 8012f10:	4602      	mov	r2, r0
 8012f12:	f013 0007 	ands.w	r0, r3, #7
 8012f16:	d00b      	beq.n	8012f30 <__lo0bits+0x22>
 8012f18:	07d9      	lsls	r1, r3, #31
 8012f1a:	d421      	bmi.n	8012f60 <__lo0bits+0x52>
 8012f1c:	0798      	lsls	r0, r3, #30
 8012f1e:	bf49      	itett	mi
 8012f20:	085b      	lsrmi	r3, r3, #1
 8012f22:	089b      	lsrpl	r3, r3, #2
 8012f24:	2001      	movmi	r0, #1
 8012f26:	6013      	strmi	r3, [r2, #0]
 8012f28:	bf5c      	itt	pl
 8012f2a:	6013      	strpl	r3, [r2, #0]
 8012f2c:	2002      	movpl	r0, #2
 8012f2e:	4770      	bx	lr
 8012f30:	b299      	uxth	r1, r3
 8012f32:	b909      	cbnz	r1, 8012f38 <__lo0bits+0x2a>
 8012f34:	0c1b      	lsrs	r3, r3, #16
 8012f36:	2010      	movs	r0, #16
 8012f38:	b2d9      	uxtb	r1, r3
 8012f3a:	b909      	cbnz	r1, 8012f40 <__lo0bits+0x32>
 8012f3c:	3008      	adds	r0, #8
 8012f3e:	0a1b      	lsrs	r3, r3, #8
 8012f40:	0719      	lsls	r1, r3, #28
 8012f42:	bf04      	itt	eq
 8012f44:	091b      	lsreq	r3, r3, #4
 8012f46:	3004      	addeq	r0, #4
 8012f48:	0799      	lsls	r1, r3, #30
 8012f4a:	bf04      	itt	eq
 8012f4c:	089b      	lsreq	r3, r3, #2
 8012f4e:	3002      	addeq	r0, #2
 8012f50:	07d9      	lsls	r1, r3, #31
 8012f52:	d403      	bmi.n	8012f5c <__lo0bits+0x4e>
 8012f54:	085b      	lsrs	r3, r3, #1
 8012f56:	f100 0001 	add.w	r0, r0, #1
 8012f5a:	d003      	beq.n	8012f64 <__lo0bits+0x56>
 8012f5c:	6013      	str	r3, [r2, #0]
 8012f5e:	4770      	bx	lr
 8012f60:	2000      	movs	r0, #0
 8012f62:	4770      	bx	lr
 8012f64:	2020      	movs	r0, #32
 8012f66:	4770      	bx	lr

08012f68 <__i2b>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	460c      	mov	r4, r1
 8012f6c:	2101      	movs	r1, #1
 8012f6e:	f7ff ff07 	bl	8012d80 <_Balloc>
 8012f72:	4602      	mov	r2, r0
 8012f74:	b928      	cbnz	r0, 8012f82 <__i2b+0x1a>
 8012f76:	4b05      	ldr	r3, [pc, #20]	@ (8012f8c <__i2b+0x24>)
 8012f78:	4805      	ldr	r0, [pc, #20]	@ (8012f90 <__i2b+0x28>)
 8012f7a:	f240 1145 	movw	r1, #325	@ 0x145
 8012f7e:	f000 fd03 	bl	8013988 <__assert_func>
 8012f82:	2301      	movs	r3, #1
 8012f84:	6144      	str	r4, [r0, #20]
 8012f86:	6103      	str	r3, [r0, #16]
 8012f88:	bd10      	pop	{r4, pc}
 8012f8a:	bf00      	nop
 8012f8c:	08014328 	.word	0x08014328
 8012f90:	08014339 	.word	0x08014339

08012f94 <__multiply>:
 8012f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f98:	4614      	mov	r4, r2
 8012f9a:	690a      	ldr	r2, [r1, #16]
 8012f9c:	6923      	ldr	r3, [r4, #16]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	bfa8      	it	ge
 8012fa2:	4623      	movge	r3, r4
 8012fa4:	460f      	mov	r7, r1
 8012fa6:	bfa4      	itt	ge
 8012fa8:	460c      	movge	r4, r1
 8012faa:	461f      	movge	r7, r3
 8012fac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012fb0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012fb4:	68a3      	ldr	r3, [r4, #8]
 8012fb6:	6861      	ldr	r1, [r4, #4]
 8012fb8:	eb0a 0609 	add.w	r6, sl, r9
 8012fbc:	42b3      	cmp	r3, r6
 8012fbe:	b085      	sub	sp, #20
 8012fc0:	bfb8      	it	lt
 8012fc2:	3101      	addlt	r1, #1
 8012fc4:	f7ff fedc 	bl	8012d80 <_Balloc>
 8012fc8:	b930      	cbnz	r0, 8012fd8 <__multiply+0x44>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	4b44      	ldr	r3, [pc, #272]	@ (80130e0 <__multiply+0x14c>)
 8012fce:	4845      	ldr	r0, [pc, #276]	@ (80130e4 <__multiply+0x150>)
 8012fd0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012fd4:	f000 fcd8 	bl	8013988 <__assert_func>
 8012fd8:	f100 0514 	add.w	r5, r0, #20
 8012fdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012fe0:	462b      	mov	r3, r5
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	4543      	cmp	r3, r8
 8012fe6:	d321      	bcc.n	801302c <__multiply+0x98>
 8012fe8:	f107 0114 	add.w	r1, r7, #20
 8012fec:	f104 0214 	add.w	r2, r4, #20
 8012ff0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012ff4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012ff8:	9302      	str	r3, [sp, #8]
 8012ffa:	1b13      	subs	r3, r2, r4
 8012ffc:	3b15      	subs	r3, #21
 8012ffe:	f023 0303 	bic.w	r3, r3, #3
 8013002:	3304      	adds	r3, #4
 8013004:	f104 0715 	add.w	r7, r4, #21
 8013008:	42ba      	cmp	r2, r7
 801300a:	bf38      	it	cc
 801300c:	2304      	movcc	r3, #4
 801300e:	9301      	str	r3, [sp, #4]
 8013010:	9b02      	ldr	r3, [sp, #8]
 8013012:	9103      	str	r1, [sp, #12]
 8013014:	428b      	cmp	r3, r1
 8013016:	d80c      	bhi.n	8013032 <__multiply+0x9e>
 8013018:	2e00      	cmp	r6, #0
 801301a:	dd03      	ble.n	8013024 <__multiply+0x90>
 801301c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013020:	2b00      	cmp	r3, #0
 8013022:	d05b      	beq.n	80130dc <__multiply+0x148>
 8013024:	6106      	str	r6, [r0, #16]
 8013026:	b005      	add	sp, #20
 8013028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801302c:	f843 2b04 	str.w	r2, [r3], #4
 8013030:	e7d8      	b.n	8012fe4 <__multiply+0x50>
 8013032:	f8b1 a000 	ldrh.w	sl, [r1]
 8013036:	f1ba 0f00 	cmp.w	sl, #0
 801303a:	d024      	beq.n	8013086 <__multiply+0xf2>
 801303c:	f104 0e14 	add.w	lr, r4, #20
 8013040:	46a9      	mov	r9, r5
 8013042:	f04f 0c00 	mov.w	ip, #0
 8013046:	f85e 7b04 	ldr.w	r7, [lr], #4
 801304a:	f8d9 3000 	ldr.w	r3, [r9]
 801304e:	fa1f fb87 	uxth.w	fp, r7
 8013052:	b29b      	uxth	r3, r3
 8013054:	fb0a 330b 	mla	r3, sl, fp, r3
 8013058:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801305c:	f8d9 7000 	ldr.w	r7, [r9]
 8013060:	4463      	add	r3, ip
 8013062:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013066:	fb0a c70b 	mla	r7, sl, fp, ip
 801306a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801306e:	b29b      	uxth	r3, r3
 8013070:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013074:	4572      	cmp	r2, lr
 8013076:	f849 3b04 	str.w	r3, [r9], #4
 801307a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801307e:	d8e2      	bhi.n	8013046 <__multiply+0xb2>
 8013080:	9b01      	ldr	r3, [sp, #4]
 8013082:	f845 c003 	str.w	ip, [r5, r3]
 8013086:	9b03      	ldr	r3, [sp, #12]
 8013088:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801308c:	3104      	adds	r1, #4
 801308e:	f1b9 0f00 	cmp.w	r9, #0
 8013092:	d021      	beq.n	80130d8 <__multiply+0x144>
 8013094:	682b      	ldr	r3, [r5, #0]
 8013096:	f104 0c14 	add.w	ip, r4, #20
 801309a:	46ae      	mov	lr, r5
 801309c:	f04f 0a00 	mov.w	sl, #0
 80130a0:	f8bc b000 	ldrh.w	fp, [ip]
 80130a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80130a8:	fb09 770b 	mla	r7, r9, fp, r7
 80130ac:	4457      	add	r7, sl
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80130b4:	f84e 3b04 	str.w	r3, [lr], #4
 80130b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80130bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130c0:	f8be 3000 	ldrh.w	r3, [lr]
 80130c4:	fb09 330a 	mla	r3, r9, sl, r3
 80130c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80130cc:	4562      	cmp	r2, ip
 80130ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130d2:	d8e5      	bhi.n	80130a0 <__multiply+0x10c>
 80130d4:	9f01      	ldr	r7, [sp, #4]
 80130d6:	51eb      	str	r3, [r5, r7]
 80130d8:	3504      	adds	r5, #4
 80130da:	e799      	b.n	8013010 <__multiply+0x7c>
 80130dc:	3e01      	subs	r6, #1
 80130de:	e79b      	b.n	8013018 <__multiply+0x84>
 80130e0:	08014328 	.word	0x08014328
 80130e4:	08014339 	.word	0x08014339

080130e8 <__pow5mult>:
 80130e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130ec:	4615      	mov	r5, r2
 80130ee:	f012 0203 	ands.w	r2, r2, #3
 80130f2:	4607      	mov	r7, r0
 80130f4:	460e      	mov	r6, r1
 80130f6:	d007      	beq.n	8013108 <__pow5mult+0x20>
 80130f8:	4c25      	ldr	r4, [pc, #148]	@ (8013190 <__pow5mult+0xa8>)
 80130fa:	3a01      	subs	r2, #1
 80130fc:	2300      	movs	r3, #0
 80130fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013102:	f7ff fe9f 	bl	8012e44 <__multadd>
 8013106:	4606      	mov	r6, r0
 8013108:	10ad      	asrs	r5, r5, #2
 801310a:	d03d      	beq.n	8013188 <__pow5mult+0xa0>
 801310c:	69fc      	ldr	r4, [r7, #28]
 801310e:	b97c      	cbnz	r4, 8013130 <__pow5mult+0x48>
 8013110:	2010      	movs	r0, #16
 8013112:	f7ff fd7f 	bl	8012c14 <malloc>
 8013116:	4602      	mov	r2, r0
 8013118:	61f8      	str	r0, [r7, #28]
 801311a:	b928      	cbnz	r0, 8013128 <__pow5mult+0x40>
 801311c:	4b1d      	ldr	r3, [pc, #116]	@ (8013194 <__pow5mult+0xac>)
 801311e:	481e      	ldr	r0, [pc, #120]	@ (8013198 <__pow5mult+0xb0>)
 8013120:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013124:	f000 fc30 	bl	8013988 <__assert_func>
 8013128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801312c:	6004      	str	r4, [r0, #0]
 801312e:	60c4      	str	r4, [r0, #12]
 8013130:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013138:	b94c      	cbnz	r4, 801314e <__pow5mult+0x66>
 801313a:	f240 2171 	movw	r1, #625	@ 0x271
 801313e:	4638      	mov	r0, r7
 8013140:	f7ff ff12 	bl	8012f68 <__i2b>
 8013144:	2300      	movs	r3, #0
 8013146:	f8c8 0008 	str.w	r0, [r8, #8]
 801314a:	4604      	mov	r4, r0
 801314c:	6003      	str	r3, [r0, #0]
 801314e:	f04f 0900 	mov.w	r9, #0
 8013152:	07eb      	lsls	r3, r5, #31
 8013154:	d50a      	bpl.n	801316c <__pow5mult+0x84>
 8013156:	4631      	mov	r1, r6
 8013158:	4622      	mov	r2, r4
 801315a:	4638      	mov	r0, r7
 801315c:	f7ff ff1a 	bl	8012f94 <__multiply>
 8013160:	4631      	mov	r1, r6
 8013162:	4680      	mov	r8, r0
 8013164:	4638      	mov	r0, r7
 8013166:	f7ff fe4b 	bl	8012e00 <_Bfree>
 801316a:	4646      	mov	r6, r8
 801316c:	106d      	asrs	r5, r5, #1
 801316e:	d00b      	beq.n	8013188 <__pow5mult+0xa0>
 8013170:	6820      	ldr	r0, [r4, #0]
 8013172:	b938      	cbnz	r0, 8013184 <__pow5mult+0x9c>
 8013174:	4622      	mov	r2, r4
 8013176:	4621      	mov	r1, r4
 8013178:	4638      	mov	r0, r7
 801317a:	f7ff ff0b 	bl	8012f94 <__multiply>
 801317e:	6020      	str	r0, [r4, #0]
 8013180:	f8c0 9000 	str.w	r9, [r0]
 8013184:	4604      	mov	r4, r0
 8013186:	e7e4      	b.n	8013152 <__pow5mult+0x6a>
 8013188:	4630      	mov	r0, r6
 801318a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801318e:	bf00      	nop
 8013190:	08014394 	.word	0x08014394
 8013194:	080142b9 	.word	0x080142b9
 8013198:	08014339 	.word	0x08014339

0801319c <__lshift>:
 801319c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131a0:	460c      	mov	r4, r1
 80131a2:	6849      	ldr	r1, [r1, #4]
 80131a4:	6923      	ldr	r3, [r4, #16]
 80131a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80131aa:	68a3      	ldr	r3, [r4, #8]
 80131ac:	4607      	mov	r7, r0
 80131ae:	4691      	mov	r9, r2
 80131b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80131b4:	f108 0601 	add.w	r6, r8, #1
 80131b8:	42b3      	cmp	r3, r6
 80131ba:	db0b      	blt.n	80131d4 <__lshift+0x38>
 80131bc:	4638      	mov	r0, r7
 80131be:	f7ff fddf 	bl	8012d80 <_Balloc>
 80131c2:	4605      	mov	r5, r0
 80131c4:	b948      	cbnz	r0, 80131da <__lshift+0x3e>
 80131c6:	4602      	mov	r2, r0
 80131c8:	4b28      	ldr	r3, [pc, #160]	@ (801326c <__lshift+0xd0>)
 80131ca:	4829      	ldr	r0, [pc, #164]	@ (8013270 <__lshift+0xd4>)
 80131cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80131d0:	f000 fbda 	bl	8013988 <__assert_func>
 80131d4:	3101      	adds	r1, #1
 80131d6:	005b      	lsls	r3, r3, #1
 80131d8:	e7ee      	b.n	80131b8 <__lshift+0x1c>
 80131da:	2300      	movs	r3, #0
 80131dc:	f100 0114 	add.w	r1, r0, #20
 80131e0:	f100 0210 	add.w	r2, r0, #16
 80131e4:	4618      	mov	r0, r3
 80131e6:	4553      	cmp	r3, sl
 80131e8:	db33      	blt.n	8013252 <__lshift+0xb6>
 80131ea:	6920      	ldr	r0, [r4, #16]
 80131ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131f0:	f104 0314 	add.w	r3, r4, #20
 80131f4:	f019 091f 	ands.w	r9, r9, #31
 80131f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013200:	d02b      	beq.n	801325a <__lshift+0xbe>
 8013202:	f1c9 0e20 	rsb	lr, r9, #32
 8013206:	468a      	mov	sl, r1
 8013208:	2200      	movs	r2, #0
 801320a:	6818      	ldr	r0, [r3, #0]
 801320c:	fa00 f009 	lsl.w	r0, r0, r9
 8013210:	4310      	orrs	r0, r2
 8013212:	f84a 0b04 	str.w	r0, [sl], #4
 8013216:	f853 2b04 	ldr.w	r2, [r3], #4
 801321a:	459c      	cmp	ip, r3
 801321c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013220:	d8f3      	bhi.n	801320a <__lshift+0x6e>
 8013222:	ebac 0304 	sub.w	r3, ip, r4
 8013226:	3b15      	subs	r3, #21
 8013228:	f023 0303 	bic.w	r3, r3, #3
 801322c:	3304      	adds	r3, #4
 801322e:	f104 0015 	add.w	r0, r4, #21
 8013232:	4584      	cmp	ip, r0
 8013234:	bf38      	it	cc
 8013236:	2304      	movcc	r3, #4
 8013238:	50ca      	str	r2, [r1, r3]
 801323a:	b10a      	cbz	r2, 8013240 <__lshift+0xa4>
 801323c:	f108 0602 	add.w	r6, r8, #2
 8013240:	3e01      	subs	r6, #1
 8013242:	4638      	mov	r0, r7
 8013244:	612e      	str	r6, [r5, #16]
 8013246:	4621      	mov	r1, r4
 8013248:	f7ff fdda 	bl	8012e00 <_Bfree>
 801324c:	4628      	mov	r0, r5
 801324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013252:	f842 0f04 	str.w	r0, [r2, #4]!
 8013256:	3301      	adds	r3, #1
 8013258:	e7c5      	b.n	80131e6 <__lshift+0x4a>
 801325a:	3904      	subs	r1, #4
 801325c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013260:	f841 2f04 	str.w	r2, [r1, #4]!
 8013264:	459c      	cmp	ip, r3
 8013266:	d8f9      	bhi.n	801325c <__lshift+0xc0>
 8013268:	e7ea      	b.n	8013240 <__lshift+0xa4>
 801326a:	bf00      	nop
 801326c:	08014328 	.word	0x08014328
 8013270:	08014339 	.word	0x08014339

08013274 <__mcmp>:
 8013274:	690a      	ldr	r2, [r1, #16]
 8013276:	4603      	mov	r3, r0
 8013278:	6900      	ldr	r0, [r0, #16]
 801327a:	1a80      	subs	r0, r0, r2
 801327c:	b530      	push	{r4, r5, lr}
 801327e:	d10e      	bne.n	801329e <__mcmp+0x2a>
 8013280:	3314      	adds	r3, #20
 8013282:	3114      	adds	r1, #20
 8013284:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013288:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801328c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013290:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013294:	4295      	cmp	r5, r2
 8013296:	d003      	beq.n	80132a0 <__mcmp+0x2c>
 8013298:	d205      	bcs.n	80132a6 <__mcmp+0x32>
 801329a:	f04f 30ff 	mov.w	r0, #4294967295
 801329e:	bd30      	pop	{r4, r5, pc}
 80132a0:	42a3      	cmp	r3, r4
 80132a2:	d3f3      	bcc.n	801328c <__mcmp+0x18>
 80132a4:	e7fb      	b.n	801329e <__mcmp+0x2a>
 80132a6:	2001      	movs	r0, #1
 80132a8:	e7f9      	b.n	801329e <__mcmp+0x2a>
	...

080132ac <__mdiff>:
 80132ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b0:	4689      	mov	r9, r1
 80132b2:	4606      	mov	r6, r0
 80132b4:	4611      	mov	r1, r2
 80132b6:	4648      	mov	r0, r9
 80132b8:	4614      	mov	r4, r2
 80132ba:	f7ff ffdb 	bl	8013274 <__mcmp>
 80132be:	1e05      	subs	r5, r0, #0
 80132c0:	d112      	bne.n	80132e8 <__mdiff+0x3c>
 80132c2:	4629      	mov	r1, r5
 80132c4:	4630      	mov	r0, r6
 80132c6:	f7ff fd5b 	bl	8012d80 <_Balloc>
 80132ca:	4602      	mov	r2, r0
 80132cc:	b928      	cbnz	r0, 80132da <__mdiff+0x2e>
 80132ce:	4b3f      	ldr	r3, [pc, #252]	@ (80133cc <__mdiff+0x120>)
 80132d0:	f240 2137 	movw	r1, #567	@ 0x237
 80132d4:	483e      	ldr	r0, [pc, #248]	@ (80133d0 <__mdiff+0x124>)
 80132d6:	f000 fb57 	bl	8013988 <__assert_func>
 80132da:	2301      	movs	r3, #1
 80132dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132e0:	4610      	mov	r0, r2
 80132e2:	b003      	add	sp, #12
 80132e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e8:	bfbc      	itt	lt
 80132ea:	464b      	movlt	r3, r9
 80132ec:	46a1      	movlt	r9, r4
 80132ee:	4630      	mov	r0, r6
 80132f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80132f4:	bfba      	itte	lt
 80132f6:	461c      	movlt	r4, r3
 80132f8:	2501      	movlt	r5, #1
 80132fa:	2500      	movge	r5, #0
 80132fc:	f7ff fd40 	bl	8012d80 <_Balloc>
 8013300:	4602      	mov	r2, r0
 8013302:	b918      	cbnz	r0, 801330c <__mdiff+0x60>
 8013304:	4b31      	ldr	r3, [pc, #196]	@ (80133cc <__mdiff+0x120>)
 8013306:	f240 2145 	movw	r1, #581	@ 0x245
 801330a:	e7e3      	b.n	80132d4 <__mdiff+0x28>
 801330c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013310:	6926      	ldr	r6, [r4, #16]
 8013312:	60c5      	str	r5, [r0, #12]
 8013314:	f109 0310 	add.w	r3, r9, #16
 8013318:	f109 0514 	add.w	r5, r9, #20
 801331c:	f104 0e14 	add.w	lr, r4, #20
 8013320:	f100 0b14 	add.w	fp, r0, #20
 8013324:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013328:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801332c:	9301      	str	r3, [sp, #4]
 801332e:	46d9      	mov	r9, fp
 8013330:	f04f 0c00 	mov.w	ip, #0
 8013334:	9b01      	ldr	r3, [sp, #4]
 8013336:	f85e 0b04 	ldr.w	r0, [lr], #4
 801333a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801333e:	9301      	str	r3, [sp, #4]
 8013340:	fa1f f38a 	uxth.w	r3, sl
 8013344:	4619      	mov	r1, r3
 8013346:	b283      	uxth	r3, r0
 8013348:	1acb      	subs	r3, r1, r3
 801334a:	0c00      	lsrs	r0, r0, #16
 801334c:	4463      	add	r3, ip
 801334e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013352:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013356:	b29b      	uxth	r3, r3
 8013358:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801335c:	4576      	cmp	r6, lr
 801335e:	f849 3b04 	str.w	r3, [r9], #4
 8013362:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013366:	d8e5      	bhi.n	8013334 <__mdiff+0x88>
 8013368:	1b33      	subs	r3, r6, r4
 801336a:	3b15      	subs	r3, #21
 801336c:	f023 0303 	bic.w	r3, r3, #3
 8013370:	3415      	adds	r4, #21
 8013372:	3304      	adds	r3, #4
 8013374:	42a6      	cmp	r6, r4
 8013376:	bf38      	it	cc
 8013378:	2304      	movcc	r3, #4
 801337a:	441d      	add	r5, r3
 801337c:	445b      	add	r3, fp
 801337e:	461e      	mov	r6, r3
 8013380:	462c      	mov	r4, r5
 8013382:	4544      	cmp	r4, r8
 8013384:	d30e      	bcc.n	80133a4 <__mdiff+0xf8>
 8013386:	f108 0103 	add.w	r1, r8, #3
 801338a:	1b49      	subs	r1, r1, r5
 801338c:	f021 0103 	bic.w	r1, r1, #3
 8013390:	3d03      	subs	r5, #3
 8013392:	45a8      	cmp	r8, r5
 8013394:	bf38      	it	cc
 8013396:	2100      	movcc	r1, #0
 8013398:	440b      	add	r3, r1
 801339a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801339e:	b191      	cbz	r1, 80133c6 <__mdiff+0x11a>
 80133a0:	6117      	str	r7, [r2, #16]
 80133a2:	e79d      	b.n	80132e0 <__mdiff+0x34>
 80133a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80133a8:	46e6      	mov	lr, ip
 80133aa:	0c08      	lsrs	r0, r1, #16
 80133ac:	fa1c fc81 	uxtah	ip, ip, r1
 80133b0:	4471      	add	r1, lr
 80133b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80133b6:	b289      	uxth	r1, r1
 80133b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80133bc:	f846 1b04 	str.w	r1, [r6], #4
 80133c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80133c4:	e7dd      	b.n	8013382 <__mdiff+0xd6>
 80133c6:	3f01      	subs	r7, #1
 80133c8:	e7e7      	b.n	801339a <__mdiff+0xee>
 80133ca:	bf00      	nop
 80133cc:	08014328 	.word	0x08014328
 80133d0:	08014339 	.word	0x08014339

080133d4 <__d2b>:
 80133d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133d8:	460f      	mov	r7, r1
 80133da:	2101      	movs	r1, #1
 80133dc:	ec59 8b10 	vmov	r8, r9, d0
 80133e0:	4616      	mov	r6, r2
 80133e2:	f7ff fccd 	bl	8012d80 <_Balloc>
 80133e6:	4604      	mov	r4, r0
 80133e8:	b930      	cbnz	r0, 80133f8 <__d2b+0x24>
 80133ea:	4602      	mov	r2, r0
 80133ec:	4b23      	ldr	r3, [pc, #140]	@ (801347c <__d2b+0xa8>)
 80133ee:	4824      	ldr	r0, [pc, #144]	@ (8013480 <__d2b+0xac>)
 80133f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80133f4:	f000 fac8 	bl	8013988 <__assert_func>
 80133f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80133fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013400:	b10d      	cbz	r5, 8013406 <__d2b+0x32>
 8013402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013406:	9301      	str	r3, [sp, #4]
 8013408:	f1b8 0300 	subs.w	r3, r8, #0
 801340c:	d023      	beq.n	8013456 <__d2b+0x82>
 801340e:	4668      	mov	r0, sp
 8013410:	9300      	str	r3, [sp, #0]
 8013412:	f7ff fd7c 	bl	8012f0e <__lo0bits>
 8013416:	e9dd 1200 	ldrd	r1, r2, [sp]
 801341a:	b1d0      	cbz	r0, 8013452 <__d2b+0x7e>
 801341c:	f1c0 0320 	rsb	r3, r0, #32
 8013420:	fa02 f303 	lsl.w	r3, r2, r3
 8013424:	430b      	orrs	r3, r1
 8013426:	40c2      	lsrs	r2, r0
 8013428:	6163      	str	r3, [r4, #20]
 801342a:	9201      	str	r2, [sp, #4]
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	61a3      	str	r3, [r4, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	bf0c      	ite	eq
 8013434:	2201      	moveq	r2, #1
 8013436:	2202      	movne	r2, #2
 8013438:	6122      	str	r2, [r4, #16]
 801343a:	b1a5      	cbz	r5, 8013466 <__d2b+0x92>
 801343c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013440:	4405      	add	r5, r0
 8013442:	603d      	str	r5, [r7, #0]
 8013444:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013448:	6030      	str	r0, [r6, #0]
 801344a:	4620      	mov	r0, r4
 801344c:	b003      	add	sp, #12
 801344e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013452:	6161      	str	r1, [r4, #20]
 8013454:	e7ea      	b.n	801342c <__d2b+0x58>
 8013456:	a801      	add	r0, sp, #4
 8013458:	f7ff fd59 	bl	8012f0e <__lo0bits>
 801345c:	9b01      	ldr	r3, [sp, #4]
 801345e:	6163      	str	r3, [r4, #20]
 8013460:	3020      	adds	r0, #32
 8013462:	2201      	movs	r2, #1
 8013464:	e7e8      	b.n	8013438 <__d2b+0x64>
 8013466:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801346a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801346e:	6038      	str	r0, [r7, #0]
 8013470:	6918      	ldr	r0, [r3, #16]
 8013472:	f7ff fd2d 	bl	8012ed0 <__hi0bits>
 8013476:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801347a:	e7e5      	b.n	8013448 <__d2b+0x74>
 801347c:	08014328 	.word	0x08014328
 8013480:	08014339 	.word	0x08014339

08013484 <__sfputc_r>:
 8013484:	6893      	ldr	r3, [r2, #8]
 8013486:	3b01      	subs	r3, #1
 8013488:	2b00      	cmp	r3, #0
 801348a:	b410      	push	{r4}
 801348c:	6093      	str	r3, [r2, #8]
 801348e:	da08      	bge.n	80134a2 <__sfputc_r+0x1e>
 8013490:	6994      	ldr	r4, [r2, #24]
 8013492:	42a3      	cmp	r3, r4
 8013494:	db01      	blt.n	801349a <__sfputc_r+0x16>
 8013496:	290a      	cmp	r1, #10
 8013498:	d103      	bne.n	80134a2 <__sfputc_r+0x1e>
 801349a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801349e:	f7fe bc00 	b.w	8011ca2 <__swbuf_r>
 80134a2:	6813      	ldr	r3, [r2, #0]
 80134a4:	1c58      	adds	r0, r3, #1
 80134a6:	6010      	str	r0, [r2, #0]
 80134a8:	7019      	strb	r1, [r3, #0]
 80134aa:	4608      	mov	r0, r1
 80134ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134b0:	4770      	bx	lr

080134b2 <__sfputs_r>:
 80134b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134b4:	4606      	mov	r6, r0
 80134b6:	460f      	mov	r7, r1
 80134b8:	4614      	mov	r4, r2
 80134ba:	18d5      	adds	r5, r2, r3
 80134bc:	42ac      	cmp	r4, r5
 80134be:	d101      	bne.n	80134c4 <__sfputs_r+0x12>
 80134c0:	2000      	movs	r0, #0
 80134c2:	e007      	b.n	80134d4 <__sfputs_r+0x22>
 80134c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134c8:	463a      	mov	r2, r7
 80134ca:	4630      	mov	r0, r6
 80134cc:	f7ff ffda 	bl	8013484 <__sfputc_r>
 80134d0:	1c43      	adds	r3, r0, #1
 80134d2:	d1f3      	bne.n	80134bc <__sfputs_r+0xa>
 80134d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080134d8 <_vfiprintf_r>:
 80134d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134dc:	460d      	mov	r5, r1
 80134de:	b09d      	sub	sp, #116	@ 0x74
 80134e0:	4614      	mov	r4, r2
 80134e2:	4698      	mov	r8, r3
 80134e4:	4606      	mov	r6, r0
 80134e6:	b118      	cbz	r0, 80134f0 <_vfiprintf_r+0x18>
 80134e8:	6a03      	ldr	r3, [r0, #32]
 80134ea:	b90b      	cbnz	r3, 80134f0 <_vfiprintf_r+0x18>
 80134ec:	f7fe fa3c 	bl	8011968 <__sinit>
 80134f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80134f2:	07d9      	lsls	r1, r3, #31
 80134f4:	d405      	bmi.n	8013502 <_vfiprintf_r+0x2a>
 80134f6:	89ab      	ldrh	r3, [r5, #12]
 80134f8:	059a      	lsls	r2, r3, #22
 80134fa:	d402      	bmi.n	8013502 <_vfiprintf_r+0x2a>
 80134fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80134fe:	f7fe fce2 	bl	8011ec6 <__retarget_lock_acquire_recursive>
 8013502:	89ab      	ldrh	r3, [r5, #12]
 8013504:	071b      	lsls	r3, r3, #28
 8013506:	d501      	bpl.n	801350c <_vfiprintf_r+0x34>
 8013508:	692b      	ldr	r3, [r5, #16]
 801350a:	b99b      	cbnz	r3, 8013534 <_vfiprintf_r+0x5c>
 801350c:	4629      	mov	r1, r5
 801350e:	4630      	mov	r0, r6
 8013510:	f7fe fc06 	bl	8011d20 <__swsetup_r>
 8013514:	b170      	cbz	r0, 8013534 <_vfiprintf_r+0x5c>
 8013516:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013518:	07dc      	lsls	r4, r3, #31
 801351a:	d504      	bpl.n	8013526 <_vfiprintf_r+0x4e>
 801351c:	f04f 30ff 	mov.w	r0, #4294967295
 8013520:	b01d      	add	sp, #116	@ 0x74
 8013522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013526:	89ab      	ldrh	r3, [r5, #12]
 8013528:	0598      	lsls	r0, r3, #22
 801352a:	d4f7      	bmi.n	801351c <_vfiprintf_r+0x44>
 801352c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801352e:	f7fe fccb 	bl	8011ec8 <__retarget_lock_release_recursive>
 8013532:	e7f3      	b.n	801351c <_vfiprintf_r+0x44>
 8013534:	2300      	movs	r3, #0
 8013536:	9309      	str	r3, [sp, #36]	@ 0x24
 8013538:	2320      	movs	r3, #32
 801353a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801353e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013542:	2330      	movs	r3, #48	@ 0x30
 8013544:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80136f4 <_vfiprintf_r+0x21c>
 8013548:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801354c:	f04f 0901 	mov.w	r9, #1
 8013550:	4623      	mov	r3, r4
 8013552:	469a      	mov	sl, r3
 8013554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013558:	b10a      	cbz	r2, 801355e <_vfiprintf_r+0x86>
 801355a:	2a25      	cmp	r2, #37	@ 0x25
 801355c:	d1f9      	bne.n	8013552 <_vfiprintf_r+0x7a>
 801355e:	ebba 0b04 	subs.w	fp, sl, r4
 8013562:	d00b      	beq.n	801357c <_vfiprintf_r+0xa4>
 8013564:	465b      	mov	r3, fp
 8013566:	4622      	mov	r2, r4
 8013568:	4629      	mov	r1, r5
 801356a:	4630      	mov	r0, r6
 801356c:	f7ff ffa1 	bl	80134b2 <__sfputs_r>
 8013570:	3001      	adds	r0, #1
 8013572:	f000 80a7 	beq.w	80136c4 <_vfiprintf_r+0x1ec>
 8013576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013578:	445a      	add	r2, fp
 801357a:	9209      	str	r2, [sp, #36]	@ 0x24
 801357c:	f89a 3000 	ldrb.w	r3, [sl]
 8013580:	2b00      	cmp	r3, #0
 8013582:	f000 809f 	beq.w	80136c4 <_vfiprintf_r+0x1ec>
 8013586:	2300      	movs	r3, #0
 8013588:	f04f 32ff 	mov.w	r2, #4294967295
 801358c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013590:	f10a 0a01 	add.w	sl, sl, #1
 8013594:	9304      	str	r3, [sp, #16]
 8013596:	9307      	str	r3, [sp, #28]
 8013598:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801359c:	931a      	str	r3, [sp, #104]	@ 0x68
 801359e:	4654      	mov	r4, sl
 80135a0:	2205      	movs	r2, #5
 80135a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135a6:	4853      	ldr	r0, [pc, #332]	@ (80136f4 <_vfiprintf_r+0x21c>)
 80135a8:	f7ec fe3a 	bl	8000220 <memchr>
 80135ac:	9a04      	ldr	r2, [sp, #16]
 80135ae:	b9d8      	cbnz	r0, 80135e8 <_vfiprintf_r+0x110>
 80135b0:	06d1      	lsls	r1, r2, #27
 80135b2:	bf44      	itt	mi
 80135b4:	2320      	movmi	r3, #32
 80135b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135ba:	0713      	lsls	r3, r2, #28
 80135bc:	bf44      	itt	mi
 80135be:	232b      	movmi	r3, #43	@ 0x2b
 80135c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135c4:	f89a 3000 	ldrb.w	r3, [sl]
 80135c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80135ca:	d015      	beq.n	80135f8 <_vfiprintf_r+0x120>
 80135cc:	9a07      	ldr	r2, [sp, #28]
 80135ce:	4654      	mov	r4, sl
 80135d0:	2000      	movs	r0, #0
 80135d2:	f04f 0c0a 	mov.w	ip, #10
 80135d6:	4621      	mov	r1, r4
 80135d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135dc:	3b30      	subs	r3, #48	@ 0x30
 80135de:	2b09      	cmp	r3, #9
 80135e0:	d94b      	bls.n	801367a <_vfiprintf_r+0x1a2>
 80135e2:	b1b0      	cbz	r0, 8013612 <_vfiprintf_r+0x13a>
 80135e4:	9207      	str	r2, [sp, #28]
 80135e6:	e014      	b.n	8013612 <_vfiprintf_r+0x13a>
 80135e8:	eba0 0308 	sub.w	r3, r0, r8
 80135ec:	fa09 f303 	lsl.w	r3, r9, r3
 80135f0:	4313      	orrs	r3, r2
 80135f2:	9304      	str	r3, [sp, #16]
 80135f4:	46a2      	mov	sl, r4
 80135f6:	e7d2      	b.n	801359e <_vfiprintf_r+0xc6>
 80135f8:	9b03      	ldr	r3, [sp, #12]
 80135fa:	1d19      	adds	r1, r3, #4
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	9103      	str	r1, [sp, #12]
 8013600:	2b00      	cmp	r3, #0
 8013602:	bfbb      	ittet	lt
 8013604:	425b      	neglt	r3, r3
 8013606:	f042 0202 	orrlt.w	r2, r2, #2
 801360a:	9307      	strge	r3, [sp, #28]
 801360c:	9307      	strlt	r3, [sp, #28]
 801360e:	bfb8      	it	lt
 8013610:	9204      	strlt	r2, [sp, #16]
 8013612:	7823      	ldrb	r3, [r4, #0]
 8013614:	2b2e      	cmp	r3, #46	@ 0x2e
 8013616:	d10a      	bne.n	801362e <_vfiprintf_r+0x156>
 8013618:	7863      	ldrb	r3, [r4, #1]
 801361a:	2b2a      	cmp	r3, #42	@ 0x2a
 801361c:	d132      	bne.n	8013684 <_vfiprintf_r+0x1ac>
 801361e:	9b03      	ldr	r3, [sp, #12]
 8013620:	1d1a      	adds	r2, r3, #4
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	9203      	str	r2, [sp, #12]
 8013626:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801362a:	3402      	adds	r4, #2
 801362c:	9305      	str	r3, [sp, #20]
 801362e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013704 <_vfiprintf_r+0x22c>
 8013632:	7821      	ldrb	r1, [r4, #0]
 8013634:	2203      	movs	r2, #3
 8013636:	4650      	mov	r0, sl
 8013638:	f7ec fdf2 	bl	8000220 <memchr>
 801363c:	b138      	cbz	r0, 801364e <_vfiprintf_r+0x176>
 801363e:	9b04      	ldr	r3, [sp, #16]
 8013640:	eba0 000a 	sub.w	r0, r0, sl
 8013644:	2240      	movs	r2, #64	@ 0x40
 8013646:	4082      	lsls	r2, r0
 8013648:	4313      	orrs	r3, r2
 801364a:	3401      	adds	r4, #1
 801364c:	9304      	str	r3, [sp, #16]
 801364e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013652:	4829      	ldr	r0, [pc, #164]	@ (80136f8 <_vfiprintf_r+0x220>)
 8013654:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013658:	2206      	movs	r2, #6
 801365a:	f7ec fde1 	bl	8000220 <memchr>
 801365e:	2800      	cmp	r0, #0
 8013660:	d03f      	beq.n	80136e2 <_vfiprintf_r+0x20a>
 8013662:	4b26      	ldr	r3, [pc, #152]	@ (80136fc <_vfiprintf_r+0x224>)
 8013664:	bb1b      	cbnz	r3, 80136ae <_vfiprintf_r+0x1d6>
 8013666:	9b03      	ldr	r3, [sp, #12]
 8013668:	3307      	adds	r3, #7
 801366a:	f023 0307 	bic.w	r3, r3, #7
 801366e:	3308      	adds	r3, #8
 8013670:	9303      	str	r3, [sp, #12]
 8013672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013674:	443b      	add	r3, r7
 8013676:	9309      	str	r3, [sp, #36]	@ 0x24
 8013678:	e76a      	b.n	8013550 <_vfiprintf_r+0x78>
 801367a:	fb0c 3202 	mla	r2, ip, r2, r3
 801367e:	460c      	mov	r4, r1
 8013680:	2001      	movs	r0, #1
 8013682:	e7a8      	b.n	80135d6 <_vfiprintf_r+0xfe>
 8013684:	2300      	movs	r3, #0
 8013686:	3401      	adds	r4, #1
 8013688:	9305      	str	r3, [sp, #20]
 801368a:	4619      	mov	r1, r3
 801368c:	f04f 0c0a 	mov.w	ip, #10
 8013690:	4620      	mov	r0, r4
 8013692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013696:	3a30      	subs	r2, #48	@ 0x30
 8013698:	2a09      	cmp	r2, #9
 801369a:	d903      	bls.n	80136a4 <_vfiprintf_r+0x1cc>
 801369c:	2b00      	cmp	r3, #0
 801369e:	d0c6      	beq.n	801362e <_vfiprintf_r+0x156>
 80136a0:	9105      	str	r1, [sp, #20]
 80136a2:	e7c4      	b.n	801362e <_vfiprintf_r+0x156>
 80136a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80136a8:	4604      	mov	r4, r0
 80136aa:	2301      	movs	r3, #1
 80136ac:	e7f0      	b.n	8013690 <_vfiprintf_r+0x1b8>
 80136ae:	ab03      	add	r3, sp, #12
 80136b0:	9300      	str	r3, [sp, #0]
 80136b2:	462a      	mov	r2, r5
 80136b4:	4b12      	ldr	r3, [pc, #72]	@ (8013700 <_vfiprintf_r+0x228>)
 80136b6:	a904      	add	r1, sp, #16
 80136b8:	4630      	mov	r0, r6
 80136ba:	f7fd fd11 	bl	80110e0 <_printf_float>
 80136be:	4607      	mov	r7, r0
 80136c0:	1c78      	adds	r0, r7, #1
 80136c2:	d1d6      	bne.n	8013672 <_vfiprintf_r+0x19a>
 80136c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80136c6:	07d9      	lsls	r1, r3, #31
 80136c8:	d405      	bmi.n	80136d6 <_vfiprintf_r+0x1fe>
 80136ca:	89ab      	ldrh	r3, [r5, #12]
 80136cc:	059a      	lsls	r2, r3, #22
 80136ce:	d402      	bmi.n	80136d6 <_vfiprintf_r+0x1fe>
 80136d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80136d2:	f7fe fbf9 	bl	8011ec8 <__retarget_lock_release_recursive>
 80136d6:	89ab      	ldrh	r3, [r5, #12]
 80136d8:	065b      	lsls	r3, r3, #25
 80136da:	f53f af1f 	bmi.w	801351c <_vfiprintf_r+0x44>
 80136de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80136e0:	e71e      	b.n	8013520 <_vfiprintf_r+0x48>
 80136e2:	ab03      	add	r3, sp, #12
 80136e4:	9300      	str	r3, [sp, #0]
 80136e6:	462a      	mov	r2, r5
 80136e8:	4b05      	ldr	r3, [pc, #20]	@ (8013700 <_vfiprintf_r+0x228>)
 80136ea:	a904      	add	r1, sp, #16
 80136ec:	4630      	mov	r0, r6
 80136ee:	f7fd ff8f 	bl	8011610 <_printf_i>
 80136f2:	e7e4      	b.n	80136be <_vfiprintf_r+0x1e6>
 80136f4:	08014490 	.word	0x08014490
 80136f8:	0801449a 	.word	0x0801449a
 80136fc:	080110e1 	.word	0x080110e1
 8013700:	080134b3 	.word	0x080134b3
 8013704:	08014496 	.word	0x08014496

08013708 <__sflush_r>:
 8013708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013710:	0716      	lsls	r6, r2, #28
 8013712:	4605      	mov	r5, r0
 8013714:	460c      	mov	r4, r1
 8013716:	d454      	bmi.n	80137c2 <__sflush_r+0xba>
 8013718:	684b      	ldr	r3, [r1, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	dc02      	bgt.n	8013724 <__sflush_r+0x1c>
 801371e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013720:	2b00      	cmp	r3, #0
 8013722:	dd48      	ble.n	80137b6 <__sflush_r+0xae>
 8013724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013726:	2e00      	cmp	r6, #0
 8013728:	d045      	beq.n	80137b6 <__sflush_r+0xae>
 801372a:	2300      	movs	r3, #0
 801372c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013730:	682f      	ldr	r7, [r5, #0]
 8013732:	6a21      	ldr	r1, [r4, #32]
 8013734:	602b      	str	r3, [r5, #0]
 8013736:	d030      	beq.n	801379a <__sflush_r+0x92>
 8013738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801373a:	89a3      	ldrh	r3, [r4, #12]
 801373c:	0759      	lsls	r1, r3, #29
 801373e:	d505      	bpl.n	801374c <__sflush_r+0x44>
 8013740:	6863      	ldr	r3, [r4, #4]
 8013742:	1ad2      	subs	r2, r2, r3
 8013744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013746:	b10b      	cbz	r3, 801374c <__sflush_r+0x44>
 8013748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801374a:	1ad2      	subs	r2, r2, r3
 801374c:	2300      	movs	r3, #0
 801374e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013750:	6a21      	ldr	r1, [r4, #32]
 8013752:	4628      	mov	r0, r5
 8013754:	47b0      	blx	r6
 8013756:	1c43      	adds	r3, r0, #1
 8013758:	89a3      	ldrh	r3, [r4, #12]
 801375a:	d106      	bne.n	801376a <__sflush_r+0x62>
 801375c:	6829      	ldr	r1, [r5, #0]
 801375e:	291d      	cmp	r1, #29
 8013760:	d82b      	bhi.n	80137ba <__sflush_r+0xb2>
 8013762:	4a2a      	ldr	r2, [pc, #168]	@ (801380c <__sflush_r+0x104>)
 8013764:	410a      	asrs	r2, r1
 8013766:	07d6      	lsls	r6, r2, #31
 8013768:	d427      	bmi.n	80137ba <__sflush_r+0xb2>
 801376a:	2200      	movs	r2, #0
 801376c:	6062      	str	r2, [r4, #4]
 801376e:	04d9      	lsls	r1, r3, #19
 8013770:	6922      	ldr	r2, [r4, #16]
 8013772:	6022      	str	r2, [r4, #0]
 8013774:	d504      	bpl.n	8013780 <__sflush_r+0x78>
 8013776:	1c42      	adds	r2, r0, #1
 8013778:	d101      	bne.n	801377e <__sflush_r+0x76>
 801377a:	682b      	ldr	r3, [r5, #0]
 801377c:	b903      	cbnz	r3, 8013780 <__sflush_r+0x78>
 801377e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013782:	602f      	str	r7, [r5, #0]
 8013784:	b1b9      	cbz	r1, 80137b6 <__sflush_r+0xae>
 8013786:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801378a:	4299      	cmp	r1, r3
 801378c:	d002      	beq.n	8013794 <__sflush_r+0x8c>
 801378e:	4628      	mov	r0, r5
 8013790:	f7ff f9f6 	bl	8012b80 <_free_r>
 8013794:	2300      	movs	r3, #0
 8013796:	6363      	str	r3, [r4, #52]	@ 0x34
 8013798:	e00d      	b.n	80137b6 <__sflush_r+0xae>
 801379a:	2301      	movs	r3, #1
 801379c:	4628      	mov	r0, r5
 801379e:	47b0      	blx	r6
 80137a0:	4602      	mov	r2, r0
 80137a2:	1c50      	adds	r0, r2, #1
 80137a4:	d1c9      	bne.n	801373a <__sflush_r+0x32>
 80137a6:	682b      	ldr	r3, [r5, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d0c6      	beq.n	801373a <__sflush_r+0x32>
 80137ac:	2b1d      	cmp	r3, #29
 80137ae:	d001      	beq.n	80137b4 <__sflush_r+0xac>
 80137b0:	2b16      	cmp	r3, #22
 80137b2:	d11e      	bne.n	80137f2 <__sflush_r+0xea>
 80137b4:	602f      	str	r7, [r5, #0]
 80137b6:	2000      	movs	r0, #0
 80137b8:	e022      	b.n	8013800 <__sflush_r+0xf8>
 80137ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137be:	b21b      	sxth	r3, r3
 80137c0:	e01b      	b.n	80137fa <__sflush_r+0xf2>
 80137c2:	690f      	ldr	r7, [r1, #16]
 80137c4:	2f00      	cmp	r7, #0
 80137c6:	d0f6      	beq.n	80137b6 <__sflush_r+0xae>
 80137c8:	0793      	lsls	r3, r2, #30
 80137ca:	680e      	ldr	r6, [r1, #0]
 80137cc:	bf08      	it	eq
 80137ce:	694b      	ldreq	r3, [r1, #20]
 80137d0:	600f      	str	r7, [r1, #0]
 80137d2:	bf18      	it	ne
 80137d4:	2300      	movne	r3, #0
 80137d6:	eba6 0807 	sub.w	r8, r6, r7
 80137da:	608b      	str	r3, [r1, #8]
 80137dc:	f1b8 0f00 	cmp.w	r8, #0
 80137e0:	dde9      	ble.n	80137b6 <__sflush_r+0xae>
 80137e2:	6a21      	ldr	r1, [r4, #32]
 80137e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80137e6:	4643      	mov	r3, r8
 80137e8:	463a      	mov	r2, r7
 80137ea:	4628      	mov	r0, r5
 80137ec:	47b0      	blx	r6
 80137ee:	2800      	cmp	r0, #0
 80137f0:	dc08      	bgt.n	8013804 <__sflush_r+0xfc>
 80137f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137fa:	81a3      	strh	r3, [r4, #12]
 80137fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013804:	4407      	add	r7, r0
 8013806:	eba8 0800 	sub.w	r8, r8, r0
 801380a:	e7e7      	b.n	80137dc <__sflush_r+0xd4>
 801380c:	dfbffffe 	.word	0xdfbffffe

08013810 <_fflush_r>:
 8013810:	b538      	push	{r3, r4, r5, lr}
 8013812:	690b      	ldr	r3, [r1, #16]
 8013814:	4605      	mov	r5, r0
 8013816:	460c      	mov	r4, r1
 8013818:	b913      	cbnz	r3, 8013820 <_fflush_r+0x10>
 801381a:	2500      	movs	r5, #0
 801381c:	4628      	mov	r0, r5
 801381e:	bd38      	pop	{r3, r4, r5, pc}
 8013820:	b118      	cbz	r0, 801382a <_fflush_r+0x1a>
 8013822:	6a03      	ldr	r3, [r0, #32]
 8013824:	b90b      	cbnz	r3, 801382a <_fflush_r+0x1a>
 8013826:	f7fe f89f 	bl	8011968 <__sinit>
 801382a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d0f3      	beq.n	801381a <_fflush_r+0xa>
 8013832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013834:	07d0      	lsls	r0, r2, #31
 8013836:	d404      	bmi.n	8013842 <_fflush_r+0x32>
 8013838:	0599      	lsls	r1, r3, #22
 801383a:	d402      	bmi.n	8013842 <_fflush_r+0x32>
 801383c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801383e:	f7fe fb42 	bl	8011ec6 <__retarget_lock_acquire_recursive>
 8013842:	4628      	mov	r0, r5
 8013844:	4621      	mov	r1, r4
 8013846:	f7ff ff5f 	bl	8013708 <__sflush_r>
 801384a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801384c:	07da      	lsls	r2, r3, #31
 801384e:	4605      	mov	r5, r0
 8013850:	d4e4      	bmi.n	801381c <_fflush_r+0xc>
 8013852:	89a3      	ldrh	r3, [r4, #12]
 8013854:	059b      	lsls	r3, r3, #22
 8013856:	d4e1      	bmi.n	801381c <_fflush_r+0xc>
 8013858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801385a:	f7fe fb35 	bl	8011ec8 <__retarget_lock_release_recursive>
 801385e:	e7dd      	b.n	801381c <_fflush_r+0xc>

08013860 <__swhatbuf_r>:
 8013860:	b570      	push	{r4, r5, r6, lr}
 8013862:	460c      	mov	r4, r1
 8013864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013868:	2900      	cmp	r1, #0
 801386a:	b096      	sub	sp, #88	@ 0x58
 801386c:	4615      	mov	r5, r2
 801386e:	461e      	mov	r6, r3
 8013870:	da0d      	bge.n	801388e <__swhatbuf_r+0x2e>
 8013872:	89a3      	ldrh	r3, [r4, #12]
 8013874:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013878:	f04f 0100 	mov.w	r1, #0
 801387c:	bf14      	ite	ne
 801387e:	2340      	movne	r3, #64	@ 0x40
 8013880:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013884:	2000      	movs	r0, #0
 8013886:	6031      	str	r1, [r6, #0]
 8013888:	602b      	str	r3, [r5, #0]
 801388a:	b016      	add	sp, #88	@ 0x58
 801388c:	bd70      	pop	{r4, r5, r6, pc}
 801388e:	466a      	mov	r2, sp
 8013890:	f000 f848 	bl	8013924 <_fstat_r>
 8013894:	2800      	cmp	r0, #0
 8013896:	dbec      	blt.n	8013872 <__swhatbuf_r+0x12>
 8013898:	9901      	ldr	r1, [sp, #4]
 801389a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801389e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80138a2:	4259      	negs	r1, r3
 80138a4:	4159      	adcs	r1, r3
 80138a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80138aa:	e7eb      	b.n	8013884 <__swhatbuf_r+0x24>

080138ac <__smakebuf_r>:
 80138ac:	898b      	ldrh	r3, [r1, #12]
 80138ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138b0:	079d      	lsls	r5, r3, #30
 80138b2:	4606      	mov	r6, r0
 80138b4:	460c      	mov	r4, r1
 80138b6:	d507      	bpl.n	80138c8 <__smakebuf_r+0x1c>
 80138b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80138bc:	6023      	str	r3, [r4, #0]
 80138be:	6123      	str	r3, [r4, #16]
 80138c0:	2301      	movs	r3, #1
 80138c2:	6163      	str	r3, [r4, #20]
 80138c4:	b003      	add	sp, #12
 80138c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c8:	ab01      	add	r3, sp, #4
 80138ca:	466a      	mov	r2, sp
 80138cc:	f7ff ffc8 	bl	8013860 <__swhatbuf_r>
 80138d0:	9f00      	ldr	r7, [sp, #0]
 80138d2:	4605      	mov	r5, r0
 80138d4:	4639      	mov	r1, r7
 80138d6:	4630      	mov	r0, r6
 80138d8:	f7ff f9c6 	bl	8012c68 <_malloc_r>
 80138dc:	b948      	cbnz	r0, 80138f2 <__smakebuf_r+0x46>
 80138de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138e2:	059a      	lsls	r2, r3, #22
 80138e4:	d4ee      	bmi.n	80138c4 <__smakebuf_r+0x18>
 80138e6:	f023 0303 	bic.w	r3, r3, #3
 80138ea:	f043 0302 	orr.w	r3, r3, #2
 80138ee:	81a3      	strh	r3, [r4, #12]
 80138f0:	e7e2      	b.n	80138b8 <__smakebuf_r+0xc>
 80138f2:	89a3      	ldrh	r3, [r4, #12]
 80138f4:	6020      	str	r0, [r4, #0]
 80138f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138fa:	81a3      	strh	r3, [r4, #12]
 80138fc:	9b01      	ldr	r3, [sp, #4]
 80138fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013902:	b15b      	cbz	r3, 801391c <__smakebuf_r+0x70>
 8013904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013908:	4630      	mov	r0, r6
 801390a:	f000 f81d 	bl	8013948 <_isatty_r>
 801390e:	b128      	cbz	r0, 801391c <__smakebuf_r+0x70>
 8013910:	89a3      	ldrh	r3, [r4, #12]
 8013912:	f023 0303 	bic.w	r3, r3, #3
 8013916:	f043 0301 	orr.w	r3, r3, #1
 801391a:	81a3      	strh	r3, [r4, #12]
 801391c:	89a3      	ldrh	r3, [r4, #12]
 801391e:	431d      	orrs	r5, r3
 8013920:	81a5      	strh	r5, [r4, #12]
 8013922:	e7cf      	b.n	80138c4 <__smakebuf_r+0x18>

08013924 <_fstat_r>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	4d07      	ldr	r5, [pc, #28]	@ (8013944 <_fstat_r+0x20>)
 8013928:	2300      	movs	r3, #0
 801392a:	4604      	mov	r4, r0
 801392c:	4608      	mov	r0, r1
 801392e:	4611      	mov	r1, r2
 8013930:	602b      	str	r3, [r5, #0]
 8013932:	f7f0 fa4b 	bl	8003dcc <_fstat>
 8013936:	1c43      	adds	r3, r0, #1
 8013938:	d102      	bne.n	8013940 <_fstat_r+0x1c>
 801393a:	682b      	ldr	r3, [r5, #0]
 801393c:	b103      	cbz	r3, 8013940 <_fstat_r+0x1c>
 801393e:	6023      	str	r3, [r4, #0]
 8013940:	bd38      	pop	{r3, r4, r5, pc}
 8013942:	bf00      	nop
 8013944:	20001b20 	.word	0x20001b20

08013948 <_isatty_r>:
 8013948:	b538      	push	{r3, r4, r5, lr}
 801394a:	4d06      	ldr	r5, [pc, #24]	@ (8013964 <_isatty_r+0x1c>)
 801394c:	2300      	movs	r3, #0
 801394e:	4604      	mov	r4, r0
 8013950:	4608      	mov	r0, r1
 8013952:	602b      	str	r3, [r5, #0]
 8013954:	f7f0 fa4a 	bl	8003dec <_isatty>
 8013958:	1c43      	adds	r3, r0, #1
 801395a:	d102      	bne.n	8013962 <_isatty_r+0x1a>
 801395c:	682b      	ldr	r3, [r5, #0]
 801395e:	b103      	cbz	r3, 8013962 <_isatty_r+0x1a>
 8013960:	6023      	str	r3, [r4, #0]
 8013962:	bd38      	pop	{r3, r4, r5, pc}
 8013964:	20001b20 	.word	0x20001b20

08013968 <_sbrk_r>:
 8013968:	b538      	push	{r3, r4, r5, lr}
 801396a:	4d06      	ldr	r5, [pc, #24]	@ (8013984 <_sbrk_r+0x1c>)
 801396c:	2300      	movs	r3, #0
 801396e:	4604      	mov	r4, r0
 8013970:	4608      	mov	r0, r1
 8013972:	602b      	str	r3, [r5, #0]
 8013974:	f7f0 fa52 	bl	8003e1c <_sbrk>
 8013978:	1c43      	adds	r3, r0, #1
 801397a:	d102      	bne.n	8013982 <_sbrk_r+0x1a>
 801397c:	682b      	ldr	r3, [r5, #0]
 801397e:	b103      	cbz	r3, 8013982 <_sbrk_r+0x1a>
 8013980:	6023      	str	r3, [r4, #0]
 8013982:	bd38      	pop	{r3, r4, r5, pc}
 8013984:	20001b20 	.word	0x20001b20

08013988 <__assert_func>:
 8013988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801398a:	4614      	mov	r4, r2
 801398c:	461a      	mov	r2, r3
 801398e:	4b09      	ldr	r3, [pc, #36]	@ (80139b4 <__assert_func+0x2c>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	4605      	mov	r5, r0
 8013994:	68d8      	ldr	r0, [r3, #12]
 8013996:	b954      	cbnz	r4, 80139ae <__assert_func+0x26>
 8013998:	4b07      	ldr	r3, [pc, #28]	@ (80139b8 <__assert_func+0x30>)
 801399a:	461c      	mov	r4, r3
 801399c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139a0:	9100      	str	r1, [sp, #0]
 80139a2:	462b      	mov	r3, r5
 80139a4:	4905      	ldr	r1, [pc, #20]	@ (80139bc <__assert_func+0x34>)
 80139a6:	f000 f841 	bl	8013a2c <fiprintf>
 80139aa:	f000 f851 	bl	8013a50 <abort>
 80139ae:	4b04      	ldr	r3, [pc, #16]	@ (80139c0 <__assert_func+0x38>)
 80139b0:	e7f4      	b.n	801399c <__assert_func+0x14>
 80139b2:	bf00      	nop
 80139b4:	200017b8 	.word	0x200017b8
 80139b8:	080144e6 	.word	0x080144e6
 80139bc:	080144b8 	.word	0x080144b8
 80139c0:	080144ab 	.word	0x080144ab

080139c4 <_calloc_r>:
 80139c4:	b570      	push	{r4, r5, r6, lr}
 80139c6:	fba1 5402 	umull	r5, r4, r1, r2
 80139ca:	b93c      	cbnz	r4, 80139dc <_calloc_r+0x18>
 80139cc:	4629      	mov	r1, r5
 80139ce:	f7ff f94b 	bl	8012c68 <_malloc_r>
 80139d2:	4606      	mov	r6, r0
 80139d4:	b928      	cbnz	r0, 80139e2 <_calloc_r+0x1e>
 80139d6:	2600      	movs	r6, #0
 80139d8:	4630      	mov	r0, r6
 80139da:	bd70      	pop	{r4, r5, r6, pc}
 80139dc:	220c      	movs	r2, #12
 80139de:	6002      	str	r2, [r0, #0]
 80139e0:	e7f9      	b.n	80139d6 <_calloc_r+0x12>
 80139e2:	462a      	mov	r2, r5
 80139e4:	4621      	mov	r1, r4
 80139e6:	f7fe f9f1 	bl	8011dcc <memset>
 80139ea:	e7f5      	b.n	80139d8 <_calloc_r+0x14>

080139ec <__ascii_mbtowc>:
 80139ec:	b082      	sub	sp, #8
 80139ee:	b901      	cbnz	r1, 80139f2 <__ascii_mbtowc+0x6>
 80139f0:	a901      	add	r1, sp, #4
 80139f2:	b142      	cbz	r2, 8013a06 <__ascii_mbtowc+0x1a>
 80139f4:	b14b      	cbz	r3, 8013a0a <__ascii_mbtowc+0x1e>
 80139f6:	7813      	ldrb	r3, [r2, #0]
 80139f8:	600b      	str	r3, [r1, #0]
 80139fa:	7812      	ldrb	r2, [r2, #0]
 80139fc:	1e10      	subs	r0, r2, #0
 80139fe:	bf18      	it	ne
 8013a00:	2001      	movne	r0, #1
 8013a02:	b002      	add	sp, #8
 8013a04:	4770      	bx	lr
 8013a06:	4610      	mov	r0, r2
 8013a08:	e7fb      	b.n	8013a02 <__ascii_mbtowc+0x16>
 8013a0a:	f06f 0001 	mvn.w	r0, #1
 8013a0e:	e7f8      	b.n	8013a02 <__ascii_mbtowc+0x16>

08013a10 <__ascii_wctomb>:
 8013a10:	4603      	mov	r3, r0
 8013a12:	4608      	mov	r0, r1
 8013a14:	b141      	cbz	r1, 8013a28 <__ascii_wctomb+0x18>
 8013a16:	2aff      	cmp	r2, #255	@ 0xff
 8013a18:	d904      	bls.n	8013a24 <__ascii_wctomb+0x14>
 8013a1a:	228a      	movs	r2, #138	@ 0x8a
 8013a1c:	601a      	str	r2, [r3, #0]
 8013a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8013a22:	4770      	bx	lr
 8013a24:	700a      	strb	r2, [r1, #0]
 8013a26:	2001      	movs	r0, #1
 8013a28:	4770      	bx	lr
	...

08013a2c <fiprintf>:
 8013a2c:	b40e      	push	{r1, r2, r3}
 8013a2e:	b503      	push	{r0, r1, lr}
 8013a30:	4601      	mov	r1, r0
 8013a32:	ab03      	add	r3, sp, #12
 8013a34:	4805      	ldr	r0, [pc, #20]	@ (8013a4c <fiprintf+0x20>)
 8013a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a3a:	6800      	ldr	r0, [r0, #0]
 8013a3c:	9301      	str	r3, [sp, #4]
 8013a3e:	f7ff fd4b 	bl	80134d8 <_vfiprintf_r>
 8013a42:	b002      	add	sp, #8
 8013a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a48:	b003      	add	sp, #12
 8013a4a:	4770      	bx	lr
 8013a4c:	200017b8 	.word	0x200017b8

08013a50 <abort>:
 8013a50:	b508      	push	{r3, lr}
 8013a52:	2006      	movs	r0, #6
 8013a54:	f000 f82c 	bl	8013ab0 <raise>
 8013a58:	2001      	movs	r0, #1
 8013a5a:	f7f0 f983 	bl	8003d64 <_exit>

08013a5e <_raise_r>:
 8013a5e:	291f      	cmp	r1, #31
 8013a60:	b538      	push	{r3, r4, r5, lr}
 8013a62:	4605      	mov	r5, r0
 8013a64:	460c      	mov	r4, r1
 8013a66:	d904      	bls.n	8013a72 <_raise_r+0x14>
 8013a68:	2316      	movs	r3, #22
 8013a6a:	6003      	str	r3, [r0, #0]
 8013a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a70:	bd38      	pop	{r3, r4, r5, pc}
 8013a72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013a74:	b112      	cbz	r2, 8013a7c <_raise_r+0x1e>
 8013a76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a7a:	b94b      	cbnz	r3, 8013a90 <_raise_r+0x32>
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	f000 f831 	bl	8013ae4 <_getpid_r>
 8013a82:	4622      	mov	r2, r4
 8013a84:	4601      	mov	r1, r0
 8013a86:	4628      	mov	r0, r5
 8013a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a8c:	f000 b818 	b.w	8013ac0 <_kill_r>
 8013a90:	2b01      	cmp	r3, #1
 8013a92:	d00a      	beq.n	8013aaa <_raise_r+0x4c>
 8013a94:	1c59      	adds	r1, r3, #1
 8013a96:	d103      	bne.n	8013aa0 <_raise_r+0x42>
 8013a98:	2316      	movs	r3, #22
 8013a9a:	6003      	str	r3, [r0, #0]
 8013a9c:	2001      	movs	r0, #1
 8013a9e:	e7e7      	b.n	8013a70 <_raise_r+0x12>
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	4798      	blx	r3
 8013aaa:	2000      	movs	r0, #0
 8013aac:	e7e0      	b.n	8013a70 <_raise_r+0x12>
	...

08013ab0 <raise>:
 8013ab0:	4b02      	ldr	r3, [pc, #8]	@ (8013abc <raise+0xc>)
 8013ab2:	4601      	mov	r1, r0
 8013ab4:	6818      	ldr	r0, [r3, #0]
 8013ab6:	f7ff bfd2 	b.w	8013a5e <_raise_r>
 8013aba:	bf00      	nop
 8013abc:	200017b8 	.word	0x200017b8

08013ac0 <_kill_r>:
 8013ac0:	b538      	push	{r3, r4, r5, lr}
 8013ac2:	4d07      	ldr	r5, [pc, #28]	@ (8013ae0 <_kill_r+0x20>)
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	4604      	mov	r4, r0
 8013ac8:	4608      	mov	r0, r1
 8013aca:	4611      	mov	r1, r2
 8013acc:	602b      	str	r3, [r5, #0]
 8013ace:	f7f0 f939 	bl	8003d44 <_kill>
 8013ad2:	1c43      	adds	r3, r0, #1
 8013ad4:	d102      	bne.n	8013adc <_kill_r+0x1c>
 8013ad6:	682b      	ldr	r3, [r5, #0]
 8013ad8:	b103      	cbz	r3, 8013adc <_kill_r+0x1c>
 8013ada:	6023      	str	r3, [r4, #0]
 8013adc:	bd38      	pop	{r3, r4, r5, pc}
 8013ade:	bf00      	nop
 8013ae0:	20001b20 	.word	0x20001b20

08013ae4 <_getpid_r>:
 8013ae4:	f7f0 b926 	b.w	8003d34 <_getpid>

08013ae8 <_init>:
 8013ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aea:	bf00      	nop
 8013aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aee:	bc08      	pop	{r3}
 8013af0:	469e      	mov	lr, r3
 8013af2:	4770      	bx	lr

08013af4 <_fini>:
 8013af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013af6:	bf00      	nop
 8013af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013afa:	bc08      	pop	{r3}
 8013afc:	469e      	mov	lr, r3
 8013afe:	4770      	bx	lr
