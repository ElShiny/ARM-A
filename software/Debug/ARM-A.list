
ARM-A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b09c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800b27c  0800b27c  0001b27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b304  0800b304  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b304  0800b304  0001b304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b30c  0800b30c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b30c  0800b30c  0001b30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b310  0800b310  0001b310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  20000070  0800b384  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  0800b384  000209c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274b3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004052  00000000  00000000  00047553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002188  00000000  00000000  0004b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe0  00000000  00000000  0004d730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002be29  00000000  00000000  0004f710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026692  00000000  00000000  0007b539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124fcc  00000000  00000000  000a1bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c6b97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000980c  00000000  00000000  001c6be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b264 	.word	0x0800b264

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800b264 	.word	0x0800b264

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f002 fba2 	bl	800354e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f891 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f001 f9a1 	bl	8002154 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e12:	f000 f8d7 	bl	8000fc4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e16:	f000 f94d 	bl	80010b4 <MX_ADC2_Init>
  MX_FMC_Init();
 8000e1a:	f001 f933 	bl	8002084 <MX_FMC_Init>
  MX_I2C2_Init();
 8000e1e:	f000 fbaf 	bl	8001580 <MX_I2C2_Init>
  MX_UART4_Init();
 8000e22:	f000 ff81 	bl	8001d28 <MX_UART4_Init>
  MX_UART5_Init();
 8000e26:	f000 ffcb 	bl	8001dc0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000e2a:	f001 f815 	bl	8001e58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e2e:	f001 f85f 	bl	8001ef0 <MX_USART2_UART_Init>
  MX_QUADSPI1_Init();
 8000e32:	f000 fbe5 	bl	8001600 <MX_QUADSPI1_Init>
  MX_SPI1_Init();
 8000e36:	f000 fc0f 	bl	8001658 <MX_SPI1_Init>
  MX_TIM5_Init();
 8000e3a:	f000 fc4b 	bl	80016d4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000e3e:	f000 fd13 	bl	8001868 <MX_TIM8_Init>
  MX_TIM20_Init();
 8000e42:	f000 fe93 	bl	8001b6c <MX_TIM20_Init>
  MX_ADC3_Init();
 8000e46:	f000 f99b 	bl	8001180 <MX_ADC3_Init>
  MX_DAC1_Init();
 8000e4a:	f000 fa9f 	bl	800138c <MX_DAC1_Init>
  MX_DAC2_Init();
 8000e4e:	f000 fad7 	bl	8001400 <MX_DAC2_Init>
  MX_FDCAN2_Init();
 8000e52:	f000 fb0f 	bl	8001474 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000e56:	f000 fb53 	bl	8001500 <MX_I2C1_Init>
  MX_TIM15_Init();
 8000e5a:	f000 fde3 	bl	8001a24 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8000e5e:	f001 f893 	bl	8001f88 <MX_USART3_UART_Init>
  MX_ADC4_Init();
 8000e62:	f000 fa05 	bl	8001270 <MX_ADC4_Init>
  MX_DMA_Init();
 8000e66:	f001 f8db 	bl	8002020 <MX_DMA_Init>
  MX_TIM6_Init();
 8000e6a:	f000 fcc7 	bl	80017fc <MX_TIM6_Init>
  MX_CORDIC_Init();
 8000e6e:	f000 fa79 	bl	8001364 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Transmit(&huart3, "hello\r\n", sizeof("hello\r\n"), 1);
 8000e72:	2301      	movs	r3, #1
 8000e74:	2208      	movs	r2, #8
 8000e76:	4927      	ldr	r1, [pc, #156]	; (8000f14 <main+0x114>)
 8000e78:	4827      	ldr	r0, [pc, #156]	; (8000f18 <main+0x118>)
 8000e7a:	f008 fbd3 	bl	8009624 <HAL_UART_Transmit>

  pca9685_handle_t pca1;
  pca1.device_address = PCA_DEFAULT_ADDRESS;
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	833b      	strh	r3, [r7, #24]
  pca1.i2c_handle = &hi2c1;
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <main+0x11c>)
 8000e84:	617b      	str	r3, [r7, #20]


//  uint8_t data;
  char str[20];

  pca9685_init(&pca1);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f009 fbae 	bl	800a5ec <pca9685_init>


  pca9685_setOscFreq(&pca1, 25200000);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4922      	ldr	r1, [pc, #136]	; (8000f20 <main+0x120>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f009 fc7c 	bl	800a794 <pca9685_setOscFreq>
  pca9685_setPrescaleFreq(&pca1, 50);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8000f24 <main+0x124>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 fbc9 	bl	800a63c <pca9685_setPrescaleFreq>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000eaa:	217f      	movs	r1, #127	; 0x7f
 8000eac:	481e      	ldr	r0, [pc, #120]	; (8000f28 <main+0x128>)
 8000eae:	f003 ff45 	bl	8004d3c <HAL_ADCEx_Calibration_Start>
//	  HAL_Delay(1000);
//	  for (uint16_t pulselen = 480; pulselen > 50; pulselen--) {
//	    pca9685_setPWM(&pca1, 0, 0, pulselen);
//	    HAL_Delay(1);
//	  }
	  HAL_ADC_Start(&hadc1);
 8000eb2:	481d      	ldr	r0, [pc, #116]	; (8000f28 <main+0x128>)
 8000eb4:	f002 fff6 	bl	8003ea4 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000eb8:	210a      	movs	r1, #10
 8000eba:	481b      	ldr	r0, [pc, #108]	; (8000f28 <main+0x128>)
 8000ebc:	f003 f8d6 	bl	800406c <HAL_ADC_PollForConversion>
	  uint16_t val = HAL_ADC_GetValue(&hadc1);
 8000ec0:	4819      	ldr	r0, [pc, #100]	; (8000f28 <main+0x128>)
 8000ec2:	f003 f9d9 	bl	8004278 <HAL_ADC_GetValue>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	84fb      	strh	r3, [r7, #38]	; 0x26
	  uint16_t angle = resize(val, 0, 4069, 0, 180);
 8000eca:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000ecc:	23b4      	movs	r3, #180	; 0xb4
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f640 72e5 	movw	r2, #4069	; 0xfe5
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f009 fce4 	bl	800a8a4 <resize>
 8000edc:	4603      	mov	r3, r0
 8000ede:	84bb      	strh	r3, [r7, #36]	; 0x24
	  uint16_t len = sprintf(str, "%d, %d\r\n", val, angle);
 8000ee0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	4911      	ldr	r1, [pc, #68]	; (8000f2c <main+0x12c>)
 8000ee8:	f009 fd4e 	bl	800a988 <siprintf>
 8000eec:	4603      	mov	r3, r0
 8000eee:	847b      	strh	r3, [r7, #34]	; 0x22
	  HAL_UART_Transmit(&huart3, str, len, 10);
 8000ef0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000ef2:	4639      	mov	r1, r7
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <main+0x118>)
 8000ef8:	f008 fb94 	bl	8009624 <HAL_UART_Transmit>
	  HAL_Delay(2);
 8000efc:	2002      	movs	r0, #2
 8000efe:	f002 fb97 	bl	8003630 <HAL_Delay>



	  pca9685_setAngle(&pca1, 0, angle);
 8000f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f009 fc91 	bl	800a834 <pca9685_setAngle>
  {
 8000f12:	e7ce      	b.n	8000eb2 <main+0xb2>
 8000f14:	0800b27c 	.word	0x0800b27c
 8000f18:	200007f4 	.word	0x200007f4
 8000f1c:	200002f0 	.word	0x200002f0
 8000f20:	01808580 	.word	0x01808580
 8000f24:	42480000 	.word	0x42480000
 8000f28:	2000008c 	.word	0x2000008c
 8000f2c:	0800b284 	.word	0x0800b284

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	2238      	movs	r2, #56	; 0x38
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f009 fd1a 	bl	800a978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f56:	f005 fe9b 	bl	8006c90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f5e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f64:	2302      	movs	r3, #2
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f70:	2348      	movs	r3, #72	; 0x48
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000f78:	2306      	movs	r3, #6
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f005 fff9 	bl	8006f7c <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000f90:	f001 fa2c 	bl	80023ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2104      	movs	r1, #4
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 fafd 	bl	80075ac <HAL_RCC_ClockConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fb8:	f001 fa18 	bl	80023ec <Error_Handler>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3750      	adds	r7, #80	; 0x50
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2220      	movs	r2, #32
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f009 fccb 	bl	800a978 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fe2:	4b32      	ldr	r3, [pc, #200]	; (80010ac <MX_ADC1_Init+0xe8>)
 8000fe4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fe8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_ADC1_Init+0xe8>)
 8000fec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ff0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <MX_ADC1_Init+0xe8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <MX_ADC1_Init+0xe8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <MX_ADC1_Init+0xe8>)
 800100c:	2204      	movs	r2, #4
 800100e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001012:	2200      	movs	r2, #0
 8001014:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001018:	2200      	movs	r2, #0
 800101a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <MX_ADC1_Init+0xe8>)
 800101e:	2201      	movs	r2, #1
 8001020:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001022:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_ADC1_Init+0xe8>)
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001032:	2200      	movs	r2, #0
 8001034:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104c:	4817      	ldr	r0, [pc, #92]	; (80010ac <MX_ADC1_Init+0xe8>)
 800104e:	f002 fd67 	bl	8003b20 <HAL_ADC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001058:	f001 f9c8 	bl	80023ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	4811      	ldr	r0, [pc, #68]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001068:	f003 feca 	bl	8004e00 <HAL_ADCEx_MultiModeConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001072:	f001 f9bb 	bl	80023ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_ADC1_Init+0xec>)
 8001078:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107a:	2306      	movs	r3, #6
 800107c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001082:	237f      	movs	r3, #127	; 0x7f
 8001084:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001086:	2304      	movs	r3, #4
 8001088:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_ADC1_Init+0xe8>)
 8001094:	f003 f8fe 	bl	8004294 <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800109e:	f001 f9a5 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3730      	adds	r7, #48	; 0x30
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000008c 	.word	0x2000008c
 80010b0:	08600004 	.word	0x08600004

080010b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2220      	movs	r2, #32
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 fc59 	bl	800a978 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <MX_ADC2_Init+0xc0>)
 80010c8:	4a2b      	ldr	r2, [pc, #172]	; (8001178 <MX_ADC2_Init+0xc4>)
 80010ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010cc:	4b29      	ldr	r3, [pc, #164]	; (8001174 <MX_ADC2_Init+0xc0>)
 80010ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <MX_ADC2_Init+0xc0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_ADC2_Init+0xc0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <MX_ADC2_Init+0xc0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_ADC2_Init+0xc0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_ADC2_Init+0xc0>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <MX_ADC2_Init+0xc0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_ADC2_Init+0xc0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_ADC2_Init+0xc0>)
 8001100:	2201      	movs	r2, #1
 8001102:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <MX_ADC2_Init+0xc0>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_ADC2_Init+0xc0>)
 800110e:	2200      	movs	r2, #0
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_ADC2_Init+0xc0>)
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_ADC2_Init+0xc0>)
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_ADC2_Init+0xc0>)
 8001122:	2200      	movs	r2, #0
 8001124:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_ADC2_Init+0xc0>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_ADC2_Init+0xc0>)
 8001130:	f002 fcf6 	bl	8003b20 <HAL_ADC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800113a:	f001 f957 	bl	80023ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_ADC2_Init+0xc8>)
 8001140:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001142:	2306      	movs	r3, #6
 8001144:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800114a:	237f      	movs	r3, #127	; 0x7f
 800114c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800114e:	2304      	movs	r3, #4
 8001150:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_ADC2_Init+0xc0>)
 800115c:	f003 f89a 	bl	8004294 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001166:	f001 f941 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000f8 	.word	0x200000f8
 8001178:	50000100 	.word	0x50000100
 800117c:	14f00020 	.word	0x14f00020

08001180 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2220      	movs	r2, #32
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f009 fbed 	bl	800a978 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011a0:	4a31      	ldr	r2, [pc, #196]	; (8001268 <MX_ADC3_Init+0xe8>)
 80011a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011d8:	2201      	movs	r2, #1
 80011da:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_ADC3_Init+0xe4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_ADC3_Init+0xe4>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001206:	4817      	ldr	r0, [pc, #92]	; (8001264 <MX_ADC3_Init+0xe4>)
 8001208:	f002 fc8a 	bl	8003b20 <HAL_ADC_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001212:	f001 f8eb 	bl	80023ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800121a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121e:	4619      	mov	r1, r3
 8001220:	4810      	ldr	r0, [pc, #64]	; (8001264 <MX_ADC3_Init+0xe4>)
 8001222:	f003 fded 	bl	8004e00 <HAL_ADCEx_MultiModeConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800122c:	f001 f8de 	bl	80023ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_ADC3_Init+0xec>)
 8001232:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001234:	2306      	movs	r3, #6
 8001236:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800123c:	237f      	movs	r3, #127	; 0x7f
 800123e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001240:	2304      	movs	r3, #4
 8001242:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_ADC3_Init+0xe4>)
 800124e:	f003 f821 	bl	8004294 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001258:	f001 f8c8 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3730      	adds	r7, #48	; 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000164 	.word	0x20000164
 8001268:	50000400 	.word	0x50000400
 800126c:	21800100 	.word	0x21800100

08001270 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	2220      	movs	r2, #32
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f009 fb7b 	bl	800a978 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <MX_ADC4_Init+0xe4>)
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <MX_ADC4_Init+0xe8>)
 8001286:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <MX_ADC4_Init+0xe4>)
 800128a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800128e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <MX_ADC4_Init+0xe4>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_ADC4_Init+0xe4>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_ADC4_Init+0xe4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012aa:	2204      	movs	r2, #4
 80012ac:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 2;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012bc:	2202      	movs	r2, #2
 80012be:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = ENABLE;
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfDiscConversion = 1;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80012f2:	4818      	ldr	r0, [pc, #96]	; (8001354 <MX_ADC4_Init+0xe4>)
 80012f4:	f002 fc14 	bl	8003b20 <HAL_ADC_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_ADC4_Init+0x92>
  {
    Error_Handler();
 80012fe:	f001 f875 	bl	80023ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_ADC4_Init+0xec>)
 8001304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001306:	2306      	movs	r3, #6
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800130a:	2305      	movs	r3, #5
 800130c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800130e:	237f      	movs	r3, #127	; 0x7f
 8001310:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001312:	2304      	movs	r3, #4
 8001314:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_ADC4_Init+0xe4>)
 8001320:	f002 ffb8 	bl	8004294 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC4_Init+0xbe>
  {
    Error_Handler();
 800132a:	f001 f85f 	bl	80023ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_ADC4_Init+0xf0>)
 8001330:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001332:	230c      	movs	r3, #12
 8001334:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_ADC4_Init+0xe4>)
 800133c:	f002 ffaa 	bl	8004294 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC4_Init+0xda>
  {
    Error_Handler();
 8001346:	f001 f851 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001d0 	.word	0x200001d0
 8001358:	50000500 	.word	0x50000500
 800135c:	10c00010 	.word	0x10c00010
 8001360:	14f00020 	.word	0x14f00020

08001364 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_CORDIC_Init+0x20>)
 800136a:	4a07      	ldr	r2, [pc, #28]	; (8001388 <MX_CORDIC_Init+0x24>)
 800136c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_CORDIC_Init+0x20>)
 8001370:	f003 fe4e 	bl	8005010 <HAL_CORDIC_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800137a:	f001 f837 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000023c 	.word	0x2000023c
 8001388:	40020c00 	.word	0x40020c00

0800138c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001392:	463b      	mov	r3, r7
 8001394:	2230      	movs	r2, #48	; 0x30
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f009 faed 	bl	800a978 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_DAC1_Init+0x6c>)
 80013a0:	4a16      	ldr	r2, [pc, #88]	; (80013fc <MX_DAC1_Init+0x70>)
 80013a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013a4:	4814      	ldr	r0, [pc, #80]	; (80013f8 <MX_DAC1_Init+0x6c>)
 80013a6:	f003 ff74 	bl	8005292 <HAL_DAC_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013b0:	f001 f81c 	bl	80023ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80013b4:	2302      	movs	r3, #2
 80013b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_DAC1_Init+0x6c>)
 80013e0:	f003 ffde 	bl	80053a0 <HAL_DAC_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80013ea:	f000 ffff 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	; 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000264 	.word	0x20000264
 80013fc:	50000800 	.word	0x50000800

08001400 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2230      	movs	r2, #48	; 0x30
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f009 fab3 	bl	800a978 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_DAC2_Init+0x6c>)
 8001414:	4a16      	ldr	r2, [pc, #88]	; (8001470 <MX_DAC2_Init+0x70>)
 8001416:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001418:	4814      	ldr	r0, [pc, #80]	; (800146c <MX_DAC2_Init+0x6c>)
 800141a:	f003 ff3a 	bl	8005292 <HAL_DAC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001424:	f000 ffe2 	bl	80023ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001428:	2302      	movs	r3, #2
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_DAC2_Init+0x6c>)
 8001454:	f003 ffa4 	bl	80053a0 <HAL_DAC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800145e:	f000 ffc5 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3730      	adds	r7, #48	; 0x30
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000278 	.word	0x20000278
 8001470:	50000c00 	.word	0x50000c00

08001474 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 800147a:	4a20      	ldr	r2, [pc, #128]	; (80014fc <MX_FDCAN2_Init+0x88>)
 800147c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 8001492:	2200      	movs	r2, #0
 8001494:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 8001498:	2200      	movs	r2, #0
 800149a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 800149e:	2200      	movs	r2, #0
 80014a0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014b6:	2202      	movs	r2, #2
 80014b8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014bc:	2201      	movs	r2, #1
 80014be:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014da:	2200      	movs	r2, #0
 80014dc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_FDCAN2_Init+0x84>)
 80014e6:	f004 fac7 	bl	8005a78 <HAL_FDCAN_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80014f0:	f000 ff7c 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000028c 	.word	0x2000028c
 80014fc:	40006800 	.word	0x40006800

08001500 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_I2C1_Init+0x74>)
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <MX_I2C1_Init+0x78>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0D9FF;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_I2C1_Init+0x74>)
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <MX_I2C1_Init+0x7c>)
 800150e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_I2C1_Init+0x74>)
 8001518:	2201      	movs	r2, #1
 800151a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_I2C1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_I2C1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <MX_I2C1_Init+0x74>)
 800153c:	f004 fe1f 	bl	800617e <HAL_I2C_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001546:	f000 ff51 	bl	80023ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800154a:	2100      	movs	r1, #0
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <MX_I2C1_Init+0x74>)
 800154e:	f005 fb07 	bl	8006b60 <HAL_I2CEx_ConfigAnalogFilter>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001558:	f000 ff48 	bl	80023ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800155c:	2100      	movs	r1, #0
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_I2C1_Init+0x74>)
 8001560:	f005 fb49 	bl	8006bf6 <HAL_I2CEx_ConfigDigitalFilter>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800156a:	f000 ff3f 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002f0 	.word	0x200002f0
 8001578:	40005400 	.word	0x40005400
 800157c:	20b0d9ff 	.word	0x20b0d9ff

08001580 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <MX_I2C2_Init+0x74>)
 8001586:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <MX_I2C2_Init+0x78>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0D9FF;
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_I2C2_Init+0x74>)
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <MX_I2C2_Init+0x7c>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_I2C2_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_I2C2_Init+0x74>)
 8001598:	2201      	movs	r2, #1
 800159a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_I2C2_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_I2C2_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_I2C2_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_I2C2_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_I2C2_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015ba:	480e      	ldr	r0, [pc, #56]	; (80015f4 <MX_I2C2_Init+0x74>)
 80015bc:	f004 fddf 	bl	800617e <HAL_I2C_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015c6:	f000 ff11 	bl	80023ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ca:	2100      	movs	r1, #0
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <MX_I2C2_Init+0x74>)
 80015ce:	f005 fac7 	bl	8006b60 <HAL_I2CEx_ConfigAnalogFilter>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80015d8:	f000 ff08 	bl	80023ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_I2C2_Init+0x74>)
 80015e0:	f005 fb09 	bl	8006bf6 <HAL_I2CEx_ConfigDigitalFilter>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015ea:	f000 feff 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000033c 	.word	0x2000033c
 80015f8:	40005800 	.word	0x40005800
 80015fc:	20b0d9ff 	.word	0x20b0d9ff

08001600 <MX_QUADSPI1_Init>:
  * @brief QUADSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  /* QUADSPI1 parameter configuration*/
  hqspi1.Instance = QUADSPI;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <MX_QUADSPI1_Init+0x54>)
 8001608:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 255;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 800160c:	22ff      	movs	r2, #255	; 0xff
 800160e:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 8001612:	2201      	movs	r2, #1
 8001614:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 800161e:	2201      	movs	r2, #1
 8001620:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_QUADSPI1_Init+0x50>)
 800163c:	f005 fbdc 	bl	8006df8 <HAL_QSPI_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_QUADSPI1_Init+0x4a>
  {
    Error_Handler();
 8001646:	f000 fed1 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000388 	.word	0x20000388
 8001654:	a0001000 	.word	0xa0001000

08001658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_SPI1_Init+0x74>)
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <MX_SPI1_Init+0x78>)
 8001660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_SPI1_Init+0x74>)
 8001664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_SPI1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_SPI1_Init+0x74>)
 8001672:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001676:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_SPI1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_SPI1_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_SPI1_Init+0x74>)
 8001686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_SPI1_Init+0x74>)
 800168e:	2228      	movs	r2, #40	; 0x28
 8001690:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_SPI1_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_SPI1_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_SPI1_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_SPI1_Init+0x74>)
 80016a6:	2207      	movs	r2, #7
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_SPI1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_SPI1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_SPI1_Init+0x74>)
 80016b8:	f006 fbe2 	bl	8007e80 <HAL_SPI_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016c2:	f000 fe93 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200003d4 	.word	0x200003d4
 80016d0:	40013000 	.word	0x40013000

080016d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <MX_TIM5_Init+0x120>)
 8001708:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <MX_TIM5_Init+0x124>)
 800170a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10;
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <MX_TIM5_Init+0x120>)
 800170e:	220a      	movs	r2, #10
 8001710:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <MX_TIM5_Init+0x120>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <MX_TIM5_Init+0x120>)
 800171a:	f242 7210 	movw	r2, #10000	; 0x2710
 800171e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <MX_TIM5_Init+0x120>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <MX_TIM5_Init+0x120>)
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800172c:	4831      	ldr	r0, [pc, #196]	; (80017f4 <MX_TIM5_Init+0x120>)
 800172e:	f006 fc9a 	bl	8008066 <HAL_TIM_Base_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001738:	f000 fe58 	bl	80023ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001746:	4619      	mov	r1, r3
 8001748:	482a      	ldr	r0, [pc, #168]	; (80017f4 <MX_TIM5_Init+0x120>)
 800174a:	f006 ffd7 	bl	80086fc <HAL_TIM_ConfigClockSource>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001754:	f000 fe4a 	bl	80023ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001758:	4826      	ldr	r0, [pc, #152]	; (80017f4 <MX_TIM5_Init+0x120>)
 800175a:	f006 fcdb 	bl	8008114 <HAL_TIM_PWM_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001764:	f000 fe42 	bl	80023ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	481f      	ldr	r0, [pc, #124]	; (80017f4 <MX_TIM5_Init+0x120>)
 8001778:	f007 fd76 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001782:	f000 fe33 	bl	80023ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001786:	2360      	movs	r3, #96	; 0x60
 8001788:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 800178a:	23c8      	movs	r3, #200	; 0xc8
 800178c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001796:	463b      	mov	r3, r7
 8001798:	2204      	movs	r2, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4815      	ldr	r0, [pc, #84]	; (80017f4 <MX_TIM5_Init+0x120>)
 800179e:	f006 fe99 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80017a8:	f000 fe20 	bl	80023ec <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 80017ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80017b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017b2:	463b      	mov	r3, r7
 80017b4:	2208      	movs	r2, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	480e      	ldr	r0, [pc, #56]	; (80017f4 <MX_TIM5_Init+0x120>)
 80017ba:	f006 fe8b 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM5_Init+0xf4>
  {
    Error_Handler();
 80017c4:	f000 fe12 	bl	80023ec <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 80017c8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017ce:	463b      	mov	r3, r7
 80017d0:	220c      	movs	r2, #12
 80017d2:	4619      	mov	r1, r3
 80017d4:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM5_Init+0x120>)
 80017d6:	f006 fe7d 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 80017e0:	f000 fe04 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM5_Init+0x120>)
 80017e6:	f001 fac1 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 80017ea:	bf00      	nop
 80017ec:	3738      	adds	r7, #56	; 0x38
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000438 	.word	0x20000438
 80017f8:	40000c00 	.word	0x40000c00

080017fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_TIM6_Init+0x64>)
 800180e:	4a15      	ldr	r2, [pc, #84]	; (8001864 <MX_TIM6_Init+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MX_TIM6_Init+0x64>)
 8001814:	22aa      	movs	r2, #170	; 0xaa
 8001816:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_TIM6_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_TIM6_Init+0x64>)
 8001820:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001824:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_TIM6_Init+0x64>)
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_TIM6_Init+0x64>)
 800182e:	f006 fc1a 	bl	8008066 <HAL_TIM_Base_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001838:	f000 fdd8 	bl	80023ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM6_Init+0x64>)
 800184a:	f007 fd0d 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001854:	f000 fdca 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000484 	.word	0x20000484
 8001864:	40001000 	.word	0x40001000

08001868 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b09c      	sub	sp, #112	; 0x70
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	615a      	str	r2, [r3, #20]
 800189a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2234      	movs	r2, #52	; 0x34
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f009 f868 	bl	800a978 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018a8:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80018aa:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <MX_TIM8_Init+0x1b8>)
 80018ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018ae:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80018bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c2:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018c8:	4b54      	ldr	r3, [pc, #336]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018d4:	4851      	ldr	r0, [pc, #324]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80018d6:	f006 fbc6 	bl	8008066 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80018e0:	f000 fd84 	bl	80023ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018ee:	4619      	mov	r1, r3
 80018f0:	484a      	ldr	r0, [pc, #296]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80018f2:	f006 ff03 	bl	80086fc <HAL_TIM_ConfigClockSource>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80018fc:	f000 fd76 	bl	80023ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001900:	4846      	ldr	r0, [pc, #280]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 8001902:	f006 fc07 	bl	8008114 <HAL_TIM_PWM_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800190c:	f000 fd6e 	bl	80023ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800191c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001920:	4619      	mov	r1, r3
 8001922:	483e      	ldr	r0, [pc, #248]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 8001924:	f007 fca0 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800192e:	f000 fd5d 	bl	80023ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001932:	2360      	movs	r3, #96	; 0x60
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193c:	2300      	movs	r3, #0
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001940:	2300      	movs	r3, #0
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001950:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001954:	2200      	movs	r2, #0
 8001956:	4619      	mov	r1, r3
 8001958:	4830      	ldr	r0, [pc, #192]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 800195a:	f006 fdbb 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001964:	f000 fd42 	bl	80023ec <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8001968:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800196e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001972:	2204      	movs	r2, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4829      	ldr	r0, [pc, #164]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 8001978:	f006 fdac 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8001982:	f000 fd33 	bl	80023ec <Error_Handler>
  }
  sConfigOC.Pulse = 4000;
 8001986:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800198c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001990:	2208      	movs	r2, #8
 8001992:	4619      	mov	r1, r3
 8001994:	4821      	ldr	r0, [pc, #132]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 8001996:	f006 fd9d 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 80019a0:	f000 fd24 	bl	80023ec <Error_Handler>
  }
  sConfigOC.Pulse = 8000;
 80019a4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80019a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ae:	220c      	movs	r2, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	481a      	ldr	r0, [pc, #104]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 80019b4:	f006 fd8e 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 80019be:	f000 fd15 	bl	80023ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019f2:	2300      	movs	r3, #0
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 8001a00:	f007 fcc8 	bl	8009394 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM8_Init+0x1a6>
  {
    Error_Handler();
 8001a0a:	f000 fcef 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM8_Init+0x1b4>)
 8001a10:	f001 f9ac 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 8001a14:	bf00      	nop
 8001a16:	3770      	adds	r7, #112	; 0x70
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200004d0 	.word	0x200004d0
 8001a20:	40013400 	.word	0x40013400

08001a24 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b09c      	sub	sp, #112	; 0x70
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2234      	movs	r2, #52	; 0x34
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f008 ff8a 	bl	800a978 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001a66:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <MX_TIM15_Init+0x144>)
 8001a68:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a6a:	4b3e      	ldr	r3, [pc, #248]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 32768;
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001a78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a7c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a90:	4834      	ldr	r0, [pc, #208]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001a92:	f006 fae8 	bl	8008066 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001a9c:	f000 fca6 	bl	80023ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001aa6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001aaa:	4619      	mov	r1, r3
 8001aac:	482d      	ldr	r0, [pc, #180]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001aae:	f006 fe25 	bl	80086fc <HAL_TIM_ConfigClockSource>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001ab8:	f000 fc98 	bl	80023ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001abc:	4829      	ldr	r0, [pc, #164]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001abe:	f006 fb29 	bl	8008114 <HAL_TIM_PWM_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001ac8:	f000 fc90 	bl	80023ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ad4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4822      	ldr	r0, [pc, #136]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001adc:	f007 fbc4 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001ae6:	f000 fc81 	bl	80023ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aea:	2360      	movs	r3, #96	; 0x60
 8001aec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 8001aee:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001af8:	2300      	movs	r3, #0
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4814      	ldr	r0, [pc, #80]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001b12:	f006 fcdf 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001b1c:	f000 fc66 	bl	80023ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4807      	ldr	r0, [pc, #28]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001b48:	f007 fc24 	bl	8009394 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001b52:	f000 fc4b 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <MX_TIM15_Init+0x140>)
 8001b58:	f001 f908 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 8001b5c:	bf00      	nop
 8001b5e:	3770      	adds	r7, #112	; 0x70
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000051c 	.word	0x2000051c
 8001b68:	40014000 	.word	0x40014000

08001b6c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09c      	sub	sp, #112	; 0x70
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	615a      	str	r2, [r3, #20]
 8001b9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2234      	movs	r2, #52	; 0x34
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f008 fee6 	bl	800a978 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001bac:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001bae:	4a5d      	ldr	r2, [pc, #372]	; (8001d24 <MX_TIM20_Init+0x1b8>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 16000;
 8001bbe:	4b58      	ldr	r3, [pc, #352]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001bc0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001bc4:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001bcc:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001bd8:	4851      	ldr	r0, [pc, #324]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001bda:	f006 fa44 	bl	8008066 <HAL_TIM_Base_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001be4:	f000 fc02 	bl	80023ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bec:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001bee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	484a      	ldr	r0, [pc, #296]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001bf6:	f006 fd81 	bl	80086fc <HAL_TIM_ConfigClockSource>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001c00:	f000 fbf4 	bl	80023ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001c04:	4846      	ldr	r0, [pc, #280]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001c06:	f006 fa85 	bl	8008114 <HAL_TIM_PWM_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001c10:	f000 fbec 	bl	80023ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001c20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c24:	4619      	mov	r1, r3
 8001c26:	483e      	ldr	r0, [pc, #248]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001c28:	f007 fb1e 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001c32:	f000 fbdb 	bl	80023ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	; 0x60
 8001c38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 8001c3a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c40:	2300      	movs	r3, #0
 8001c42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c44:	2300      	movs	r3, #0
 8001c46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4830      	ldr	r0, [pc, #192]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001c5e:	f006 fc39 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM20_Init+0x100>
  {
    Error_Handler();
 8001c68:	f000 fbc0 	bl	80023ec <Error_Handler>
  }
  sConfigOC.Pulse = 10000;
 8001c6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c76:	2204      	movs	r2, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4829      	ldr	r0, [pc, #164]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001c7c:	f006 fc2a 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM20_Init+0x11e>
  {
    Error_Handler();
 8001c86:	f000 fbb1 	bl	80023ec <Error_Handler>
  }
  sConfigOC.Pulse = 12000;
 8001c8a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c94:	2208      	movs	r2, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	4821      	ldr	r0, [pc, #132]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001c9a:	f006 fc1b 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM20_Init+0x13c>
  {
    Error_Handler();
 8001ca4:	f000 fba2 	bl	80023ec <Error_Handler>
  }
  sConfigOC.Pulse = 15000;
 8001ca8:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	481a      	ldr	r0, [pc, #104]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001cb8:	f006 fc0c 	bl	80084d4 <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM20_Init+0x15a>
  {
    Error_Handler();
 8001cc2:	f000 fb93 	bl	80023ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001d04:	f007 fb46 	bl	8009394 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM20_Init+0x1a6>
  {
    Error_Handler();
 8001d0e:	f000 fb6d 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <MX_TIM20_Init+0x1b4>)
 8001d14:	f001 f82a 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 8001d18:	bf00      	nop
 8001d1a:	3770      	adds	r7, #112	; 0x70
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000568 	.word	0x20000568
 8001d24:	40015000 	.word	0x40015000

08001d28 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <MX_UART4_Init+0x94>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d70:	4811      	ldr	r0, [pc, #68]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d72:	f007 fc07 	bl	8009584 <HAL_UART_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001d7c:	f000 fb36 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d80:	2100      	movs	r1, #0
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d84:	f008 f9ce 	bl	800a124 <HAL_UARTEx_SetTxFifoThreshold>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001d8e:	f000 fb2d 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d92:	2100      	movs	r1, #0
 8001d94:	4808      	ldr	r0, [pc, #32]	; (8001db8 <MX_UART4_Init+0x90>)
 8001d96:	f008 fa03 	bl	800a1a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001da0:	f000 fb24 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_UART4_Init+0x90>)
 8001da6:	f008 f984 	bl	800a0b2 <HAL_UARTEx_DisableFifoMode>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001db0:	f000 fb1c 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200005b4 	.word	0x200005b4
 8001dbc:	40004c00 	.word	0x40004c00

08001dc0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <MX_UART5_Init+0x90>)
 8001dc6:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <MX_UART5_Init+0x94>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <MX_UART5_Init+0x90>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <MX_UART5_Init+0x90>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <MX_UART5_Init+0x90>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <MX_UART5_Init+0x90>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_UART5_Init+0x90>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <MX_UART5_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <MX_UART5_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <MX_UART5_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_UART5_Init+0x90>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_UART5_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e08:	4811      	ldr	r0, [pc, #68]	; (8001e50 <MX_UART5_Init+0x90>)
 8001e0a:	f007 fbbb 	bl	8009584 <HAL_UART_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001e14:	f000 faea 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_UART5_Init+0x90>)
 8001e1c:	f008 f982 	bl	800a124 <HAL_UARTEx_SetTxFifoThreshold>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001e26:	f000 fae1 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4808      	ldr	r0, [pc, #32]	; (8001e50 <MX_UART5_Init+0x90>)
 8001e2e:	f008 f9b7 	bl	800a1a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001e38:	f000 fad8 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_UART5_Init+0x90>)
 8001e3e:	f008 f938 	bl	800a0b2 <HAL_UARTEx_DisableFifoMode>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001e48:	f000 fad0 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000644 	.word	0x20000644
 8001e54:	40005000 	.word	0x40005000

08001e58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e5c:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e5e:	4a23      	ldr	r2, [pc, #140]	; (8001eec <MX_USART1_UART_Init+0x94>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ea0:	4811      	ldr	r0, [pc, #68]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001ea2:	f007 fb6f 	bl	8009584 <HAL_UART_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001eac:	f000 fa9e 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001eb4:	f008 f936 	bl	800a124 <HAL_UARTEx_SetTxFifoThreshold>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ebe:	f000 fa95 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4808      	ldr	r0, [pc, #32]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001ec6:	f008 f96b 	bl	800a1a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ed0:	f000 fa8c 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001ed6:	f008 f8ec 	bl	800a0b2 <HAL_UARTEx_DisableFifoMode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ee0:	f000 fa84 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200006d4 	.word	0x200006d4
 8001eec:	40013800 	.word	0x40013800

08001ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001ef6:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <MX_USART2_UART_Init+0x94>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f38:	4811      	ldr	r0, [pc, #68]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f3a:	f007 fb23 	bl	8009584 <HAL_UART_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f44:	f000 fa52 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f48:	2100      	movs	r1, #0
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f4c:	f008 f8ea 	bl	800a124 <HAL_UARTEx_SetTxFifoThreshold>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f56:	f000 fa49 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4808      	ldr	r0, [pc, #32]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f5e:	f008 f91f 	bl	800a1a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f68:	f000 fa40 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <MX_USART2_UART_Init+0x90>)
 8001f6e:	f008 f8a0 	bl	800a0b2 <HAL_UARTEx_DisableFifoMode>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f78:	f000 fa38 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000764 	.word	0x20000764
 8001f84:	40004400 	.word	0x40004400

08001f88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f8c:	4b22      	ldr	r3, [pc, #136]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <MX_USART3_UART_Init+0x94>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fd0:	4811      	ldr	r0, [pc, #68]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fd2:	f007 fad7 	bl	8009584 <HAL_UART_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fdc:	f000 fa06 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fe4:	f008 f89e 	bl	800a124 <HAL_UARTEx_SetTxFifoThreshold>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001fee:	f000 f9fd 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4808      	ldr	r0, [pc, #32]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001ff6:	f008 f8d3 	bl	800a1a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002000:	f000 f9f4 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8002006:	f008 f854 	bl	800a0b2 <HAL_UARTEx_DisableFifoMode>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002010:	f000 f9ec 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200007f4 	.word	0x200007f4
 800201c:	40004800 	.word	0x40004800

08002020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MX_DMA_Init+0x60>)
 8002028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <MX_DMA_Init+0x60>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6493      	str	r3, [r2, #72]	; 0x48
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <MX_DMA_Init+0x60>)
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <MX_DMA_Init+0x60>)
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <MX_DMA_Init+0x60>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6493      	str	r3, [r2, #72]	; 0x48
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <MX_DMA_Init+0x60>)
 800204c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	200b      	movs	r0, #11
 800205c:	f003 f8e5 	bl	800522a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002060:	200b      	movs	r0, #11
 8002062:	f003 f8fc 	bl	800525e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	200c      	movs	r0, #12
 800206c:	f003 f8dd 	bl	800522a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002070:	200c      	movs	r0, #12
 8002072:	f003 f8f4 	bl	800525e <HAL_NVIC_EnableIRQ>

}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000

08002084 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800208a:	463b      	mov	r3, r7
 800208c:	2220      	movs	r2, #32
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f008 fc71 	bl	800a978 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <MX_FMC_Init+0xc8>)
 8002098:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800209c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <MX_FMC_Init+0xc8>)
 80020a0:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <MX_FMC_Init+0xcc>)
 80020a2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <MX_FMC_Init+0xc8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <MX_FMC_Init+0xc8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80020b0:	4b26      	ldr	r3, [pc, #152]	; (800214c <MX_FMC_Init+0xc8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <MX_FMC_Init+0xc8>)
 80020b8:	2210      	movs	r2, #16
 80020ba:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <MX_FMC_Init+0xc8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <MX_FMC_Init+0xc8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <MX_FMC_Init+0xc8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <MX_FMC_Init+0xc8>)
 80020d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <MX_FMC_Init+0xc8>)
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <MX_FMC_Init+0xc8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <MX_FMC_Init+0xc8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <MX_FMC_Init+0xc8>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <MX_FMC_Init+0xc8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <MX_FMC_Init+0xc8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_FMC_Init+0xc8>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_FMC_Init+0xc8>)
 8002102:	2200      	movs	r2, #0
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_FMC_Init+0xc8>)
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 3;
 800210e:	2303      	movs	r3, #3
 8002110:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8002112:	230f      	movs	r3, #15
 8002114:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 8002116:	2303      	movs	r3, #3
 8002118:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 800211a:	2303      	movs	r3, #3
 800211c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 3;
 800211e:	2303      	movs	r3, #3
 8002120:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002122:	2310      	movs	r3, #16
 8002124:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002126:	2311      	movs	r3, #17
 8002128:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800212e:	463b      	mov	r3, r7
 8002130:	2200      	movs	r2, #0
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_FMC_Init+0xc8>)
 8002136:	f005 ff4e 	bl	8007fd6 <HAL_SRAM_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 8002140:	f000 f954 	bl	80023ec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002144:	bf00      	nop
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000944 	.word	0x20000944
 8002150:	a0000104 	.word	0xa0000104

08002154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	; 0x30
 8002158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800216a:	4b99      	ldr	r3, [pc, #612]	; (80023d0 <MX_GPIO_Init+0x27c>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a98      	ldr	r2, [pc, #608]	; (80023d0 <MX_GPIO_Init+0x27c>)
 8002170:	f043 0310 	orr.w	r3, r3, #16
 8002174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002176:	4b96      	ldr	r3, [pc, #600]	; (80023d0 <MX_GPIO_Init+0x27c>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	4b93      	ldr	r3, [pc, #588]	; (80023d0 <MX_GPIO_Init+0x27c>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a92      	ldr	r2, [pc, #584]	; (80023d0 <MX_GPIO_Init+0x27c>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b90      	ldr	r3, [pc, #576]	; (80023d0 <MX_GPIO_Init+0x27c>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800219a:	4b8d      	ldr	r3, [pc, #564]	; (80023d0 <MX_GPIO_Init+0x27c>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a8c      	ldr	r2, [pc, #560]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021a0:	f043 0320 	orr.w	r3, r3, #32
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b8a      	ldr	r3, [pc, #552]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b87      	ldr	r3, [pc, #540]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a86      	ldr	r2, [pc, #536]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b84      	ldr	r3, [pc, #528]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	4b81      	ldr	r3, [pc, #516]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a80      	ldr	r2, [pc, #512]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b7e      	ldr	r3, [pc, #504]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a7a      	ldr	r2, [pc, #488]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b78      	ldr	r3, [pc, #480]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021fa:	4b75      	ldr	r3, [pc, #468]	; (80023d0 <MX_GPIO_Init+0x27c>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	4a74      	ldr	r2, [pc, #464]	; (80023d0 <MX_GPIO_Init+0x27c>)
 8002200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002206:	4b72      	ldr	r3, [pc, #456]	; (80023d0 <MX_GPIO_Init+0x27c>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED0_Pin
 8002212:	2200      	movs	r2, #0
 8002214:	f640 013c 	movw	r1, #2108	; 0x83c
 8002218:	486e      	ldr	r0, [pc, #440]	; (80023d4 <MX_GPIO_Init+0x280>)
 800221a:	f003 ff75 	bl	8006108 <HAL_GPIO_WritePin>
                          |ARDUINO_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 800221e:	2200      	movs	r2, #0
 8002220:	210f      	movs	r1, #15
 8002222:	486d      	ldr	r0, [pc, #436]	; (80023d8 <MX_GPIO_Init+0x284>)
 8002224:	f003 ff70 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8002228:	2200      	movs	r2, #0
 800222a:	2180      	movs	r1, #128	; 0x80
 800222c:	486b      	ldr	r0, [pc, #428]	; (80023dc <MX_GPIO_Init+0x288>)
 800222e:	f003 ff6b 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	2108      	movs	r1, #8
 8002236:	486a      	ldr	r0, [pc, #424]	; (80023e0 <MX_GPIO_Init+0x28c>)
 8002238:	f003 ff66 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIN_SLP_Pin|LCD_BKLT_Pin, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	2160      	movs	r1, #96	; 0x60
 8002240:	4868      	ldr	r0, [pc, #416]	; (80023e4 <MX_GPIO_Init+0x290>)
 8002242:	f003 ff61 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	2101      	movs	r1, #1
 800224a:	4867      	ldr	r0, [pc, #412]	; (80023e8 <MX_GPIO_Init+0x294>)
 800224c:	f003 ff5c 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8002250:	2201      	movs	r2, #1
 8002252:	2102      	movs	r1, #2
 8002254:	4864      	ldr	r0, [pc, #400]	; (80023e8 <MX_GPIO_Init+0x294>)
 8002256:	f003 ff57 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_BTN_Pin BTN_OK_Pin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin|BTN_OK_Pin;
 800225a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002264:	2301      	movs	r3, #1
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	485a      	ldr	r0, [pc, #360]	; (80023d8 <MX_GPIO_Init+0x284>)
 8002270:	f003 fdc8 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_ESC_Pin */
  GPIO_InitStruct.Pin = BTN_ESC_Pin;
 8002274:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800227a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800227e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002280:	2301      	movs	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_ESC_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	4853      	ldr	r0, [pc, #332]	; (80023d8 <MX_GPIO_Init+0x284>)
 800228c:	f003 fdba 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin ARDUINO_CS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ARDUINO_CS_Pin;
 8002290:	f640 0338 	movw	r3, #2104	; 0x838
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	484a      	ldr	r0, [pc, #296]	; (80023d4 <MX_GPIO_Init+0x280>)
 80022aa:	f003 fdab 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
 80022ae:	230f      	movs	r3, #15
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	2301      	movs	r3, #1
 80022b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	4844      	ldr	r0, [pc, #272]	; (80023d8 <MX_GPIO_Init+0x284>)
 80022c6:	f003 fd9d 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80022ca:	2304      	movs	r3, #4
 80022cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	483c      	ldr	r0, [pc, #240]	; (80023d4 <MX_GPIO_Init+0x280>)
 80022e2:	f003 fd8f 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 80022e6:	f240 1343 	movw	r3, #323	; 0x143
 80022ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4619      	mov	r1, r3
 80022fa:	4838      	ldr	r0, [pc, #224]	; (80023dc <MX_GPIO_Init+0x288>)
 80022fc:	f003 fd82 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_STBY_Pin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002304:	2301      	movs	r3, #1
 8002306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	4619      	mov	r1, r3
 8002316:	4831      	ldr	r0, [pc, #196]	; (80023dc <MX_GPIO_Init+0x288>)
 8002318:	f003 fd74 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800231c:	2308      	movs	r3, #8
 800231e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	482b      	ldr	r0, [pc, #172]	; (80023e0 <MX_GPIO_Init+0x28c>)
 8002334:	f003 fd66 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8002338:	2340      	movs	r3, #64	; 0x40
 800233a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800233c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002342:	2301      	movs	r3, #1
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	4619      	mov	r1, r3
 800234c:	4824      	ldr	r0, [pc, #144]	; (80023e0 <MX_GPIO_Init+0x28c>)
 800234e:	f003 fd59 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIN_SLP_Pin LCD_BKLT_Pin */
  GPIO_InitStruct.Pin = LIN_SLP_Pin|LCD_BKLT_Pin;
 8002352:	2360      	movs	r3, #96	; 0x60
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	2301      	movs	r3, #1
 8002358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	481e      	ldr	r0, [pc, #120]	; (80023e4 <MX_GPIO_Init+0x290>)
 800236a:	f003 fd4b 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	4818      	ldr	r0, [pc, #96]	; (80023e8 <MX_GPIO_Init+0x294>)
 8002386:	f003 fd3d 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 800238a:	2302      	movs	r3, #2
 800238c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	2301      	movs	r3, #1
 8002390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002392:	2301      	movs	r3, #1
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002396:	2302      	movs	r3, #2
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	4811      	ldr	r0, [pc, #68]	; (80023e8 <MX_GPIO_Init+0x294>)
 80023a2:	f003 fd2f 	bl	8005e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2017      	movs	r0, #23
 80023ac:	f002 ff3d 	bl	800522a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023b0:	2017      	movs	r0, #23
 80023b2:	f002 ff54 	bl	800525e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2028      	movs	r0, #40	; 0x28
 80023bc:	f002 ff35 	bl	800522a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023c0:	2028      	movs	r0, #40	; 0x28
 80023c2:	f002 ff4c 	bl	800525e <HAL_NVIC_EnableIRQ>

}
 80023c6:	bf00      	nop
 80023c8:	3730      	adds	r7, #48	; 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	48001400 	.word	0x48001400
 80023d8:	48000800 	.word	0x48000800
 80023dc:	48001800 	.word	0x48001800
 80023e0:	48000c00 	.word	0x48000c00
 80023e4:	48000400 	.word	0x48000400
 80023e8:	48001000 	.word	0x48001000

080023ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f0:	b672      	cpsid	i
}
 80023f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <Error_Handler+0x8>
	...

080023f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <HAL_MspInit+0x44>)
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_MspInit+0x44>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6613      	str	r3, [r2, #96]	; 0x60
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_MspInit+0x44>)
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_MspInit+0x44>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_MspInit+0x44>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	6593      	str	r3, [r2, #88]	; 0x58
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_MspInit+0x44>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800242e:	f004 fcd3 	bl	8006dd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b0a8      	sub	sp, #160	; 0xa0
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002458:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800245c:	2254      	movs	r2, #84	; 0x54
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f008 fa89 	bl	800a978 <memset>
  if(hadc->Instance==ADC1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246e:	d141      	bne.n	80024f4 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002476:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800247a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800247c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002480:	4618      	mov	r0, r3
 8002482:	f005 faaf 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800248c:	f7ff ffae 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002490:	4bae      	ldr	r3, [pc, #696]	; (800274c <HAL_ADC_MspInit+0x30c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	4aad      	ldr	r2, [pc, #692]	; (800274c <HAL_ADC_MspInit+0x30c>)
 8002498:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800249a:	4bac      	ldr	r3, [pc, #688]	; (800274c <HAL_ADC_MspInit+0x30c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10b      	bne.n	80024ba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024a2:	4bab      	ldr	r3, [pc, #684]	; (8002750 <HAL_ADC_MspInit+0x310>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	4aaa      	ldr	r2, [pc, #680]	; (8002750 <HAL_ADC_MspInit+0x310>)
 80024a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ae:	4ba8      	ldr	r3, [pc, #672]	; (8002750 <HAL_ADC_MspInit+0x310>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
 80024b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	4ba5      	ldr	r3, [pc, #660]	; (8002750 <HAL_ADC_MspInit+0x310>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	4aa4      	ldr	r2, [pc, #656]	; (8002750 <HAL_ADC_MspInit+0x310>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c6:	4ba2      	ldr	r3, [pc, #648]	; (8002750 <HAL_ADC_MspInit+0x310>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin;
 80024d2:	230f      	movs	r3, #15
 80024d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d8:	2303      	movs	r3, #3
 80024da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ee:	f003 fc89 	bl	8005e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80024f2:	e127      	b.n	8002744 <HAL_ADC_MspInit+0x304>
  else if(hadc->Instance==ADC2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a96      	ldr	r2, [pc, #600]	; (8002754 <HAL_ADC_MspInit+0x314>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	f040 8093 	bne.w	8002626 <HAL_ADC_MspInit+0x1e6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002506:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800250a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002510:	4618      	mov	r0, r3
 8002512:	f005 fa67 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_ADC_MspInit+0xe0>
      Error_Handler();
 800251c:	f7ff ff66 	bl	80023ec <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002520:	4b8a      	ldr	r3, [pc, #552]	; (800274c <HAL_ADC_MspInit+0x30c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a89      	ldr	r2, [pc, #548]	; (800274c <HAL_ADC_MspInit+0x30c>)
 8002528:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800252a:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_ADC_MspInit+0x30c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d10b      	bne.n	800254a <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002532:	4b87      	ldr	r3, [pc, #540]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	4a86      	ldr	r2, [pc, #536]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800253c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253e:	4b84      	ldr	r3, [pc, #528]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800254a:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_ADC_MspInit+0x310>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	4a80      	ldr	r2, [pc, #512]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002550:	f043 0320 	orr.w	r3, r3, #32
 8002554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002556:	4b7e      	ldr	r3, [pc, #504]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	4b7b      	ldr	r3, [pc, #492]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	4a7a      	ldr	r2, [pc, #488]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256e:	4b78      	ldr	r3, [pc, #480]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	4b75      	ldr	r3, [pc, #468]	; (8002750 <HAL_ADC_MspInit+0x310>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	4a74      	ldr	r2, [pc, #464]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002586:	4b72      	ldr	r3, [pc, #456]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	4b6f      	ldr	r3, [pc, #444]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	4a6e      	ldr	r2, [pc, #440]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259e:	4b6c      	ldr	r3, [pc, #432]	; (8002750 <HAL_ADC_MspInit+0x310>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = AD5_Pin;
 80025aa:	2302      	movs	r3, #2
 80025ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 80025bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025c0:	4619      	mov	r1, r3
 80025c2:	4865      	ldr	r0, [pc, #404]	; (8002758 <HAL_ADC_MspInit+0x318>)
 80025c4:	f003 fc1e 	bl	8005e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD8_Pin;
 80025c8:	2320      	movs	r3, #32
 80025ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ce:	2303      	movs	r3, #3
 80025d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e4:	f003 fc0e 	bl	8005e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD4_Pin|AD6_Pin;
 80025e8:	2330      	movs	r3, #48	; 0x30
 80025ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ee:	2303      	movs	r3, #3
 80025f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025fe:	4619      	mov	r1, r3
 8002600:	4856      	ldr	r0, [pc, #344]	; (800275c <HAL_ADC_MspInit+0x31c>)
 8002602:	f003 fbff 	bl	8005e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD7_Pin;
 8002606:	2304      	movs	r3, #4
 8002608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800260c:	2303      	movs	r3, #3
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AD7_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800261c:	4619      	mov	r1, r3
 800261e:	4850      	ldr	r0, [pc, #320]	; (8002760 <HAL_ADC_MspInit+0x320>)
 8002620:	f003 fbf0 	bl	8005e04 <HAL_GPIO_Init>
}
 8002624:	e08e      	b.n	8002744 <HAL_ADC_MspInit+0x304>
  else if(hadc->Instance==ADC3)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4e      	ldr	r2, [pc, #312]	; (8002764 <HAL_ADC_MspInit+0x324>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d142      	bne.n	80026b6 <HAL_ADC_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002634:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002636:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800263a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800263e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002642:	4618      	mov	r0, r3
 8002644:	f005 f9ce 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_ADC_MspInit+0x212>
      Error_Handler();
 800264e:	f7ff fecd 	bl	80023ec <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8002652:	4b45      	ldr	r3, [pc, #276]	; (8002768 <HAL_ADC_MspInit+0x328>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a43      	ldr	r2, [pc, #268]	; (8002768 <HAL_ADC_MspInit+0x328>)
 800265a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800265c:	4b42      	ldr	r3, [pc, #264]	; (8002768 <HAL_ADC_MspInit+0x328>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10b      	bne.n	800267c <HAL_ADC_MspInit+0x23c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002664:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	4a39      	ldr	r2, [pc, #228]	; (8002750 <HAL_ADC_MspInit+0x310>)
 800266a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002670:	4b37      	ldr	r3, [pc, #220]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267c:	4b34      	ldr	r3, [pc, #208]	; (8002750 <HAL_ADC_MspInit+0x310>)
 800267e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002680:	4a33      	ldr	r2, [pc, #204]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002688:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_ADC_MspInit+0x310>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AD9_Pin|AD10_Pin|AD11_Pin;
 8002694:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002698:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800269c:	2303      	movs	r3, #3
 800269e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80026ac:	4619      	mov	r1, r3
 80026ae:	482f      	ldr	r0, [pc, #188]	; (800276c <HAL_ADC_MspInit+0x32c>)
 80026b0:	f003 fba8 	bl	8005e04 <HAL_GPIO_Init>
}
 80026b4:	e046      	b.n	8002744 <HAL_ADC_MspInit+0x304>
  else if(hadc->Instance==ADC4)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <HAL_ADC_MspInit+0x330>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d141      	bne.n	8002744 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80026c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80026c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80026ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026d2:	4618      	mov	r0, r3
 80026d4:	f005 f986 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_ADC_MspInit+0x2a2>
      Error_Handler();
 80026de:	f7ff fe85 	bl	80023ec <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80026e2:	4b21      	ldr	r3, [pc, #132]	; (8002768 <HAL_ADC_MspInit+0x328>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <HAL_ADC_MspInit+0x328>)
 80026ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_ADC_MspInit+0x328>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10b      	bne.n	800270c <HAL_ADC_MspInit+0x2cc>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80026f4:	4b16      	ldr	r3, [pc, #88]	; (8002750 <HAL_ADC_MspInit+0x310>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	4a15      	ldr	r2, [pc, #84]	; (8002750 <HAL_ADC_MspInit+0x310>)
 80026fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_ADC_MspInit+0x310>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_ADC_MspInit+0x310>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_ADC_MspInit+0x310>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 8002724:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272c:	2303      	movs	r3, #3
 800272e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800273c:	4619      	mov	r1, r3
 800273e:	4808      	ldr	r0, [pc, #32]	; (8002760 <HAL_ADC_MspInit+0x320>)
 8002740:	f003 fb60 	bl	8005e04 <HAL_GPIO_Init>
}
 8002744:	bf00      	nop
 8002746:	37a0      	adds	r7, #160	; 0xa0
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	2000099c 	.word	0x2000099c
 8002750:	40021000 	.word	0x40021000
 8002754:	50000100 	.word	0x50000100
 8002758:	48001400 	.word	0x48001400
 800275c:	48000800 	.word	0x48000800
 8002760:	48000400 	.word	0x48000400
 8002764:	50000400 	.word	0x50000400
 8002768:	200009a0 	.word	0x200009a0
 800276c:	48000c00 	.word	0x48000c00
 8002770:	50000500 	.word	0x50000500

08002774 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_CORDIC_MspInit+0x38>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10b      	bne.n	800279e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_CORDIC_MspInit+0x3c>)
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_CORDIC_MspInit+0x3c>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6493      	str	r3, [r2, #72]	; 0x48
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <HAL_CORDIC_MspInit+0x3c>)
 8002794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000

080027b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <HAL_DAC_MspInit+0xdc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d12d      	bne.n	8002832 <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80027d6:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a28      	ldr	r2, [pc, #160]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC1_Pin;
 8002806:	2310      	movs	r3, #16
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280a:	2303      	movs	r3, #3
 800280c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DAC1_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281c:	f003 faf2 	bl	8005e04 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	2100      	movs	r1, #0
 8002824:	2036      	movs	r0, #54	; 0x36
 8002826:	f002 fd00 	bl	800522a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800282a:	2036      	movs	r0, #54	; 0x36
 800282c:	f002 fd17 	bl	800525e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8002830:	e029      	b.n	8002886 <HAL_DAC_MspInit+0xd2>
  else if(hdac->Instance==DAC2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a18      	ldr	r2, [pc, #96]	; (8002898 <HAL_DAC_MspInit+0xe4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d124      	bne.n	8002886 <HAL_DAC_MspInit+0xd2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 800283e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 8002842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 800284a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 8002856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_DAC_MspInit+0xe0>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAC2_Pin;
 800286c:	2340      	movs	r3, #64	; 0x40
 800286e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002870:	2303      	movs	r3, #3
 8002872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DAC2_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002882:	f003 fabf 	bl	8005e04 <HAL_GPIO_Init>
}
 8002886:	bf00      	nop
 8002888:	3730      	adds	r7, #48	; 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	50000800 	.word	0x50000800
 8002894:	40021000 	.word	0x40021000
 8002898:	50000c00 	.word	0x50000c00

0800289c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b09e      	sub	sp, #120	; 0x78
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	2254      	movs	r2, #84	; 0x54
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f008 f85b 	bl	800a978 <memset>
  if(hfdcan->Instance==FDCAN2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a20      	ldr	r2, [pc, #128]	; (8002948 <HAL_FDCAN_MspInit+0xac>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d138      	bne.n	800293e <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80028cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80028d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d8:	f107 0310 	add.w	r3, r7, #16
 80028dc:	4618      	mov	r0, r3
 80028de:	f005 f881 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80028e8:	f7ff fd80 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_FDCAN_MspInit+0xb0>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	4a16      	ldr	r2, [pc, #88]	; (800294c <HAL_FDCAN_MspInit+0xb0>)
 80028f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f6:	6593      	str	r3, [r2, #88]	; 0x58
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_FDCAN_MspInit+0xb0>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_FDCAN_MspInit+0xb0>)
 8002906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002908:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_FDCAN_MspInit+0xb0>)
 800290a:	f043 0302 	orr.w	r3, r3, #2
 800290e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_FDCAN_MspInit+0xb0>)
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800291c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002920:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800292e:	2309      	movs	r3, #9
 8002930:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002936:	4619      	mov	r1, r3
 8002938:	4805      	ldr	r0, [pc, #20]	; (8002950 <HAL_FDCAN_MspInit+0xb4>)
 800293a:	f003 fa63 	bl	8005e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800293e:	bf00      	nop
 8002940:	3778      	adds	r7, #120	; 0x78
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40006800 	.word	0x40006800
 800294c:	40021000 	.word	0x40021000
 8002950:	48000400 	.word	0x48000400

08002954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b0a2      	sub	sp, #136	; 0x88
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800296c:	f107 0320 	add.w	r3, r7, #32
 8002970:	2254      	movs	r2, #84	; 0x54
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f007 ffff 	bl	800a978 <memset>
  if(hi2c->Instance==I2C1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a4f      	ldr	r2, [pc, #316]	; (8002abc <HAL_I2C_MspInit+0x168>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d158      	bne.n	8002a36 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002984:	2340      	movs	r3, #64	; 0x40
 8002986:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002988:	2300      	movs	r3, #0
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800298c:	f107 0320 	add.w	r3, r7, #32
 8002990:	4618      	mov	r0, r3
 8002992:	f005 f827 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800299c:	f7ff fd26 	bl	80023ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a0:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	4a46      	ldr	r2, [pc, #280]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ac:	4b44      	ldr	r3, [pc, #272]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b8:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	4a40      	ldr	r2, [pc, #256]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c4:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d6:	2312      	movs	r3, #18
 80029d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e4:	2304      	movs	r3, #4
 80029e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f4:	f003 fa06 	bl	8005e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029fc:	2312      	movs	r3, #18
 80029fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a14:	4619      	mov	r1, r3
 8002a16:	482b      	ldr	r0, [pc, #172]	; (8002ac4 <HAL_I2C_MspInit+0x170>)
 8002a18:	f003 f9f4 	bl	8005e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a1c:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 8002a22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a26:	6593      	str	r3, [r2, #88]	; 0x58
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a34:	e03e      	b.n	8002ab4 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <HAL_I2C_MspInit+0x174>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d139      	bne.n	8002ab4 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002a44:	2300      	movs	r3, #0
 8002a46:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a48:	f107 0320 	add.w	r3, r7, #32
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 ffc9 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8002a58:	f7ff fcc8 	bl	80023ec <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a68:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a78:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a7a:	2312      	movs	r3, #18
 8002a7c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a88:	2304      	movs	r3, #4
 8002a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a92:	4619      	mov	r1, r3
 8002a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a98:	f003 f9b4 	bl	8005e04 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 8002aa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_I2C_MspInit+0x16c>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3788      	adds	r7, #136	; 0x88
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40005400 	.word	0x40005400
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	48000400 	.word	0x48000400
 8002ac8:	40005800 	.word	0x40005800

08002acc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b0a0      	sub	sp, #128	; 0x80
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ae4:	f107 0318 	add.w	r3, r7, #24
 8002ae8:	2254      	movs	r2, #84	; 0x54
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f007 ff43 	bl	800a978 <memset>
  if(hqspi->Instance==QUADSPI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <HAL_QSPI_MspInit+0x11c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d170      	bne.n	8002bde <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8002afc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b00:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b06:	f107 0318 	add.w	r3, r7, #24
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 ff6a 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 8002b16:	f7ff fc69 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002b1a:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1e:	4a33      	ldr	r2, [pc, #204]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	6513      	str	r3, [r2, #80]	; 0x50
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	4a2d      	ldr	r2, [pc, #180]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b3e:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	4a27      	ldr	r2, [pc, #156]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b56:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	4a21      	ldr	r2, [pc, #132]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b68:	f043 0320 	orr.w	r3, r3, #32
 8002b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <HAL_QSPI_MspInit+0x120>)
 8002b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> QUADSPI1_BK1_IO0
    PB10     ------> QUADSPI1_CLK
    PB11     ------> QUADSPI1_BK1_NCS
    PF6     ------> QUADSPI1_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b8a:	230a      	movs	r3, #10
 8002b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b92:	4619      	mov	r1, r3
 8002b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b98:	f003 f934 	bl	8005e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_IO1_Pin|QSPI_IO0_Pin|QSPI_CLK_Pin|QSPI_NCS_Pin;
 8002b9c:	f640 4303 	movw	r3, #3075	; 0xc03
 8002ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002bae:	230a      	movs	r3, #10
 8002bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <HAL_QSPI_MspInit+0x124>)
 8002bba:	f003 f923 	bl	8005e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_IO3_Pin;
 8002bbe:	2340      	movs	r3, #64	; 0x40
 8002bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002bce:	230a      	movs	r3, #10
 8002bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(QSPI_IO3_GPIO_Port, &GPIO_InitStruct);
 8002bd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4806      	ldr	r0, [pc, #24]	; (8002bf4 <HAL_QSPI_MspInit+0x128>)
 8002bda:	f003 f913 	bl	8005e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002bde:	bf00      	nop
 8002be0:	3780      	adds	r7, #128	; 0x80
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	a0001000 	.word	0xa0001000
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	48000400 	.word	0x48000400
 8002bf4:	48001400 	.word	0x48001400

08002bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_SPI_MspInit+0x7c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d127      	bne.n	8002c6a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c24:	6613      	str	r3, [r2, #96]	; 0x60
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002c4a:	231c      	movs	r3, #28
 8002c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <HAL_SPI_MspInit+0x84>)
 8002c66:	f003 f8cd 	bl	8005e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c6a:	bf00      	nop
 8002c6c:	3728      	adds	r7, #40	; 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40013000 	.word	0x40013000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	48001800 	.word	0x48001800

08002c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a31      	ldr	r2, [pc, #196]	; (8002d54 <HAL_TIM_Base_MspInit+0xd4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10c      	bne.n	8002cac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a30      	ldr	r2, [pc, #192]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002c98:	f043 0308 	orr.w	r3, r3, #8
 8002c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c9e:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002caa:	e04e      	b.n	8002d4a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <HAL_TIM_Base_MspInit+0xdc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d114      	bne.n	8002ce0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cb6:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002cbc:	f043 0310 	orr.w	r3, r3, #16
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2036      	movs	r0, #54	; 0x36
 8002cd4:	f002 faa9 	bl	800522a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cd8:	2036      	movs	r0, #54	; 0x36
 8002cda:	f002 fac0 	bl	800525e <HAL_NVIC_EnableIRQ>
}
 8002cde:	e034      	b.n	8002d4a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1e      	ldr	r2, [pc, #120]	; (8002d60 <HAL_TIM_Base_MspInit+0xe0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10c      	bne.n	8002d04 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cee:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002cf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697b      	ldr	r3, [r7, #20]
}
 8002d02:	e022      	b.n	8002d4a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_TIM_Base_MspInit+0xe4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10c      	bne.n	8002d28 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6613      	str	r3, [r2, #96]	; 0x60
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]
}
 8002d26:	e010      	b.n	8002d4a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM20)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <HAL_TIM_Base_MspInit+0xe8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d10b      	bne.n	8002d4a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_TIM_Base_MspInit+0xd8>)
 8002d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
}
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40001000 	.word	0x40001000
 8002d60:	40013400 	.word	0x40013400
 8002d64:	40014000 	.word	0x40014000
 8002d68:	40015000 	.word	0x40015000

08002d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08c      	sub	sp, #48	; 0x30
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a46      	ldr	r2, [pc, #280]	; (8002ea4 <HAL_TIM_MspPostInit+0x138>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d11d      	bne.n	8002dca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d8e:	4b46      	ldr	r3, [pc, #280]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	4a45      	ldr	r2, [pc, #276]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002d94:	f043 0320 	orr.w	r3, r3, #32
 8002d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d9a:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PF7     ------> TIM5_CH2
    PF8     ------> TIM5_CH3
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8002da6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8002db8:	2306      	movs	r3, #6
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	483a      	ldr	r0, [pc, #232]	; (8002eac <HAL_TIM_MspPostInit+0x140>)
 8002dc4:	f003 f81e 	bl	8005e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8002dc8:	e067      	b.n	8002e9a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a38      	ldr	r2, [pc, #224]	; (8002eb0 <HAL_TIM_MspPostInit+0x144>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d11d      	bne.n	8002e10 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd4:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd8:	4a33      	ldr	r2, [pc, #204]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002de0:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 8002dec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002dfe:	2304      	movs	r3, #4
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e02:	f107 031c 	add.w	r3, r7, #28
 8002e06:	4619      	mov	r1, r3
 8002e08:	482a      	ldr	r0, [pc, #168]	; (8002eb4 <HAL_TIM_MspPostInit+0x148>)
 8002e0a:	f002 fffb 	bl	8005e04 <HAL_GPIO_Init>
}
 8002e0e:	e044      	b.n	8002e9a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM15)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_TIM_MspPostInit+0x14c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d11d      	bne.n	8002e56 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002e20:	f043 0320 	orr.w	r3, r3, #32
 8002e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM5_Pin;
 8002e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8002e44:	2303      	movs	r3, #3
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4817      	ldr	r0, [pc, #92]	; (8002eac <HAL_TIM_MspPostInit+0x140>)
 8002e50:	f002 ffd8 	bl	8005e04 <HAL_GPIO_Init>
}
 8002e54:	e021      	b.n	8002e9a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM20)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_TIM_MspPostInit+0x150>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d11c      	bne.n	8002e9a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e64:	4a10      	ldr	r2, [pc, #64]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002e66:	f043 0320 	orr.w	r3, r3, #32
 8002e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_TIM_MspPostInit+0x13c>)
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 8002e78:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e8e:	f107 031c 	add.w	r3, r7, #28
 8002e92:	4619      	mov	r1, r3
 8002e94:	4805      	ldr	r0, [pc, #20]	; (8002eac <HAL_TIM_MspPostInit+0x140>)
 8002e96:	f002 ffb5 	bl	8005e04 <HAL_GPIO_Init>
}
 8002e9a:	bf00      	nop
 8002e9c:	3730      	adds	r7, #48	; 0x30
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40000c00 	.word	0x40000c00
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	48001400 	.word	0x48001400
 8002eb0:	40013400 	.word	0x40013400
 8002eb4:	48000800 	.word	0x48000800
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	40015000 	.word	0x40015000

08002ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b0a8      	sub	sp, #160	; 0xa0
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ed8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002edc:	2254      	movs	r2, #84	; 0x54
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f007 fd49 	bl	800a978 <memset>
  if(huart->Instance==UART4)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4aad      	ldr	r2, [pc, #692]	; (80031a0 <HAL_UART_MspInit+0x2e0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d13c      	bne.n	8002f6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002efc:	4618      	mov	r0, r3
 8002efe:	f004 fd71 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f08:	f7ff fa70 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f0c:	4ba5      	ldr	r3, [pc, #660]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	4aa4      	ldr	r2, [pc, #656]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f16:	6593      	str	r3, [r2, #88]	; 0x58
 8002f18:	4ba2      	ldr	r3, [pc, #648]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f24:	4b9f      	ldr	r3, [pc, #636]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f28:	4a9e      	ldr	r2, [pc, #632]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f30:	4b9c      	ldr	r3, [pc, #624]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002f56:	2305      	movs	r3, #5
 8002f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f60:	4619      	mov	r1, r3
 8002f62:	4891      	ldr	r0, [pc, #580]	; (80031a8 <HAL_UART_MspInit+0x2e8>)
 8002f64:	f002 ff4e 	bl	8005e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f68:	e1b2      	b.n	80032d0 <HAL_UART_MspInit+0x410>
  else if(huart->Instance==UART5)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a8f      	ldr	r2, [pc, #572]	; (80031ac <HAL_UART_MspInit+0x2ec>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d15d      	bne.n	8003030 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002f74:	2310      	movs	r3, #16
 8002f76:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fd2f 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002f8c:	f7ff fa2e 	bl	80023ec <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f90:	4b84      	ldr	r3, [pc, #528]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	4a83      	ldr	r2, [pc, #524]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9c:	4b81      	ldr	r3, [pc, #516]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa8:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fac:	4a7d      	ldr	r2, [pc, #500]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb4:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fc0:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc4:	4a77      	ldr	r2, [pc, #476]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002fc6:	f043 0308 	orr.w	r3, r3, #8
 8002fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fcc:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8002fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 8002fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002ff2:	2305      	movs	r3, #5
 8002ff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8002ff8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	486a      	ldr	r0, [pc, #424]	; (80031a8 <HAL_UART_MspInit+0x2e8>)
 8003000:	f002 ff00 	bl	8005e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 8003004:	2304      	movs	r3, #4
 8003006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800301c:	2305      	movs	r3, #5
 800301e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 8003022:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003026:	4619      	mov	r1, r3
 8003028:	4861      	ldr	r0, [pc, #388]	; (80031b0 <HAL_UART_MspInit+0x2f0>)
 800302a:	f002 feeb 	bl	8005e04 <HAL_GPIO_Init>
}
 800302e:	e14f      	b.n	80032d0 <HAL_UART_MspInit+0x410>
  else if(huart->Instance==USART1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a5f      	ldr	r2, [pc, #380]	; (80031b4 <HAL_UART_MspInit+0x2f4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	f040 80c8 	bne.w	80031cc <HAL_UART_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800303c:	2301      	movs	r3, #1
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003040:	2300      	movs	r3, #0
 8003042:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003044:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003048:	4618      	mov	r0, r3
 800304a:	f004 fccb 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8003054:	f7ff f9ca 	bl	80023ec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003058:	4b52      	ldr	r3, [pc, #328]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 800305a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305c:	4a51      	ldr	r2, [pc, #324]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 800305e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003062:	6613      	str	r3, [r2, #96]	; 0x60
 8003064:	4b4f      	ldr	r3, [pc, #316]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8003066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003070:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8003072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003074:	4a4b      	ldr	r2, [pc, #300]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800307c:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 800307e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	4a45      	ldr	r2, [pc, #276]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 800308e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_UART_MspInit+0x2e4>)
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030ba:	2307      	movs	r3, #7
 80030bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80030c4:	4619      	mov	r1, r3
 80030c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ca:	f002 fe9b 	bl	8005e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030e8:	2307      	movs	r3, #7
 80030ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80030f2:	4619      	mov	r1, r3
 80030f4:	4830      	ldr	r0, [pc, #192]	; (80031b8 <HAL_UART_MspInit+0x2f8>)
 80030f6:	f002 fe85 	bl	8005e04 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80030fa:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 80030fc:	4a30      	ldr	r2, [pc, #192]	; (80031c0 <HAL_UART_MspInit+0x300>)
 80030fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 8003102:	2218      	movs	r2, #24
 8003104:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003112:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 800311a:	2200      	movs	r2, #0
 800311c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800311e:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003130:	4822      	ldr	r0, [pc, #136]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 8003132:	f002 fae7 	bl	8005704 <HAL_DMA_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_UART_MspInit+0x280>
      Error_Handler();
 800313c:	f7ff f956 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 8003144:	67da      	str	r2, [r3, #124]	; 0x7c
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <HAL_UART_MspInit+0x2fc>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_UART_MspInit+0x304>)
 800314e:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <HAL_UART_MspInit+0x308>)
 8003150:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_UART_MspInit+0x304>)
 8003154:	2219      	movs	r2, #25
 8003156:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003158:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_UART_MspInit+0x304>)
 800315a:	2210      	movs	r2, #16
 800315c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_UART_MspInit+0x304>)
 8003160:	2200      	movs	r2, #0
 8003162:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <HAL_UART_MspInit+0x304>)
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <HAL_UART_MspInit+0x304>)
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_UART_MspInit+0x304>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <HAL_UART_MspInit+0x304>)
 8003178:	2200      	movs	r2, #0
 800317a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_UART_MspInit+0x304>)
 800317e:	2200      	movs	r2, #0
 8003180:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003182:	4810      	ldr	r0, [pc, #64]	; (80031c4 <HAL_UART_MspInit+0x304>)
 8003184:	f002 fabe 	bl	8005704 <HAL_DMA_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 800318e:	f7ff f92d 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <HAL_UART_MspInit+0x304>)
 8003196:	679a      	str	r2, [r3, #120]	; 0x78
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <HAL_UART_MspInit+0x304>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800319e:	e097      	b.n	80032d0 <HAL_UART_MspInit+0x410>
 80031a0:	40004c00 	.word	0x40004c00
 80031a4:	40021000 	.word	0x40021000
 80031a8:	48000800 	.word	0x48000800
 80031ac:	40005000 	.word	0x40005000
 80031b0:	48000c00 	.word	0x48000c00
 80031b4:	40013800 	.word	0x40013800
 80031b8:	48001800 	.word	0x48001800
 80031bc:	20000884 	.word	0x20000884
 80031c0:	40020008 	.word	0x40020008
 80031c4:	200008e4 	.word	0x200008e4
 80031c8:	4002001c 	.word	0x4002001c
  else if(huart->Instance==USART2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a41      	ldr	r2, [pc, #260]	; (80032d8 <HAL_UART_MspInit+0x418>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d13b      	bne.n	800324e <HAL_UART_MspInit+0x38e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031d6:	2302      	movs	r3, #2
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031da:	2300      	movs	r3, #0
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 fbfe 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_MspInit+0x332>
      Error_Handler();
 80031ee:	f7ff f8fd 	bl	80023ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031f2:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <HAL_UART_MspInit+0x41c>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	4a39      	ldr	r2, [pc, #228]	; (80032dc <HAL_UART_MspInit+0x41c>)
 80031f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031fc:	6593      	str	r3, [r2, #88]	; 0x58
 80031fe:	4b37      	ldr	r3, [pc, #220]	; (80032dc <HAL_UART_MspInit+0x41c>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_UART_MspInit+0x41c>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	4a33      	ldr	r2, [pc, #204]	; (80032dc <HAL_UART_MspInit+0x41c>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_UART_MspInit+0x41c>)
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003222:	2318      	movs	r3, #24
 8003224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800323a:	2307      	movs	r3, #7
 800323c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003244:	4619      	mov	r1, r3
 8003246:	4826      	ldr	r0, [pc, #152]	; (80032e0 <HAL_UART_MspInit+0x420>)
 8003248:	f002 fddc 	bl	8005e04 <HAL_GPIO_Init>
}
 800324c:	e040      	b.n	80032d0 <HAL_UART_MspInit+0x410>
  else if(huart->Instance==USART3)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <HAL_UART_MspInit+0x424>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d13b      	bne.n	80032d0 <HAL_UART_MspInit+0x410>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003258:	2304      	movs	r3, #4
 800325a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800325c:	2300      	movs	r3, #0
 800325e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003260:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003264:	4618      	mov	r0, r3
 8003266:	f004 fbbd 	bl	80079e4 <HAL_RCCEx_PeriphCLKConfig>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_UART_MspInit+0x3b4>
      Error_Handler();
 8003270:	f7ff f8bc 	bl	80023ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_UART_MspInit+0x41c>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	4a18      	ldr	r2, [pc, #96]	; (80032dc <HAL_UART_MspInit+0x41c>)
 800327a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327e:	6593      	str	r3, [r2, #88]	; 0x58
 8003280:	4b16      	ldr	r3, [pc, #88]	; (80032dc <HAL_UART_MspInit+0x41c>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_UART_MspInit+0x41c>)
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	4a12      	ldr	r2, [pc, #72]	; (80032dc <HAL_UART_MspInit+0x41c>)
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_UART_MspInit+0x41c>)
 800329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032be:	2307      	movs	r3, #7
 80032c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80032c8:	4619      	mov	r1, r3
 80032ca:	4805      	ldr	r0, [pc, #20]	; (80032e0 <HAL_UART_MspInit+0x420>)
 80032cc:	f002 fd9a 	bl	8005e04 <HAL_GPIO_Init>
}
 80032d0:	bf00      	nop
 80032d2:	37a0      	adds	r7, #160	; 0xa0
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40004400 	.word	0x40004400
 80032dc:	40021000 	.word	0x40021000
 80032e0:	48000400 	.word	0x48000400
 80032e4:	40004800 	.word	0x40004800

080032e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80032fc:	4b23      	ldr	r3, [pc, #140]	; (800338c <HAL_FMC_MspInit+0xa4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d13e      	bne.n	8003382 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8003304:	4b21      	ldr	r3, [pc, #132]	; (800338c <HAL_FMC_MspInit+0xa4>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_FMC_MspInit+0xa8>)
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	4a20      	ldr	r2, [pc, #128]	; (8003390 <HAL_FMC_MspInit+0xa8>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6513      	str	r3, [r2, #80]	; 0x50
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <HAL_FMC_MspInit+0xa8>)
 8003318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003322:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003326:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2303      	movs	r3, #3
 8003332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003334:	230c      	movs	r3, #12
 8003336:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	4619      	mov	r1, r3
 800333c:	4815      	ldr	r0, [pc, #84]	; (8003394 <HAL_FMC_MspInit+0xac>)
 800333e:	f002 fd61 	bl	8005e04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003342:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003346:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|LCD_RD_Pin
                          |LCD_WR_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	2303      	movs	r3, #3
 8003352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003354:	230c      	movs	r3, #12
 8003356:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	4619      	mov	r1, r3
 800335c:	480e      	ldr	r0, [pc, #56]	; (8003398 <HAL_FMC_MspInit+0xb0>)
 800335e:	f002 fd51 	bl	8005e04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8003362:	2320      	movs	r3, #32
 8003364:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336e:	2303      	movs	r3, #3
 8003370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003372:	230c      	movs	r3, #12
 8003374:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4808      	ldr	r0, [pc, #32]	; (800339c <HAL_FMC_MspInit+0xb4>)
 800337c:	f002 fd42 	bl	8005e04 <HAL_GPIO_Init>
 8003380:	e000      	b.n	8003384 <HAL_FMC_MspInit+0x9c>
    return;
 8003382:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200009a4 	.word	0x200009a4
 8003390:	40021000 	.word	0x40021000
 8003394:	48001000 	.word	0x48001000
 8003398:	48000c00 	.word	0x48000c00
 800339c:	48001800 	.word	0x48001800

080033a0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80033a8:	f7ff ff9e 	bl	80032e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033b8:	e7fe      	b.n	80033b8 <NMI_Handler+0x4>

080033ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033be:	e7fe      	b.n	80033be <HardFault_Handler+0x4>

080033c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <MemManage_Handler+0x4>

080033c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ca:	e7fe      	b.n	80033ca <BusFault_Handler+0x4>

080033cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <UsageFault_Handler+0x4>

080033d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003400:	f000 f8f8 	bl	80035f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800340c:	4802      	ldr	r0, [pc, #8]	; (8003418 <DMA1_Channel1_IRQHandler+0x10>)
 800340e:	f002 fa21 	bl	8005854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000884 	.word	0x20000884

0800341c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <DMA1_Channel2_IRQHandler+0x10>)
 8003422:	f002 fa17 	bl	8005854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200008e4 	.word	0x200008e4

08003430 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8003434:	2040      	movs	r0, #64	; 0x40
 8003436:	f002 fe7f 	bl	8006138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}

0800343e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_ESC_Pin);
 8003442:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003446:	f002 fe77 	bl	8006138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003454:	4803      	ldr	r0, [pc, #12]	; (8003464 <TIM6_DAC_IRQHandler+0x14>)
 8003456:	f004 febe 	bl	80081d6 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800345a:	4803      	ldr	r0, [pc, #12]	; (8003468 <TIM6_DAC_IRQHandler+0x18>)
 800345c:	f001 ff3b 	bl	80052d6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000484 	.word	0x20000484
 8003468:	20000264 	.word	0x20000264

0800346c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003474:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <_sbrk+0x5c>)
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <_sbrk+0x60>)
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003480:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <_sbrk+0x64>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <_sbrk+0x64>)
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <_sbrk+0x68>)
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <_sbrk+0x64>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	429a      	cmp	r2, r3
 800349a:	d207      	bcs.n	80034ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800349c:	f007 fa42 	bl	800a924 <__errno>
 80034a0:	4603      	mov	r3, r0
 80034a2:	220c      	movs	r2, #12
 80034a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	e009      	b.n	80034c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034ac:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <_sbrk+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b2:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <_sbrk+0x64>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <_sbrk+0x64>)
 80034bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20020000 	.word	0x20020000
 80034cc:	00000400 	.word	0x00000400
 80034d0:	200009a8 	.word	0x200009a8
 80034d4:	200009c0 	.word	0x200009c0

080034d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <SystemInit+0x20>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <SystemInit+0x20>)
 80034e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034fc:	480d      	ldr	r0, [pc, #52]	; (8003534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003500:	480d      	ldr	r0, [pc, #52]	; (8003538 <LoopForever+0x6>)
  ldr r1, =_edata
 8003502:	490e      	ldr	r1, [pc, #56]	; (800353c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003504:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <LoopForever+0xe>)
  movs r3, #0
 8003506:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003508:	e002      	b.n	8003510 <LoopCopyDataInit>

0800350a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800350c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350e:	3304      	adds	r3, #4

08003510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003514:	d3f9      	bcc.n	800350a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003516:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003518:	4c0b      	ldr	r4, [pc, #44]	; (8003548 <LoopForever+0x16>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800351c:	e001      	b.n	8003522 <LoopFillZerobss>

0800351e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003520:	3204      	adds	r2, #4

08003522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003524:	d3fb      	bcc.n	800351e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003526:	f7ff ffd7 	bl	80034d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800352a:	f007 fa01 	bl	800a930 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800352e:	f7fd fc67 	bl	8000e00 <main>

08003532 <LoopForever>:

LoopForever:
    b LoopForever
 8003532:	e7fe      	b.n	8003532 <LoopForever>
  ldr   r0, =_estack
 8003534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800353c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003540:	0800b314 	.word	0x0800b314
  ldr r2, =_sbss
 8003544:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003548:	200009c0 	.word	0x200009c0

0800354c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800354c:	e7fe      	b.n	800354c <ADC1_2_IRQHandler>

0800354e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003558:	2003      	movs	r0, #3
 800355a:	f001 fe5b 	bl	8005214 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800355e:	2000      	movs	r0, #0
 8003560:	f000 f80e 	bl	8003580 <HAL_InitTick>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	71fb      	strb	r3, [r7, #7]
 800356e:	e001      	b.n	8003574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003570:	f7fe ff42 	bl	80023f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003574:	79fb      	ldrb	r3, [r7, #7]

}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_InitTick+0x68>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d022      	beq.n	80035da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_InitTick+0x6c>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_InitTick+0x68>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fe66 	bl	800527a <HAL_SYSTICK_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10f      	bne.n	80035d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b0f      	cmp	r3, #15
 80035b8:	d809      	bhi.n	80035ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035ba:	2200      	movs	r2, #0
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	f04f 30ff 	mov.w	r0, #4294967295
 80035c2:	f001 fe32 	bl	800522a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <HAL_InitTick+0x70>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e007      	b.n	80035de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e004      	b.n	80035de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e001      	b.n	80035de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000008 	.word	0x20000008
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000004 	.word	0x20000004

080035f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_IncTick+0x1c>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_IncTick+0x20>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4413      	add	r3, r2
 8003602:	4a03      	ldr	r2, [pc, #12]	; (8003610 <HAL_IncTick+0x1c>)
 8003604:	6013      	str	r3, [r2, #0]
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	200009ac 	.word	0x200009ac
 8003614:	20000008 	.word	0x20000008

08003618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return uwTick;
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <HAL_GetTick+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	200009ac 	.word	0x200009ac

08003630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003638:	f7ff ffee 	bl	8003618 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d004      	beq.n	8003654 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_Delay+0x40>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4413      	add	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003654:	bf00      	nop
 8003656:	f7ff ffdf 	bl	8003618 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	429a      	cmp	r2, r3
 8003664:	d8f7      	bhi.n	8003656 <HAL_Delay+0x26>
  {
  }
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000008 	.word	0x20000008

08003674 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3360      	adds	r3, #96	; 0x60
 80036ee:	461a      	mov	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <LL_ADC_SetOffset+0x44>)
 80036fe:	4013      	ands	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	03fff000 	.word	0x03fff000

08003724 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3360      	adds	r3, #96	; 0x60
 8003732:	461a      	mov	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3360      	adds	r3, #96	; 0x60
 8003760:	461a      	mov	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	431a      	orrs	r2, r3
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003786:	b480      	push	{r7}
 8003788:	b087      	sub	sp, #28
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3360      	adds	r3, #96	; 0x60
 8003796:	461a      	mov	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	3360      	adds	r3, #96	; 0x60
 80037cc:	461a      	mov	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	615a      	str	r2, [r3, #20]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800383e:	b480      	push	{r7}
 8003840:	b087      	sub	sp, #28
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3330      	adds	r3, #48	; 0x30
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	4413      	add	r3, r2
 800385c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	211f      	movs	r1, #31
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	401a      	ands	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	0e9b      	lsrs	r3, r3, #26
 8003876:	f003 011f 	and.w	r1, r3, #31
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	431a      	orrs	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003896:	b480      	push	{r7}
 8003898:	b087      	sub	sp, #28
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3314      	adds	r3, #20
 80038a6:	461a      	mov	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	0e5b      	lsrs	r3, r3, #25
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	4413      	add	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	0d1b      	lsrs	r3, r3, #20
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2107      	movs	r1, #7
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	401a      	ands	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	0d1b      	lsrs	r3, r3, #20
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	431a      	orrs	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d10a      	bne.n	8003916 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390c:	431a      	orrs	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003914:	e00a      	b.n	800392c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003922:	43db      	mvns	r3, r3
 8003924:	401a      	ands	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	407f0000 	.word	0x407f0000

0800393c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 031f 	and.w	r3, r3, #31
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003984:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6093      	str	r3, [r2, #8]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ac:	d101      	bne.n	80039b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80039d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fc:	d101      	bne.n	8003a02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a4c:	f043 0202 	orr.w	r2, r3, #2
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <LL_ADC_IsEnabled+0x18>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <LL_ADC_IsEnabled+0x1a>
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d101      	bne.n	8003a9e <LL_ADC_IsDisableOngoing+0x18>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <LL_ADC_IsDisableOngoing+0x1a>
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ac0:	f043 0204 	orr.w	r2, r3, #4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d101      	bne.n	8003aec <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d101      	bne.n	8003b12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e1af      	b.n	8003e9a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fe fc79 	bl	8002440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff19 	bl	8003998 <LL_ADC_IsDeepPowerDownEnabled>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff feff 	bl	8003974 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff34 	bl	80039e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d115      	bne.n	8003bb2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff18 	bl	80039c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b90:	4b9f      	ldr	r3, [pc, #636]	; (8003e10 <HAL_ADC_Init+0x2f0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	4a9f      	ldr	r2, [pc, #636]	; (8003e14 <HAL_ADC_Init+0x2f4>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ba4:	e002      	b.n	8003bac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f9      	bne.n	8003ba6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ff16 	bl	80039e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10d      	bne.n	8003bde <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc6:	f043 0210 	orr.w	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd2:	f043 0201 	orr.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff76 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8003be8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 8148 	bne.w	8003e88 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 8144 	bne.w	8003e88 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c08:	f043 0202 	orr.w	r2, r3, #2
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff23 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d141      	bne.n	8003ca4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c28:	d004      	beq.n	8003c34 <HAL_ADC_Init+0x114>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7a      	ldr	r2, [pc, #488]	; (8003e18 <HAL_ADC_Init+0x2f8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d10f      	bne.n	8003c54 <HAL_ADC_Init+0x134>
 8003c34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c38:	f7ff ff12 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	4876      	ldr	r0, [pc, #472]	; (8003e18 <HAL_ADC_Init+0x2f8>)
 8003c40:	f7ff ff0e 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4323      	orrs	r3, r4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e012      	b.n	8003c7a <HAL_ADC_Init+0x15a>
 8003c54:	4871      	ldr	r0, [pc, #452]	; (8003e1c <HAL_ADC_Init+0x2fc>)
 8003c56:	f7ff ff03 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	4870      	ldr	r0, [pc, #448]	; (8003e20 <HAL_ADC_Init+0x300>)
 8003c5e:	f7ff feff 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c62:	4603      	mov	r3, r0
 8003c64:	431c      	orrs	r4, r3
 8003c66:	486f      	ldr	r0, [pc, #444]	; (8003e24 <HAL_ADC_Init+0x304>)
 8003c68:	f7ff fefa 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4323      	orrs	r3, r4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d012      	beq.n	8003ca4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c86:	d004      	beq.n	8003c92 <HAL_ADC_Init+0x172>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a62      	ldr	r2, [pc, #392]	; (8003e18 <HAL_ADC_Init+0x2f8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <HAL_ADC_Init+0x176>
 8003c92:	4a65      	ldr	r2, [pc, #404]	; (8003e28 <HAL_ADC_Init+0x308>)
 8003c94:	e000      	b.n	8003c98 <HAL_ADC_Init+0x178>
 8003c96:	4a65      	ldr	r2, [pc, #404]	; (8003e2c <HAL_ADC_Init+0x30c>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f7ff fce8 	bl	8003674 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7f5b      	ldrb	r3, [r3, #29]
 8003ca8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003cb4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003cba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cc2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d106      	bne.n	8003ce0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	045b      	lsls	r3, r3, #17
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	4b4b      	ldr	r3, [pc, #300]	; (8003e30 <HAL_ADC_Init+0x310>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fed2 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8003d30:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fedf 	bl	8003afa <LL_ADC_INJ_IsConversionOngoing>
 8003d3c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d17f      	bne.n	8003e44 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d17c      	bne.n	8003e44 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d4e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d56:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d66:	f023 0302 	bic.w	r3, r3, #2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	69b9      	ldr	r1, [r7, #24]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d017      	beq.n	8003dac <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6911      	ldr	r1, [r2, #16]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003daa:	e013      	b.n	8003dd4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003dba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dd0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d12a      	bne.n	8003e34 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003df4:	4311      	orrs	r1, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e00:	430a      	orrs	r2, r1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	e019      	b.n	8003e44 <HAL_ADC_Init+0x324>
 8003e10:	20000000 	.word	0x20000000
 8003e14:	053e2d63 	.word	0x053e2d63
 8003e18:	50000100 	.word	0x50000100
 8003e1c:	50000400 	.word	0x50000400
 8003e20:	50000500 	.word	0x50000500
 8003e24:	50000600 	.word	0x50000600
 8003e28:	50000300 	.word	0x50000300
 8003e2c:	50000700 	.word	0x50000700
 8003e30:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d10c      	bne.n	8003e66 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f023 010f 	bic.w	r1, r3, #15
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	1e5a      	subs	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
 8003e64:	e007      	b.n	8003e76 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 020f 	bic.w	r2, r2, #15
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e86:	e007      	b.n	8003e98 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	f043 0210 	orr.w	r2, r3, #16
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3724      	adds	r7, #36	; 0x24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd90      	pop	{r4, r7, pc}
 8003ea2:	bf00      	nop

08003ea4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb4:	d004      	beq.n	8003ec0 <HAL_ADC_Start+0x1c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a67      	ldr	r2, [pc, #412]	; (8004058 <HAL_ADC_Start+0x1b4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_Start+0x20>
 8003ec0:	4b66      	ldr	r3, [pc, #408]	; (800405c <HAL_ADC_Start+0x1b8>)
 8003ec2:	e000      	b.n	8003ec6 <HAL_ADC_Start+0x22>
 8003ec4:	4b66      	ldr	r3, [pc, #408]	; (8004060 <HAL_ADC_Start+0x1bc>)
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fd38 	bl	800393c <LL_ADC_GetMultimode>
 8003ecc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fdfe 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 80b4 	bne.w	8004048 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_ADC_Start+0x4a>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e0af      	b.n	800404e <HAL_ADC_Start+0x1aa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fe0c 	bl	8004b14 <ADC_Enable>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 809b 	bne.w	800403e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a4d      	ldr	r2, [pc, #308]	; (8004058 <HAL_ADC_Start+0x1b4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_ADC_Start+0x96>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a4e      	ldr	r2, [pc, #312]	; (8004064 <HAL_ADC_Start+0x1c0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d002      	beq.n	8003f36 <HAL_ADC_Start+0x92>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	e003      	b.n	8003f3e <HAL_ADC_Start+0x9a>
 8003f36:	4b4c      	ldr	r3, [pc, #304]	; (8004068 <HAL_ADC_Start+0x1c4>)
 8003f38:	e001      	b.n	8003f3e <HAL_ADC_Start+0x9a>
 8003f3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d002      	beq.n	8003f4c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f64:	d106      	bne.n	8003f74 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6a:	f023 0206 	bic.w	r2, r3, #6
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	661a      	str	r2, [r3, #96]	; 0x60
 8003f72:	e002      	b.n	8003f7a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	221c      	movs	r2, #28
 8003f80:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a32      	ldr	r2, [pc, #200]	; (8004058 <HAL_ADC_Start+0x1b4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_ADC_Start+0x104>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a32      	ldr	r2, [pc, #200]	; (8004064 <HAL_ADC_Start+0x1c0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d002      	beq.n	8003fa4 <HAL_ADC_Start+0x100>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	e003      	b.n	8003fac <HAL_ADC_Start+0x108>
 8003fa4:	4b30      	ldr	r3, [pc, #192]	; (8004068 <HAL_ADC_Start+0x1c4>)
 8003fa6:	e001      	b.n	8003fac <HAL_ADC_Start+0x108>
 8003fa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d008      	beq.n	8003fc6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	d002      	beq.n	8003fc6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b09      	cmp	r3, #9
 8003fc4:	d114      	bne.n	8003ff0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fd5f 	bl	8003aac <LL_ADC_REG_StartConversion>
 8003fee:	e02d      	b.n	800404c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a15      	ldr	r2, [pc, #84]	; (8004058 <HAL_ADC_Start+0x1b4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_ADC_Start+0x176>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <HAL_ADC_Start+0x1c0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d002      	beq.n	8004016 <HAL_ADC_Start+0x172>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	e003      	b.n	800401e <HAL_ADC_Start+0x17a>
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_ADC_Start+0x1c4>)
 8004018:	e001      	b.n	800401e <HAL_ADC_Start+0x17a>
 800401a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800401e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00f      	beq.n	800404c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004034:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	65da      	str	r2, [r3, #92]	; 0x5c
 800403c:	e006      	b.n	800404c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004046:	e001      	b.n	800404c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004048:	2302      	movs	r3, #2
 800404a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800404c:	7dfb      	ldrb	r3, [r7, #23]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	50000100 	.word	0x50000100
 800405c:	50000300 	.word	0x50000300
 8004060:	50000700 	.word	0x50000700
 8004064:	50000500 	.word	0x50000500
 8004068:	50000400 	.word	0x50000400

0800406c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800407e:	d004      	beq.n	800408a <HAL_ADC_PollForConversion+0x1e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a77      	ldr	r2, [pc, #476]	; (8004264 <HAL_ADC_PollForConversion+0x1f8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_ADC_PollForConversion+0x22>
 800408a:	4b77      	ldr	r3, [pc, #476]	; (8004268 <HAL_ADC_PollForConversion+0x1fc>)
 800408c:	e000      	b.n	8004090 <HAL_ADC_PollForConversion+0x24>
 800408e:	4b77      	ldr	r3, [pc, #476]	; (800426c <HAL_ADC_PollForConversion+0x200>)
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fc53 	bl	800393c <LL_ADC_GetMultimode>
 8004096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d102      	bne.n	80040a6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80040a0:	2308      	movs	r3, #8
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	e037      	b.n	8004116 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	d002      	beq.n	80040b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b09      	cmp	r3, #9
 80040b6:	d111      	bne.n	80040dc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0c1      	b.n	800425a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80040d6:	2304      	movs	r3, #4
 80040d8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80040da:	e01c      	b.n	8004116 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040e4:	d004      	beq.n	80040f0 <HAL_ADC_PollForConversion+0x84>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5e      	ldr	r2, [pc, #376]	; (8004264 <HAL_ADC_PollForConversion+0x1f8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d101      	bne.n	80040f4 <HAL_ADC_PollForConversion+0x88>
 80040f0:	4b5d      	ldr	r3, [pc, #372]	; (8004268 <HAL_ADC_PollForConversion+0x1fc>)
 80040f2:	e000      	b.n	80040f6 <HAL_ADC_PollForConversion+0x8a>
 80040f4:	4b5d      	ldr	r3, [pc, #372]	; (800426c <HAL_ADC_PollForConversion+0x200>)
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fc2e 	bl	8003958 <LL_ADC_GetMultiDMATransfer>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e0a3      	b.n	800425a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004112:	2304      	movs	r3, #4
 8004114:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004116:	f7ff fa7f 	bl	8003618 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800411c:	e021      	b.n	8004162 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d01d      	beq.n	8004162 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004126:	f7ff fa77 	bl	8003618 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <HAL_ADC_PollForConversion+0xd0>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d112      	bne.n	8004162 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414e:	f043 0204 	orr.w	r2, r3, #4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e07b      	b.n	800425a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0d6      	beq.n	800411e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fb49 	bl	8003818 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01c      	beq.n	80041c6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	7f5b      	ldrb	r3, [r3, #29]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d118      	bne.n	80041c6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d111      	bne.n	80041c6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041be:	f043 0201 	orr.w	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a26      	ldr	r2, [pc, #152]	; (8004264 <HAL_ADC_PollForConversion+0x1f8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d009      	beq.n	80041e4 <HAL_ADC_PollForConversion+0x178>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a26      	ldr	r2, [pc, #152]	; (8004270 <HAL_ADC_PollForConversion+0x204>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d002      	beq.n	80041e0 <HAL_ADC_PollForConversion+0x174>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e003      	b.n	80041e8 <HAL_ADC_PollForConversion+0x17c>
 80041e0:	4b24      	ldr	r3, [pc, #144]	; (8004274 <HAL_ADC_PollForConversion+0x208>)
 80041e2:	e001      	b.n	80041e8 <HAL_ADC_PollForConversion+0x17c>
 80041e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d008      	beq.n	8004202 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b05      	cmp	r3, #5
 80041fa:	d002      	beq.n	8004202 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b09      	cmp	r3, #9
 8004200:	d104      	bne.n	800420c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e014      	b.n	8004236 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a14      	ldr	r2, [pc, #80]	; (8004264 <HAL_ADC_PollForConversion+0x1f8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d009      	beq.n	800422a <HAL_ADC_PollForConversion+0x1be>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a15      	ldr	r2, [pc, #84]	; (8004270 <HAL_ADC_PollForConversion+0x204>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d002      	beq.n	8004226 <HAL_ADC_PollForConversion+0x1ba>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	e003      	b.n	800422e <HAL_ADC_PollForConversion+0x1c2>
 8004226:	4b13      	ldr	r3, [pc, #76]	; (8004274 <HAL_ADC_PollForConversion+0x208>)
 8004228:	e001      	b.n	800422e <HAL_ADC_PollForConversion+0x1c2>
 800422a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800422e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d104      	bne.n	8004246 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2208      	movs	r2, #8
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e008      	b.n	8004258 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	220c      	movs	r2, #12
 8004256:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	50000100 	.word	0x50000100
 8004268:	50000300 	.word	0x50000300
 800426c:	50000700 	.word	0x50000700
 8004270:	50000500 	.word	0x50000500
 8004274:	50000400 	.word	0x50000400

08004278 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b0b6      	sub	sp, #216	; 0xd8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d102      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x24>
 80042b2:	2302      	movs	r3, #2
 80042b4:	f000 bc13 	b.w	8004ade <HAL_ADC_ConfigChannel+0x84a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fc05 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f040 83f3 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7ff faad 	bl	800383e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fbf3 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 80042ee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fbff 	bl	8003afa <LL_ADC_INJ_IsConversionOngoing>
 80042fc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004300:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 81d9 	bne.w	80046bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800430a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 81d4 	bne.w	80046bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800431c:	d10f      	bne.n	800433e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	4619      	mov	r1, r3
 800432a:	f7ff fab4 	bl	8003896 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fa5b 	bl	80037f2 <LL_ADC_SetSamplingTimeCommonConfig>
 800433c:	e00e      	b.n	800435c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6819      	ldr	r1, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	461a      	mov	r2, r3
 800434c:	f7ff faa3 	bl	8003896 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fa4b 	bl	80037f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	08db      	lsrs	r3, r3, #3
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d022      	beq.n	80043c4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6919      	ldr	r1, [r3, #16]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800438e:	f7ff f9a5 	bl	80036dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6919      	ldr	r1, [r3, #16]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	461a      	mov	r2, r3
 80043a0:	f7ff f9f1 	bl	8003786 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6919      	ldr	r1, [r3, #16]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	7f1b      	ldrb	r3, [r3, #28]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d102      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x126>
 80043b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b8:	e000      	b.n	80043bc <HAL_ADC_ConfigChannel+0x128>
 80043ba:	2300      	movs	r3, #0
 80043bc:	461a      	mov	r2, r3
 80043be:	f7ff f9fd 	bl	80037bc <LL_ADC_SetOffsetSaturation>
 80043c2:	e17b      	b.n	80046bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2100      	movs	r1, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff f9aa 	bl	8003724 <LL_ADC_GetOffsetChannel>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x15c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff f99f 	bl	8003724 <LL_ADC_GetOffsetChannel>
 80043e6:	4603      	mov	r3, r0
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	f003 021f 	and.w	r2, r3, #31
 80043ee:	e01e      	b.n	800442e <HAL_ADC_ConfigChannel+0x19a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff f994 	bl	8003724 <LL_ADC_GetOffsetChannel>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800440e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004416:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800441e:	2320      	movs	r3, #32
 8004420:	e004      	b.n	800442c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x1b2>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	0e9b      	lsrs	r3, r3, #26
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	e018      	b.n	8004478 <HAL_ADC_ConfigChannel+0x1e4>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800445a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800445e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800446a:	2320      	movs	r3, #32
 800446c:	e004      	b.n	8004478 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800446e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004478:	429a      	cmp	r2, r3
 800447a:	d106      	bne.n	800448a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff f963 	bl	8003750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2101      	movs	r1, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff f947 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x222>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff f93c 	bl	8003724 <LL_ADC_GetOffsetChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	f003 021f 	and.w	r2, r3, #31
 80044b4:	e01e      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x260>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff f931 	bl	8003724 <LL_ADC_GetOffsetChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80044d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80044dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80044e4:	2320      	movs	r3, #32
 80044e6:	e004      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80044e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_ADC_ConfigChannel+0x278>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0e9b      	lsrs	r3, r3, #26
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	e018      	b.n	800453e <HAL_ADC_ConfigChannel+0x2aa>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004520:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004530:	2320      	movs	r3, #32
 8004532:	e004      	b.n	800453e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800453e:	429a      	cmp	r2, r3
 8004540:	d106      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	2101      	movs	r1, #1
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff f900 	bl	8003750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff f8e4 	bl	8003724 <LL_ADC_GetOffsetChannel>
 800455c:	4603      	mov	r3, r0
 800455e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_ADC_ConfigChannel+0x2e8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff f8d9 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8004572:	4603      	mov	r3, r0
 8004574:	0e9b      	lsrs	r3, r3, #26
 8004576:	f003 021f 	and.w	r2, r3, #31
 800457a:	e01e      	b.n	80045ba <HAL_ADC_ConfigChannel+0x326>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2102      	movs	r1, #2
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f8ce 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8004588:	4603      	mov	r3, r0
 800458a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800459a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800459e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80045a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80045aa:	2320      	movs	r3, #32
 80045ac:	e004      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80045ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x33e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	0e9b      	lsrs	r3, r3, #26
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	e016      	b.n	8004600 <HAL_ADC_ConfigChannel+0x36c>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80045e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80045ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80045f2:	2320      	movs	r3, #32
 80045f4:	e004      	b.n	8004600 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80045f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004600:	429a      	cmp	r2, r3
 8004602:	d106      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2200      	movs	r2, #0
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff f89f 	bl	8003750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2103      	movs	r1, #3
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff f883 	bl	8003724 <LL_ADC_GetOffsetChannel>
 800461e:	4603      	mov	r3, r0
 8004620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <HAL_ADC_ConfigChannel+0x3aa>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2103      	movs	r1, #3
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff f878 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8004634:	4603      	mov	r3, r0
 8004636:	0e9b      	lsrs	r3, r3, #26
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	e017      	b.n	800466e <HAL_ADC_ConfigChannel+0x3da>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2103      	movs	r1, #3
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff f86d 	bl	8003724 <LL_ADC_GetOffsetChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004658:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800465a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004660:	2320      	movs	r3, #32
 8004662:	e003      	b.n	800466c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x3f2>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	0e9b      	lsrs	r3, r3, #26
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	e011      	b.n	80046aa <HAL_ADC_ConfigChannel+0x416>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004696:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800469e:	2320      	movs	r3, #32
 80046a0:	e003      	b.n	80046aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80046a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d106      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	2103      	movs	r1, #3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff f84a 	bl	8003750 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff f9cd 	bl	8003a60 <LL_ADC_IsEnabled>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 813d 	bne.w	8004948 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7ff f906 	bl	80038ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4aa2      	ldr	r2, [pc, #648]	; (8004970 <HAL_ADC_ConfigChannel+0x6dc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	f040 812e 	bne.w	8004948 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x480>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	3301      	adds	r3, #1
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	2b09      	cmp	r3, #9
 800470a:	bf94      	ite	ls
 800470c:	2301      	movls	r3, #1
 800470e:	2300      	movhi	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e019      	b.n	8004748 <HAL_ADC_ConfigChannel+0x4b4>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004724:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800472c:	2320      	movs	r3, #32
 800472e:	e003      	b.n	8004738 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	3301      	adds	r3, #1
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2b09      	cmp	r3, #9
 8004740:	bf94      	ite	ls
 8004742:	2301      	movls	r3, #1
 8004744:	2300      	movhi	r3, #0
 8004746:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004748:	2b00      	cmp	r3, #0
 800474a:	d079      	beq.n	8004840 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x4d4>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	0e9b      	lsrs	r3, r3, #26
 800475e:	3301      	adds	r3, #1
 8004760:	069b      	lsls	r3, r3, #26
 8004762:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004766:	e015      	b.n	8004794 <HAL_ADC_ConfigChannel+0x500>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004778:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800477a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004780:	2320      	movs	r3, #32
 8004782:	e003      	b.n	800478c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3301      	adds	r3, #1
 800478e:	069b      	lsls	r3, r3, #26
 8004790:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x520>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	0e9b      	lsrs	r3, r3, #26
 80047a6:	3301      	adds	r3, #1
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2101      	movs	r1, #1
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	e017      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x550>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80047c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80047c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80047cc:	2320      	movs	r3, #32
 80047ce:	e003      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80047d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d2:	fab3 f383 	clz	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <HAL_ADC_ConfigChannel+0x576>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	0e9b      	lsrs	r3, r3, #26
 80047fa:	3301      	adds	r3, #1
 80047fc:	f003 021f 	and.w	r2, r3, #31
 8004800:	4613      	mov	r3, r2
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4413      	add	r3, r2
 8004806:	051b      	lsls	r3, r3, #20
 8004808:	e018      	b.n	800483c <HAL_ADC_ConfigChannel+0x5a8>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800481c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004822:	2320      	movs	r3, #32
 8004824:	e003      	b.n	800482e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004828:	fab3 f383 	clz	r3, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f003 021f 	and.w	r2, r3, #31
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800483c:	430b      	orrs	r3, r1
 800483e:	e07e      	b.n	800493e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <HAL_ADC_ConfigChannel+0x5c8>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0e9b      	lsrs	r3, r3, #26
 8004852:	3301      	adds	r3, #1
 8004854:	069b      	lsls	r3, r3, #26
 8004856:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800485a:	e015      	b.n	8004888 <HAL_ADC_ConfigChannel+0x5f4>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	fa93 f3a3 	rbit	r3, r3
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004874:	2320      	movs	r3, #32
 8004876:	e003      	b.n	8004880 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	fab3 f383 	clz	r3, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	3301      	adds	r3, #1
 8004882:	069b      	lsls	r3, r3, #26
 8004884:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x614>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0e9b      	lsrs	r3, r3, #26
 800489a:	3301      	adds	r3, #1
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2101      	movs	r1, #1
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	e017      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x644>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	61fb      	str	r3, [r7, #28]
  return result;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80048c0:	2320      	movs	r3, #32
 80048c2:	e003      	b.n	80048cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	3301      	adds	r3, #1
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2101      	movs	r1, #1
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	ea42 0103 	orr.w	r1, r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x670>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	0e9b      	lsrs	r3, r3, #26
 80048ee:	3301      	adds	r3, #1
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	3b1e      	subs	r3, #30
 80048fc:	051b      	lsls	r3, r3, #20
 80048fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004902:	e01b      	b.n	800493c <HAL_ADC_ConfigChannel+0x6a8>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	613b      	str	r3, [r7, #16]
  return result;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800491c:	2320      	movs	r3, #32
 800491e:	e003      	b.n	8004928 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	3301      	adds	r3, #1
 800492a:	f003 021f 	and.w	r2, r3, #31
 800492e:	4613      	mov	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	3b1e      	subs	r3, #30
 8004936:	051b      	lsls	r3, r3, #20
 8004938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800493c:	430b      	orrs	r3, r1
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	6892      	ldr	r2, [r2, #8]
 8004942:	4619      	mov	r1, r3
 8004944:	f7fe ffa7 	bl	8003896 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_ADC_ConfigChannel+0x6e0>)
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80be 	beq.w	8004ad2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800495e:	d004      	beq.n	800496a <HAL_ADC_ConfigChannel+0x6d6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a04      	ldr	r2, [pc, #16]	; (8004978 <HAL_ADC_ConfigChannel+0x6e4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d10a      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x6ec>
 800496a:	4b04      	ldr	r3, [pc, #16]	; (800497c <HAL_ADC_ConfigChannel+0x6e8>)
 800496c:	e009      	b.n	8004982 <HAL_ADC_ConfigChannel+0x6ee>
 800496e:	bf00      	nop
 8004970:	407f0000 	.word	0x407f0000
 8004974:	80080000 	.word	0x80080000
 8004978:	50000100 	.word	0x50000100
 800497c:	50000300 	.word	0x50000300
 8004980:	4b59      	ldr	r3, [pc, #356]	; (8004ae8 <HAL_ADC_ConfigChannel+0x854>)
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe fe9c 	bl	80036c0 <LL_ADC_GetCommonPathInternalCh>
 8004988:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a56      	ldr	r2, [pc, #344]	; (8004aec <HAL_ADC_ConfigChannel+0x858>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_ADC_ConfigChannel+0x70c>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a55      	ldr	r2, [pc, #340]	; (8004af0 <HAL_ADC_ConfigChannel+0x85c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d13a      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d134      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049b4:	d005      	beq.n	80049c2 <HAL_ADC_ConfigChannel+0x72e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a4e      	ldr	r2, [pc, #312]	; (8004af4 <HAL_ADC_ConfigChannel+0x860>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	f040 8085 	bne.w	8004acc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049ca:	d004      	beq.n	80049d6 <HAL_ADC_ConfigChannel+0x742>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a49      	ldr	r2, [pc, #292]	; (8004af8 <HAL_ADC_ConfigChannel+0x864>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_ADC_ConfigChannel+0x746>
 80049d6:	4a49      	ldr	r2, [pc, #292]	; (8004afc <HAL_ADC_ConfigChannel+0x868>)
 80049d8:	e000      	b.n	80049dc <HAL_ADC_ConfigChannel+0x748>
 80049da:	4a43      	ldr	r2, [pc, #268]	; (8004ae8 <HAL_ADC_ConfigChannel+0x854>)
 80049dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f7fe fe57 	bl	800369a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049ec:	4b44      	ldr	r3, [pc, #272]	; (8004b00 <HAL_ADC_ConfigChannel+0x86c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	099b      	lsrs	r3, r3, #6
 80049f2:	4a44      	ldr	r2, [pc, #272]	; (8004b04 <HAL_ADC_ConfigChannel+0x870>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a06:	e002      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f9      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a14:	e05a      	b.n	8004acc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3b      	ldr	r2, [pc, #236]	; (8004b08 <HAL_ADC_ConfigChannel+0x874>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d125      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x7d8>
 8004a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11f      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a31      	ldr	r2, [pc, #196]	; (8004af8 <HAL_ADC_ConfigChannel+0x864>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d104      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x7ac>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a34      	ldr	r2, [pc, #208]	; (8004b0c <HAL_ADC_ConfigChannel+0x878>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d047      	beq.n	8004ad0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a48:	d004      	beq.n	8004a54 <HAL_ADC_ConfigChannel+0x7c0>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <HAL_ADC_ConfigChannel+0x864>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d101      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x7c4>
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <HAL_ADC_ConfigChannel+0x868>)
 8004a56:	e000      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x7c6>
 8004a58:	4a23      	ldr	r2, [pc, #140]	; (8004ae8 <HAL_ADC_ConfigChannel+0x854>)
 8004a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f7fe fe18 	bl	800369a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a6a:	e031      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <HAL_ADC_ConfigChannel+0x87c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d12d      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d127      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <HAL_ADC_ConfigChannel+0x864>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d022      	beq.n	8004ad2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a94:	d004      	beq.n	8004aa0 <HAL_ADC_ConfigChannel+0x80c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_ADC_ConfigChannel+0x864>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x810>
 8004aa0:	4a16      	ldr	r2, [pc, #88]	; (8004afc <HAL_ADC_ConfigChannel+0x868>)
 8004aa2:	e000      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x812>
 8004aa4:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <HAL_ADC_ConfigChannel+0x854>)
 8004aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004aaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fe fdf2 	bl	800369a <LL_ADC_SetCommonPathInternalCh>
 8004ab6:	e00c      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004aca:	e002      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004acc:	bf00      	nop
 8004ace:	e000      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ad0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ada:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	37d8      	adds	r7, #216	; 0xd8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	50000700 	.word	0x50000700
 8004aec:	c3210000 	.word	0xc3210000
 8004af0:	90c00010 	.word	0x90c00010
 8004af4:	50000600 	.word	0x50000600
 8004af8:	50000100 	.word	0x50000100
 8004afc:	50000300 	.word	0x50000300
 8004b00:	20000000 	.word	0x20000000
 8004b04:	053e2d63 	.word	0x053e2d63
 8004b08:	c7520000 	.word	0xc7520000
 8004b0c:	50000500 	.word	0x50000500
 8004b10:	cb840000 	.word	0xcb840000

08004b14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fe ff9d 	bl	8003a60 <LL_ADC_IsEnabled>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d14d      	bne.n	8004bc8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <ADC_Enable+0xc0>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	f043 0210 	orr.w	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4a:	f043 0201 	orr.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e039      	b.n	8004bca <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe ff58 	bl	8003a10 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b60:	f7fe fd5a 	bl	8003618 <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b66:	e028      	b.n	8004bba <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe ff77 	bl	8003a60 <LL_ADC_IsEnabled>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d104      	bne.n	8004b82 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe ff47 	bl	8003a10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b82:	f7fe fd49 	bl	8003618 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d914      	bls.n	8004bba <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d00d      	beq.n	8004bba <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	f043 0210 	orr.w	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bae:	f043 0201 	orr.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e007      	b.n	8004bca <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d1cf      	bne.n	8004b68 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	8000003f 	.word	0x8000003f

08004bd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fe ff4e 	bl	8003a86 <LL_ADC_IsDisableOngoing>
 8004bea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe ff35 	bl	8003a60 <LL_ADC_IsEnabled>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d047      	beq.n	8004c8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d144      	bne.n	8004c8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 030d 	and.w	r3, r3, #13
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10c      	bne.n	8004c2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe ff0f 	bl	8003a38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2203      	movs	r2, #3
 8004c20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c22:	f7fe fcf9 	bl	8003618 <HAL_GetTick>
 8004c26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c28:	e029      	b.n	8004c7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	f043 0210 	orr.w	r2, r3, #16
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3a:	f043 0201 	orr.w	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e023      	b.n	8004c8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c46:	f7fe fce7 	bl	8003618 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d914      	bls.n	8004c7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00d      	beq.n	8004c7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c66:	f043 0210 	orr.w	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	f043 0201 	orr.w	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e007      	b.n	8004c8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1dc      	bne.n	8004c46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <LL_ADC_IsEnabled>:
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <LL_ADC_IsEnabled+0x18>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <LL_ADC_IsEnabled+0x1a>
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <LL_ADC_StartCalibration>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004cce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_ADC_IsCalibrationOnGoing>:
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d02:	d101      	bne.n	8004d08 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d101      	bne.n	8004d2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_ADCEx_Calibration_Start+0x1c>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e04d      	b.n	8004df4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ff39 	bl	8004bd8 <ADC_Disable>
 8004d66:	4603      	mov	r3, r0
 8004d68:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d136      	bne.n	8004dde <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d78:	f023 0302 	bic.w	r3, r3, #2
 8004d7c:	f043 0202 	orr.w	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6839      	ldr	r1, [r7, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff ff96 	bl	8004cbc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d90:	e014      	b.n	8004dbc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d90d      	bls.n	8004dbc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da4:	f023 0312 	bic.w	r3, r3, #18
 8004da8:	f043 0210 	orr.w	r2, r3, #16
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e01b      	b.n	8004df4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff ff94 	bl	8004cee <LL_ADC_IsCalibrationOnGoing>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e2      	bne.n	8004d92 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd0:	f023 0303 	bic.w	r3, r3, #3
 8004dd4:	f043 0201 	orr.w	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ddc:	e005      	b.n	8004dea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de2:	f043 0210 	orr.w	r2, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	0004de01 	.word	0x0004de01

08004e00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b0a1      	sub	sp, #132	; 0x84
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e0e7      	b.n	8004fee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004e26:	2300      	movs	r3, #0
 8004e28:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e36:	d102      	bne.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e38:	4b6f      	ldr	r3, [pc, #444]	; (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	e009      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a6e      	ldr	r2, [pc, #440]	; (8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d102      	bne.n	8004e4e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004e48:	4b6d      	ldr	r3, [pc, #436]	; (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	e001      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0be      	b.n	8004fee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff ff4f 	bl	8004d16 <LL_ADC_REG_IsConversionOngoing>
 8004e78:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff ff49 	bl	8004d16 <LL_ADC_REG_IsConversionOngoing>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f040 80a0 	bne.w	8004fcc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 809c 	bne.w	8004fcc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e9c:	d004      	beq.n	8004ea8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a55      	ldr	r2, [pc, #340]	; (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d101      	bne.n	8004eac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004ea8:	4b56      	ldr	r3, [pc, #344]	; (8005004 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004eaa:	e000      	b.n	8004eae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004eac:	4b56      	ldr	r3, [pc, #344]	; (8005008 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004eae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d04b      	beq.n	8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	6859      	ldr	r1, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004eca:	035b      	lsls	r3, r3, #13
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004edc:	d004      	beq.n	8004ee8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a45      	ldr	r2, [pc, #276]	; (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10f      	bne.n	8004f08 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004ee8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004eec:	f7ff fed3 	bl	8004c96 <LL_ADC_IsEnabled>
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	4841      	ldr	r0, [pc, #260]	; (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ef4:	f7ff fecf 	bl	8004c96 <LL_ADC_IsEnabled>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4323      	orrs	r3, r4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e012      	b.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004f08:	483c      	ldr	r0, [pc, #240]	; (8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f0a:	f7ff fec4 	bl	8004c96 <LL_ADC_IsEnabled>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	483b      	ldr	r0, [pc, #236]	; (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f12:	f7ff fec0 	bl	8004c96 <LL_ADC_IsEnabled>
 8004f16:	4603      	mov	r3, r0
 8004f18:	431c      	orrs	r4, r3
 8004f1a:	483c      	ldr	r0, [pc, #240]	; (800500c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004f1c:	f7ff febb 	bl	8004c96 <LL_ADC_IsEnabled>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4323      	orrs	r3, r4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d056      	beq.n	8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f3a:	f023 030f 	bic.w	r3, r3, #15
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	6811      	ldr	r1, [r2, #0]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	6892      	ldr	r2, [r2, #8]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f4c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f4e:	e047      	b.n	8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f5a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f64:	d004      	beq.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a23      	ldr	r2, [pc, #140]	; (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10f      	bne.n	8004f90 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004f70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004f74:	f7ff fe8f 	bl	8004c96 <LL_ADC_IsEnabled>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	481f      	ldr	r0, [pc, #124]	; (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f7c:	f7ff fe8b 	bl	8004c96 <LL_ADC_IsEnabled>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4323      	orrs	r3, r4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e012      	b.n	8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004f90:	481a      	ldr	r0, [pc, #104]	; (8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f92:	f7ff fe80 	bl	8004c96 <LL_ADC_IsEnabled>
 8004f96:	4604      	mov	r4, r0
 8004f98:	4819      	ldr	r0, [pc, #100]	; (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f9a:	f7ff fe7c 	bl	8004c96 <LL_ADC_IsEnabled>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	431c      	orrs	r4, r3
 8004fa2:	481a      	ldr	r0, [pc, #104]	; (800500c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004fa4:	f7ff fe77 	bl	8004c96 <LL_ADC_IsEnabled>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4323      	orrs	r3, r4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d012      	beq.n	8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fc2:	f023 030f 	bic.w	r3, r3, #15
 8004fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004fc8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fca:	e009      	b.n	8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	f043 0220 	orr.w	r2, r3, #32
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004fde:	e000      	b.n	8004fe2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004fea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3784      	adds	r7, #132	; 0x84
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd90      	pop	{r4, r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	50000100 	.word	0x50000100
 8004ffc:	50000400 	.word	0x50000400
 8005000:	50000500 	.word	0x50000500
 8005004:	50000300 	.word	0x50000300
 8005008:	50000700 	.word	0x50000700
 800500c:	50000600 	.word	0x50000600

08005010 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e023      	b.n	800506a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd fb9c 	bl	8002774 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005090:	4013      	ands	r3, r2
 8005092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800509c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050a6:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <__NVIC_SetPriorityGrouping+0x44>)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	60d3      	str	r3, [r2, #12]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	e000ed00 	.word	0xe000ed00

080050bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050c0:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <__NVIC_GetPriorityGrouping+0x18>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0a1b      	lsrs	r3, r3, #8
 80050c6:	f003 0307 	and.w	r3, r3, #7
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	db0b      	blt.n	8005102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	f003 021f 	and.w	r2, r3, #31
 80050f0:	4907      	ldr	r1, [pc, #28]	; (8005110 <__NVIC_EnableIRQ+0x38>)
 80050f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	2001      	movs	r0, #1
 80050fa:	fa00 f202 	lsl.w	r2, r0, r2
 80050fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	e000e100 	.word	0xe000e100

08005114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	6039      	str	r1, [r7, #0]
 800511e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005124:	2b00      	cmp	r3, #0
 8005126:	db0a      	blt.n	800513e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	b2da      	uxtb	r2, r3
 800512c:	490c      	ldr	r1, [pc, #48]	; (8005160 <__NVIC_SetPriority+0x4c>)
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	0112      	lsls	r2, r2, #4
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	440b      	add	r3, r1
 8005138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800513c:	e00a      	b.n	8005154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	4908      	ldr	r1, [pc, #32]	; (8005164 <__NVIC_SetPriority+0x50>)
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	3b04      	subs	r3, #4
 800514c:	0112      	lsls	r2, r2, #4
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	440b      	add	r3, r1
 8005152:	761a      	strb	r2, [r3, #24]
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	e000e100 	.word	0xe000e100
 8005164:	e000ed00 	.word	0xe000ed00

08005168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	; 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f1c3 0307 	rsb	r3, r3, #7
 8005182:	2b04      	cmp	r3, #4
 8005184:	bf28      	it	cs
 8005186:	2304      	movcs	r3, #4
 8005188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3304      	adds	r3, #4
 800518e:	2b06      	cmp	r3, #6
 8005190:	d902      	bls.n	8005198 <NVIC_EncodePriority+0x30>
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	3b03      	subs	r3, #3
 8005196:	e000      	b.n	800519a <NVIC_EncodePriority+0x32>
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800519c:	f04f 32ff 	mov.w	r2, #4294967295
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43da      	mvns	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	401a      	ands	r2, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051b0:	f04f 31ff 	mov.w	r1, #4294967295
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ba:	43d9      	mvns	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c0:	4313      	orrs	r3, r2
         );
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3724      	adds	r7, #36	; 0x24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3b01      	subs	r3, #1
 80051dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051e0:	d301      	bcc.n	80051e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051e2:	2301      	movs	r3, #1
 80051e4:	e00f      	b.n	8005206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051e6:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <SysTick_Config+0x40>)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ee:	210f      	movs	r1, #15
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295
 80051f4:	f7ff ff8e 	bl	8005114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <SysTick_Config+0x40>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051fe:	4b04      	ldr	r3, [pc, #16]	; (8005210 <SysTick_Config+0x40>)
 8005200:	2207      	movs	r2, #7
 8005202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	e000e010 	.word	0xe000e010

08005214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff ff29 	bl	8005074 <__NVIC_SetPriorityGrouping>
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	4603      	mov	r3, r0
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005238:	f7ff ff40 	bl	80050bc <__NVIC_GetPriorityGrouping>
 800523c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	6978      	ldr	r0, [r7, #20]
 8005244:	f7ff ff90 	bl	8005168 <NVIC_EncodePriority>
 8005248:	4602      	mov	r2, r0
 800524a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff ff5f 	bl	8005114 <__NVIC_SetPriority>
}
 8005256:	bf00      	nop
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	4603      	mov	r3, r0
 8005266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff ff33 	bl	80050d8 <__NVIC_EnableIRQ>
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ffa4 	bl	80051d0 <SysTick_Config>
 8005288:	4603      	mov	r3, r0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e014      	b.n	80052ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	791b      	ldrb	r3, [r3, #4]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d105      	bne.n	80052ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fd fa7d 	bl	80027b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ec:	d120      	bne.n	8005330 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fc:	d118      	bne.n	8005330 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2204      	movs	r2, #4
 8005302:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f043 0201 	orr.w	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005318:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005328:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f82d 	bl	800538a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800533e:	d120      	bne.n	8005382 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800534a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534e:	d118      	bne.n	8005382 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2204      	movs	r2, #4
 8005354:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f043 0202 	orr.w	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800536a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800537a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f9b7 	bl	80056f0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	; 0x28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	795b      	ldrb	r3, [r3, #5]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_DAC_ConfigChannel+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e192      	b.n	80056de <HAL_DAC_ConfigChannel+0x33e>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2202      	movs	r2, #2
 80053c2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d174      	bne.n	80054b6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80053cc:	f7fe f924 	bl	8003618 <HAL_GetTick>
 80053d0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d134      	bne.n	8005442 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80053d8:	e011      	b.n	80053fe <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80053da:	f7fe f91d 	bl	8003618 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d90a      	bls.n	80053fe <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f043 0208 	orr.w	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2203      	movs	r2, #3
 80053f8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e16f      	b.n	80056de <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e6      	bne.n	80053da <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800540c:	2001      	movs	r0, #1
 800540e:	f7fe f90f 	bl	8003630 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800541a:	641a      	str	r2, [r3, #64]	; 0x40
 800541c:	e01e      	b.n	800545c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800541e:	f7fe f8fb 	bl	8003618 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d90a      	bls.n	8005442 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f043 0208 	orr.w	r2, r3, #8
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2203      	movs	r2, #3
 800543c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e14d      	b.n	80056de <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005448:	2b00      	cmp	r3, #0
 800544a:	dbe8      	blt.n	800541e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800544c:	2001      	movs	r0, #1
 800544e:	f7fe f8ef 	bl	8003630 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800545a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800546c:	fa01 f303 	lsl.w	r3, r1, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	ea02 0103 	and.w	r1, r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	409a      	lsls	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	21ff      	movs	r1, #255	; 0xff
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	ea02 0103 	and.w	r1, r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	409a      	lsls	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d11d      	bne.n	80054fa <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	221f      	movs	r2, #31
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d6:	4013      	ands	r3, r2
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	4313      	orrs	r3, r2
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2207      	movs	r2, #7
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005512:	4013      	ands	r3, r2
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d102      	bne.n	8005524 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800551e:	2300      	movs	r3, #0
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	e00f      	b.n	8005544 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d102      	bne.n	8005532 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800552c:	2301      	movs	r3, #1
 800552e:	623b      	str	r3, [r7, #32]
 8005530:	e008      	b.n	8005544 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800553a:	2301      	movs	r3, #1
 800553c:	623b      	str	r3, [r7, #32]
 800553e:	e001      	b.n	8005544 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005540:	2300      	movs	r3, #0
 8005542:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	6a3a      	ldr	r2, [r7, #32]
 8005550:	4313      	orrs	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	43db      	mvns	r3, r3
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	4013      	ands	r3, r2
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	791b      	ldrb	r3, [r3, #4]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d102      	bne.n	8005578 <HAL_DAC_ConfigChannel+0x1d8>
 8005572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005576:	e000      	b.n	800557a <HAL_DAC_ConfigChannel+0x1da>
 8005578:	2300      	movs	r3, #0
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4313      	orrs	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	4013      	ands	r3, r2
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	795b      	ldrb	r3, [r3, #5]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d102      	bne.n	80055a4 <HAL_DAC_ConfigChannel+0x204>
 800559e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a2:	e000      	b.n	80055a6 <HAL_DAC_ConfigChannel+0x206>
 80055a4:	2300      	movs	r3, #0
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d114      	bne.n	80055e6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80055bc:	f002 f994 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 80055c0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	4a48      	ldr	r2, [pc, #288]	; (80056e8 <HAL_DAC_ConfigChannel+0x348>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d904      	bls.n	80055d4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	e00f      	b.n	80055f4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4a45      	ldr	r2, [pc, #276]	; (80056ec <HAL_DAC_ConfigChannel+0x34c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d90a      	bls.n	80055f2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
 80055e4:	e006      	b.n	80055f4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	4313      	orrs	r3, r2
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
 80055f0:	e000      	b.n	80055f4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80055f2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	4313      	orrs	r3, r2
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43da      	mvns	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	400a      	ands	r2, r1
 800562a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005646:	4013      	ands	r3, r2
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565e:	4313      	orrs	r3, r2
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005668:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	22c0      	movs	r2, #192	; 0xc0
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43da      	mvns	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	400a      	ands	r2, r1
 8005684:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	089b      	lsrs	r3, r3, #2
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	089b      	lsrs	r3, r3, #2
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80056b4:	fa01 f303 	lsl.w	r3, r1, r3
 80056b8:	43db      	mvns	r3, r3
 80056ba:	ea02 0103 	and.w	r1, r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	409a      	lsls	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3728      	adds	r7, #40	; 0x28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	09896800 	.word	0x09896800
 80056ec:	04c4b400 	.word	0x04c4b400

080056f0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e08d      	b.n	8005832 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	4b47      	ldr	r3, [pc, #284]	; (800583c <HAL_DMA_Init+0x138>)
 800571e:	429a      	cmp	r2, r3
 8005720:	d80f      	bhi.n	8005742 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	4b45      	ldr	r3, [pc, #276]	; (8005840 <HAL_DMA_Init+0x13c>)
 800572a:	4413      	add	r3, r2
 800572c:	4a45      	ldr	r2, [pc, #276]	; (8005844 <HAL_DMA_Init+0x140>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	091b      	lsrs	r3, r3, #4
 8005734:	009a      	lsls	r2, r3, #2
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a42      	ldr	r2, [pc, #264]	; (8005848 <HAL_DMA_Init+0x144>)
 800573e:	641a      	str	r2, [r3, #64]	; 0x40
 8005740:	e00e      	b.n	8005760 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	4b40      	ldr	r3, [pc, #256]	; (800584c <HAL_DMA_Init+0x148>)
 800574a:	4413      	add	r3, r2
 800574c:	4a3d      	ldr	r2, [pc, #244]	; (8005844 <HAL_DMA_Init+0x140>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	009a      	lsls	r2, r3, #2
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a3c      	ldr	r2, [pc, #240]	; (8005850 <HAL_DMA_Init+0x14c>)
 800575e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800579c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8fe 	bl	80059b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c0:	d102      	bne.n	80057c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d010      	beq.n	8005808 <HAL_DMA_Init+0x104>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d80c      	bhi.n	8005808 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f91e 	bl	8005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	e008      	b.n	800581a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40020407 	.word	0x40020407
 8005840:	bffdfff8 	.word	0xbffdfff8
 8005844:	cccccccd 	.word	0xcccccccd
 8005848:	40020000 	.word	0x40020000
 800584c:	bffdfbf8 	.word	0xbffdfbf8
 8005850:	40020400 	.word	0x40020400

08005854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	2204      	movs	r2, #4
 8005876:	409a      	lsls	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d026      	beq.n	80058ce <HAL_DMA_IRQHandler+0x7a>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d021      	beq.n	80058ce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b00      	cmp	r3, #0
 8005896:	d107      	bne.n	80058a8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0204 	bic.w	r2, r2, #4
 80058a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ac:	f003 021f 	and.w	r2, r3, #31
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2104      	movs	r1, #4
 80058b6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d071      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80058cc:	e06c      	b.n	80059a8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2202      	movs	r2, #2
 80058d8:	409a      	lsls	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d02e      	beq.n	8005940 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d029      	beq.n	8005940 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 020a 	bic.w	r2, r2, #10
 8005908:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005916:	f003 021f 	and.w	r2, r3, #31
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	2102      	movs	r1, #2
 8005920:	fa01 f202 	lsl.w	r2, r1, r2
 8005924:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d038      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800593e:	e033      	b.n	80059a8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2208      	movs	r2, #8
 800594a:	409a      	lsls	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d02a      	beq.n	80059aa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d025      	beq.n	80059aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 020e 	bic.w	r2, r2, #14
 800596c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	f003 021f 	and.w	r2, r3, #31
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2101      	movs	r1, #1
 800597c:	fa01 f202 	lsl.w	r2, r1, r2
 8005980:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
}
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d802      	bhi.n	80059ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80059c8:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	e001      	b.n	80059d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80059ce:	4b15      	ldr	r3, [pc, #84]	; (8005a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80059d0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	3b08      	subs	r3, #8
 80059de:	4a12      	ldr	r2, [pc, #72]	; (8005a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	009a      	lsls	r2, r3, #2
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4413      	add	r3, r2
 80059f4:	461a      	mov	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a0b      	ldr	r2, [pc, #44]	; (8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80059fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2201      	movs	r2, #1
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40020407 	.word	0x40020407
 8005a20:	40020800 	.word	0x40020800
 8005a24:	40020820 	.word	0x40020820
 8005a28:	cccccccd 	.word	0xcccccccd
 8005a2c:	40020880 	.word	0x40020880

08005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	461a      	mov	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a52:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005a64:	bf00      	nop
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	1000823f 	.word	0x1000823f
 8005a74:	40020940 	.word	0x40020940

08005a78 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e147      	b.n	8005d1a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc fefc 	bl	800289c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0210 	bic.w	r2, r2, #16
 8005ab2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ab4:	f7fd fdb0 	bl	8003618 <HAL_GetTick>
 8005ab8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005aba:	e012      	b.n	8005ae2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005abc:	f7fd fdac 	bl	8003618 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b0a      	cmp	r3, #10
 8005ac8:	d90b      	bls.n	8005ae2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ace:	f043 0201 	orr.w	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2203      	movs	r2, #3
 8005ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e11b      	b.n	8005d1a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d0e5      	beq.n	8005abc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b00:	f7fd fd8a 	bl	8003618 <HAL_GetTick>
 8005b04:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005b06:	e012      	b.n	8005b2e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005b08:	f7fd fd86 	bl	8003618 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b0a      	cmp	r3, #10
 8005b14:	d90b      	bls.n	8005b2e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1a:	f043 0201 	orr.w	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2203      	movs	r2, #3
 8005b26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e0f5      	b.n	8005d1a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0e5      	beq.n	8005b08 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0202 	orr.w	r2, r2, #2
 8005b4a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a74      	ldr	r2, [pc, #464]	; (8005d24 <HAL_FDCAN_Init+0x2ac>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d103      	bne.n	8005b5e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005b56:	4a74      	ldr	r2, [pc, #464]	; (8005d28 <HAL_FDCAN_Init+0x2b0>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	7c1b      	ldrb	r3, [r3, #16]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d108      	bne.n	8005b78 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699a      	ldr	r2, [r3, #24]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b74:	619a      	str	r2, [r3, #24]
 8005b76:	e007      	b.n	8005b88 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b86:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	7c5b      	ldrb	r3, [r3, #17]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d108      	bne.n	8005ba2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b9e:	619a      	str	r2, [r3, #24]
 8005ba0:	e007      	b.n	8005bb2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bb0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	7c9b      	ldrb	r3, [r3, #18]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d108      	bne.n	8005bcc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bc8:	619a      	str	r2, [r3, #24]
 8005bca:	e007      	b.n	8005bdc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bda:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005c00:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0210 	bic.w	r2, r2, #16
 8005c10:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d108      	bne.n	8005c2c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0204 	orr.w	r2, r2, #4
 8005c28:	619a      	str	r2, [r3, #24]
 8005c2a:	e02c      	b.n	8005c86 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d028      	beq.n	8005c86 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d01c      	beq.n	8005c76 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c4a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0210 	orr.w	r2, r2, #16
 8005c5a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d110      	bne.n	8005c86 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0220 	orr.w	r2, r2, #32
 8005c72:	619a      	str	r2, [r3, #24]
 8005c74:	e007      	b.n	8005c86 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0220 	orr.w	r2, r2, #32
 8005c84:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c96:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c9e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005cae:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005cb0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cba:	d115      	bne.n	8005ce8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005cca:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005cd4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ce4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ce6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f814 	bl	8005d2c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40006400 	.word	0x40006400
 8005d28:	40006500 	.word	0x40006500

08005d2c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005d34:	4b30      	ldr	r3, [pc, #192]	; (8005df8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005d36:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a2f      	ldr	r2, [pc, #188]	; (8005dfc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d103      	bne.n	8005d4a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d48:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a2c      	ldr	r2, [pc, #176]	; (8005e00 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d103      	bne.n	8005d5c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005d5a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d6a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	041a      	lsls	r2, r3, #16
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d90:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	061a      	lsls	r2, r3, #24
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e005      	b.n	8005dde <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d3f3      	bcc.n	8005dd2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005dea:	bf00      	nop
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	4000a400 	.word	0x4000a400
 8005dfc:	40006800 	.word	0x40006800
 8005e00:	40006c00 	.word	0x40006c00

08005e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e12:	e15a      	b.n	80060ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	2101      	movs	r1, #1
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e20:	4013      	ands	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 814c 	beq.w	80060c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d005      	beq.n	8005e44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d130      	bne.n	8005ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	2203      	movs	r2, #3
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	43db      	mvns	r3, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	091b      	lsrs	r3, r3, #4
 8005e90:	f003 0201 	and.w	r2, r3, #1
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d017      	beq.n	8005ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d123      	bne.n	8005f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	08da      	lsrs	r2, r3, #3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3208      	adds	r2, #8
 8005ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	220f      	movs	r2, #15
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	08da      	lsrs	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3208      	adds	r2, #8
 8005f30:	6939      	ldr	r1, [r7, #16]
 8005f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	2203      	movs	r2, #3
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f003 0203 	and.w	r2, r3, #3
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80a6 	beq.w	80060c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f78:	4b5b      	ldr	r3, [pc, #364]	; (80060e8 <HAL_GPIO_Init+0x2e4>)
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7c:	4a5a      	ldr	r2, [pc, #360]	; (80060e8 <HAL_GPIO_Init+0x2e4>)
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	6613      	str	r3, [r2, #96]	; 0x60
 8005f84:	4b58      	ldr	r3, [pc, #352]	; (80060e8 <HAL_GPIO_Init+0x2e4>)
 8005f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f90:	4a56      	ldr	r2, [pc, #344]	; (80060ec <HAL_GPIO_Init+0x2e8>)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	089b      	lsrs	r3, r3, #2
 8005f96:	3302      	adds	r3, #2
 8005f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	220f      	movs	r2, #15
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	43db      	mvns	r3, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fba:	d01f      	beq.n	8005ffc <HAL_GPIO_Init+0x1f8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a4c      	ldr	r2, [pc, #304]	; (80060f0 <HAL_GPIO_Init+0x2ec>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d019      	beq.n	8005ff8 <HAL_GPIO_Init+0x1f4>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a4b      	ldr	r2, [pc, #300]	; (80060f4 <HAL_GPIO_Init+0x2f0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <HAL_GPIO_Init+0x1f0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a4a      	ldr	r2, [pc, #296]	; (80060f8 <HAL_GPIO_Init+0x2f4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00d      	beq.n	8005ff0 <HAL_GPIO_Init+0x1ec>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a49      	ldr	r2, [pc, #292]	; (80060fc <HAL_GPIO_Init+0x2f8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d007      	beq.n	8005fec <HAL_GPIO_Init+0x1e8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a48      	ldr	r2, [pc, #288]	; (8006100 <HAL_GPIO_Init+0x2fc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d101      	bne.n	8005fe8 <HAL_GPIO_Init+0x1e4>
 8005fe4:	2305      	movs	r3, #5
 8005fe6:	e00a      	b.n	8005ffe <HAL_GPIO_Init+0x1fa>
 8005fe8:	2306      	movs	r3, #6
 8005fea:	e008      	b.n	8005ffe <HAL_GPIO_Init+0x1fa>
 8005fec:	2304      	movs	r3, #4
 8005fee:	e006      	b.n	8005ffe <HAL_GPIO_Init+0x1fa>
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e004      	b.n	8005ffe <HAL_GPIO_Init+0x1fa>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e002      	b.n	8005ffe <HAL_GPIO_Init+0x1fa>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <HAL_GPIO_Init+0x1fa>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	f002 0203 	and.w	r2, r2, #3
 8006004:	0092      	lsls	r2, r2, #2
 8006006:	4093      	lsls	r3, r2
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800600e:	4937      	ldr	r1, [pc, #220]	; (80060ec <HAL_GPIO_Init+0x2e8>)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	3302      	adds	r3, #2
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800601c:	4b39      	ldr	r3, [pc, #228]	; (8006104 <HAL_GPIO_Init+0x300>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	43db      	mvns	r3, r3
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4013      	ands	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006040:	4a30      	ldr	r2, [pc, #192]	; (8006104 <HAL_GPIO_Init+0x300>)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006046:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <HAL_GPIO_Init+0x300>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	43db      	mvns	r3, r3
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4013      	ands	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800606a:	4a26      	ldr	r2, [pc, #152]	; (8006104 <HAL_GPIO_Init+0x300>)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006070:	4b24      	ldr	r3, [pc, #144]	; (8006104 <HAL_GPIO_Init+0x300>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	43db      	mvns	r3, r3
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4013      	ands	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006094:	4a1b      	ldr	r2, [pc, #108]	; (8006104 <HAL_GPIO_Init+0x300>)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800609a:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <HAL_GPIO_Init+0x300>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4013      	ands	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060be:	4a11      	ldr	r2, [pc, #68]	; (8006104 <HAL_GPIO_Init+0x300>)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	3301      	adds	r3, #1
 80060c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	fa22 f303 	lsr.w	r3, r2, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f47f ae9d 	bne.w	8005e14 <HAL_GPIO_Init+0x10>
  }
}
 80060da:	bf00      	nop
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40021000 	.word	0x40021000
 80060ec:	40010000 	.word	0x40010000
 80060f0:	48000400 	.word	0x48000400
 80060f4:	48000800 	.word	0x48000800
 80060f8:	48000c00 	.word	0x48000c00
 80060fc:	48001000 	.word	0x48001000
 8006100:	48001400 	.word	0x48001400
 8006104:	40010400 	.word	0x40010400

08006108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	807b      	strh	r3, [r7, #2]
 8006114:	4613      	mov	r3, r2
 8006116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006118:	787b      	ldrb	r3, [r7, #1]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800611e:	887a      	ldrh	r2, [r7, #2]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006124:	e002      	b.n	800612c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006126:	887a      	ldrh	r2, [r7, #2]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d006      	beq.n	800615c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800614e:	4a05      	ldr	r2, [pc, #20]	; (8006164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006150:	88fb      	ldrh	r3, [r7, #6]
 8006152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006154:	88fb      	ldrh	r3, [r7, #6]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 f806 	bl	8006168 <HAL_GPIO_EXTI_Callback>
  }
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40010400 	.word	0x40010400

08006168 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e081      	b.n	8006294 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fc fbd5 	bl	8002954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2224      	movs	r2, #36	; 0x24
 80061ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d107      	bne.n	80061f8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061f4:	609a      	str	r2, [r3, #8]
 80061f6:	e006      	b.n	8006206 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006204:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d104      	bne.n	8006218 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006216:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800623a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69d9      	ldr	r1, [r3, #28]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1a      	ldr	r2, [r3, #32]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	461a      	mov	r2, r3
 80062a8:	460b      	mov	r3, r1
 80062aa:	817b      	strh	r3, [r7, #10]
 80062ac:	4613      	mov	r3, r2
 80062ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	f040 80da 	bne.w	8006472 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_I2C_Master_Transmit+0x30>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e0d3      	b.n	8006474 <HAL_I2C_Master_Transmit+0x1d8>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062d4:	f7fd f9a0 	bl	8003618 <HAL_GetTick>
 80062d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	2319      	movs	r3, #25
 80062e0:	2201      	movs	r2, #1
 80062e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 f9e6 	bl	80066b8 <I2C_WaitOnFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e0be      	b.n	8006474 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2221      	movs	r2, #33	; 0x21
 80062fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2210      	movs	r2, #16
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	893a      	ldrh	r2, [r7, #8]
 8006316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006322:	b29b      	uxth	r3, r3
 8006324:	2bff      	cmp	r3, #255	; 0xff
 8006326:	d90e      	bls.n	8006346 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	22ff      	movs	r2, #255	; 0xff
 800632c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006332:	b2da      	uxtb	r2, r3
 8006334:	8979      	ldrh	r1, [r7, #10]
 8006336:	4b51      	ldr	r3, [pc, #324]	; (800647c <HAL_I2C_Master_Transmit+0x1e0>)
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fbdc 	bl	8006afc <I2C_TransferConfig>
 8006344:	e06c      	b.n	8006420 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006354:	b2da      	uxtb	r2, r3
 8006356:	8979      	ldrh	r1, [r7, #10]
 8006358:	4b48      	ldr	r3, [pc, #288]	; (800647c <HAL_I2C_Master_Transmit+0x1e0>)
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fbcb 	bl	8006afc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006366:	e05b      	b.n	8006420 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	6a39      	ldr	r1, [r7, #32]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f9e3 	bl	8006738 <I2C_WaitOnTXISFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e07b      	b.n	8006474 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	781a      	ldrb	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d034      	beq.n	8006420 <HAL_I2C_Master_Transmit+0x184>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d130      	bne.n	8006420 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	2200      	movs	r2, #0
 80063c6:	2180      	movs	r1, #128	; 0x80
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f975 	bl	80066b8 <I2C_WaitOnFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e04d      	b.n	8006474 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2bff      	cmp	r3, #255	; 0xff
 80063e0:	d90e      	bls.n	8006400 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	22ff      	movs	r2, #255	; 0xff
 80063e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	8979      	ldrh	r1, [r7, #10]
 80063f0:	2300      	movs	r3, #0
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fb7f 	bl	8006afc <I2C_TransferConfig>
 80063fe:	e00f      	b.n	8006420 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640e:	b2da      	uxtb	r2, r3
 8006410:	8979      	ldrh	r1, [r7, #10]
 8006412:	2300      	movs	r3, #0
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fb6e 	bl	8006afc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d19e      	bne.n	8006368 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	6a39      	ldr	r1, [r7, #32]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f9c2 	bl	80067b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e01a      	b.n	8006474 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2220      	movs	r2, #32
 8006444:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6859      	ldr	r1, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <HAL_I2C_Master_Transmit+0x1e4>)
 8006452:	400b      	ands	r3, r1
 8006454:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006472:	2302      	movs	r3, #2
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	80002000 	.word	0x80002000
 8006480:	fe00e800 	.word	0xfe00e800

08006484 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	607a      	str	r2, [r7, #4]
 800648e:	461a      	mov	r2, r3
 8006490:	460b      	mov	r3, r1
 8006492:	817b      	strh	r3, [r7, #10]
 8006494:	4613      	mov	r3, r2
 8006496:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	f040 80db 	bne.w	800665c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_I2C_Master_Receive+0x30>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e0d4      	b.n	800665e <HAL_I2C_Master_Receive+0x1da>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064bc:	f7fd f8ac 	bl	8003618 <HAL_GetTick>
 80064c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	2319      	movs	r3, #25
 80064c8:	2201      	movs	r2, #1
 80064ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f8f2 	bl	80066b8 <I2C_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e0bf      	b.n	800665e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2222      	movs	r2, #34	; 0x22
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2210      	movs	r2, #16
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	893a      	ldrh	r2, [r7, #8]
 80064fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29b      	uxth	r3, r3
 800650c:	2bff      	cmp	r3, #255	; 0xff
 800650e:	d90e      	bls.n	800652e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651a:	b2da      	uxtb	r2, r3
 800651c:	8979      	ldrh	r1, [r7, #10]
 800651e:	4b52      	ldr	r3, [pc, #328]	; (8006668 <HAL_I2C_Master_Receive+0x1e4>)
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fae8 	bl	8006afc <I2C_TransferConfig>
 800652c:	e06d      	b.n	800660a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	b2da      	uxtb	r2, r3
 800653e:	8979      	ldrh	r1, [r7, #10]
 8006540:	4b49      	ldr	r3, [pc, #292]	; (8006668 <HAL_I2C_Master_Receive+0x1e4>)
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fad7 	bl	8006afc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800654e:	e05c      	b.n	800660a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	6a39      	ldr	r1, [r7, #32]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f96b 	bl	8006830 <I2C_WaitOnRXNEFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e07c      	b.n	800665e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d034      	beq.n	800660a <HAL_I2C_Master_Receive+0x186>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d130      	bne.n	800660a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2200      	movs	r2, #0
 80065b0:	2180      	movs	r1, #128	; 0x80
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f880 	bl	80066b8 <I2C_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e04d      	b.n	800665e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2bff      	cmp	r3, #255	; 0xff
 80065ca:	d90e      	bls.n	80065ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	22ff      	movs	r2, #255	; 0xff
 80065d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	8979      	ldrh	r1, [r7, #10]
 80065da:	2300      	movs	r3, #0
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fa8a 	bl	8006afc <I2C_TransferConfig>
 80065e8:	e00f      	b.n	800660a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	8979      	ldrh	r1, [r7, #10]
 80065fc:	2300      	movs	r3, #0
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fa79 	bl	8006afc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d19d      	bne.n	8006550 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	6a39      	ldr	r1, [r7, #32]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f8cd 	bl	80067b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e01a      	b.n	800665e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2220      	movs	r2, #32
 800662e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6859      	ldr	r1, [r3, #4]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4b0c      	ldr	r3, [pc, #48]	; (800666c <HAL_I2C_Master_Receive+0x1e8>)
 800663c:	400b      	ands	r3, r1
 800663e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e000      	b.n	800665e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800665c:	2302      	movs	r3, #2
  }
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	80002400 	.word	0x80002400
 800666c:	fe00e800 	.word	0xfe00e800

08006670 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b02      	cmp	r3, #2
 8006684:	d103      	bne.n	800668e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2200      	movs	r2, #0
 800668c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	d007      	beq.n	80066ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	619a      	str	r2, [r3, #24]
  }
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066c8:	e022      	b.n	8006710 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d0:	d01e      	beq.n	8006710 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d2:	f7fc ffa1 	bl	8003618 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d302      	bcc.n	80066e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d113      	bne.n	8006710 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e00f      	b.n	8006730 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4013      	ands	r3, r2
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	429a      	cmp	r2, r3
 800671e:	bf0c      	ite	eq
 8006720:	2301      	moveq	r3, #1
 8006722:	2300      	movne	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	429a      	cmp	r2, r3
 800672c:	d0cd      	beq.n	80066ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006744:	e02c      	b.n	80067a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f8ea 	bl	8006924 <I2C_IsErrorOccurred>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e02a      	b.n	80067b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006760:	d01e      	beq.n	80067a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006762:	f7fc ff59 	bl	8003618 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	429a      	cmp	r2, r3
 8006770:	d302      	bcc.n	8006778 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d113      	bne.n	80067a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e007      	b.n	80067b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d1cb      	bne.n	8006746 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067c4:	e028      	b.n	8006818 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f8aa 	bl	8006924 <I2C_IsErrorOccurred>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e026      	b.n	8006828 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7fc ff1d 	bl	8003618 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d113      	bne.n	8006818 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e007      	b.n	8006828 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b20      	cmp	r3, #32
 8006824:	d1cf      	bne.n	80067c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800683c:	e064      	b.n	8006908 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f86e 	bl	8006924 <I2C_IsErrorOccurred>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e062      	b.n	8006918 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b20      	cmp	r3, #32
 800685e:	d138      	bne.n	80068d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b04      	cmp	r3, #4
 800686c:	d105      	bne.n	800687a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	e04e      	b.n	8006918 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b10      	cmp	r3, #16
 8006886:	d107      	bne.n	8006898 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2210      	movs	r2, #16
 800688e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2204      	movs	r2, #4
 8006894:	645a      	str	r2, [r3, #68]	; 0x44
 8006896:	e002      	b.n	800689e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2220      	movs	r2, #32
 80068a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80068b2:	400b      	ands	r3, r1
 80068b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e022      	b.n	8006918 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d2:	f7fc fea1 	bl	8003618 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10f      	bne.n	8006908 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ec:	f043 0220 	orr.w	r2, r3, #32
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e007      	b.n	8006918 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b04      	cmp	r3, #4
 8006914:	d193      	bne.n	800683e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	fe00e800 	.word	0xfe00e800

08006924 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	; 0x28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b00      	cmp	r3, #0
 800694e:	d075      	beq.n	8006a3c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2210      	movs	r2, #16
 8006956:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006958:	e056      	b.n	8006a08 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d052      	beq.n	8006a08 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fc fe59 	bl	8003618 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <I2C_IsErrorOccurred+0x54>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d147      	bne.n	8006a08 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006982:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800698a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699a:	d12e      	bne.n	80069fa <I2C_IsErrorOccurred+0xd6>
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069a2:	d02a      	beq.n	80069fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d027      	beq.n	80069fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069ba:	f7fc fe2d 	bl	8003618 <HAL_GetTick>
 80069be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069c0:	e01b      	b.n	80069fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069c2:	f7fc fe29 	bl	8003618 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b19      	cmp	r3, #25
 80069ce:	d914      	bls.n	80069fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d4:	f043 0220 	orr.w	r2, r3, #32
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d1dc      	bne.n	80069c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d003      	beq.n	8006a1e <I2C_IsErrorOccurred+0xfa>
 8006a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d09d      	beq.n	800695a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f043 0304 	orr.w	r3, r3, #4
 8006a34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	f043 0308 	orr.w	r3, r3, #8
 8006a76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f043 0302 	orr.w	r3, r3, #2
 8006a98:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01c      	beq.n	8006aec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff fddc 	bl	8006670 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6859      	ldr	r1, [r3, #4]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <I2C_IsErrorOccurred+0x1d4>)
 8006ac4:	400b      	ands	r3, r1
 8006ac6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3728      	adds	r7, #40	; 0x28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	fe00e800 	.word	0xfe00e800

08006afc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	607b      	str	r3, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	817b      	strh	r3, [r7, #10]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b0e:	897b      	ldrh	r3, [r7, #10]
 8006b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b14:	7a7b      	ldrb	r3, [r7, #9]
 8006b16:	041b      	lsls	r3, r3, #16
 8006b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b1c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b2a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	0d5b      	lsrs	r3, r3, #21
 8006b36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b3a:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <I2C_TransferConfig+0x60>)
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	ea02 0103 	and.w	r1, r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	03ff63ff 	.word	0x03ff63ff

08006b60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d138      	bne.n	8006be8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e032      	b.n	8006bea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2224      	movs	r2, #36	; 0x24
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0201 	bic.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6819      	ldr	r1, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	e000      	b.n	8006bea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006be8:	2302      	movs	r3, #2
  }
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d139      	bne.n	8006c80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e033      	b.n	8006c82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2224      	movs	r2, #36	; 0x24
 8006c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0201 	bic.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e000      	b.n	8006c82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c80:	2302      	movs	r3, #2
  }
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d141      	bne.n	8006d22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c9e:	4b4b      	ldr	r3, [pc, #300]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d131      	bne.n	8006d10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cac:	4b47      	ldr	r3, [pc, #284]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb2:	4a46      	ldr	r2, [pc, #280]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cbc:	4b43      	ldr	r3, [pc, #268]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006cc4:	4a41      	ldr	r2, [pc, #260]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ccc:	4b40      	ldr	r3, [pc, #256]	; (8006dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2232      	movs	r2, #50	; 0x32
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	4a3f      	ldr	r2, [pc, #252]	; (8006dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cdc:	0c9b      	lsrs	r3, r3, #18
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ce2:	e002      	b.n	8006cea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cea:	4b38      	ldr	r3, [pc, #224]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cf6:	d102      	bne.n	8006cfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f2      	bne.n	8006ce4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cfe:	4b33      	ldr	r3, [pc, #204]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0a:	d158      	bne.n	8006dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e057      	b.n	8006dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d10:	4b2e      	ldr	r3, [pc, #184]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d16:	4a2d      	ldr	r2, [pc, #180]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006d20:	e04d      	b.n	8006dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d28:	d141      	bne.n	8006dae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d2a:	4b28      	ldr	r3, [pc, #160]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d36:	d131      	bne.n	8006d9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d38:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d3e:	4a23      	ldr	r2, [pc, #140]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d48:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d50:	4a1e      	ldr	r2, [pc, #120]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d58:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2232      	movs	r2, #50	; 0x32
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
 8006d62:	4a1c      	ldr	r2, [pc, #112]	; (8006dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d64:	fba2 2303 	umull	r2, r3, r2, r3
 8006d68:	0c9b      	lsrs	r3, r3, #18
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d6e:	e002      	b.n	8006d76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d76:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d82:	d102      	bne.n	8006d8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f2      	bne.n	8006d70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d8a:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d96:	d112      	bne.n	8006dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e011      	b.n	8006dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da2:	4a0a      	ldr	r2, [pc, #40]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006dac:	e007      	b.n	8006dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006dae:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006db6:	4a05      	ldr	r2, [pc, #20]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006dbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	40007000 	.word	0x40007000
 8006dd0:	20000000 	.word	0x20000000
 8006dd4:	431bde83 	.word	0x431bde83

08006dd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006ddc:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	4a04      	ldr	r2, [pc, #16]	; (8006df4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006de6:	6093      	str	r3, [r2, #8]
}
 8006de8:	bf00      	nop
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40007000 	.word	0x40007000

08006df8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006e00:	f7fc fc0a 	bl	8003618 <HAL_GetTick>
 8006e04:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e069      	b.n	8006ee4 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fb fe51 	bl	8002acc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e2a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f85e 	bl	8006ef0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	021a      	lsls	r2, r3, #8
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	2120      	movs	r1, #32
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f856 	bl	8006f0c <QSPI_WaitFlagStateUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e64:	7afb      	ldrb	r3, [r7, #11]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d137      	bne.n	8006eda <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e74:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6852      	ldr	r2, [r2, #4]
 8006e7c:	0611      	lsls	r1, r2, #24
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	68d2      	ldr	r2, [r2, #12]
 8006e82:	4311      	orrs	r1, r2
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	69d2      	ldr	r2, [r2, #28]
 8006e88:	4311      	orrs	r1, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6a12      	ldr	r2, [r2, #32]
 8006e8e:	4311      	orrs	r1, r2
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6812      	ldr	r2, [r2, #0]
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	4b13      	ldr	r3, [pc, #76]	; (8006eec <HAL_QSPI_Init+0xf4>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6912      	ldr	r2, [r2, #16]
 8006ea6:	0411      	lsls	r1, r2, #16
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6952      	ldr	r2, [r2, #20]
 8006eac:	4311      	orrs	r1, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6992      	ldr	r2, [r2, #24]
 8006eb2:	4311      	orrs	r1, r2
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6812      	ldr	r2, [r2, #0]
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f042 0201 	orr.w	r2, r2, #1
 8006eca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	ffe0f8fe 	.word	0xffe0f8fe

08006ef0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f1c:	e01a      	b.n	8006f54 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d016      	beq.n	8006f54 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f26:	f7fc fb77 	bl	8003618 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d302      	bcc.n	8006f3c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10b      	bne.n	8006f54 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2204      	movs	r2, #4
 8006f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	f043 0201 	orr.w	r2, r3, #1
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e00e      	b.n	8006f72 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bf14      	ite	ne
 8006f62:	2301      	movne	r3, #1
 8006f64:	2300      	moveq	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d1d6      	bne.n	8006f1e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e306      	b.n	800759c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d075      	beq.n	8007086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f9a:	4b97      	ldr	r3, [pc, #604]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 030c 	and.w	r3, r3, #12
 8006fa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fa4:	4b94      	ldr	r3, [pc, #592]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b0c      	cmp	r3, #12
 8006fb2:	d102      	bne.n	8006fba <HAL_RCC_OscConfig+0x3e>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d002      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x44>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d10b      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fc0:	4b8d      	ldr	r3, [pc, #564]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d05b      	beq.n	8007084 <HAL_RCC_OscConfig+0x108>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d157      	bne.n	8007084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e2e1      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe0:	d106      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x74>
 8006fe2:	4b85      	ldr	r3, [pc, #532]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a84      	ldr	r2, [pc, #528]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8006fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e01d      	b.n	800702c <HAL_RCC_OscConfig+0xb0>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ff8:	d10c      	bne.n	8007014 <HAL_RCC_OscConfig+0x98>
 8006ffa:	4b7f      	ldr	r3, [pc, #508]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a7e      	ldr	r2, [pc, #504]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	4b7c      	ldr	r3, [pc, #496]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a7b      	ldr	r2, [pc, #492]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 800700c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e00b      	b.n	800702c <HAL_RCC_OscConfig+0xb0>
 8007014:	4b78      	ldr	r3, [pc, #480]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a77      	ldr	r2, [pc, #476]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 800701a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	4b75      	ldr	r3, [pc, #468]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a74      	ldr	r2, [pc, #464]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800702a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d013      	beq.n	800705c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007034:	f7fc faf0 	bl	8003618 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800703c:	f7fc faec 	bl	8003618 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b64      	cmp	r3, #100	; 0x64
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e2a6      	b.n	800759c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800704e:	4b6a      	ldr	r3, [pc, #424]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <HAL_RCC_OscConfig+0xc0>
 800705a:	e014      	b.n	8007086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705c:	f7fc fadc 	bl	8003618 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007064:	f7fc fad8 	bl	8003618 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b64      	cmp	r3, #100	; 0x64
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e292      	b.n	800759c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007076:	4b60      	ldr	r3, [pc, #384]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f0      	bne.n	8007064 <HAL_RCC_OscConfig+0xe8>
 8007082:	e000      	b.n	8007086 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d075      	beq.n	800717e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007092:	4b59      	ldr	r3, [pc, #356]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 030c 	and.w	r3, r3, #12
 800709a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800709c:	4b56      	ldr	r3, [pc, #344]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b0c      	cmp	r3, #12
 80070aa:	d102      	bne.n	80070b2 <HAL_RCC_OscConfig+0x136>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d002      	beq.n	80070b8 <HAL_RCC_OscConfig+0x13c>
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d11f      	bne.n	80070f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070b8:	4b4f      	ldr	r3, [pc, #316]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_RCC_OscConfig+0x154>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e265      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d0:	4b49      	ldr	r3, [pc, #292]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	061b      	lsls	r3, r3, #24
 80070de:	4946      	ldr	r1, [pc, #280]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070e4:	4b45      	ldr	r3, [pc, #276]	; (80071fc <HAL_RCC_OscConfig+0x280>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fc fa49 	bl	8003580 <HAL_InitTick>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d043      	beq.n	800717c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e251      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d023      	beq.n	8007148 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007100:	4b3d      	ldr	r3, [pc, #244]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a3c      	ldr	r2, [pc, #240]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800710a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710c:	f7fc fa84 	bl	8003618 <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007114:	f7fc fa80 	bl	8003618 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e23a      	b.n	800759c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007126:	4b34      	ldr	r3, [pc, #208]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0f0      	beq.n	8007114 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007132:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	061b      	lsls	r3, r3, #24
 8007140:	492d      	ldr	r1, [pc, #180]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007142:	4313      	orrs	r3, r2
 8007144:	604b      	str	r3, [r1, #4]
 8007146:	e01a      	b.n	800717e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007148:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2a      	ldr	r2, [pc, #168]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 800714e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007154:	f7fc fa60 	bl	8003618 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800715c:	f7fc fa5c 	bl	8003618 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e216      	b.n	800759c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800716e:	4b22      	ldr	r3, [pc, #136]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0x1e0>
 800717a:	e000      	b.n	800717e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800717c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d041      	beq.n	800720e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01c      	beq.n	80071cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007192:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 8007194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007198:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 800719a:	f043 0301 	orr.w	r3, r3, #1
 800719e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a2:	f7fc fa39 	bl	8003618 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071aa:	f7fc fa35 	bl	8003618 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e1ef      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071bc:	4b0e      	ldr	r3, [pc, #56]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 80071be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0ef      	beq.n	80071aa <HAL_RCC_OscConfig+0x22e>
 80071ca:	e020      	b.n	800720e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071cc:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 80071ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071d2:	4a09      	ldr	r2, [pc, #36]	; (80071f8 <HAL_RCC_OscConfig+0x27c>)
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071dc:	f7fc fa1c 	bl	8003618 <HAL_GetTick>
 80071e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071e2:	e00d      	b.n	8007200 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071e4:	f7fc fa18 	bl	8003618 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d906      	bls.n	8007200 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e1d2      	b.n	800759c <HAL_RCC_OscConfig+0x620>
 80071f6:	bf00      	nop
 80071f8:	40021000 	.word	0x40021000
 80071fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007200:	4b8c      	ldr	r3, [pc, #560]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 8007202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1ea      	bne.n	80071e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80a6 	beq.w	8007368 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800721c:	2300      	movs	r3, #0
 800721e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007220:	4b84      	ldr	r3, [pc, #528]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 8007222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_RCC_OscConfig+0x2b4>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <HAL_RCC_OscConfig+0x2b6>
 8007230:	2300      	movs	r3, #0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00d      	beq.n	8007252 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007236:	4b7f      	ldr	r3, [pc, #508]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	4a7e      	ldr	r2, [pc, #504]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 800723c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007240:	6593      	str	r3, [r2, #88]	; 0x58
 8007242:	4b7c      	ldr	r3, [pc, #496]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 8007244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800724e:	2301      	movs	r3, #1
 8007250:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007252:	4b79      	ldr	r3, [pc, #484]	; (8007438 <HAL_RCC_OscConfig+0x4bc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d118      	bne.n	8007290 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800725e:	4b76      	ldr	r3, [pc, #472]	; (8007438 <HAL_RCC_OscConfig+0x4bc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a75      	ldr	r2, [pc, #468]	; (8007438 <HAL_RCC_OscConfig+0x4bc>)
 8007264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800726a:	f7fc f9d5 	bl	8003618 <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007270:	e008      	b.n	8007284 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007272:	f7fc f9d1 	bl	8003618 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e18b      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007284:	4b6c      	ldr	r3, [pc, #432]	; (8007438 <HAL_RCC_OscConfig+0x4bc>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0f0      	beq.n	8007272 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d108      	bne.n	80072aa <HAL_RCC_OscConfig+0x32e>
 8007298:	4b66      	ldr	r3, [pc, #408]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729e:	4a65      	ldr	r2, [pc, #404]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072a8:	e024      	b.n	80072f4 <HAL_RCC_OscConfig+0x378>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d110      	bne.n	80072d4 <HAL_RCC_OscConfig+0x358>
 80072b2:	4b60      	ldr	r3, [pc, #384]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80072b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b8:	4a5e      	ldr	r2, [pc, #376]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80072ba:	f043 0304 	orr.w	r3, r3, #4
 80072be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072c2:	4b5c      	ldr	r3, [pc, #368]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80072c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c8:	4a5a      	ldr	r2, [pc, #360]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072d2:	e00f      	b.n	80072f4 <HAL_RCC_OscConfig+0x378>
 80072d4:	4b57      	ldr	r3, [pc, #348]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80072d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072da:	4a56      	ldr	r2, [pc, #344]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072e4:	4b53      	ldr	r3, [pc, #332]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80072e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ea:	4a52      	ldr	r2, [pc, #328]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80072ec:	f023 0304 	bic.w	r3, r3, #4
 80072f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d016      	beq.n	800732a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fc:	f7fc f98c 	bl	8003618 <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007302:	e00a      	b.n	800731a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007304:	f7fc f988 	bl	8003618 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007312:	4293      	cmp	r3, r2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e140      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800731a:	4b46      	ldr	r3, [pc, #280]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 800731c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0ed      	beq.n	8007304 <HAL_RCC_OscConfig+0x388>
 8007328:	e015      	b.n	8007356 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732a:	f7fc f975 	bl	8003618 <HAL_GetTick>
 800732e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007330:	e00a      	b.n	8007348 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007332:	f7fc f971 	bl	8003618 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007340:	4293      	cmp	r3, r2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e129      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007348:	4b3a      	ldr	r3, [pc, #232]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1ed      	bne.n	8007332 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007356:	7ffb      	ldrb	r3, [r7, #31]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d105      	bne.n	8007368 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800735c:	4b35      	ldr	r3, [pc, #212]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 800735e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007360:	4a34      	ldr	r2, [pc, #208]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 8007362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007366:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0320 	and.w	r3, r3, #32
 8007370:	2b00      	cmp	r3, #0
 8007372:	d03c      	beq.n	80073ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01c      	beq.n	80073b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800737c:	4b2d      	ldr	r3, [pc, #180]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 800737e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007382:	4a2c      	ldr	r2, [pc, #176]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 8007384:	f043 0301 	orr.w	r3, r3, #1
 8007388:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738c:	f7fc f944 	bl	8003618 <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007394:	f7fc f940 	bl	8003618 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e0fa      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073a6:	4b23      	ldr	r3, [pc, #140]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80073a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0ef      	beq.n	8007394 <HAL_RCC_OscConfig+0x418>
 80073b4:	e01b      	b.n	80073ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073b6:	4b1f      	ldr	r3, [pc, #124]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80073b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073bc:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c6:	f7fc f927 	bl	8003618 <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073cc:	e008      	b.n	80073e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073ce:	f7fc f923 	bl	8003618 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e0dd      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073e0:	4b14      	ldr	r3, [pc, #80]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80073e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1ef      	bne.n	80073ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80d1 	beq.w	800759a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073f8:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f003 030c 	and.w	r3, r3, #12
 8007400:	2b0c      	cmp	r3, #12
 8007402:	f000 808b 	beq.w	800751c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d15e      	bne.n	80074cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740e:	4b09      	ldr	r3, [pc, #36]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a08      	ldr	r2, [pc, #32]	; (8007434 <HAL_RCC_OscConfig+0x4b8>)
 8007414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741a:	f7fc f8fd 	bl	8003618 <HAL_GetTick>
 800741e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007420:	e00c      	b.n	800743c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007422:	f7fc f8f9 	bl	8003618 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d905      	bls.n	800743c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e0b3      	b.n	800759c <HAL_RCC_OscConfig+0x620>
 8007434:	40021000 	.word	0x40021000
 8007438:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800743c:	4b59      	ldr	r3, [pc, #356]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1ec      	bne.n	8007422 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007448:	4b56      	ldr	r3, [pc, #344]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	4b56      	ldr	r3, [pc, #344]	; (80075a8 <HAL_RCC_OscConfig+0x62c>)
 800744e:	4013      	ands	r3, r2
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6a11      	ldr	r1, [r2, #32]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007458:	3a01      	subs	r2, #1
 800745a:	0112      	lsls	r2, r2, #4
 800745c:	4311      	orrs	r1, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007462:	0212      	lsls	r2, r2, #8
 8007464:	4311      	orrs	r1, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800746a:	0852      	lsrs	r2, r2, #1
 800746c:	3a01      	subs	r2, #1
 800746e:	0552      	lsls	r2, r2, #21
 8007470:	4311      	orrs	r1, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007476:	0852      	lsrs	r2, r2, #1
 8007478:	3a01      	subs	r2, #1
 800747a:	0652      	lsls	r2, r2, #25
 800747c:	4311      	orrs	r1, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007482:	06d2      	lsls	r2, r2, #27
 8007484:	430a      	orrs	r2, r1
 8007486:	4947      	ldr	r1, [pc, #284]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 8007488:	4313      	orrs	r3, r2
 800748a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800748c:	4b45      	ldr	r3, [pc, #276]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a44      	ldr	r2, [pc, #272]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 8007492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007496:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007498:	4b42      	ldr	r3, [pc, #264]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4a41      	ldr	r2, [pc, #260]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 800749e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a4:	f7fc f8b8 	bl	8003618 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fc f8b4 	bl	8003618 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e06e      	b.n	800759c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074be:	4b39      	ldr	r3, [pc, #228]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f0      	beq.n	80074ac <HAL_RCC_OscConfig+0x530>
 80074ca:	e066      	b.n	800759a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074cc:	4b35      	ldr	r3, [pc, #212]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a34      	ldr	r2, [pc, #208]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 80074d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80074d8:	4b32      	ldr	r3, [pc, #200]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	4a31      	ldr	r2, [pc, #196]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074e4:	4b2f      	ldr	r3, [pc, #188]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	4a2e      	ldr	r2, [pc, #184]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 80074ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80074ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f4:	f7fc f890 	bl	8003618 <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074fc:	f7fc f88c 	bl	8003618 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e046      	b.n	800759c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800750e:	4b25      	ldr	r3, [pc, #148]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f0      	bne.n	80074fc <HAL_RCC_OscConfig+0x580>
 800751a:	e03e      	b.n	800759a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e039      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007528:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <HAL_RCC_OscConfig+0x628>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f003 0203 	and.w	r2, r3, #3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	429a      	cmp	r2, r3
 800753a:	d12c      	bne.n	8007596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	3b01      	subs	r3, #1
 8007548:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754a:	429a      	cmp	r2, r3
 800754c:	d123      	bne.n	8007596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007558:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800755a:	429a      	cmp	r2, r3
 800755c:	d11b      	bne.n	8007596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800756a:	429a      	cmp	r2, r3
 800756c:	d113      	bne.n	8007596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	085b      	lsrs	r3, r3, #1
 800757a:	3b01      	subs	r3, #1
 800757c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800757e:	429a      	cmp	r2, r3
 8007580:	d109      	bne.n	8007596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	085b      	lsrs	r3, r3, #1
 800758e:	3b01      	subs	r3, #1
 8007590:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007592:	429a      	cmp	r2, r3
 8007594:	d001      	beq.n	800759a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	40021000 	.word	0x40021000
 80075a8:	019f800c 	.word	0x019f800c

080075ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80075b6:	2300      	movs	r3, #0
 80075b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e11e      	b.n	8007802 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075c4:	4b91      	ldr	r3, [pc, #580]	; (800780c <HAL_RCC_ClockConfig+0x260>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d910      	bls.n	80075f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075d2:	4b8e      	ldr	r3, [pc, #568]	; (800780c <HAL_RCC_ClockConfig+0x260>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f023 020f 	bic.w	r2, r3, #15
 80075da:	498c      	ldr	r1, [pc, #560]	; (800780c <HAL_RCC_ClockConfig+0x260>)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	4313      	orrs	r3, r2
 80075e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e2:	4b8a      	ldr	r3, [pc, #552]	; (800780c <HAL_RCC_ClockConfig+0x260>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d001      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e106      	b.n	8007802 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d073      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2b03      	cmp	r3, #3
 8007606:	d129      	bne.n	800765c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007608:	4b81      	ldr	r3, [pc, #516]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e0f4      	b.n	8007802 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007618:	f000 f99e 	bl	8007958 <RCC_GetSysClockFreqFromPLLSource>
 800761c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	4a7c      	ldr	r2, [pc, #496]	; (8007814 <HAL_RCC_ClockConfig+0x268>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d93f      	bls.n	80076a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007626:	4b7a      	ldr	r3, [pc, #488]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d009      	beq.n	8007646 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800763a:	2b00      	cmp	r3, #0
 800763c:	d033      	beq.n	80076a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007642:	2b00      	cmp	r3, #0
 8007644:	d12f      	bne.n	80076a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007646:	4b72      	ldr	r3, [pc, #456]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800764e:	4a70      	ldr	r2, [pc, #448]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007654:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007656:	2380      	movs	r3, #128	; 0x80
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	e024      	b.n	80076a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d107      	bne.n	8007674 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007664:	4b6a      	ldr	r3, [pc, #424]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d109      	bne.n	8007684 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0c6      	b.n	8007802 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007674:	4b66      	ldr	r3, [pc, #408]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e0be      	b.n	8007802 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007684:	f000 f8ce 	bl	8007824 <HAL_RCC_GetSysClockFreq>
 8007688:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	4a61      	ldr	r2, [pc, #388]	; (8007814 <HAL_RCC_ClockConfig+0x268>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d909      	bls.n	80076a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007692:	4b5f      	ldr	r3, [pc, #380]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800769a:	4a5d      	ldr	r2, [pc, #372]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 800769c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80076a2:	2380      	movs	r3, #128	; 0x80
 80076a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076a6:	4b5a      	ldr	r3, [pc, #360]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f023 0203 	bic.w	r2, r3, #3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	4957      	ldr	r1, [pc, #348]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b8:	f7fb ffae 	bl	8003618 <HAL_GetTick>
 80076bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076be:	e00a      	b.n	80076d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c0:	f7fb ffaa 	bl	8003618 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e095      	b.n	8007802 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d6:	4b4e      	ldr	r3, [pc, #312]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 020c 	and.w	r2, r3, #12
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d1eb      	bne.n	80076c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d023      	beq.n	800773c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007700:	4b43      	ldr	r3, [pc, #268]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	4a42      	ldr	r2, [pc, #264]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800770a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d007      	beq.n	8007728 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007718:	4b3d      	ldr	r3, [pc, #244]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007720:	4a3b      	ldr	r2, [pc, #236]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007726:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007728:	4b39      	ldr	r3, [pc, #228]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	4936      	ldr	r1, [pc, #216]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007736:	4313      	orrs	r3, r2
 8007738:	608b      	str	r3, [r1, #8]
 800773a:	e008      	b.n	800774e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2b80      	cmp	r3, #128	; 0x80
 8007740:	d105      	bne.n	800774e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007742:	4b33      	ldr	r3, [pc, #204]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	4a32      	ldr	r2, [pc, #200]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 8007748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800774c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800774e:	4b2f      	ldr	r3, [pc, #188]	; (800780c <HAL_RCC_ClockConfig+0x260>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 030f 	and.w	r3, r3, #15
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d21d      	bcs.n	8007798 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800775c:	4b2b      	ldr	r3, [pc, #172]	; (800780c <HAL_RCC_ClockConfig+0x260>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f023 020f 	bic.w	r2, r3, #15
 8007764:	4929      	ldr	r1, [pc, #164]	; (800780c <HAL_RCC_ClockConfig+0x260>)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	4313      	orrs	r3, r2
 800776a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800776c:	f7fb ff54 	bl	8003618 <HAL_GetTick>
 8007770:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007772:	e00a      	b.n	800778a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007774:	f7fb ff50 	bl	8003618 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007782:	4293      	cmp	r3, r2
 8007784:	d901      	bls.n	800778a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e03b      	b.n	8007802 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b20      	ldr	r3, [pc, #128]	; (800780c <HAL_RCC_ClockConfig+0x260>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d1ed      	bne.n	8007774 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a4:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	4917      	ldr	r1, [pc, #92]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0308 	and.w	r3, r3, #8
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077c2:	4b13      	ldr	r3, [pc, #76]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	490f      	ldr	r1, [pc, #60]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077d6:	f000 f825 	bl	8007824 <HAL_RCC_GetSysClockFreq>
 80077da:	4602      	mov	r2, r0
 80077dc:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <HAL_RCC_ClockConfig+0x264>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	490c      	ldr	r1, [pc, #48]	; (8007818 <HAL_RCC_ClockConfig+0x26c>)
 80077e8:	5ccb      	ldrb	r3, [r1, r3]
 80077ea:	f003 031f 	and.w	r3, r3, #31
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	4a0a      	ldr	r2, [pc, #40]	; (800781c <HAL_RCC_ClockConfig+0x270>)
 80077f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077f6:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <HAL_RCC_ClockConfig+0x274>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fb fec0 	bl	8003580 <HAL_InitTick>
 8007800:	4603      	mov	r3, r0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40022000 	.word	0x40022000
 8007810:	40021000 	.word	0x40021000
 8007814:	04c4b400 	.word	0x04c4b400
 8007818:	0800b290 	.word	0x0800b290
 800781c:	20000000 	.word	0x20000000
 8007820:	20000004 	.word	0x20000004

08007824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800782a:	4b2c      	ldr	r3, [pc, #176]	; (80078dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 030c 	and.w	r3, r3, #12
 8007832:	2b04      	cmp	r3, #4
 8007834:	d102      	bne.n	800783c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007836:	4b2a      	ldr	r3, [pc, #168]	; (80078e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	e047      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800783c:	4b27      	ldr	r3, [pc, #156]	; (80078dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 030c 	and.w	r3, r3, #12
 8007844:	2b08      	cmp	r3, #8
 8007846:	d102      	bne.n	800784e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007848:	4b26      	ldr	r3, [pc, #152]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	e03e      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800784e:	4b23      	ldr	r3, [pc, #140]	; (80078dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 030c 	and.w	r3, r3, #12
 8007856:	2b0c      	cmp	r3, #12
 8007858:	d136      	bne.n	80078c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800785a:	4b20      	ldr	r3, [pc, #128]	; (80078dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007864:	4b1d      	ldr	r3, [pc, #116]	; (80078dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	091b      	lsrs	r3, r3, #4
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	3301      	adds	r3, #1
 8007870:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d10c      	bne.n	8007892 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007878:	4a1a      	ldr	r2, [pc, #104]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007880:	4a16      	ldr	r2, [pc, #88]	; (80078dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007882:	68d2      	ldr	r2, [r2, #12]
 8007884:	0a12      	lsrs	r2, r2, #8
 8007886:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800788a:	fb02 f303 	mul.w	r3, r2, r3
 800788e:	617b      	str	r3, [r7, #20]
      break;
 8007890:	e00c      	b.n	80078ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007892:	4a13      	ldr	r2, [pc, #76]	; (80078e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	fbb2 f3f3 	udiv	r3, r2, r3
 800789a:	4a10      	ldr	r2, [pc, #64]	; (80078dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800789c:	68d2      	ldr	r2, [r2, #12]
 800789e:	0a12      	lsrs	r2, r2, #8
 80078a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078a4:	fb02 f303 	mul.w	r3, r2, r3
 80078a8:	617b      	str	r3, [r7, #20]
      break;
 80078aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078ac:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	0e5b      	lsrs	r3, r3, #25
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	3301      	adds	r3, #1
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	e001      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80078cc:	693b      	ldr	r3, [r7, #16]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	40021000 	.word	0x40021000
 80078e0:	00f42400 	.word	0x00f42400
 80078e4:	007a1200 	.word	0x007a1200

080078e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078ec:	4b03      	ldr	r3, [pc, #12]	; (80078fc <HAL_RCC_GetHCLKFreq+0x14>)
 80078ee:	681b      	ldr	r3, [r3, #0]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	20000000 	.word	0x20000000

08007900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007904:	f7ff fff0 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 8007908:	4602      	mov	r2, r0
 800790a:	4b06      	ldr	r3, [pc, #24]	; (8007924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	4904      	ldr	r1, [pc, #16]	; (8007928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007916:	5ccb      	ldrb	r3, [r1, r3]
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007920:	4618      	mov	r0, r3
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40021000 	.word	0x40021000
 8007928:	0800b2a0 	.word	0x0800b2a0

0800792c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007930:	f7ff ffda 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 8007934:	4602      	mov	r2, r0
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	0adb      	lsrs	r3, r3, #11
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	4904      	ldr	r1, [pc, #16]	; (8007954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007942:	5ccb      	ldrb	r3, [r1, r3]
 8007944:	f003 031f 	and.w	r3, r3, #31
 8007948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800794c:	4618      	mov	r0, r3
 800794e:	bd80      	pop	{r7, pc}
 8007950:	40021000 	.word	0x40021000
 8007954:	0800b2a0 	.word	0x0800b2a0

08007958 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800795e:	4b1e      	ldr	r3, [pc, #120]	; (80079d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007968:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	091b      	lsrs	r3, r3, #4
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	3301      	adds	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2b03      	cmp	r3, #3
 800797a:	d10c      	bne.n	8007996 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800797c:	4a17      	ldr	r2, [pc, #92]	; (80079dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	fbb2 f3f3 	udiv	r3, r2, r3
 8007984:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007986:	68d2      	ldr	r2, [r2, #12]
 8007988:	0a12      	lsrs	r2, r2, #8
 800798a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800798e:	fb02 f303 	mul.w	r3, r2, r3
 8007992:	617b      	str	r3, [r7, #20]
    break;
 8007994:	e00c      	b.n	80079b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007996:	4a12      	ldr	r2, [pc, #72]	; (80079e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	fbb2 f3f3 	udiv	r3, r2, r3
 800799e:	4a0e      	ldr	r2, [pc, #56]	; (80079d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079a0:	68d2      	ldr	r2, [r2, #12]
 80079a2:	0a12      	lsrs	r2, r2, #8
 80079a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	617b      	str	r3, [r7, #20]
    break;
 80079ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079b0:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	0e5b      	lsrs	r3, r3, #25
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	3301      	adds	r3, #1
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80079ca:	687b      	ldr	r3, [r7, #4]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	40021000 	.word	0x40021000
 80079dc:	007a1200 	.word	0x007a1200
 80079e0:	00f42400 	.word	0x00f42400

080079e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079ec:	2300      	movs	r3, #0
 80079ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079f0:	2300      	movs	r3, #0
 80079f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 8098 	beq.w	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a02:	2300      	movs	r3, #0
 8007a04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a06:	4b43      	ldr	r3, [pc, #268]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10d      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a12:	4b40      	ldr	r3, [pc, #256]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a16:	4a3f      	ldr	r2, [pc, #252]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a1e:	4b3d      	ldr	r3, [pc, #244]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a26:	60bb      	str	r3, [r7, #8]
 8007a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a2e:	4b3a      	ldr	r3, [pc, #232]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a39      	ldr	r2, [pc, #228]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a3a:	f7fb fded 	bl	8003618 <HAL_GetTick>
 8007a3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a40:	e009      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a42:	f7fb fde9 	bl	8003618 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d902      	bls.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	74fb      	strb	r3, [r7, #19]
        break;
 8007a54:	e005      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a56:	4b30      	ldr	r3, [pc, #192]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0ef      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a62:	7cfb      	ldrb	r3, [r7, #19]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d159      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a68:	4b2a      	ldr	r3, [pc, #168]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01e      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d019      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a84:	4b23      	ldr	r3, [pc, #140]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a90:	4b20      	ldr	r3, [pc, #128]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a96:	4a1f      	ldr	r2, [pc, #124]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007aa0:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa6:	4a1b      	ldr	r2, [pc, #108]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ab0:	4a18      	ldr	r2, [pc, #96]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d016      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac2:	f7fb fda9 	bl	8003618 <HAL_GetTick>
 8007ac6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ac8:	e00b      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aca:	f7fb fda5 	bl	8003618 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d902      	bls.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	74fb      	strb	r3, [r7, #19]
            break;
 8007ae0:	e006      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ae2:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0ec      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007af0:	7cfb      	ldrb	r3, [r7, #19]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10b      	bne.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007af6:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b04:	4903      	ldr	r1, [pc, #12]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b0c:	e008      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b0e:	7cfb      	ldrb	r3, [r7, #19]
 8007b10:	74bb      	strb	r3, [r7, #18]
 8007b12:	e005      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b14:	40021000 	.word	0x40021000
 8007b18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1c:	7cfb      	ldrb	r3, [r7, #19]
 8007b1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b20:	7c7b      	ldrb	r3, [r7, #17]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d105      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b26:	4ba7      	ldr	r3, [pc, #668]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2a:	4aa6      	ldr	r2, [pc, #664]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b3e:	4ba1      	ldr	r3, [pc, #644]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b44:	f023 0203 	bic.w	r2, r3, #3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	499d      	ldr	r1, [pc, #628]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b60:	4b98      	ldr	r3, [pc, #608]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b66:	f023 020c 	bic.w	r2, r3, #12
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	4995      	ldr	r1, [pc, #596]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b82:	4b90      	ldr	r3, [pc, #576]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	498c      	ldr	r1, [pc, #560]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ba4:	4b87      	ldr	r3, [pc, #540]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007baa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	4984      	ldr	r1, [pc, #528]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bc6:	4b7f      	ldr	r3, [pc, #508]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	497b      	ldr	r1, [pc, #492]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007be8:	4b76      	ldr	r3, [pc, #472]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	4973      	ldr	r1, [pc, #460]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c0a:	4b6e      	ldr	r3, [pc, #440]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	496a      	ldr	r1, [pc, #424]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00a      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c2c:	4b65      	ldr	r3, [pc, #404]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	4962      	ldr	r1, [pc, #392]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c4e:	4b5d      	ldr	r3, [pc, #372]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	4959      	ldr	r1, [pc, #356]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00a      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c70:	4b54      	ldr	r3, [pc, #336]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c76:	f023 0203 	bic.w	r2, r3, #3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7e:	4951      	ldr	r1, [pc, #324]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c92:	4b4c      	ldr	r3, [pc, #304]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	4948      	ldr	r1, [pc, #288]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d015      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cb4:	4b43      	ldr	r3, [pc, #268]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc2:	4940      	ldr	r1, [pc, #256]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cd2:	d105      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cd4:	4b3b      	ldr	r3, [pc, #236]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	4a3a      	ldr	r2, [pc, #232]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d015      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cec:	4b35      	ldr	r3, [pc, #212]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfa:	4932      	ldr	r1, [pc, #200]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d0a:	d105      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d0c:	4b2d      	ldr	r3, [pc, #180]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	4a2c      	ldr	r2, [pc, #176]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d015      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d24:	4b27      	ldr	r3, [pc, #156]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	4924      	ldr	r1, [pc, #144]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d42:	d105      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d44:	4b1f      	ldr	r3, [pc, #124]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	4a1e      	ldr	r2, [pc, #120]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d015      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d5c:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6a:	4916      	ldr	r1, [pc, #88]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d7a:	d105      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d7c:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	4a10      	ldr	r2, [pc, #64]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d019      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	4908      	ldr	r1, [pc, #32]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007db2:	d109      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007db4:	4b03      	ldr	r3, [pc, #12]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	4a02      	ldr	r2, [pc, #8]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dbe:	60d3      	str	r3, [r2, #12]
 8007dc0:	e002      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007dc2:	bf00      	nop
 8007dc4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d015      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007dd4:	4b29      	ldr	r3, [pc, #164]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	4926      	ldr	r1, [pc, #152]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007df2:	d105      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007df4:	4b21      	ldr	r3, [pc, #132]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	4a20      	ldr	r2, [pc, #128]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d015      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e0c:	4b1b      	ldr	r3, [pc, #108]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e1a:	4918      	ldr	r1, [pc, #96]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2a:	d105      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e2c:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e36:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d015      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e44:	4b0d      	ldr	r3, [pc, #52]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e52:	490a      	ldr	r1, [pc, #40]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e62:	d105      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4a04      	ldr	r2, [pc, #16]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e70:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40021000 	.word	0x40021000

08007e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e09d      	b.n	8007fce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d108      	bne.n	8007eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea2:	d009      	beq.n	8007eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	61da      	str	r2, [r3, #28]
 8007eaa:	e005      	b.n	8007eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fa fe90 	bl	8002bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ef8:	d902      	bls.n	8007f00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	e002      	b.n	8007f06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f0e:	d007      	beq.n	8007f20 <HAL_SPI_Init+0xa0>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f18:	d002      	beq.n	8007f20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f62:	ea42 0103 	orr.w	r1, r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	0c1b      	lsrs	r3, r3, #16
 8007f7c:	f003 0204 	and.w	r2, r3, #4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	f003 0310 	and.w	r3, r3, #16
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8e:	f003 0308 	and.w	r3, r3, #8
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f9c:	ea42 0103 	orr.w	r1, r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69da      	ldr	r2, [r3, #28]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e038      	b.n	800805e <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d106      	bne.n	8008006 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7fb f9cd 	bl	80033a0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3308      	adds	r3, #8
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f002 f951 	bl	800a2b8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6818      	ldr	r0, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	461a      	mov	r2, r3
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	f002 fa19 	bl	800a458 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6858      	ldr	r0, [r3, #4]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	f002 fa62 	bl	800a4fc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	6892      	ldr	r2, [r2, #8]
 8008040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	6892      	ldr	r2, [r2, #8]
 800804c:	f041 0101 	orr.w	r1, r1, #1
 8008050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e049      	b.n	800810c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d106      	bne.n	8008092 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7fa fdf7 	bl	8002c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3304      	adds	r3, #4
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f000 fc71 	bl	800898c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e049      	b.n	80081ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f841 	bl	80081c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f000 fc1a 	bl	800898c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d122      	bne.n	8008232 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d11b      	bne.n	8008232 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f06f 0202 	mvn.w	r2, #2
 8008202:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fb99 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 800821e:	e005      	b.n	800822c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fb8b 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fb9c 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b04      	cmp	r3, #4
 800823e:	d122      	bne.n	8008286 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b04      	cmp	r3, #4
 800824c:	d11b      	bne.n	8008286 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f06f 0204 	mvn.w	r2, #4
 8008256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fb6f 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 8008272:	e005      	b.n	8008280 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fb61 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb72 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b08      	cmp	r3, #8
 8008292:	d122      	bne.n	80082da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d11b      	bne.n	80082da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f06f 0208 	mvn.w	r2, #8
 80082aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2204      	movs	r2, #4
 80082b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	f003 0303 	and.w	r3, r3, #3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fb45 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 80082c6:	e005      	b.n	80082d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fb37 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fb48 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	f003 0310 	and.w	r3, r3, #16
 80082e4:	2b10      	cmp	r3, #16
 80082e6:	d122      	bne.n	800832e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f003 0310 	and.w	r3, r3, #16
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d11b      	bne.n	800832e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f06f 0210 	mvn.w	r2, #16
 80082fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2208      	movs	r2, #8
 8008304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008310:	2b00      	cmp	r3, #0
 8008312:	d003      	beq.n	800831c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb1b 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 800831a:	e005      	b.n	8008328 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fb0d 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fb1e 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b01      	cmp	r3, #1
 800833a:	d10e      	bne.n	800835a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b01      	cmp	r3, #1
 8008348:	d107      	bne.n	800835a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f06f 0201 	mvn.w	r2, #1
 8008352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fae7 	bl	8008928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008364:	2b80      	cmp	r3, #128	; 0x80
 8008366:	d10e      	bne.n	8008386 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008372:	2b80      	cmp	r3, #128	; 0x80
 8008374:	d107      	bne.n	8008386 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800837e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f001 f8c3 	bl	800950c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008394:	d10e      	bne.n	80083b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a0:	2b80      	cmp	r3, #128	; 0x80
 80083a2:	d107      	bne.n	80083b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 f8b6 	bl	8009520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083be:	2b40      	cmp	r3, #64	; 0x40
 80083c0:	d10e      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d107      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 facc 	bl	8008978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d10e      	bne.n	800840c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d107      	bne.n	800840c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0220 	mvn.w	r2, #32
 8008404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 f876 	bl	80094f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800841a:	d10f      	bne.n	800843c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800842a:	d107      	bne.n	800843c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 f87c 	bl	8009534 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800844a:	d10f      	bne.n	800846c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800845a:	d107      	bne.n	800846c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 f86e 	bl	8009548 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800847a:	d10f      	bne.n	800849c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800848a:	d107      	bne.n	800849c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 f860 	bl	800955c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084aa:	d10f      	bne.n	80084cc <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084ba:	d107      	bne.n	80084cc <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80084c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 f852 	bl	8009570 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d101      	bne.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e0ff      	b.n	80086f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b14      	cmp	r3, #20
 80084fe:	f200 80f0 	bhi.w	80086e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008502:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	0800855d 	.word	0x0800855d
 800850c:	080086e3 	.word	0x080086e3
 8008510:	080086e3 	.word	0x080086e3
 8008514:	080086e3 	.word	0x080086e3
 8008518:	0800859d 	.word	0x0800859d
 800851c:	080086e3 	.word	0x080086e3
 8008520:	080086e3 	.word	0x080086e3
 8008524:	080086e3 	.word	0x080086e3
 8008528:	080085df 	.word	0x080085df
 800852c:	080086e3 	.word	0x080086e3
 8008530:	080086e3 	.word	0x080086e3
 8008534:	080086e3 	.word	0x080086e3
 8008538:	0800861f 	.word	0x0800861f
 800853c:	080086e3 	.word	0x080086e3
 8008540:	080086e3 	.word	0x080086e3
 8008544:	080086e3 	.word	0x080086e3
 8008548:	08008661 	.word	0x08008661
 800854c:	080086e3 	.word	0x080086e3
 8008550:	080086e3 	.word	0x080086e3
 8008554:	080086e3 	.word	0x080086e3
 8008558:	080086a1 	.word	0x080086a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 faba 	bl	8008adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699a      	ldr	r2, [r3, #24]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0208 	orr.w	r2, r2, #8
 8008576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	699a      	ldr	r2, [r3, #24]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f022 0204 	bic.w	r2, r2, #4
 8008586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6999      	ldr	r1, [r3, #24]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	619a      	str	r2, [r3, #24]
      break;
 800859a:	e0a5      	b.n	80086e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fb34 	bl	8008c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	699a      	ldr	r2, [r3, #24]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699a      	ldr	r2, [r3, #24]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6999      	ldr	r1, [r3, #24]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	021a      	lsls	r2, r3, #8
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	619a      	str	r2, [r3, #24]
      break;
 80085dc:	e084      	b.n	80086e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fba7 	bl	8008d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69da      	ldr	r2, [r3, #28]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f042 0208 	orr.w	r2, r2, #8
 80085f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69da      	ldr	r2, [r3, #28]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0204 	bic.w	r2, r2, #4
 8008608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69d9      	ldr	r1, [r3, #28]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	691a      	ldr	r2, [r3, #16]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	61da      	str	r2, [r3, #28]
      break;
 800861c:	e064      	b.n	80086e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fc19 	bl	8008e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	69da      	ldr	r2, [r3, #28]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69da      	ldr	r2, [r3, #28]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69d9      	ldr	r1, [r3, #28]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	021a      	lsls	r2, r3, #8
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	61da      	str	r2, [r3, #28]
      break;
 800865e:	e043      	b.n	80086e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fc8c 	bl	8008f84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f042 0208 	orr.w	r2, r2, #8
 800867a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0204 	bic.w	r2, r2, #4
 800868a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	691a      	ldr	r2, [r3, #16]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800869e:	e023      	b.n	80086e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68b9      	ldr	r1, [r7, #8]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fcd6 	bl	8009058 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	021a      	lsls	r2, r3, #8
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80086e0:	e002      	b.n	80086e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	75fb      	strb	r3, [r7, #23]
      break;
 80086e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop

080086fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_TIM_ConfigClockSource+0x1c>
 8008714:	2302      	movs	r3, #2
 8008716:	e0f6      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x20a>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800873a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a6f      	ldr	r2, [pc, #444]	; (8008910 <HAL_TIM_ConfigClockSource+0x214>)
 8008752:	4293      	cmp	r3, r2
 8008754:	f000 80c1 	beq.w	80088da <HAL_TIM_ConfigClockSource+0x1de>
 8008758:	4a6d      	ldr	r2, [pc, #436]	; (8008910 <HAL_TIM_ConfigClockSource+0x214>)
 800875a:	4293      	cmp	r3, r2
 800875c:	f200 80c6 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008760:	4a6c      	ldr	r2, [pc, #432]	; (8008914 <HAL_TIM_ConfigClockSource+0x218>)
 8008762:	4293      	cmp	r3, r2
 8008764:	f000 80b9 	beq.w	80088da <HAL_TIM_ConfigClockSource+0x1de>
 8008768:	4a6a      	ldr	r2, [pc, #424]	; (8008914 <HAL_TIM_ConfigClockSource+0x218>)
 800876a:	4293      	cmp	r3, r2
 800876c:	f200 80be 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008770:	4a69      	ldr	r2, [pc, #420]	; (8008918 <HAL_TIM_ConfigClockSource+0x21c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	f000 80b1 	beq.w	80088da <HAL_TIM_ConfigClockSource+0x1de>
 8008778:	4a67      	ldr	r2, [pc, #412]	; (8008918 <HAL_TIM_ConfigClockSource+0x21c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	f200 80b6 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008780:	4a66      	ldr	r2, [pc, #408]	; (800891c <HAL_TIM_ConfigClockSource+0x220>)
 8008782:	4293      	cmp	r3, r2
 8008784:	f000 80a9 	beq.w	80088da <HAL_TIM_ConfigClockSource+0x1de>
 8008788:	4a64      	ldr	r2, [pc, #400]	; (800891c <HAL_TIM_ConfigClockSource+0x220>)
 800878a:	4293      	cmp	r3, r2
 800878c:	f200 80ae 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008790:	4a63      	ldr	r2, [pc, #396]	; (8008920 <HAL_TIM_ConfigClockSource+0x224>)
 8008792:	4293      	cmp	r3, r2
 8008794:	f000 80a1 	beq.w	80088da <HAL_TIM_ConfigClockSource+0x1de>
 8008798:	4a61      	ldr	r2, [pc, #388]	; (8008920 <HAL_TIM_ConfigClockSource+0x224>)
 800879a:	4293      	cmp	r3, r2
 800879c:	f200 80a6 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 80087a0:	4a60      	ldr	r2, [pc, #384]	; (8008924 <HAL_TIM_ConfigClockSource+0x228>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	f000 8099 	beq.w	80088da <HAL_TIM_ConfigClockSource+0x1de>
 80087a8:	4a5e      	ldr	r2, [pc, #376]	; (8008924 <HAL_TIM_ConfigClockSource+0x228>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	f200 809e 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 80087b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087b4:	f000 8091 	beq.w	80088da <HAL_TIM_ConfigClockSource+0x1de>
 80087b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087bc:	f200 8096 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 80087c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c4:	f000 8089 	beq.w	80088da <HAL_TIM_ConfigClockSource+0x1de>
 80087c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087cc:	f200 808e 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 80087d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d4:	d03e      	beq.n	8008854 <HAL_TIM_ConfigClockSource+0x158>
 80087d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087da:	f200 8087 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 80087de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e2:	f000 8086 	beq.w	80088f2 <HAL_TIM_ConfigClockSource+0x1f6>
 80087e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ea:	d87f      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 80087ec:	2b70      	cmp	r3, #112	; 0x70
 80087ee:	d01a      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x12a>
 80087f0:	2b70      	cmp	r3, #112	; 0x70
 80087f2:	d87b      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 80087f4:	2b60      	cmp	r3, #96	; 0x60
 80087f6:	d050      	beq.n	800889a <HAL_TIM_ConfigClockSource+0x19e>
 80087f8:	2b60      	cmp	r3, #96	; 0x60
 80087fa:	d877      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 80087fc:	2b50      	cmp	r3, #80	; 0x50
 80087fe:	d03c      	beq.n	800887a <HAL_TIM_ConfigClockSource+0x17e>
 8008800:	2b50      	cmp	r3, #80	; 0x50
 8008802:	d873      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008804:	2b40      	cmp	r3, #64	; 0x40
 8008806:	d058      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0x1be>
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	d86f      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 800880c:	2b30      	cmp	r3, #48	; 0x30
 800880e:	d064      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x1de>
 8008810:	2b30      	cmp	r3, #48	; 0x30
 8008812:	d86b      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008814:	2b20      	cmp	r3, #32
 8008816:	d060      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x1de>
 8008818:	2b20      	cmp	r3, #32
 800881a:	d867      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
 800881c:	2b00      	cmp	r3, #0
 800881e:	d05c      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x1de>
 8008820:	2b10      	cmp	r3, #16
 8008822:	d05a      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x1de>
 8008824:	e062      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	6899      	ldr	r1, [r3, #8]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f000 fcf7 	bl	8009228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	609a      	str	r2, [r3, #8]
      break;
 8008852:	e04f      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	6899      	ldr	r1, [r3, #8]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f000 fce0 	bl	8009228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689a      	ldr	r2, [r3, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008876:	609a      	str	r2, [r3, #8]
      break;
 8008878:	e03c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	6859      	ldr	r1, [r3, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	461a      	mov	r2, r3
 8008888:	f000 fc52 	bl	8009130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2150      	movs	r1, #80	; 0x50
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fcab 	bl	80091ee <TIM_ITRx_SetConfig>
      break;
 8008898:	e02c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	6859      	ldr	r1, [r3, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f000 fc71 	bl	800918e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2160      	movs	r1, #96	; 0x60
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fc9b 	bl	80091ee <TIM_ITRx_SetConfig>
      break;
 80088b8:	e01c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6859      	ldr	r1, [r3, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f000 fc32 	bl	8009130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2140      	movs	r1, #64	; 0x40
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fc8b 	bl	80091ee <TIM_ITRx_SetConfig>
      break;
 80088d8:	e00c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f000 fc82 	bl	80091ee <TIM_ITRx_SetConfig>
      break;
 80088ea:	e003      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	73fb      	strb	r3, [r7, #15]
      break;
 80088f0:	e000      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80088f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	00100070 	.word	0x00100070
 8008914:	00100060 	.word	0x00100060
 8008918:	00100050 	.word	0x00100050
 800891c:	00100040 	.word	0x00100040
 8008920:	00100030 	.word	0x00100030
 8008924:	00100020 	.word	0x00100020

08008928 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a46      	ldr	r2, [pc, #280]	; (8008ab8 <TIM_Base_SetConfig+0x12c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d017      	beq.n	80089d4 <TIM_Base_SetConfig+0x48>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089aa:	d013      	beq.n	80089d4 <TIM_Base_SetConfig+0x48>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a43      	ldr	r2, [pc, #268]	; (8008abc <TIM_Base_SetConfig+0x130>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00f      	beq.n	80089d4 <TIM_Base_SetConfig+0x48>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a42      	ldr	r2, [pc, #264]	; (8008ac0 <TIM_Base_SetConfig+0x134>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00b      	beq.n	80089d4 <TIM_Base_SetConfig+0x48>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a41      	ldr	r2, [pc, #260]	; (8008ac4 <TIM_Base_SetConfig+0x138>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d007      	beq.n	80089d4 <TIM_Base_SetConfig+0x48>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a40      	ldr	r2, [pc, #256]	; (8008ac8 <TIM_Base_SetConfig+0x13c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_Base_SetConfig+0x48>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a3f      	ldr	r2, [pc, #252]	; (8008acc <TIM_Base_SetConfig+0x140>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d108      	bne.n	80089e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a33      	ldr	r2, [pc, #204]	; (8008ab8 <TIM_Base_SetConfig+0x12c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d023      	beq.n	8008a36 <TIM_Base_SetConfig+0xaa>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f4:	d01f      	beq.n	8008a36 <TIM_Base_SetConfig+0xaa>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a30      	ldr	r2, [pc, #192]	; (8008abc <TIM_Base_SetConfig+0x130>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d01b      	beq.n	8008a36 <TIM_Base_SetConfig+0xaa>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a2f      	ldr	r2, [pc, #188]	; (8008ac0 <TIM_Base_SetConfig+0x134>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d017      	beq.n	8008a36 <TIM_Base_SetConfig+0xaa>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a2e      	ldr	r2, [pc, #184]	; (8008ac4 <TIM_Base_SetConfig+0x138>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d013      	beq.n	8008a36 <TIM_Base_SetConfig+0xaa>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a2d      	ldr	r2, [pc, #180]	; (8008ac8 <TIM_Base_SetConfig+0x13c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d00f      	beq.n	8008a36 <TIM_Base_SetConfig+0xaa>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a2d      	ldr	r2, [pc, #180]	; (8008ad0 <TIM_Base_SetConfig+0x144>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00b      	beq.n	8008a36 <TIM_Base_SetConfig+0xaa>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a2c      	ldr	r2, [pc, #176]	; (8008ad4 <TIM_Base_SetConfig+0x148>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d007      	beq.n	8008a36 <TIM_Base_SetConfig+0xaa>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a2b      	ldr	r2, [pc, #172]	; (8008ad8 <TIM_Base_SetConfig+0x14c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d003      	beq.n	8008a36 <TIM_Base_SetConfig+0xaa>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a26      	ldr	r2, [pc, #152]	; (8008acc <TIM_Base_SetConfig+0x140>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d108      	bne.n	8008a48 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a12      	ldr	r2, [pc, #72]	; (8008ab8 <TIM_Base_SetConfig+0x12c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d013      	beq.n	8008a9c <TIM_Base_SetConfig+0x110>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a14      	ldr	r2, [pc, #80]	; (8008ac8 <TIM_Base_SetConfig+0x13c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00f      	beq.n	8008a9c <TIM_Base_SetConfig+0x110>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a14      	ldr	r2, [pc, #80]	; (8008ad0 <TIM_Base_SetConfig+0x144>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00b      	beq.n	8008a9c <TIM_Base_SetConfig+0x110>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a13      	ldr	r2, [pc, #76]	; (8008ad4 <TIM_Base_SetConfig+0x148>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d007      	beq.n	8008a9c <TIM_Base_SetConfig+0x110>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a12      	ldr	r2, [pc, #72]	; (8008ad8 <TIM_Base_SetConfig+0x14c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_Base_SetConfig+0x110>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a0d      	ldr	r2, [pc, #52]	; (8008acc <TIM_Base_SetConfig+0x140>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d103      	bne.n	8008aa4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	615a      	str	r2, [r3, #20]
}
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	40012c00 	.word	0x40012c00
 8008abc:	40000400 	.word	0x40000400
 8008ac0:	40000800 	.word	0x40000800
 8008ac4:	40000c00 	.word	0x40000c00
 8008ac8:	40013400 	.word	0x40013400
 8008acc:	40015000 	.word	0x40015000
 8008ad0:	40014000 	.word	0x40014000
 8008ad4:	40014400 	.word	0x40014400
 8008ad8:	40014800 	.word	0x40014800

08008adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	f023 0201 	bic.w	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 0303 	bic.w	r3, r3, #3
 8008b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f023 0302 	bic.w	r3, r3, #2
 8008b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a30      	ldr	r2, [pc, #192]	; (8008bf8 <TIM_OC1_SetConfig+0x11c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d013      	beq.n	8008b64 <TIM_OC1_SetConfig+0x88>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a2f      	ldr	r2, [pc, #188]	; (8008bfc <TIM_OC1_SetConfig+0x120>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00f      	beq.n	8008b64 <TIM_OC1_SetConfig+0x88>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a2e      	ldr	r2, [pc, #184]	; (8008c00 <TIM_OC1_SetConfig+0x124>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d00b      	beq.n	8008b64 <TIM_OC1_SetConfig+0x88>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a2d      	ldr	r2, [pc, #180]	; (8008c04 <TIM_OC1_SetConfig+0x128>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d007      	beq.n	8008b64 <TIM_OC1_SetConfig+0x88>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a2c      	ldr	r2, [pc, #176]	; (8008c08 <TIM_OC1_SetConfig+0x12c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d003      	beq.n	8008b64 <TIM_OC1_SetConfig+0x88>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a2b      	ldr	r2, [pc, #172]	; (8008c0c <TIM_OC1_SetConfig+0x130>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d10c      	bne.n	8008b7e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f023 0308 	bic.w	r3, r3, #8
 8008b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f023 0304 	bic.w	r3, r3, #4
 8008b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a1d      	ldr	r2, [pc, #116]	; (8008bf8 <TIM_OC1_SetConfig+0x11c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d013      	beq.n	8008bae <TIM_OC1_SetConfig+0xd2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a1c      	ldr	r2, [pc, #112]	; (8008bfc <TIM_OC1_SetConfig+0x120>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d00f      	beq.n	8008bae <TIM_OC1_SetConfig+0xd2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a1b      	ldr	r2, [pc, #108]	; (8008c00 <TIM_OC1_SetConfig+0x124>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00b      	beq.n	8008bae <TIM_OC1_SetConfig+0xd2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a1a      	ldr	r2, [pc, #104]	; (8008c04 <TIM_OC1_SetConfig+0x128>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d007      	beq.n	8008bae <TIM_OC1_SetConfig+0xd2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a19      	ldr	r2, [pc, #100]	; (8008c08 <TIM_OC1_SetConfig+0x12c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d003      	beq.n	8008bae <TIM_OC1_SetConfig+0xd2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a18      	ldr	r2, [pc, #96]	; (8008c0c <TIM_OC1_SetConfig+0x130>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d111      	bne.n	8008bd2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	621a      	str	r2, [r3, #32]
}
 8008bec:	bf00      	nop
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	40012c00 	.word	0x40012c00
 8008bfc:	40013400 	.word	0x40013400
 8008c00:	40014000 	.word	0x40014000
 8008c04:	40014400 	.word	0x40014400
 8008c08:	40014800 	.word	0x40014800
 8008c0c:	40015000 	.word	0x40015000

08008c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f023 0210 	bic.w	r2, r3, #16
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	021b      	lsls	r3, r3, #8
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f023 0320 	bic.w	r3, r3, #32
 8008c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a2c      	ldr	r2, [pc, #176]	; (8008d20 <TIM_OC2_SetConfig+0x110>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d007      	beq.n	8008c84 <TIM_OC2_SetConfig+0x74>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a2b      	ldr	r2, [pc, #172]	; (8008d24 <TIM_OC2_SetConfig+0x114>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_OC2_SetConfig+0x74>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a2a      	ldr	r2, [pc, #168]	; (8008d28 <TIM_OC2_SetConfig+0x118>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d10d      	bne.n	8008ca0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a1f      	ldr	r2, [pc, #124]	; (8008d20 <TIM_OC2_SetConfig+0x110>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d013      	beq.n	8008cd0 <TIM_OC2_SetConfig+0xc0>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1e      	ldr	r2, [pc, #120]	; (8008d24 <TIM_OC2_SetConfig+0x114>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00f      	beq.n	8008cd0 <TIM_OC2_SetConfig+0xc0>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a1e      	ldr	r2, [pc, #120]	; (8008d2c <TIM_OC2_SetConfig+0x11c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00b      	beq.n	8008cd0 <TIM_OC2_SetConfig+0xc0>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a1d      	ldr	r2, [pc, #116]	; (8008d30 <TIM_OC2_SetConfig+0x120>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d007      	beq.n	8008cd0 <TIM_OC2_SetConfig+0xc0>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a1c      	ldr	r2, [pc, #112]	; (8008d34 <TIM_OC2_SetConfig+0x124>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d003      	beq.n	8008cd0 <TIM_OC2_SetConfig+0xc0>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <TIM_OC2_SetConfig+0x118>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d113      	bne.n	8008cf8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	40012c00 	.word	0x40012c00
 8008d24:	40013400 	.word	0x40013400
 8008d28:	40015000 	.word	0x40015000
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40014400 	.word	0x40014400
 8008d34:	40014800 	.word	0x40014800

08008d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0303 	bic.w	r3, r3, #3
 8008d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a2b      	ldr	r2, [pc, #172]	; (8008e44 <TIM_OC3_SetConfig+0x10c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d007      	beq.n	8008daa <TIM_OC3_SetConfig+0x72>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a2a      	ldr	r2, [pc, #168]	; (8008e48 <TIM_OC3_SetConfig+0x110>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d003      	beq.n	8008daa <TIM_OC3_SetConfig+0x72>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a29      	ldr	r2, [pc, #164]	; (8008e4c <TIM_OC3_SetConfig+0x114>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d10d      	bne.n	8008dc6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a1e      	ldr	r2, [pc, #120]	; (8008e44 <TIM_OC3_SetConfig+0x10c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d013      	beq.n	8008df6 <TIM_OC3_SetConfig+0xbe>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a1d      	ldr	r2, [pc, #116]	; (8008e48 <TIM_OC3_SetConfig+0x110>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d00f      	beq.n	8008df6 <TIM_OC3_SetConfig+0xbe>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a1d      	ldr	r2, [pc, #116]	; (8008e50 <TIM_OC3_SetConfig+0x118>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00b      	beq.n	8008df6 <TIM_OC3_SetConfig+0xbe>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a1c      	ldr	r2, [pc, #112]	; (8008e54 <TIM_OC3_SetConfig+0x11c>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d007      	beq.n	8008df6 <TIM_OC3_SetConfig+0xbe>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a1b      	ldr	r2, [pc, #108]	; (8008e58 <TIM_OC3_SetConfig+0x120>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d003      	beq.n	8008df6 <TIM_OC3_SetConfig+0xbe>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a16      	ldr	r2, [pc, #88]	; (8008e4c <TIM_OC3_SetConfig+0x114>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d113      	bne.n	8008e1e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	011b      	lsls	r3, r3, #4
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	011b      	lsls	r3, r3, #4
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	621a      	str	r2, [r3, #32]
}
 8008e38:	bf00      	nop
 8008e3a:	371c      	adds	r7, #28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	40012c00 	.word	0x40012c00
 8008e48:	40013400 	.word	0x40013400
 8008e4c:	40015000 	.word	0x40015000
 8008e50:	40014000 	.word	0x40014000
 8008e54:	40014400 	.word	0x40014400
 8008e58:	40014800 	.word	0x40014800

08008e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	031b      	lsls	r3, r3, #12
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a2c      	ldr	r2, [pc, #176]	; (8008f6c <TIM_OC4_SetConfig+0x110>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d007      	beq.n	8008ed0 <TIM_OC4_SetConfig+0x74>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a2b      	ldr	r2, [pc, #172]	; (8008f70 <TIM_OC4_SetConfig+0x114>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d003      	beq.n	8008ed0 <TIM_OC4_SetConfig+0x74>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a2a      	ldr	r2, [pc, #168]	; (8008f74 <TIM_OC4_SetConfig+0x118>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d10d      	bne.n	8008eec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	031b      	lsls	r3, r3, #12
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <TIM_OC4_SetConfig+0x110>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d013      	beq.n	8008f1c <TIM_OC4_SetConfig+0xc0>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a1e      	ldr	r2, [pc, #120]	; (8008f70 <TIM_OC4_SetConfig+0x114>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d00f      	beq.n	8008f1c <TIM_OC4_SetConfig+0xc0>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a1e      	ldr	r2, [pc, #120]	; (8008f78 <TIM_OC4_SetConfig+0x11c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d00b      	beq.n	8008f1c <TIM_OC4_SetConfig+0xc0>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a1d      	ldr	r2, [pc, #116]	; (8008f7c <TIM_OC4_SetConfig+0x120>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d007      	beq.n	8008f1c <TIM_OC4_SetConfig+0xc0>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a1c      	ldr	r2, [pc, #112]	; (8008f80 <TIM_OC4_SetConfig+0x124>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d003      	beq.n	8008f1c <TIM_OC4_SetConfig+0xc0>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a17      	ldr	r2, [pc, #92]	; (8008f74 <TIM_OC4_SetConfig+0x118>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d113      	bne.n	8008f44 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	019b      	lsls	r3, r3, #6
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	019b      	lsls	r3, r3, #6
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	621a      	str	r2, [r3, #32]
}
 8008f5e:	bf00      	nop
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	40012c00 	.word	0x40012c00
 8008f70:	40013400 	.word	0x40013400
 8008f74:	40015000 	.word	0x40015000
 8008f78:	40014000 	.word	0x40014000
 8008f7c:	40014400 	.word	0x40014400
 8008f80:	40014800 	.word	0x40014800

08008f84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	041b      	lsls	r3, r3, #16
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a19      	ldr	r2, [pc, #100]	; (8009040 <TIM_OC5_SetConfig+0xbc>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d013      	beq.n	8009006 <TIM_OC5_SetConfig+0x82>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a18      	ldr	r2, [pc, #96]	; (8009044 <TIM_OC5_SetConfig+0xc0>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d00f      	beq.n	8009006 <TIM_OC5_SetConfig+0x82>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a17      	ldr	r2, [pc, #92]	; (8009048 <TIM_OC5_SetConfig+0xc4>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d00b      	beq.n	8009006 <TIM_OC5_SetConfig+0x82>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a16      	ldr	r2, [pc, #88]	; (800904c <TIM_OC5_SetConfig+0xc8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d007      	beq.n	8009006 <TIM_OC5_SetConfig+0x82>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a15      	ldr	r2, [pc, #84]	; (8009050 <TIM_OC5_SetConfig+0xcc>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d003      	beq.n	8009006 <TIM_OC5_SetConfig+0x82>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a14      	ldr	r2, [pc, #80]	; (8009054 <TIM_OC5_SetConfig+0xd0>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d109      	bne.n	800901a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800900c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	4313      	orrs	r3, r2
 8009018:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	621a      	str	r2, [r3, #32]
}
 8009034:	bf00      	nop
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	40012c00 	.word	0x40012c00
 8009044:	40013400 	.word	0x40013400
 8009048:	40014000 	.word	0x40014000
 800904c:	40014400 	.word	0x40014400
 8009050:	40014800 	.word	0x40014800
 8009054:	40015000 	.word	0x40015000

08009058 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800908a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	021b      	lsls	r3, r3, #8
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800909e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	051b      	lsls	r3, r3, #20
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a1a      	ldr	r2, [pc, #104]	; (8009118 <TIM_OC6_SetConfig+0xc0>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d013      	beq.n	80090dc <TIM_OC6_SetConfig+0x84>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a19      	ldr	r2, [pc, #100]	; (800911c <TIM_OC6_SetConfig+0xc4>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d00f      	beq.n	80090dc <TIM_OC6_SetConfig+0x84>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a18      	ldr	r2, [pc, #96]	; (8009120 <TIM_OC6_SetConfig+0xc8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d00b      	beq.n	80090dc <TIM_OC6_SetConfig+0x84>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a17      	ldr	r2, [pc, #92]	; (8009124 <TIM_OC6_SetConfig+0xcc>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d007      	beq.n	80090dc <TIM_OC6_SetConfig+0x84>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a16      	ldr	r2, [pc, #88]	; (8009128 <TIM_OC6_SetConfig+0xd0>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d003      	beq.n	80090dc <TIM_OC6_SetConfig+0x84>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a15      	ldr	r2, [pc, #84]	; (800912c <TIM_OC6_SetConfig+0xd4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d109      	bne.n	80090f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	029b      	lsls	r3, r3, #10
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	621a      	str	r2, [r3, #32]
}
 800910a:	bf00      	nop
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	40012c00 	.word	0x40012c00
 800911c:	40013400 	.word	0x40013400
 8009120:	40014000 	.word	0x40014000
 8009124:	40014400 	.word	0x40014400
 8009128:	40014800 	.word	0x40014800
 800912c:	40015000 	.word	0x40015000

08009130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f023 0201 	bic.w	r2, r3, #1
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800915a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	4313      	orrs	r3, r2
 8009164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f023 030a 	bic.w	r3, r3, #10
 800916c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	4313      	orrs	r3, r2
 8009174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	621a      	str	r2, [r3, #32]
}
 8009182:	bf00      	nop
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800918e:	b480      	push	{r7}
 8009190:	b087      	sub	sp, #28
 8009192:	af00      	add	r7, sp, #0
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f023 0210 	bic.w	r2, r3, #16
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	031b      	lsls	r3, r3, #12
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	011b      	lsls	r3, r3, #4
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	621a      	str	r2, [r3, #32]
}
 80091e2:	bf00      	nop
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b085      	sub	sp, #20
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	f043 0307 	orr.w	r3, r3, #7
 8009214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	609a      	str	r2, [r3, #8]
}
 800921c:	bf00      	nop
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	021a      	lsls	r2, r3, #8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	431a      	orrs	r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4313      	orrs	r3, r2
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	4313      	orrs	r3, r2
 8009254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	609a      	str	r2, [r3, #8]
}
 800925c:	bf00      	nop
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800927c:	2302      	movs	r3, #2
 800927e:	e074      	b.n	800936a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a34      	ldr	r2, [pc, #208]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d009      	beq.n	80092be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a33      	ldr	r2, [pc, #204]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d004      	beq.n	80092be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a31      	ldr	r2, [pc, #196]	; (8009380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d108      	bne.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80092d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a21      	ldr	r2, [pc, #132]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d022      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009300:	d01d      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a1f      	ldr	r2, [pc, #124]	; (8009384 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d018      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a1d      	ldr	r2, [pc, #116]	; (8009388 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d013      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a1c      	ldr	r2, [pc, #112]	; (800938c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d00e      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a15      	ldr	r2, [pc, #84]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d009      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a18      	ldr	r2, [pc, #96]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d004      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a11      	ldr	r2, [pc, #68]	; (8009380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d10c      	bne.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4313      	orrs	r3, r2
 800934e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	40012c00 	.word	0x40012c00
 800937c:	40013400 	.word	0x40013400
 8009380:	40015000 	.word	0x40015000
 8009384:	40000400 	.word	0x40000400
 8009388:	40000800 	.word	0x40000800
 800938c:	40000c00 	.word	0x40000c00
 8009390:	40014000 	.word	0x40014000

08009394 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d101      	bne.n	80093b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e096      	b.n	80094de <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	4313      	orrs	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009416:	4313      	orrs	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	041b      	lsls	r3, r3, #16
 8009426:	4313      	orrs	r3, r2
 8009428:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a2f      	ldr	r2, [pc, #188]	; (80094ec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d009      	beq.n	8009448 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a2d      	ldr	r2, [pc, #180]	; (80094f0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d004      	beq.n	8009448 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a2c      	ldr	r2, [pc, #176]	; (80094f4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d106      	bne.n	8009456 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a24      	ldr	r2, [pc, #144]	; (80094ec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d009      	beq.n	8009474 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a22      	ldr	r2, [pc, #136]	; (80094f0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d004      	beq.n	8009474 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a21      	ldr	r2, [pc, #132]	; (80094f4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d12b      	bne.n	80094cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947e:	051b      	lsls	r3, r3, #20
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	4313      	orrs	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a11      	ldr	r2, [pc, #68]	; (80094ec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d009      	beq.n	80094be <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a10      	ldr	r2, [pc, #64]	; (80094f0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d004      	beq.n	80094be <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a0e      	ldr	r2, [pc, #56]	; (80094f4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d106      	bne.n	80094cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	4313      	orrs	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	40012c00 	.word	0x40012c00
 80094f0:	40013400 	.word	0x40013400
 80094f4:	40015000 	.word	0x40015000

080094f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e042      	b.n	800961c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800959c:	2b00      	cmp	r3, #0
 800959e:	d106      	bne.n	80095ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7f9 fc89 	bl	8002ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2224      	movs	r2, #36	; 0x24
 80095b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0201 	bic.w	r2, r2, #1
 80095c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f8c2 	bl	8009750 <UART_SetConfig>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e022      	b.n	800961c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fbb2 	bl	8009d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689a      	ldr	r2, [r3, #8]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0201 	orr.w	r2, r2, #1
 8009612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fc39 	bl	8009e8c <UART_CheckIdleState>
 800961a:	4603      	mov	r3, r0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	; 0x28
 8009628:	af02      	add	r7, sp, #8
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	4613      	mov	r3, r2
 8009632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800963a:	2b20      	cmp	r3, #32
 800963c:	f040 8083 	bne.w	8009746 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <HAL_UART_Transmit+0x28>
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e07b      	b.n	8009748 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_UART_Transmit+0x3a>
 800965a:	2302      	movs	r3, #2
 800965c:	e074      	b.n	8009748 <HAL_UART_Transmit+0x124>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2221      	movs	r2, #33	; 0x21
 8009672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009676:	f7f9 ffcf 	bl	8003618 <HAL_GetTick>
 800967a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	88fa      	ldrh	r2, [r7, #6]
 8009680:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	88fa      	ldrh	r2, [r7, #6]
 8009688:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009694:	d108      	bne.n	80096a8 <HAL_UART_Transmit+0x84>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d104      	bne.n	80096a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	61bb      	str	r3, [r7, #24]
 80096a6:	e003      	b.n	80096b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80096b8:	e02c      	b.n	8009714 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2200      	movs	r2, #0
 80096c2:	2180      	movs	r1, #128	; 0x80
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 fc2c 	bl	8009f22 <UART_WaitOnFlagUntilTimeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e039      	b.n	8009748 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10b      	bne.n	80096f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	3302      	adds	r3, #2
 80096ee:	61bb      	str	r3, [r7, #24]
 80096f0:	e007      	b.n	8009702 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	781a      	ldrb	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	3301      	adds	r3, #1
 8009700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800971a:	b29b      	uxth	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1cc      	bne.n	80096ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2200      	movs	r2, #0
 8009728:	2140      	movs	r1, #64	; 0x40
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 fbf9 	bl	8009f22 <UART_WaitOnFlagUntilTimeout>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e006      	b.n	8009748 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	e000      	b.n	8009748 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009746:	2302      	movs	r3, #2
  }
}
 8009748:	4618      	mov	r0, r3
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009754:	b08c      	sub	sp, #48	; 0x30
 8009756:	af00      	add	r7, sp, #0
 8009758:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	431a      	orrs	r2, r3
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	431a      	orrs	r2, r3
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	4313      	orrs	r3, r2
 8009776:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	4baa      	ldr	r3, [pc, #680]	; (8009a28 <UART_SetConfig+0x2d8>)
 8009780:	4013      	ands	r3, r2
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	6812      	ldr	r2, [r2, #0]
 8009786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009788:	430b      	orrs	r3, r1
 800978a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a9f      	ldr	r2, [pc, #636]	; (8009a2c <UART_SetConfig+0x2dc>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d004      	beq.n	80097bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097b8:	4313      	orrs	r3, r2
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80097c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	6812      	ldr	r2, [r2, #0]
 80097ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097d0:	430b      	orrs	r3, r1
 80097d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097da:	f023 010f 	bic.w	r1, r3, #15
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a90      	ldr	r2, [pc, #576]	; (8009a30 <UART_SetConfig+0x2e0>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d125      	bne.n	8009840 <UART_SetConfig+0xf0>
 80097f4:	4b8f      	ldr	r3, [pc, #572]	; (8009a34 <UART_SetConfig+0x2e4>)
 80097f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d81a      	bhi.n	8009838 <UART_SetConfig+0xe8>
 8009802:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <UART_SetConfig+0xb8>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	08009819 	.word	0x08009819
 800980c:	08009829 	.word	0x08009829
 8009810:	08009821 	.word	0x08009821
 8009814:	08009831 	.word	0x08009831
 8009818:	2301      	movs	r3, #1
 800981a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800981e:	e116      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009820:	2302      	movs	r3, #2
 8009822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009826:	e112      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009828:	2304      	movs	r3, #4
 800982a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800982e:	e10e      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009830:	2308      	movs	r3, #8
 8009832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009836:	e10a      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009838:	2310      	movs	r3, #16
 800983a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800983e:	e106      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a7c      	ldr	r2, [pc, #496]	; (8009a38 <UART_SetConfig+0x2e8>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d138      	bne.n	80098bc <UART_SetConfig+0x16c>
 800984a:	4b7a      	ldr	r3, [pc, #488]	; (8009a34 <UART_SetConfig+0x2e4>)
 800984c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009850:	f003 030c 	and.w	r3, r3, #12
 8009854:	2b0c      	cmp	r3, #12
 8009856:	d82d      	bhi.n	80098b4 <UART_SetConfig+0x164>
 8009858:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <UART_SetConfig+0x110>)
 800985a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985e:	bf00      	nop
 8009860:	08009895 	.word	0x08009895
 8009864:	080098b5 	.word	0x080098b5
 8009868:	080098b5 	.word	0x080098b5
 800986c:	080098b5 	.word	0x080098b5
 8009870:	080098a5 	.word	0x080098a5
 8009874:	080098b5 	.word	0x080098b5
 8009878:	080098b5 	.word	0x080098b5
 800987c:	080098b5 	.word	0x080098b5
 8009880:	0800989d 	.word	0x0800989d
 8009884:	080098b5 	.word	0x080098b5
 8009888:	080098b5 	.word	0x080098b5
 800988c:	080098b5 	.word	0x080098b5
 8009890:	080098ad 	.word	0x080098ad
 8009894:	2300      	movs	r3, #0
 8009896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800989a:	e0d8      	b.n	8009a4e <UART_SetConfig+0x2fe>
 800989c:	2302      	movs	r3, #2
 800989e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098a2:	e0d4      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80098a4:	2304      	movs	r3, #4
 80098a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098aa:	e0d0      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80098ac:	2308      	movs	r3, #8
 80098ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098b2:	e0cc      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80098b4:	2310      	movs	r3, #16
 80098b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ba:	e0c8      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a5e      	ldr	r2, [pc, #376]	; (8009a3c <UART_SetConfig+0x2ec>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d125      	bne.n	8009912 <UART_SetConfig+0x1c2>
 80098c6:	4b5b      	ldr	r3, [pc, #364]	; (8009a34 <UART_SetConfig+0x2e4>)
 80098c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098d0:	2b30      	cmp	r3, #48	; 0x30
 80098d2:	d016      	beq.n	8009902 <UART_SetConfig+0x1b2>
 80098d4:	2b30      	cmp	r3, #48	; 0x30
 80098d6:	d818      	bhi.n	800990a <UART_SetConfig+0x1ba>
 80098d8:	2b20      	cmp	r3, #32
 80098da:	d00a      	beq.n	80098f2 <UART_SetConfig+0x1a2>
 80098dc:	2b20      	cmp	r3, #32
 80098de:	d814      	bhi.n	800990a <UART_SetConfig+0x1ba>
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <UART_SetConfig+0x19a>
 80098e4:	2b10      	cmp	r3, #16
 80098e6:	d008      	beq.n	80098fa <UART_SetConfig+0x1aa>
 80098e8:	e00f      	b.n	800990a <UART_SetConfig+0x1ba>
 80098ea:	2300      	movs	r3, #0
 80098ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098f0:	e0ad      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80098f2:	2302      	movs	r3, #2
 80098f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098f8:	e0a9      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80098fa:	2304      	movs	r3, #4
 80098fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009900:	e0a5      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009902:	2308      	movs	r3, #8
 8009904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009908:	e0a1      	b.n	8009a4e <UART_SetConfig+0x2fe>
 800990a:	2310      	movs	r3, #16
 800990c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009910:	e09d      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a4a      	ldr	r2, [pc, #296]	; (8009a40 <UART_SetConfig+0x2f0>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d125      	bne.n	8009968 <UART_SetConfig+0x218>
 800991c:	4b45      	ldr	r3, [pc, #276]	; (8009a34 <UART_SetConfig+0x2e4>)
 800991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009922:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009926:	2bc0      	cmp	r3, #192	; 0xc0
 8009928:	d016      	beq.n	8009958 <UART_SetConfig+0x208>
 800992a:	2bc0      	cmp	r3, #192	; 0xc0
 800992c:	d818      	bhi.n	8009960 <UART_SetConfig+0x210>
 800992e:	2b80      	cmp	r3, #128	; 0x80
 8009930:	d00a      	beq.n	8009948 <UART_SetConfig+0x1f8>
 8009932:	2b80      	cmp	r3, #128	; 0x80
 8009934:	d814      	bhi.n	8009960 <UART_SetConfig+0x210>
 8009936:	2b00      	cmp	r3, #0
 8009938:	d002      	beq.n	8009940 <UART_SetConfig+0x1f0>
 800993a:	2b40      	cmp	r3, #64	; 0x40
 800993c:	d008      	beq.n	8009950 <UART_SetConfig+0x200>
 800993e:	e00f      	b.n	8009960 <UART_SetConfig+0x210>
 8009940:	2300      	movs	r3, #0
 8009942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009946:	e082      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009948:	2302      	movs	r3, #2
 800994a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800994e:	e07e      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009950:	2304      	movs	r3, #4
 8009952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009956:	e07a      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009958:	2308      	movs	r3, #8
 800995a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800995e:	e076      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009960:	2310      	movs	r3, #16
 8009962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009966:	e072      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a35      	ldr	r2, [pc, #212]	; (8009a44 <UART_SetConfig+0x2f4>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d12a      	bne.n	80099c8 <UART_SetConfig+0x278>
 8009972:	4b30      	ldr	r3, [pc, #192]	; (8009a34 <UART_SetConfig+0x2e4>)
 8009974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800997c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009980:	d01a      	beq.n	80099b8 <UART_SetConfig+0x268>
 8009982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009986:	d81b      	bhi.n	80099c0 <UART_SetConfig+0x270>
 8009988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800998c:	d00c      	beq.n	80099a8 <UART_SetConfig+0x258>
 800998e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009992:	d815      	bhi.n	80099c0 <UART_SetConfig+0x270>
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <UART_SetConfig+0x250>
 8009998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800999c:	d008      	beq.n	80099b0 <UART_SetConfig+0x260>
 800999e:	e00f      	b.n	80099c0 <UART_SetConfig+0x270>
 80099a0:	2300      	movs	r3, #0
 80099a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099a6:	e052      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80099a8:	2302      	movs	r3, #2
 80099aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ae:	e04e      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80099b0:	2304      	movs	r3, #4
 80099b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099b6:	e04a      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80099b8:	2308      	movs	r3, #8
 80099ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099be:	e046      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80099c0:	2310      	movs	r3, #16
 80099c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099c6:	e042      	b.n	8009a4e <UART_SetConfig+0x2fe>
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a17      	ldr	r2, [pc, #92]	; (8009a2c <UART_SetConfig+0x2dc>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d13a      	bne.n	8009a48 <UART_SetConfig+0x2f8>
 80099d2:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <UART_SetConfig+0x2e4>)
 80099d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80099dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099e0:	d01a      	beq.n	8009a18 <UART_SetConfig+0x2c8>
 80099e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099e6:	d81b      	bhi.n	8009a20 <UART_SetConfig+0x2d0>
 80099e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099ec:	d00c      	beq.n	8009a08 <UART_SetConfig+0x2b8>
 80099ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099f2:	d815      	bhi.n	8009a20 <UART_SetConfig+0x2d0>
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <UART_SetConfig+0x2b0>
 80099f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099fc:	d008      	beq.n	8009a10 <UART_SetConfig+0x2c0>
 80099fe:	e00f      	b.n	8009a20 <UART_SetConfig+0x2d0>
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a06:	e022      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a0e:	e01e      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009a10:	2304      	movs	r3, #4
 8009a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a16:	e01a      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009a18:	2308      	movs	r3, #8
 8009a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a1e:	e016      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009a20:	2310      	movs	r3, #16
 8009a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a26:	e012      	b.n	8009a4e <UART_SetConfig+0x2fe>
 8009a28:	cfff69f3 	.word	0xcfff69f3
 8009a2c:	40008000 	.word	0x40008000
 8009a30:	40013800 	.word	0x40013800
 8009a34:	40021000 	.word	0x40021000
 8009a38:	40004400 	.word	0x40004400
 8009a3c:	40004800 	.word	0x40004800
 8009a40:	40004c00 	.word	0x40004c00
 8009a44:	40005000 	.word	0x40005000
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4aae      	ldr	r2, [pc, #696]	; (8009d0c <UART_SetConfig+0x5bc>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	f040 8097 	bne.w	8009b88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a5e:	2b08      	cmp	r3, #8
 8009a60:	d823      	bhi.n	8009aaa <UART_SetConfig+0x35a>
 8009a62:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <UART_SetConfig+0x318>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009a8d 	.word	0x08009a8d
 8009a6c:	08009aab 	.word	0x08009aab
 8009a70:	08009a95 	.word	0x08009a95
 8009a74:	08009aab 	.word	0x08009aab
 8009a78:	08009a9b 	.word	0x08009a9b
 8009a7c:	08009aab 	.word	0x08009aab
 8009a80:	08009aab 	.word	0x08009aab
 8009a84:	08009aab 	.word	0x08009aab
 8009a88:	08009aa3 	.word	0x08009aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a8c:	f7fd ff38 	bl	8007900 <HAL_RCC_GetPCLK1Freq>
 8009a90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a92:	e010      	b.n	8009ab6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a94:	4b9e      	ldr	r3, [pc, #632]	; (8009d10 <UART_SetConfig+0x5c0>)
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a98:	e00d      	b.n	8009ab6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a9a:	f7fd fec3 	bl	8007824 <HAL_RCC_GetSysClockFreq>
 8009a9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009aa0:	e009      	b.n	8009ab6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009aa8:	e005      	b.n	8009ab6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ab4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8130 	beq.w	8009d1e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	4a94      	ldr	r2, [pc, #592]	; (8009d14 <UART_SetConfig+0x5c4>)
 8009ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ad0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d305      	bcc.n	8009aee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d903      	bls.n	8009af6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009af4:	e113      	b.n	8009d1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	2200      	movs	r2, #0
 8009afa:	60bb      	str	r3, [r7, #8]
 8009afc:	60fa      	str	r2, [r7, #12]
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	4a84      	ldr	r2, [pc, #528]	; (8009d14 <UART_SetConfig+0x5c4>)
 8009b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	603b      	str	r3, [r7, #0]
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b18:	f7f6 fff0 	bl	8000afc <__aeabi_uldivmod>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4610      	mov	r0, r2
 8009b22:	4619      	mov	r1, r3
 8009b24:	f04f 0200 	mov.w	r2, #0
 8009b28:	f04f 0300 	mov.w	r3, #0
 8009b2c:	020b      	lsls	r3, r1, #8
 8009b2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b32:	0202      	lsls	r2, r0, #8
 8009b34:	6979      	ldr	r1, [r7, #20]
 8009b36:	6849      	ldr	r1, [r1, #4]
 8009b38:	0849      	lsrs	r1, r1, #1
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	4605      	mov	r5, r0
 8009b40:	eb12 0804 	adds.w	r8, r2, r4
 8009b44:	eb43 0905 	adc.w	r9, r3, r5
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	469a      	mov	sl, r3
 8009b50:	4693      	mov	fp, r2
 8009b52:	4652      	mov	r2, sl
 8009b54:	465b      	mov	r3, fp
 8009b56:	4640      	mov	r0, r8
 8009b58:	4649      	mov	r1, r9
 8009b5a:	f7f6 ffcf 	bl	8000afc <__aeabi_uldivmod>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4613      	mov	r3, r2
 8009b64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b6c:	d308      	bcc.n	8009b80 <UART_SetConfig+0x430>
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b74:	d204      	bcs.n	8009b80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6a3a      	ldr	r2, [r7, #32]
 8009b7c:	60da      	str	r2, [r3, #12]
 8009b7e:	e0ce      	b.n	8009d1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b86:	e0ca      	b.n	8009d1e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b90:	d166      	bne.n	8009c60 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009b92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b96:	2b08      	cmp	r3, #8
 8009b98:	d827      	bhi.n	8009bea <UART_SetConfig+0x49a>
 8009b9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <UART_SetConfig+0x450>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009bc5 	.word	0x08009bc5
 8009ba4:	08009bcd 	.word	0x08009bcd
 8009ba8:	08009bd5 	.word	0x08009bd5
 8009bac:	08009beb 	.word	0x08009beb
 8009bb0:	08009bdb 	.word	0x08009bdb
 8009bb4:	08009beb 	.word	0x08009beb
 8009bb8:	08009beb 	.word	0x08009beb
 8009bbc:	08009beb 	.word	0x08009beb
 8009bc0:	08009be3 	.word	0x08009be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bc4:	f7fd fe9c 	bl	8007900 <HAL_RCC_GetPCLK1Freq>
 8009bc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bca:	e014      	b.n	8009bf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bcc:	f7fd feae 	bl	800792c <HAL_RCC_GetPCLK2Freq>
 8009bd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bd2:	e010      	b.n	8009bf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bd4:	4b4e      	ldr	r3, [pc, #312]	; (8009d10 <UART_SetConfig+0x5c0>)
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bd8:	e00d      	b.n	8009bf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bda:	f7fd fe23 	bl	8007824 <HAL_RCC_GetSysClockFreq>
 8009bde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009be0:	e009      	b.n	8009bf6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009be8:	e005      	b.n	8009bf6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 8090 	beq.w	8009d1e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	4a44      	ldr	r2, [pc, #272]	; (8009d14 <UART_SetConfig+0x5c4>)
 8009c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c10:	005a      	lsls	r2, r3, #1
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	085b      	lsrs	r3, r3, #1
 8009c18:	441a      	add	r2, r3
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	2b0f      	cmp	r3, #15
 8009c28:	d916      	bls.n	8009c58 <UART_SetConfig+0x508>
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c30:	d212      	bcs.n	8009c58 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f023 030f 	bic.w	r3, r3, #15
 8009c3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	085b      	lsrs	r3, r3, #1
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	f003 0307 	and.w	r3, r3, #7
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	8bfb      	ldrh	r3, [r7, #30]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	8bfa      	ldrh	r2, [r7, #30]
 8009c54:	60da      	str	r2, [r3, #12]
 8009c56:	e062      	b.n	8009d1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c5e:	e05e      	b.n	8009d1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c64:	2b08      	cmp	r3, #8
 8009c66:	d828      	bhi.n	8009cba <UART_SetConfig+0x56a>
 8009c68:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <UART_SetConfig+0x520>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009c95 	.word	0x08009c95
 8009c74:	08009c9d 	.word	0x08009c9d
 8009c78:	08009ca5 	.word	0x08009ca5
 8009c7c:	08009cbb 	.word	0x08009cbb
 8009c80:	08009cab 	.word	0x08009cab
 8009c84:	08009cbb 	.word	0x08009cbb
 8009c88:	08009cbb 	.word	0x08009cbb
 8009c8c:	08009cbb 	.word	0x08009cbb
 8009c90:	08009cb3 	.word	0x08009cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c94:	f7fd fe34 	bl	8007900 <HAL_RCC_GetPCLK1Freq>
 8009c98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c9a:	e014      	b.n	8009cc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c9c:	f7fd fe46 	bl	800792c <HAL_RCC_GetPCLK2Freq>
 8009ca0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ca2:	e010      	b.n	8009cc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca4:	4b1a      	ldr	r3, [pc, #104]	; (8009d10 <UART_SetConfig+0x5c0>)
 8009ca6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ca8:	e00d      	b.n	8009cc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009caa:	f7fd fdbb 	bl	8007824 <HAL_RCC_GetSysClockFreq>
 8009cae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cb0:	e009      	b.n	8009cc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009cb8:	e005      	b.n	8009cc6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009cc4:	bf00      	nop
    }

    if (pclk != 0U)
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d028      	beq.n	8009d1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	4a10      	ldr	r2, [pc, #64]	; (8009d14 <UART_SetConfig+0x5c4>)
 8009cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	085b      	lsrs	r3, r3, #1
 8009ce4:	441a      	add	r2, r3
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	2b0f      	cmp	r3, #15
 8009cf4:	d910      	bls.n	8009d18 <UART_SetConfig+0x5c8>
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cfc:	d20c      	bcs.n	8009d18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60da      	str	r2, [r3, #12]
 8009d08:	e009      	b.n	8009d1e <UART_SetConfig+0x5ce>
 8009d0a:	bf00      	nop
 8009d0c:	40008000 	.word	0x40008000
 8009d10:	00f42400 	.word	0x00f42400
 8009d14:	0800b2a8 	.word	0x0800b2a8
      }
      else
      {
        ret = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2200      	movs	r2, #0
 8009d32:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2200      	movs	r2, #0
 8009d38:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009d3a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3730      	adds	r7, #48	; 0x30
 8009d42:	46bd      	mov	sp, r7
 8009d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	f003 0308 	and.w	r3, r3, #8
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	f003 0310 	and.w	r3, r3, #16
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01a      	beq.n	8009e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e46:	d10a      	bne.n	8009e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	605a      	str	r2, [r3, #4]
  }
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e9c:	f7f9 fbbc 	bl	8003618 <HAL_GetTick>
 8009ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0308 	and.w	r3, r3, #8
 8009eac:	2b08      	cmp	r3, #8
 8009eae:	d10e      	bne.n	8009ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f82f 	bl	8009f22 <UART_WaitOnFlagUntilTimeout>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e025      	b.n	8009f1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0304 	and.w	r3, r3, #4
 8009ed8:	2b04      	cmp	r3, #4
 8009eda:	d10e      	bne.n	8009efa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f819 	bl	8009f22 <UART_WaitOnFlagUntilTimeout>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e00f      	b.n	8009f1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b09c      	sub	sp, #112	; 0x70
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	603b      	str	r3, [r7, #0]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f32:	e0a9      	b.n	800a088 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3a:	f000 80a5 	beq.w	800a088 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f3e:	f7f9 fb6b 	bl	8003618 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d302      	bcc.n	8009f54 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d140      	bne.n	8009fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f68:	667b      	str	r3, [r7, #100]	; 0x64
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e6      	bne.n	8009f54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f90:	e853 3f00 	ldrex	r3, [r3]
 8009f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f98:	f023 0301 	bic.w	r3, r3, #1
 8009f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3308      	adds	r3, #8
 8009fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009fa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fae:	e841 2300 	strex	r3, r2, [r1]
 8009fb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1e5      	bne.n	8009f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e069      	b.n	800a0aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d051      	beq.n	800a088 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ff2:	d149      	bne.n	800a088 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ffc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a012:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a01c:	637b      	str	r3, [r7, #52]	; 0x34
 800a01e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e6      	bne.n	8009ffe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3308      	adds	r3, #8
 800a036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	e853 3f00 	ldrex	r3, [r3]
 800a03e:	613b      	str	r3, [r7, #16]
   return(result);
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f023 0301 	bic.w	r3, r3, #1
 800a046:	66bb      	str	r3, [r7, #104]	; 0x68
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3308      	adds	r3, #8
 800a04e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a050:	623a      	str	r2, [r7, #32]
 800a052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	69f9      	ldr	r1, [r7, #28]
 800a056:	6a3a      	ldr	r2, [r7, #32]
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e5      	bne.n	800a030 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2220      	movs	r2, #32
 800a068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2220      	movs	r2, #32
 800a070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2220      	movs	r2, #32
 800a078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e010      	b.n	800a0aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	69da      	ldr	r2, [r3, #28]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	4013      	ands	r3, r2
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	429a      	cmp	r2, r3
 800a096:	bf0c      	ite	eq
 800a098:	2301      	moveq	r3, #1
 800a09a:	2300      	movne	r3, #0
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	461a      	mov	r2, r3
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	f43f af46 	beq.w	8009f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3770      	adds	r7, #112	; 0x70
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b085      	sub	sp, #20
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d101      	bne.n	800a0c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	e027      	b.n	800a118 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2224      	movs	r2, #36	; 0x24
 800a0d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f022 0201 	bic.w	r2, r2, #1
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a134:	2b01      	cmp	r3, #1
 800a136:	d101      	bne.n	800a13c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a138:	2302      	movs	r3, #2
 800a13a:	e02d      	b.n	800a198 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2224      	movs	r2, #36	; 0x24
 800a148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0201 	bic.w	r2, r2, #1
 800a162:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f84f 	bl	800a21c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2220      	movs	r2, #32
 800a18a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e02d      	b.n	800a214 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2224      	movs	r2, #36	; 0x24
 800a1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0201 	bic.w	r2, r2, #1
 800a1de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f811 	bl	800a21c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2220      	movs	r2, #32
 800a206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d108      	bne.n	800a23e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a23c:	e031      	b.n	800a2a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a23e:	2308      	movs	r3, #8
 800a240:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a242:	2308      	movs	r3, #8
 800a244:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	0e5b      	lsrs	r3, r3, #25
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	f003 0307 	and.w	r3, r3, #7
 800a254:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	0f5b      	lsrs	r3, r3, #29
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 0307 	and.w	r3, r3, #7
 800a264:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	7b3a      	ldrb	r2, [r7, #12]
 800a26a:	4911      	ldr	r1, [pc, #68]	; (800a2b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a26c:	5c8a      	ldrb	r2, [r1, r2]
 800a26e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a272:	7b3a      	ldrb	r2, [r7, #12]
 800a274:	490f      	ldr	r1, [pc, #60]	; (800a2b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a276:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a278:	fb93 f3f2 	sdiv	r3, r3, r2
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	7b7a      	ldrb	r2, [r7, #13]
 800a288:	4909      	ldr	r1, [pc, #36]	; (800a2b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a28a:	5c8a      	ldrb	r2, [r1, r2]
 800a28c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a290:	7b7a      	ldrb	r2, [r7, #13]
 800a292:	4908      	ldr	r1, [pc, #32]	; (800a2b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a294:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a296:	fb93 f3f2 	sdiv	r3, r3, r2
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a2a2:	bf00      	nop
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	0800b2c0 	.word	0x0800b2c0
 800a2b4:	0800b2c8 	.word	0x0800b2c8

0800a2b8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	6812      	ldr	r2, [r2, #0]
 800a2d0:	f023 0101 	bic.w	r1, r3, #1
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	2b08      	cmp	r3, #8
 800a2e0:	d102      	bne.n	800a2e8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a2e2:	2340      	movs	r3, #64	; 0x40
 800a2e4:	617b      	str	r3, [r7, #20]
 800a2e6:	e001      	b.n	800a2ec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a2f8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a2fe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a304:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a30a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a310:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a316:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a31c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a322:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a328:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a32e:	4313      	orrs	r3, r2
 800a330:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	4313      	orrs	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	4313      	orrs	r3, r2
 800a358:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800a35a:	4b3e      	ldr	r3, [pc, #248]	; (800a454 <FMC_NORSRAM_Init+0x19c>)
 800a35c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a364:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a36c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800a374:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a37c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	43db      	mvns	r3, r3
 800a38c:	ea02 0103 	and.w	r1, r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	4319      	orrs	r1, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3a6:	d10c      	bne.n	800a3c2 <FMC_NORSRAM_Init+0x10a>
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d008      	beq.n	800a3c2 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d006      	beq.n	800a3d8 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d2:	431a      	orrs	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d12f      	bne.n	800a442 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	0c1b      	lsrs	r3, r3, #16
 800a3e8:	041b      	lsls	r3, r3, #16
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b04      	cmp	r3, #4
 800a3fa:	d014      	beq.n	800a426 <FMC_NORSRAM_Init+0x16e>
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d819      	bhi.n	800a434 <FMC_NORSRAM_Init+0x17c>
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <FMC_NORSRAM_Init+0x152>
 800a404:	2b02      	cmp	r3, #2
 800a406:	d007      	beq.n	800a418 <FMC_NORSRAM_Init+0x160>
 800a408:	e014      	b.n	800a434 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	621a      	str	r2, [r3, #32]
        break;
 800a416:	e015      	b.n	800a444 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	621a      	str	r2, [r3, #32]
        break;
 800a424:	e00e      	b.n	800a444 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	621a      	str	r2, [r3, #32]
        break;
 800a432:	e007      	b.n	800a444 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	621a      	str	r2, [r3, #32]
        break;
 800a440:	e000      	b.n	800a444 <FMC_NORSRAM_Init+0x18c>
    }
  }
 800a442:	bf00      	nop

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	0008fb7f 	.word	0x0008fb7f

0800a458 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	1c5a      	adds	r2, r3, #1
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	011b      	lsls	r3, r3, #4
 800a478:	431a      	orrs	r2, r3
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	431a      	orrs	r2, r3
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	079b      	lsls	r3, r3, #30
 800a488:	431a      	orrs	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	041b      	lsls	r3, r3, #16
 800a490:	431a      	orrs	r2, r3
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	3b01      	subs	r3, #1
 800a498:	051b      	lsls	r3, r3, #20
 800a49a:	431a      	orrs	r2, r3
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	3b02      	subs	r3, #2
 800a4a2:	061b      	lsls	r3, r3, #24
 800a4a4:	ea42 0103 	orr.w	r1, r2, r3
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	3201      	adds	r2, #1
 800a4b0:	4319      	orrs	r1, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4c4:	d113      	bne.n	800a4ee <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4ce:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	051b      	lsls	r3, r3, #20
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	371c      	adds	r7, #28
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a510:	d121      	bne.n	800a556 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51a:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	6819      	ldr	r1, [r3, #0]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	011b      	lsls	r3, r3, #4
 800a528:	4319      	orrs	r1, r3
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	4319      	orrs	r1, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	079b      	lsls	r3, r3, #30
 800a538:	4319      	orrs	r1, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	4319      	orrs	r1, r3
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	041b      	lsls	r3, r3, #16
 800a546:	430b      	orrs	r3, r1
 800a548:	ea42 0103 	orr.w	r1, r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a554:	e005      	b.n	800a562 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a55e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <pca9685_write_u8>:


// -------------- Public function implementations --------------

HAL_StatusTypeDef pca9685_write_u8(pca9685_handle_t *handle, uint8_t address, uint8_t value)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af02      	add	r7, sp, #8
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	70fb      	strb	r3, [r7, #3]
 800a57c:	4613      	mov	r3, r2
 800a57e:	70bb      	strb	r3, [r7, #2]
	uint8_t data[] = {address, value};
 800a580:	78fb      	ldrb	r3, [r7, #3]
 800a582:	733b      	strb	r3, [r7, #12]
 800a584:	78bb      	ldrb	r3, [r7, #2]
 800a586:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA_I2C_TIMEOUT);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	8899      	ldrh	r1, [r3, #4]
 800a590:	f107 020c 	add.w	r2, r7, #12
 800a594:	2301      	movs	r3, #1
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	2302      	movs	r3, #2
 800a59a:	f7fb fe7f 	bl	800629c <HAL_I2C_Master_Transmit>
 800a59e:	4603      	mov	r3, r0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <pca9685_read_u8>:

HAL_StatusTypeDef pca9685_read_u8(pca9685_handle_t *handle, uint8_t address, uint8_t *data)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af02      	add	r7, sp, #8
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	607a      	str	r2, [r7, #4]
 800a5b4:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &address, 1, PCA_I2C_TIMEOUT);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	8899      	ldrh	r1, [r3, #4]
 800a5be:	f107 020b 	add.w	r2, r7, #11
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	f7fb fe68 	bl	800629c <HAL_I2C_Master_Transmit>
	return HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, data, 1, PCA_I2C_TIMEOUT);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	8899      	ldrh	r1, [r3, #4]
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	2301      	movs	r3, #1
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	f7fb ff52 	bl	8006484 <HAL_I2C_Master_Receive>
 800a5e0:	4603      	mov	r3, r0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <pca9685_init>:

void pca9685_init(pca9685_handle_t *handle){
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]

	//assert(handle->i2c_handle != NULL);
	pca9685_reset(handle);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f811 	bl	800a61c <pca9685_reset>
	pca9685_setPrescaleFreq(handle, 1000);
 800a5fa:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800a614 <pca9685_init+0x28>
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f81c 	bl	800a63c <pca9685_setPrescaleFreq>
	pca9685_setOscFreq(handle, 25000000);
 800a604:	4904      	ldr	r1, [pc, #16]	; (800a618 <pca9685_init+0x2c>)
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f8c4 	bl	800a794 <pca9685_setOscFreq>
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	447a0000 	.word	0x447a0000
 800a618:	017d7840 	.word	0x017d7840

0800a61c <pca9685_reset>:

void pca9685_reset(pca9685_handle_t *handle) {
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
	pca9685_write_u8(handle, PCA_REG_MODE1, 0x80);
 800a624:	2280      	movs	r2, #128	; 0x80
 800a626:	2100      	movs	r1, #0
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7ff ffa1 	bl	800a570 <pca9685_write_u8>
	HAL_Delay(10);
 800a62e:	200a      	movs	r0, #10
 800a630:	f7f8 fffe 	bl	8003630 <HAL_Delay>
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <pca9685_setPrescaleFreq>:
  pca9685_read_u8(handle, PCA_REG_MODE1, &sleep);
  uint8_t wakeup = sleep & ~(0x10); // set sleep bit low
  pca9685_write_u8(handle, PCA_REG_MODE1, wakeup);
}

void pca9685_setPrescaleFreq(pca9685_handle_t *handle, float freq) {
 800a63c:	b5b0      	push	{r4, r5, r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	ed87 0a02 	vstr	s0, [r7, #8]

  // Range output modulation frequency is dependant on oscillator
  if (freq < 1)
 800a648:	edd7 7a02 	vldr	s15, [r7, #8]
 800a64c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a650:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a658:	d502      	bpl.n	800a660 <pca9685_setPrescaleFreq+0x24>
    freq = 1;
 800a65a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a65e:	60bb      	str	r3, [r7, #8]
  if (freq > 3500)
 800a660:	edd7 7a02 	vldr	s15, [r7, #8]
 800a664:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800a774 <pca9685_setPrescaleFreq+0x138>
 800a668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a670:	dd01      	ble.n	800a676 <pca9685_setPrescaleFreq+0x3a>
    freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
 800a672:	4b41      	ldr	r3, [pc, #260]	; (800a778 <pca9685_setPrescaleFreq+0x13c>)
 800a674:	60bb      	str	r3, [r7, #8]

  float prescalevel = ((handle->osc_freq / (freq * 4096.0)) + 0.5) - 1;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7f5 ff62 	bl	8000544 <__aeabi_ui2d>
 800a680:	4604      	mov	r4, r0
 800a682:	460d      	mov	r5, r1
 800a684:	68b8      	ldr	r0, [r7, #8]
 800a686:	f7f5 ff7f 	bl	8000588 <__aeabi_f2d>
 800a68a:	f04f 0200 	mov.w	r2, #0
 800a68e:	4b3b      	ldr	r3, [pc, #236]	; (800a77c <pca9685_setPrescaleFreq+0x140>)
 800a690:	f7f5 ffd2 	bl	8000638 <__aeabi_dmul>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4620      	mov	r0, r4
 800a69a:	4629      	mov	r1, r5
 800a69c:	f7f6 f8f6 	bl	800088c <__aeabi_ddiv>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	f04f 0200 	mov.w	r2, #0
 800a6ac:	4b34      	ldr	r3, [pc, #208]	; (800a780 <pca9685_setPrescaleFreq+0x144>)
 800a6ae:	f7f5 fe0d 	bl	80002cc <__adddf3>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	f04f 0200 	mov.w	r2, #0
 800a6be:	4b31      	ldr	r3, [pc, #196]	; (800a784 <pca9685_setPrescaleFreq+0x148>)
 800a6c0:	f7f5 fe02 	bl	80002c8 <__aeabi_dsub>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	f7f6 f9c6 	bl	8000a5c <__aeabi_d2f>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	617b      	str	r3, [r7, #20]
  if (prescalevel < 3)
 800a6d4:	edd7 7a05 	vldr	s15, [r7, #20]
 800a6d8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800a6dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e4:	d501      	bpl.n	800a6ea <pca9685_setPrescaleFreq+0xae>
    prescalevel = 3;
 800a6e6:	4b28      	ldr	r3, [pc, #160]	; (800a788 <pca9685_setPrescaleFreq+0x14c>)
 800a6e8:	617b      	str	r3, [r7, #20]
  if (prescalevel > 255)
 800a6ea:	edd7 7a05 	vldr	s15, [r7, #20]
 800a6ee:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800a78c <pca9685_setPrescaleFreq+0x150>
 800a6f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6fa:	dd01      	ble.n	800a700 <pca9685_setPrescaleFreq+0xc4>
    prescalevel = 255;
 800a6fc:	4b24      	ldr	r3, [pc, #144]	; (800a790 <pca9685_setPrescaleFreq+0x154>)
 800a6fe:	617b      	str	r3, [r7, #20]
  uint8_t prescale = (uint8_t)prescalevel;
 800a700:	edd7 7a05 	vldr	s15, [r7, #20]
 800a704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a708:	edc7 7a01 	vstr	s15, [r7, #4]
 800a70c:	793b      	ldrb	r3, [r7, #4]
 800a70e:	74fb      	strb	r3, [r7, #19]


  uint8_t oldmode;
  pca9685_read_u8(handle, PCA_REG_MODE1, &oldmode);
 800a710:	f107 0311 	add.w	r3, r7, #17
 800a714:	461a      	mov	r2, r3
 800a716:	2100      	movs	r1, #0
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7ff ff45 	bl	800a5a8 <pca9685_read_u8>
  uint8_t newmode = (oldmode & ~0x80) | 0x10; // sleep
 800a71e:	7c7b      	ldrb	r3, [r7, #17]
 800a720:	b25b      	sxtb	r3, r3
 800a722:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800a726:	b25b      	sxtb	r3, r3
 800a728:	f043 0310 	orr.w	r3, r3, #16
 800a72c:	b25b      	sxtb	r3, r3
 800a72e:	74bb      	strb	r3, [r7, #18]
  pca9685_write_u8(handle, PCA_REG_MODE1, newmode);                             // go to sleep
 800a730:	7cbb      	ldrb	r3, [r7, #18]
 800a732:	461a      	mov	r2, r3
 800a734:	2100      	movs	r1, #0
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff ff1a 	bl	800a570 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_PRESCALE, prescale); // set the prescaler
 800a73c:	7cfb      	ldrb	r3, [r7, #19]
 800a73e:	461a      	mov	r2, r3
 800a740:	21fe      	movs	r1, #254	; 0xfe
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7ff ff14 	bl	800a570 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_REG_MODE1, oldmode);
 800a748:	7c7b      	ldrb	r3, [r7, #17]
 800a74a:	461a      	mov	r2, r3
 800a74c:	2100      	movs	r1, #0
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff ff0e 	bl	800a570 <pca9685_write_u8>
  HAL_Delay(10);
 800a754:	200a      	movs	r0, #10
 800a756:	f7f8 ff6b 	bl	8003630 <HAL_Delay>
  // This sets the MODE1 register to turn on auto increment.
  pca9685_write_u8(handle, PCA_REG_MODE1, oldmode | 0x80 | 0x20);
 800a75a:	7c7b      	ldrb	r3, [r7, #17]
 800a75c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800a760:	b2db      	uxtb	r3, r3
 800a762:	461a      	mov	r2, r3
 800a764:	2100      	movs	r1, #0
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7ff ff02 	bl	800a570 <pca9685_write_u8>

}
 800a76c:	bf00      	nop
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bdb0      	pop	{r4, r5, r7, pc}
 800a774:	455ac000 	.word	0x455ac000
 800a778:	455ac000 	.word	0x455ac000
 800a77c:	40b00000 	.word	0x40b00000
 800a780:	3fe00000 	.word	0x3fe00000
 800a784:	3ff00000 	.word	0x3ff00000
 800a788:	40400000 	.word	0x40400000
 800a78c:	437f0000 	.word	0x437f0000
 800a790:	437f0000 	.word	0x437f0000

0800a794 <pca9685_setOscFreq>:

void pca9685_setOscFreq(pca9685_handle_t *handle, uint32_t freq) {
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
	handle->osc_freq = freq;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	609a      	str	r2, [r3, #8]
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <pca9685_setPWM>:

void pca9685_setPWM(pca9685_handle_t *handle, uint8_t num, uint16_t on, uint16_t off) {
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	461a      	mov	r2, r3
 800a7be:	4603      	mov	r3, r0
 800a7c0:	72fb      	strb	r3, [r7, #11]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	813b      	strh	r3, [r7, #8]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	80fb      	strh	r3, [r7, #6]

  pca9685_write_u8(handle, PCA_LEDx_REG_START+ 4*num, on);
 800a7ca:	7afb      	ldrb	r3, [r7, #11]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	3306      	adds	r3, #6
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	893a      	ldrh	r2, [r7, #8]
 800a7d6:	b2d2      	uxtb	r2, r2
 800a7d8:	4619      	mov	r1, r3
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7ff fec8 	bl	800a570 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_LEDx_REG_START+1+ 4*num, on >> 8);
 800a7e0:	7afb      	ldrb	r3, [r7, #11]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	3307      	adds	r3, #7
 800a7e8:	b2d9      	uxtb	r1, r3
 800a7ea:	893b      	ldrh	r3, [r7, #8]
 800a7ec:	0a1b      	lsrs	r3, r3, #8
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff febb 	bl	800a570 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_LEDx_REG_START+2+ 4*num, off);
 800a7fa:	7afb      	ldrb	r3, [r7, #11]
 800a7fc:	3302      	adds	r3, #2
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	b2db      	uxtb	r3, r3
 800a804:	88fa      	ldrh	r2, [r7, #6]
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	4619      	mov	r1, r3
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7ff feb0 	bl	800a570 <pca9685_write_u8>
  pca9685_write_u8(handle, PCA_LEDx_REG_START+3+ 4*num, off >> 8);
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	b2db      	uxtb	r3, r3
 800a816:	3309      	adds	r3, #9
 800a818:	b2d9      	uxtb	r1, r3
 800a81a:	88fb      	ldrh	r3, [r7, #6]
 800a81c:	0a1b      	lsrs	r3, r3, #8
 800a81e:	b29b      	uxth	r3, r3
 800a820:	b2db      	uxtb	r3, r3
 800a822:	461a      	mov	r2, r3
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f7ff fea3 	bl	800a570 <pca9685_write_u8>
}
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <pca9685_setAngle>:

void pca9685_setAngle(pca9685_handle_t *handle, uint8_t num, uint8_t angle) {
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
 800a840:	4613      	mov	r3, r2
 800a842:	70bb      	strb	r3, [r7, #2]

	uint16_t value_from = angle;
 800a844:	78bb      	ldrb	r3, [r7, #2]
 800a846:	81fb      	strh	r3, [r7, #14]
	uint16_t from_len = 180;
 800a848:	23b4      	movs	r3, #180	; 0xb4
 800a84a:	81bb      	strh	r3, [r7, #12]
	uint16_t to_len = PCA_MAX_ANGLE - PCA_MIN_ANGLE;
 800a84c:	f240 13a9 	movw	r3, #425	; 0x1a9
 800a850:	817b      	strh	r3, [r7, #10]
	uint16_t value = (value_from / (float) from_len) * to_len + PCA_MIN_ANGLE;
 800a852:	89fb      	ldrh	r3, [r7, #14]
 800a854:	ee07 3a90 	vmov	s15, r3
 800a858:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a85c:	89bb      	ldrh	r3, [r7, #12]
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a86a:	897b      	ldrh	r3, [r7, #10]
 800a86c:	ee07 3a90 	vmov	s15, r3
 800a870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a874:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a878:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a8a0 <pca9685_setAngle+0x6c>
 800a87c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a884:	ee17 3a90 	vmov	r3, s15
 800a888:	813b      	strh	r3, [r7, #8]

	pca9685_setPWM(handle, num, 0, value);
 800a88a:	893b      	ldrh	r3, [r7, #8]
 800a88c:	78f9      	ldrb	r1, [r7, #3]
 800a88e:	2200      	movs	r2, #0
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff ff8d 	bl	800a7b0 <pca9685_setPWM>
}
 800a896:	bf00      	nop
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	42480000 	.word	0x42480000

0800a8a4 <resize>:

uint16_t resize(uint16_t num, uint16_t from_min, uint16_t from_max, uint16_t to_min, uint16_t to_max) {
 800a8a4:	b490      	push	{r4, r7}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4623      	mov	r3, r4
 800a8b4:	80fb      	strh	r3, [r7, #6]
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	80bb      	strh	r3, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	807b      	strh	r3, [r7, #2]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	803b      	strh	r3, [r7, #0]

	uint16_t value_from = num - from_min;
 800a8c2:	88fa      	ldrh	r2, [r7, #6]
 800a8c4:	88bb      	ldrh	r3, [r7, #4]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	81fb      	strh	r3, [r7, #14]
	uint16_t from_len = from_max - from_min;
 800a8ca:	887a      	ldrh	r2, [r7, #2]
 800a8cc:	88bb      	ldrh	r3, [r7, #4]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	81bb      	strh	r3, [r7, #12]
	uint16_t to_len = to_max - to_min;
 800a8d2:	8b3a      	ldrh	r2, [r7, #24]
 800a8d4:	883b      	ldrh	r3, [r7, #0]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	817b      	strh	r3, [r7, #10]
	return (value_from / (float) from_len) * to_len + to_min;
 800a8da:	89fb      	ldrh	r3, [r7, #14]
 800a8dc:	ee07 3a90 	vmov	s15, r3
 800a8e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8e4:	89bb      	ldrh	r3, [r7, #12]
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8f2:	897b      	ldrh	r3, [r7, #10]
 800a8f4:	ee07 3a90 	vmov	s15, r3
 800a8f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a900:	883b      	ldrh	r3, [r7, #0]
 800a902:	ee07 3a90 	vmov	s15, r3
 800a906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a90a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a90e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a912:	ee17 3a90 	vmov	r3, s15
 800a916:	b29b      	uxth	r3, r3
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bc90      	pop	{r4, r7}
 800a920:	4770      	bx	lr
	...

0800a924 <__errno>:
 800a924:	4b01      	ldr	r3, [pc, #4]	; (800a92c <__errno+0x8>)
 800a926:	6818      	ldr	r0, [r3, #0]
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	2000000c 	.word	0x2000000c

0800a930 <__libc_init_array>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	4d0d      	ldr	r5, [pc, #52]	; (800a968 <__libc_init_array+0x38>)
 800a934:	4c0d      	ldr	r4, [pc, #52]	; (800a96c <__libc_init_array+0x3c>)
 800a936:	1b64      	subs	r4, r4, r5
 800a938:	10a4      	asrs	r4, r4, #2
 800a93a:	2600      	movs	r6, #0
 800a93c:	42a6      	cmp	r6, r4
 800a93e:	d109      	bne.n	800a954 <__libc_init_array+0x24>
 800a940:	4d0b      	ldr	r5, [pc, #44]	; (800a970 <__libc_init_array+0x40>)
 800a942:	4c0c      	ldr	r4, [pc, #48]	; (800a974 <__libc_init_array+0x44>)
 800a944:	f000 fc8e 	bl	800b264 <_init>
 800a948:	1b64      	subs	r4, r4, r5
 800a94a:	10a4      	asrs	r4, r4, #2
 800a94c:	2600      	movs	r6, #0
 800a94e:	42a6      	cmp	r6, r4
 800a950:	d105      	bne.n	800a95e <__libc_init_array+0x2e>
 800a952:	bd70      	pop	{r4, r5, r6, pc}
 800a954:	f855 3b04 	ldr.w	r3, [r5], #4
 800a958:	4798      	blx	r3
 800a95a:	3601      	adds	r6, #1
 800a95c:	e7ee      	b.n	800a93c <__libc_init_array+0xc>
 800a95e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a962:	4798      	blx	r3
 800a964:	3601      	adds	r6, #1
 800a966:	e7f2      	b.n	800a94e <__libc_init_array+0x1e>
 800a968:	0800b30c 	.word	0x0800b30c
 800a96c:	0800b30c 	.word	0x0800b30c
 800a970:	0800b30c 	.word	0x0800b30c
 800a974:	0800b310 	.word	0x0800b310

0800a978 <memset>:
 800a978:	4402      	add	r2, r0
 800a97a:	4603      	mov	r3, r0
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d100      	bne.n	800a982 <memset+0xa>
 800a980:	4770      	bx	lr
 800a982:	f803 1b01 	strb.w	r1, [r3], #1
 800a986:	e7f9      	b.n	800a97c <memset+0x4>

0800a988 <siprintf>:
 800a988:	b40e      	push	{r1, r2, r3}
 800a98a:	b500      	push	{lr}
 800a98c:	b09c      	sub	sp, #112	; 0x70
 800a98e:	ab1d      	add	r3, sp, #116	; 0x74
 800a990:	9002      	str	r0, [sp, #8]
 800a992:	9006      	str	r0, [sp, #24]
 800a994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a998:	4809      	ldr	r0, [pc, #36]	; (800a9c0 <siprintf+0x38>)
 800a99a:	9107      	str	r1, [sp, #28]
 800a99c:	9104      	str	r1, [sp, #16]
 800a99e:	4909      	ldr	r1, [pc, #36]	; (800a9c4 <siprintf+0x3c>)
 800a9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9a4:	9105      	str	r1, [sp, #20]
 800a9a6:	6800      	ldr	r0, [r0, #0]
 800a9a8:	9301      	str	r3, [sp, #4]
 800a9aa:	a902      	add	r1, sp, #8
 800a9ac:	f000 f868 	bl	800aa80 <_svfiprintf_r>
 800a9b0:	9b02      	ldr	r3, [sp, #8]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	b01c      	add	sp, #112	; 0x70
 800a9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9bc:	b003      	add	sp, #12
 800a9be:	4770      	bx	lr
 800a9c0:	2000000c 	.word	0x2000000c
 800a9c4:	ffff0208 	.word	0xffff0208

0800a9c8 <__ssputs_r>:
 800a9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9cc:	688e      	ldr	r6, [r1, #8]
 800a9ce:	429e      	cmp	r6, r3
 800a9d0:	4682      	mov	sl, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	4690      	mov	r8, r2
 800a9d6:	461f      	mov	r7, r3
 800a9d8:	d838      	bhi.n	800aa4c <__ssputs_r+0x84>
 800a9da:	898a      	ldrh	r2, [r1, #12]
 800a9dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9e0:	d032      	beq.n	800aa48 <__ssputs_r+0x80>
 800a9e2:	6825      	ldr	r5, [r4, #0]
 800a9e4:	6909      	ldr	r1, [r1, #16]
 800a9e6:	eba5 0901 	sub.w	r9, r5, r1
 800a9ea:	6965      	ldr	r5, [r4, #20]
 800a9ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	444b      	add	r3, r9
 800a9f8:	106d      	asrs	r5, r5, #1
 800a9fa:	429d      	cmp	r5, r3
 800a9fc:	bf38      	it	cc
 800a9fe:	461d      	movcc	r5, r3
 800aa00:	0553      	lsls	r3, r2, #21
 800aa02:	d531      	bpl.n	800aa68 <__ssputs_r+0xa0>
 800aa04:	4629      	mov	r1, r5
 800aa06:	f000 fb63 	bl	800b0d0 <_malloc_r>
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	b950      	cbnz	r0, 800aa24 <__ssputs_r+0x5c>
 800aa0e:	230c      	movs	r3, #12
 800aa10:	f8ca 3000 	str.w	r3, [sl]
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa1a:	81a3      	strh	r3, [r4, #12]
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa24:	6921      	ldr	r1, [r4, #16]
 800aa26:	464a      	mov	r2, r9
 800aa28:	f000 fabe 	bl	800afa8 <memcpy>
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa36:	81a3      	strh	r3, [r4, #12]
 800aa38:	6126      	str	r6, [r4, #16]
 800aa3a:	6165      	str	r5, [r4, #20]
 800aa3c:	444e      	add	r6, r9
 800aa3e:	eba5 0509 	sub.w	r5, r5, r9
 800aa42:	6026      	str	r6, [r4, #0]
 800aa44:	60a5      	str	r5, [r4, #8]
 800aa46:	463e      	mov	r6, r7
 800aa48:	42be      	cmp	r6, r7
 800aa4a:	d900      	bls.n	800aa4e <__ssputs_r+0x86>
 800aa4c:	463e      	mov	r6, r7
 800aa4e:	6820      	ldr	r0, [r4, #0]
 800aa50:	4632      	mov	r2, r6
 800aa52:	4641      	mov	r1, r8
 800aa54:	f000 fab6 	bl	800afc4 <memmove>
 800aa58:	68a3      	ldr	r3, [r4, #8]
 800aa5a:	1b9b      	subs	r3, r3, r6
 800aa5c:	60a3      	str	r3, [r4, #8]
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	4433      	add	r3, r6
 800aa62:	6023      	str	r3, [r4, #0]
 800aa64:	2000      	movs	r0, #0
 800aa66:	e7db      	b.n	800aa20 <__ssputs_r+0x58>
 800aa68:	462a      	mov	r2, r5
 800aa6a:	f000 fba5 	bl	800b1b8 <_realloc_r>
 800aa6e:	4606      	mov	r6, r0
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d1e1      	bne.n	800aa38 <__ssputs_r+0x70>
 800aa74:	6921      	ldr	r1, [r4, #16]
 800aa76:	4650      	mov	r0, sl
 800aa78:	f000 fabe 	bl	800aff8 <_free_r>
 800aa7c:	e7c7      	b.n	800aa0e <__ssputs_r+0x46>
	...

0800aa80 <_svfiprintf_r>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	4698      	mov	r8, r3
 800aa86:	898b      	ldrh	r3, [r1, #12]
 800aa88:	061b      	lsls	r3, r3, #24
 800aa8a:	b09d      	sub	sp, #116	; 0x74
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	460d      	mov	r5, r1
 800aa90:	4614      	mov	r4, r2
 800aa92:	d50e      	bpl.n	800aab2 <_svfiprintf_r+0x32>
 800aa94:	690b      	ldr	r3, [r1, #16]
 800aa96:	b963      	cbnz	r3, 800aab2 <_svfiprintf_r+0x32>
 800aa98:	2140      	movs	r1, #64	; 0x40
 800aa9a:	f000 fb19 	bl	800b0d0 <_malloc_r>
 800aa9e:	6028      	str	r0, [r5, #0]
 800aaa0:	6128      	str	r0, [r5, #16]
 800aaa2:	b920      	cbnz	r0, 800aaae <_svfiprintf_r+0x2e>
 800aaa4:	230c      	movs	r3, #12
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaac:	e0d1      	b.n	800ac52 <_svfiprintf_r+0x1d2>
 800aaae:	2340      	movs	r3, #64	; 0x40
 800aab0:	616b      	str	r3, [r5, #20]
 800aab2:	2300      	movs	r3, #0
 800aab4:	9309      	str	r3, [sp, #36]	; 0x24
 800aab6:	2320      	movs	r3, #32
 800aab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aabc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aac0:	2330      	movs	r3, #48	; 0x30
 800aac2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac6c <_svfiprintf_r+0x1ec>
 800aac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaca:	f04f 0901 	mov.w	r9, #1
 800aace:	4623      	mov	r3, r4
 800aad0:	469a      	mov	sl, r3
 800aad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aad6:	b10a      	cbz	r2, 800aadc <_svfiprintf_r+0x5c>
 800aad8:	2a25      	cmp	r2, #37	; 0x25
 800aada:	d1f9      	bne.n	800aad0 <_svfiprintf_r+0x50>
 800aadc:	ebba 0b04 	subs.w	fp, sl, r4
 800aae0:	d00b      	beq.n	800aafa <_svfiprintf_r+0x7a>
 800aae2:	465b      	mov	r3, fp
 800aae4:	4622      	mov	r2, r4
 800aae6:	4629      	mov	r1, r5
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7ff ff6d 	bl	800a9c8 <__ssputs_r>
 800aaee:	3001      	adds	r0, #1
 800aaf0:	f000 80aa 	beq.w	800ac48 <_svfiprintf_r+0x1c8>
 800aaf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaf6:	445a      	add	r2, fp
 800aaf8:	9209      	str	r2, [sp, #36]	; 0x24
 800aafa:	f89a 3000 	ldrb.w	r3, [sl]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f000 80a2 	beq.w	800ac48 <_svfiprintf_r+0x1c8>
 800ab04:	2300      	movs	r3, #0
 800ab06:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab0e:	f10a 0a01 	add.w	sl, sl, #1
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	9307      	str	r3, [sp, #28]
 800ab16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ab1c:	4654      	mov	r4, sl
 800ab1e:	2205      	movs	r2, #5
 800ab20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab24:	4851      	ldr	r0, [pc, #324]	; (800ac6c <_svfiprintf_r+0x1ec>)
 800ab26:	f7f5 fb7b 	bl	8000220 <memchr>
 800ab2a:	9a04      	ldr	r2, [sp, #16]
 800ab2c:	b9d8      	cbnz	r0, 800ab66 <_svfiprintf_r+0xe6>
 800ab2e:	06d0      	lsls	r0, r2, #27
 800ab30:	bf44      	itt	mi
 800ab32:	2320      	movmi	r3, #32
 800ab34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab38:	0711      	lsls	r1, r2, #28
 800ab3a:	bf44      	itt	mi
 800ab3c:	232b      	movmi	r3, #43	; 0x2b
 800ab3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab42:	f89a 3000 	ldrb.w	r3, [sl]
 800ab46:	2b2a      	cmp	r3, #42	; 0x2a
 800ab48:	d015      	beq.n	800ab76 <_svfiprintf_r+0xf6>
 800ab4a:	9a07      	ldr	r2, [sp, #28]
 800ab4c:	4654      	mov	r4, sl
 800ab4e:	2000      	movs	r0, #0
 800ab50:	f04f 0c0a 	mov.w	ip, #10
 800ab54:	4621      	mov	r1, r4
 800ab56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab5a:	3b30      	subs	r3, #48	; 0x30
 800ab5c:	2b09      	cmp	r3, #9
 800ab5e:	d94e      	bls.n	800abfe <_svfiprintf_r+0x17e>
 800ab60:	b1b0      	cbz	r0, 800ab90 <_svfiprintf_r+0x110>
 800ab62:	9207      	str	r2, [sp, #28]
 800ab64:	e014      	b.n	800ab90 <_svfiprintf_r+0x110>
 800ab66:	eba0 0308 	sub.w	r3, r0, r8
 800ab6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	9304      	str	r3, [sp, #16]
 800ab72:	46a2      	mov	sl, r4
 800ab74:	e7d2      	b.n	800ab1c <_svfiprintf_r+0x9c>
 800ab76:	9b03      	ldr	r3, [sp, #12]
 800ab78:	1d19      	adds	r1, r3, #4
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	9103      	str	r1, [sp, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bfbb      	ittet	lt
 800ab82:	425b      	neglt	r3, r3
 800ab84:	f042 0202 	orrlt.w	r2, r2, #2
 800ab88:	9307      	strge	r3, [sp, #28]
 800ab8a:	9307      	strlt	r3, [sp, #28]
 800ab8c:	bfb8      	it	lt
 800ab8e:	9204      	strlt	r2, [sp, #16]
 800ab90:	7823      	ldrb	r3, [r4, #0]
 800ab92:	2b2e      	cmp	r3, #46	; 0x2e
 800ab94:	d10c      	bne.n	800abb0 <_svfiprintf_r+0x130>
 800ab96:	7863      	ldrb	r3, [r4, #1]
 800ab98:	2b2a      	cmp	r3, #42	; 0x2a
 800ab9a:	d135      	bne.n	800ac08 <_svfiprintf_r+0x188>
 800ab9c:	9b03      	ldr	r3, [sp, #12]
 800ab9e:	1d1a      	adds	r2, r3, #4
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	9203      	str	r2, [sp, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	bfb8      	it	lt
 800aba8:	f04f 33ff 	movlt.w	r3, #4294967295
 800abac:	3402      	adds	r4, #2
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac7c <_svfiprintf_r+0x1fc>
 800abb4:	7821      	ldrb	r1, [r4, #0]
 800abb6:	2203      	movs	r2, #3
 800abb8:	4650      	mov	r0, sl
 800abba:	f7f5 fb31 	bl	8000220 <memchr>
 800abbe:	b140      	cbz	r0, 800abd2 <_svfiprintf_r+0x152>
 800abc0:	2340      	movs	r3, #64	; 0x40
 800abc2:	eba0 000a 	sub.w	r0, r0, sl
 800abc6:	fa03 f000 	lsl.w	r0, r3, r0
 800abca:	9b04      	ldr	r3, [sp, #16]
 800abcc:	4303      	orrs	r3, r0
 800abce:	3401      	adds	r4, #1
 800abd0:	9304      	str	r3, [sp, #16]
 800abd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd6:	4826      	ldr	r0, [pc, #152]	; (800ac70 <_svfiprintf_r+0x1f0>)
 800abd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abdc:	2206      	movs	r2, #6
 800abde:	f7f5 fb1f 	bl	8000220 <memchr>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d038      	beq.n	800ac58 <_svfiprintf_r+0x1d8>
 800abe6:	4b23      	ldr	r3, [pc, #140]	; (800ac74 <_svfiprintf_r+0x1f4>)
 800abe8:	bb1b      	cbnz	r3, 800ac32 <_svfiprintf_r+0x1b2>
 800abea:	9b03      	ldr	r3, [sp, #12]
 800abec:	3307      	adds	r3, #7
 800abee:	f023 0307 	bic.w	r3, r3, #7
 800abf2:	3308      	adds	r3, #8
 800abf4:	9303      	str	r3, [sp, #12]
 800abf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf8:	4433      	add	r3, r6
 800abfa:	9309      	str	r3, [sp, #36]	; 0x24
 800abfc:	e767      	b.n	800aace <_svfiprintf_r+0x4e>
 800abfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac02:	460c      	mov	r4, r1
 800ac04:	2001      	movs	r0, #1
 800ac06:	e7a5      	b.n	800ab54 <_svfiprintf_r+0xd4>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	3401      	adds	r4, #1
 800ac0c:	9305      	str	r3, [sp, #20]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	f04f 0c0a 	mov.w	ip, #10
 800ac14:	4620      	mov	r0, r4
 800ac16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac1a:	3a30      	subs	r2, #48	; 0x30
 800ac1c:	2a09      	cmp	r2, #9
 800ac1e:	d903      	bls.n	800ac28 <_svfiprintf_r+0x1a8>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0c5      	beq.n	800abb0 <_svfiprintf_r+0x130>
 800ac24:	9105      	str	r1, [sp, #20]
 800ac26:	e7c3      	b.n	800abb0 <_svfiprintf_r+0x130>
 800ac28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e7f0      	b.n	800ac14 <_svfiprintf_r+0x194>
 800ac32:	ab03      	add	r3, sp, #12
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	462a      	mov	r2, r5
 800ac38:	4b0f      	ldr	r3, [pc, #60]	; (800ac78 <_svfiprintf_r+0x1f8>)
 800ac3a:	a904      	add	r1, sp, #16
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f3af 8000 	nop.w
 800ac42:	1c42      	adds	r2, r0, #1
 800ac44:	4606      	mov	r6, r0
 800ac46:	d1d6      	bne.n	800abf6 <_svfiprintf_r+0x176>
 800ac48:	89ab      	ldrh	r3, [r5, #12]
 800ac4a:	065b      	lsls	r3, r3, #25
 800ac4c:	f53f af2c 	bmi.w	800aaa8 <_svfiprintf_r+0x28>
 800ac50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac52:	b01d      	add	sp, #116	; 0x74
 800ac54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac58:	ab03      	add	r3, sp, #12
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	462a      	mov	r2, r5
 800ac5e:	4b06      	ldr	r3, [pc, #24]	; (800ac78 <_svfiprintf_r+0x1f8>)
 800ac60:	a904      	add	r1, sp, #16
 800ac62:	4638      	mov	r0, r7
 800ac64:	f000 f87a 	bl	800ad5c <_printf_i>
 800ac68:	e7eb      	b.n	800ac42 <_svfiprintf_r+0x1c2>
 800ac6a:	bf00      	nop
 800ac6c:	0800b2d0 	.word	0x0800b2d0
 800ac70:	0800b2da 	.word	0x0800b2da
 800ac74:	00000000 	.word	0x00000000
 800ac78:	0800a9c9 	.word	0x0800a9c9
 800ac7c:	0800b2d6 	.word	0x0800b2d6

0800ac80 <_printf_common>:
 800ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	4616      	mov	r6, r2
 800ac86:	4699      	mov	r9, r3
 800ac88:	688a      	ldr	r2, [r1, #8]
 800ac8a:	690b      	ldr	r3, [r1, #16]
 800ac8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac90:	4293      	cmp	r3, r2
 800ac92:	bfb8      	it	lt
 800ac94:	4613      	movlt	r3, r2
 800ac96:	6033      	str	r3, [r6, #0]
 800ac98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac9c:	4607      	mov	r7, r0
 800ac9e:	460c      	mov	r4, r1
 800aca0:	b10a      	cbz	r2, 800aca6 <_printf_common+0x26>
 800aca2:	3301      	adds	r3, #1
 800aca4:	6033      	str	r3, [r6, #0]
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	0699      	lsls	r1, r3, #26
 800acaa:	bf42      	ittt	mi
 800acac:	6833      	ldrmi	r3, [r6, #0]
 800acae:	3302      	addmi	r3, #2
 800acb0:	6033      	strmi	r3, [r6, #0]
 800acb2:	6825      	ldr	r5, [r4, #0]
 800acb4:	f015 0506 	ands.w	r5, r5, #6
 800acb8:	d106      	bne.n	800acc8 <_printf_common+0x48>
 800acba:	f104 0a19 	add.w	sl, r4, #25
 800acbe:	68e3      	ldr	r3, [r4, #12]
 800acc0:	6832      	ldr	r2, [r6, #0]
 800acc2:	1a9b      	subs	r3, r3, r2
 800acc4:	42ab      	cmp	r3, r5
 800acc6:	dc26      	bgt.n	800ad16 <_printf_common+0x96>
 800acc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800accc:	1e13      	subs	r3, r2, #0
 800acce:	6822      	ldr	r2, [r4, #0]
 800acd0:	bf18      	it	ne
 800acd2:	2301      	movne	r3, #1
 800acd4:	0692      	lsls	r2, r2, #26
 800acd6:	d42b      	bmi.n	800ad30 <_printf_common+0xb0>
 800acd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acdc:	4649      	mov	r1, r9
 800acde:	4638      	mov	r0, r7
 800ace0:	47c0      	blx	r8
 800ace2:	3001      	adds	r0, #1
 800ace4:	d01e      	beq.n	800ad24 <_printf_common+0xa4>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	68e5      	ldr	r5, [r4, #12]
 800acea:	6832      	ldr	r2, [r6, #0]
 800acec:	f003 0306 	and.w	r3, r3, #6
 800acf0:	2b04      	cmp	r3, #4
 800acf2:	bf08      	it	eq
 800acf4:	1aad      	subeq	r5, r5, r2
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	6922      	ldr	r2, [r4, #16]
 800acfa:	bf0c      	ite	eq
 800acfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad00:	2500      	movne	r5, #0
 800ad02:	4293      	cmp	r3, r2
 800ad04:	bfc4      	itt	gt
 800ad06:	1a9b      	subgt	r3, r3, r2
 800ad08:	18ed      	addgt	r5, r5, r3
 800ad0a:	2600      	movs	r6, #0
 800ad0c:	341a      	adds	r4, #26
 800ad0e:	42b5      	cmp	r5, r6
 800ad10:	d11a      	bne.n	800ad48 <_printf_common+0xc8>
 800ad12:	2000      	movs	r0, #0
 800ad14:	e008      	b.n	800ad28 <_printf_common+0xa8>
 800ad16:	2301      	movs	r3, #1
 800ad18:	4652      	mov	r2, sl
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	47c0      	blx	r8
 800ad20:	3001      	adds	r0, #1
 800ad22:	d103      	bne.n	800ad2c <_printf_common+0xac>
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2c:	3501      	adds	r5, #1
 800ad2e:	e7c6      	b.n	800acbe <_printf_common+0x3e>
 800ad30:	18e1      	adds	r1, r4, r3
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	2030      	movs	r0, #48	; 0x30
 800ad36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad3a:	4422      	add	r2, r4
 800ad3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad44:	3302      	adds	r3, #2
 800ad46:	e7c7      	b.n	800acd8 <_printf_common+0x58>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	4649      	mov	r1, r9
 800ad4e:	4638      	mov	r0, r7
 800ad50:	47c0      	blx	r8
 800ad52:	3001      	adds	r0, #1
 800ad54:	d0e6      	beq.n	800ad24 <_printf_common+0xa4>
 800ad56:	3601      	adds	r6, #1
 800ad58:	e7d9      	b.n	800ad0e <_printf_common+0x8e>
	...

0800ad5c <_printf_i>:
 800ad5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad60:	7e0f      	ldrb	r7, [r1, #24]
 800ad62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad64:	2f78      	cmp	r7, #120	; 0x78
 800ad66:	4691      	mov	r9, r2
 800ad68:	4680      	mov	r8, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	469a      	mov	sl, r3
 800ad6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad72:	d807      	bhi.n	800ad84 <_printf_i+0x28>
 800ad74:	2f62      	cmp	r7, #98	; 0x62
 800ad76:	d80a      	bhi.n	800ad8e <_printf_i+0x32>
 800ad78:	2f00      	cmp	r7, #0
 800ad7a:	f000 80d8 	beq.w	800af2e <_printf_i+0x1d2>
 800ad7e:	2f58      	cmp	r7, #88	; 0x58
 800ad80:	f000 80a3 	beq.w	800aeca <_printf_i+0x16e>
 800ad84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad8c:	e03a      	b.n	800ae04 <_printf_i+0xa8>
 800ad8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad92:	2b15      	cmp	r3, #21
 800ad94:	d8f6      	bhi.n	800ad84 <_printf_i+0x28>
 800ad96:	a101      	add	r1, pc, #4	; (adr r1, 800ad9c <_printf_i+0x40>)
 800ad98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad9c:	0800adf5 	.word	0x0800adf5
 800ada0:	0800ae09 	.word	0x0800ae09
 800ada4:	0800ad85 	.word	0x0800ad85
 800ada8:	0800ad85 	.word	0x0800ad85
 800adac:	0800ad85 	.word	0x0800ad85
 800adb0:	0800ad85 	.word	0x0800ad85
 800adb4:	0800ae09 	.word	0x0800ae09
 800adb8:	0800ad85 	.word	0x0800ad85
 800adbc:	0800ad85 	.word	0x0800ad85
 800adc0:	0800ad85 	.word	0x0800ad85
 800adc4:	0800ad85 	.word	0x0800ad85
 800adc8:	0800af15 	.word	0x0800af15
 800adcc:	0800ae39 	.word	0x0800ae39
 800add0:	0800aef7 	.word	0x0800aef7
 800add4:	0800ad85 	.word	0x0800ad85
 800add8:	0800ad85 	.word	0x0800ad85
 800addc:	0800af37 	.word	0x0800af37
 800ade0:	0800ad85 	.word	0x0800ad85
 800ade4:	0800ae39 	.word	0x0800ae39
 800ade8:	0800ad85 	.word	0x0800ad85
 800adec:	0800ad85 	.word	0x0800ad85
 800adf0:	0800aeff 	.word	0x0800aeff
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	1d1a      	adds	r2, r3, #4
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	602a      	str	r2, [r5, #0]
 800adfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae04:	2301      	movs	r3, #1
 800ae06:	e0a3      	b.n	800af50 <_printf_i+0x1f4>
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	6829      	ldr	r1, [r5, #0]
 800ae0c:	0606      	lsls	r6, r0, #24
 800ae0e:	f101 0304 	add.w	r3, r1, #4
 800ae12:	d50a      	bpl.n	800ae2a <_printf_i+0xce>
 800ae14:	680e      	ldr	r6, [r1, #0]
 800ae16:	602b      	str	r3, [r5, #0]
 800ae18:	2e00      	cmp	r6, #0
 800ae1a:	da03      	bge.n	800ae24 <_printf_i+0xc8>
 800ae1c:	232d      	movs	r3, #45	; 0x2d
 800ae1e:	4276      	negs	r6, r6
 800ae20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae24:	485e      	ldr	r0, [pc, #376]	; (800afa0 <_printf_i+0x244>)
 800ae26:	230a      	movs	r3, #10
 800ae28:	e019      	b.n	800ae5e <_printf_i+0x102>
 800ae2a:	680e      	ldr	r6, [r1, #0]
 800ae2c:	602b      	str	r3, [r5, #0]
 800ae2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae32:	bf18      	it	ne
 800ae34:	b236      	sxthne	r6, r6
 800ae36:	e7ef      	b.n	800ae18 <_printf_i+0xbc>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	6820      	ldr	r0, [r4, #0]
 800ae3c:	1d19      	adds	r1, r3, #4
 800ae3e:	6029      	str	r1, [r5, #0]
 800ae40:	0601      	lsls	r1, r0, #24
 800ae42:	d501      	bpl.n	800ae48 <_printf_i+0xec>
 800ae44:	681e      	ldr	r6, [r3, #0]
 800ae46:	e002      	b.n	800ae4e <_printf_i+0xf2>
 800ae48:	0646      	lsls	r6, r0, #25
 800ae4a:	d5fb      	bpl.n	800ae44 <_printf_i+0xe8>
 800ae4c:	881e      	ldrh	r6, [r3, #0]
 800ae4e:	4854      	ldr	r0, [pc, #336]	; (800afa0 <_printf_i+0x244>)
 800ae50:	2f6f      	cmp	r7, #111	; 0x6f
 800ae52:	bf0c      	ite	eq
 800ae54:	2308      	moveq	r3, #8
 800ae56:	230a      	movne	r3, #10
 800ae58:	2100      	movs	r1, #0
 800ae5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae5e:	6865      	ldr	r5, [r4, #4]
 800ae60:	60a5      	str	r5, [r4, #8]
 800ae62:	2d00      	cmp	r5, #0
 800ae64:	bfa2      	ittt	ge
 800ae66:	6821      	ldrge	r1, [r4, #0]
 800ae68:	f021 0104 	bicge.w	r1, r1, #4
 800ae6c:	6021      	strge	r1, [r4, #0]
 800ae6e:	b90e      	cbnz	r6, 800ae74 <_printf_i+0x118>
 800ae70:	2d00      	cmp	r5, #0
 800ae72:	d04d      	beq.n	800af10 <_printf_i+0x1b4>
 800ae74:	4615      	mov	r5, r2
 800ae76:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae7a:	fb03 6711 	mls	r7, r3, r1, r6
 800ae7e:	5dc7      	ldrb	r7, [r0, r7]
 800ae80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae84:	4637      	mov	r7, r6
 800ae86:	42bb      	cmp	r3, r7
 800ae88:	460e      	mov	r6, r1
 800ae8a:	d9f4      	bls.n	800ae76 <_printf_i+0x11a>
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	d10b      	bne.n	800aea8 <_printf_i+0x14c>
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	07de      	lsls	r6, r3, #31
 800ae94:	d508      	bpl.n	800aea8 <_printf_i+0x14c>
 800ae96:	6923      	ldr	r3, [r4, #16]
 800ae98:	6861      	ldr	r1, [r4, #4]
 800ae9a:	4299      	cmp	r1, r3
 800ae9c:	bfde      	ittt	le
 800ae9e:	2330      	movle	r3, #48	; 0x30
 800aea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aea8:	1b52      	subs	r2, r2, r5
 800aeaa:	6122      	str	r2, [r4, #16]
 800aeac:	f8cd a000 	str.w	sl, [sp]
 800aeb0:	464b      	mov	r3, r9
 800aeb2:	aa03      	add	r2, sp, #12
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	f7ff fee2 	bl	800ac80 <_printf_common>
 800aebc:	3001      	adds	r0, #1
 800aebe:	d14c      	bne.n	800af5a <_printf_i+0x1fe>
 800aec0:	f04f 30ff 	mov.w	r0, #4294967295
 800aec4:	b004      	add	sp, #16
 800aec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeca:	4835      	ldr	r0, [pc, #212]	; (800afa0 <_printf_i+0x244>)
 800aecc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aed0:	6829      	ldr	r1, [r5, #0]
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	f851 6b04 	ldr.w	r6, [r1], #4
 800aed8:	6029      	str	r1, [r5, #0]
 800aeda:	061d      	lsls	r5, r3, #24
 800aedc:	d514      	bpl.n	800af08 <_printf_i+0x1ac>
 800aede:	07df      	lsls	r7, r3, #31
 800aee0:	bf44      	itt	mi
 800aee2:	f043 0320 	orrmi.w	r3, r3, #32
 800aee6:	6023      	strmi	r3, [r4, #0]
 800aee8:	b91e      	cbnz	r6, 800aef2 <_printf_i+0x196>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	f023 0320 	bic.w	r3, r3, #32
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	2310      	movs	r3, #16
 800aef4:	e7b0      	b.n	800ae58 <_printf_i+0xfc>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	f043 0320 	orr.w	r3, r3, #32
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	2378      	movs	r3, #120	; 0x78
 800af00:	4828      	ldr	r0, [pc, #160]	; (800afa4 <_printf_i+0x248>)
 800af02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af06:	e7e3      	b.n	800aed0 <_printf_i+0x174>
 800af08:	0659      	lsls	r1, r3, #25
 800af0a:	bf48      	it	mi
 800af0c:	b2b6      	uxthmi	r6, r6
 800af0e:	e7e6      	b.n	800aede <_printf_i+0x182>
 800af10:	4615      	mov	r5, r2
 800af12:	e7bb      	b.n	800ae8c <_printf_i+0x130>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	6826      	ldr	r6, [r4, #0]
 800af18:	6961      	ldr	r1, [r4, #20]
 800af1a:	1d18      	adds	r0, r3, #4
 800af1c:	6028      	str	r0, [r5, #0]
 800af1e:	0635      	lsls	r5, r6, #24
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	d501      	bpl.n	800af28 <_printf_i+0x1cc>
 800af24:	6019      	str	r1, [r3, #0]
 800af26:	e002      	b.n	800af2e <_printf_i+0x1d2>
 800af28:	0670      	lsls	r0, r6, #25
 800af2a:	d5fb      	bpl.n	800af24 <_printf_i+0x1c8>
 800af2c:	8019      	strh	r1, [r3, #0]
 800af2e:	2300      	movs	r3, #0
 800af30:	6123      	str	r3, [r4, #16]
 800af32:	4615      	mov	r5, r2
 800af34:	e7ba      	b.n	800aeac <_printf_i+0x150>
 800af36:	682b      	ldr	r3, [r5, #0]
 800af38:	1d1a      	adds	r2, r3, #4
 800af3a:	602a      	str	r2, [r5, #0]
 800af3c:	681d      	ldr	r5, [r3, #0]
 800af3e:	6862      	ldr	r2, [r4, #4]
 800af40:	2100      	movs	r1, #0
 800af42:	4628      	mov	r0, r5
 800af44:	f7f5 f96c 	bl	8000220 <memchr>
 800af48:	b108      	cbz	r0, 800af4e <_printf_i+0x1f2>
 800af4a:	1b40      	subs	r0, r0, r5
 800af4c:	6060      	str	r0, [r4, #4]
 800af4e:	6863      	ldr	r3, [r4, #4]
 800af50:	6123      	str	r3, [r4, #16]
 800af52:	2300      	movs	r3, #0
 800af54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af58:	e7a8      	b.n	800aeac <_printf_i+0x150>
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	462a      	mov	r2, r5
 800af5e:	4649      	mov	r1, r9
 800af60:	4640      	mov	r0, r8
 800af62:	47d0      	blx	sl
 800af64:	3001      	adds	r0, #1
 800af66:	d0ab      	beq.n	800aec0 <_printf_i+0x164>
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	079b      	lsls	r3, r3, #30
 800af6c:	d413      	bmi.n	800af96 <_printf_i+0x23a>
 800af6e:	68e0      	ldr	r0, [r4, #12]
 800af70:	9b03      	ldr	r3, [sp, #12]
 800af72:	4298      	cmp	r0, r3
 800af74:	bfb8      	it	lt
 800af76:	4618      	movlt	r0, r3
 800af78:	e7a4      	b.n	800aec4 <_printf_i+0x168>
 800af7a:	2301      	movs	r3, #1
 800af7c:	4632      	mov	r2, r6
 800af7e:	4649      	mov	r1, r9
 800af80:	4640      	mov	r0, r8
 800af82:	47d0      	blx	sl
 800af84:	3001      	adds	r0, #1
 800af86:	d09b      	beq.n	800aec0 <_printf_i+0x164>
 800af88:	3501      	adds	r5, #1
 800af8a:	68e3      	ldr	r3, [r4, #12]
 800af8c:	9903      	ldr	r1, [sp, #12]
 800af8e:	1a5b      	subs	r3, r3, r1
 800af90:	42ab      	cmp	r3, r5
 800af92:	dcf2      	bgt.n	800af7a <_printf_i+0x21e>
 800af94:	e7eb      	b.n	800af6e <_printf_i+0x212>
 800af96:	2500      	movs	r5, #0
 800af98:	f104 0619 	add.w	r6, r4, #25
 800af9c:	e7f5      	b.n	800af8a <_printf_i+0x22e>
 800af9e:	bf00      	nop
 800afa0:	0800b2e1 	.word	0x0800b2e1
 800afa4:	0800b2f2 	.word	0x0800b2f2

0800afa8 <memcpy>:
 800afa8:	440a      	add	r2, r1
 800afaa:	4291      	cmp	r1, r2
 800afac:	f100 33ff 	add.w	r3, r0, #4294967295
 800afb0:	d100      	bne.n	800afb4 <memcpy+0xc>
 800afb2:	4770      	bx	lr
 800afb4:	b510      	push	{r4, lr}
 800afb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afbe:	4291      	cmp	r1, r2
 800afc0:	d1f9      	bne.n	800afb6 <memcpy+0xe>
 800afc2:	bd10      	pop	{r4, pc}

0800afc4 <memmove>:
 800afc4:	4288      	cmp	r0, r1
 800afc6:	b510      	push	{r4, lr}
 800afc8:	eb01 0402 	add.w	r4, r1, r2
 800afcc:	d902      	bls.n	800afd4 <memmove+0x10>
 800afce:	4284      	cmp	r4, r0
 800afd0:	4623      	mov	r3, r4
 800afd2:	d807      	bhi.n	800afe4 <memmove+0x20>
 800afd4:	1e43      	subs	r3, r0, #1
 800afd6:	42a1      	cmp	r1, r4
 800afd8:	d008      	beq.n	800afec <memmove+0x28>
 800afda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afe2:	e7f8      	b.n	800afd6 <memmove+0x12>
 800afe4:	4402      	add	r2, r0
 800afe6:	4601      	mov	r1, r0
 800afe8:	428a      	cmp	r2, r1
 800afea:	d100      	bne.n	800afee <memmove+0x2a>
 800afec:	bd10      	pop	{r4, pc}
 800afee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aff6:	e7f7      	b.n	800afe8 <memmove+0x24>

0800aff8 <_free_r>:
 800aff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800affa:	2900      	cmp	r1, #0
 800affc:	d044      	beq.n	800b088 <_free_r+0x90>
 800affe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b002:	9001      	str	r0, [sp, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f1a1 0404 	sub.w	r4, r1, #4
 800b00a:	bfb8      	it	lt
 800b00c:	18e4      	addlt	r4, r4, r3
 800b00e:	f000 f913 	bl	800b238 <__malloc_lock>
 800b012:	4a1e      	ldr	r2, [pc, #120]	; (800b08c <_free_r+0x94>)
 800b014:	9801      	ldr	r0, [sp, #4]
 800b016:	6813      	ldr	r3, [r2, #0]
 800b018:	b933      	cbnz	r3, 800b028 <_free_r+0x30>
 800b01a:	6063      	str	r3, [r4, #4]
 800b01c:	6014      	str	r4, [r2, #0]
 800b01e:	b003      	add	sp, #12
 800b020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b024:	f000 b90e 	b.w	800b244 <__malloc_unlock>
 800b028:	42a3      	cmp	r3, r4
 800b02a:	d908      	bls.n	800b03e <_free_r+0x46>
 800b02c:	6825      	ldr	r5, [r4, #0]
 800b02e:	1961      	adds	r1, r4, r5
 800b030:	428b      	cmp	r3, r1
 800b032:	bf01      	itttt	eq
 800b034:	6819      	ldreq	r1, [r3, #0]
 800b036:	685b      	ldreq	r3, [r3, #4]
 800b038:	1949      	addeq	r1, r1, r5
 800b03a:	6021      	streq	r1, [r4, #0]
 800b03c:	e7ed      	b.n	800b01a <_free_r+0x22>
 800b03e:	461a      	mov	r2, r3
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	b10b      	cbz	r3, 800b048 <_free_r+0x50>
 800b044:	42a3      	cmp	r3, r4
 800b046:	d9fa      	bls.n	800b03e <_free_r+0x46>
 800b048:	6811      	ldr	r1, [r2, #0]
 800b04a:	1855      	adds	r5, r2, r1
 800b04c:	42a5      	cmp	r5, r4
 800b04e:	d10b      	bne.n	800b068 <_free_r+0x70>
 800b050:	6824      	ldr	r4, [r4, #0]
 800b052:	4421      	add	r1, r4
 800b054:	1854      	adds	r4, r2, r1
 800b056:	42a3      	cmp	r3, r4
 800b058:	6011      	str	r1, [r2, #0]
 800b05a:	d1e0      	bne.n	800b01e <_free_r+0x26>
 800b05c:	681c      	ldr	r4, [r3, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	6053      	str	r3, [r2, #4]
 800b062:	4421      	add	r1, r4
 800b064:	6011      	str	r1, [r2, #0]
 800b066:	e7da      	b.n	800b01e <_free_r+0x26>
 800b068:	d902      	bls.n	800b070 <_free_r+0x78>
 800b06a:	230c      	movs	r3, #12
 800b06c:	6003      	str	r3, [r0, #0]
 800b06e:	e7d6      	b.n	800b01e <_free_r+0x26>
 800b070:	6825      	ldr	r5, [r4, #0]
 800b072:	1961      	adds	r1, r4, r5
 800b074:	428b      	cmp	r3, r1
 800b076:	bf04      	itt	eq
 800b078:	6819      	ldreq	r1, [r3, #0]
 800b07a:	685b      	ldreq	r3, [r3, #4]
 800b07c:	6063      	str	r3, [r4, #4]
 800b07e:	bf04      	itt	eq
 800b080:	1949      	addeq	r1, r1, r5
 800b082:	6021      	streq	r1, [r4, #0]
 800b084:	6054      	str	r4, [r2, #4]
 800b086:	e7ca      	b.n	800b01e <_free_r+0x26>
 800b088:	b003      	add	sp, #12
 800b08a:	bd30      	pop	{r4, r5, pc}
 800b08c:	200009b0 	.word	0x200009b0

0800b090 <sbrk_aligned>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	4e0e      	ldr	r6, [pc, #56]	; (800b0cc <sbrk_aligned+0x3c>)
 800b094:	460c      	mov	r4, r1
 800b096:	6831      	ldr	r1, [r6, #0]
 800b098:	4605      	mov	r5, r0
 800b09a:	b911      	cbnz	r1, 800b0a2 <sbrk_aligned+0x12>
 800b09c:	f000 f8bc 	bl	800b218 <_sbrk_r>
 800b0a0:	6030      	str	r0, [r6, #0]
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	f000 f8b7 	bl	800b218 <_sbrk_r>
 800b0aa:	1c43      	adds	r3, r0, #1
 800b0ac:	d00a      	beq.n	800b0c4 <sbrk_aligned+0x34>
 800b0ae:	1cc4      	adds	r4, r0, #3
 800b0b0:	f024 0403 	bic.w	r4, r4, #3
 800b0b4:	42a0      	cmp	r0, r4
 800b0b6:	d007      	beq.n	800b0c8 <sbrk_aligned+0x38>
 800b0b8:	1a21      	subs	r1, r4, r0
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f000 f8ac 	bl	800b218 <_sbrk_r>
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d101      	bne.n	800b0c8 <sbrk_aligned+0x38>
 800b0c4:	f04f 34ff 	mov.w	r4, #4294967295
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	200009b4 	.word	0x200009b4

0800b0d0 <_malloc_r>:
 800b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d4:	1ccd      	adds	r5, r1, #3
 800b0d6:	f025 0503 	bic.w	r5, r5, #3
 800b0da:	3508      	adds	r5, #8
 800b0dc:	2d0c      	cmp	r5, #12
 800b0de:	bf38      	it	cc
 800b0e0:	250c      	movcc	r5, #12
 800b0e2:	2d00      	cmp	r5, #0
 800b0e4:	4607      	mov	r7, r0
 800b0e6:	db01      	blt.n	800b0ec <_malloc_r+0x1c>
 800b0e8:	42a9      	cmp	r1, r5
 800b0ea:	d905      	bls.n	800b0f8 <_malloc_r+0x28>
 800b0ec:	230c      	movs	r3, #12
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	2600      	movs	r6, #0
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f8:	4e2e      	ldr	r6, [pc, #184]	; (800b1b4 <_malloc_r+0xe4>)
 800b0fa:	f000 f89d 	bl	800b238 <__malloc_lock>
 800b0fe:	6833      	ldr	r3, [r6, #0]
 800b100:	461c      	mov	r4, r3
 800b102:	bb34      	cbnz	r4, 800b152 <_malloc_r+0x82>
 800b104:	4629      	mov	r1, r5
 800b106:	4638      	mov	r0, r7
 800b108:	f7ff ffc2 	bl	800b090 <sbrk_aligned>
 800b10c:	1c43      	adds	r3, r0, #1
 800b10e:	4604      	mov	r4, r0
 800b110:	d14d      	bne.n	800b1ae <_malloc_r+0xde>
 800b112:	6834      	ldr	r4, [r6, #0]
 800b114:	4626      	mov	r6, r4
 800b116:	2e00      	cmp	r6, #0
 800b118:	d140      	bne.n	800b19c <_malloc_r+0xcc>
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	4631      	mov	r1, r6
 800b11e:	4638      	mov	r0, r7
 800b120:	eb04 0803 	add.w	r8, r4, r3
 800b124:	f000 f878 	bl	800b218 <_sbrk_r>
 800b128:	4580      	cmp	r8, r0
 800b12a:	d13a      	bne.n	800b1a2 <_malloc_r+0xd2>
 800b12c:	6821      	ldr	r1, [r4, #0]
 800b12e:	3503      	adds	r5, #3
 800b130:	1a6d      	subs	r5, r5, r1
 800b132:	f025 0503 	bic.w	r5, r5, #3
 800b136:	3508      	adds	r5, #8
 800b138:	2d0c      	cmp	r5, #12
 800b13a:	bf38      	it	cc
 800b13c:	250c      	movcc	r5, #12
 800b13e:	4629      	mov	r1, r5
 800b140:	4638      	mov	r0, r7
 800b142:	f7ff ffa5 	bl	800b090 <sbrk_aligned>
 800b146:	3001      	adds	r0, #1
 800b148:	d02b      	beq.n	800b1a2 <_malloc_r+0xd2>
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	442b      	add	r3, r5
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	e00e      	b.n	800b170 <_malloc_r+0xa0>
 800b152:	6822      	ldr	r2, [r4, #0]
 800b154:	1b52      	subs	r2, r2, r5
 800b156:	d41e      	bmi.n	800b196 <_malloc_r+0xc6>
 800b158:	2a0b      	cmp	r2, #11
 800b15a:	d916      	bls.n	800b18a <_malloc_r+0xba>
 800b15c:	1961      	adds	r1, r4, r5
 800b15e:	42a3      	cmp	r3, r4
 800b160:	6025      	str	r5, [r4, #0]
 800b162:	bf18      	it	ne
 800b164:	6059      	strne	r1, [r3, #4]
 800b166:	6863      	ldr	r3, [r4, #4]
 800b168:	bf08      	it	eq
 800b16a:	6031      	streq	r1, [r6, #0]
 800b16c:	5162      	str	r2, [r4, r5]
 800b16e:	604b      	str	r3, [r1, #4]
 800b170:	4638      	mov	r0, r7
 800b172:	f104 060b 	add.w	r6, r4, #11
 800b176:	f000 f865 	bl	800b244 <__malloc_unlock>
 800b17a:	f026 0607 	bic.w	r6, r6, #7
 800b17e:	1d23      	adds	r3, r4, #4
 800b180:	1af2      	subs	r2, r6, r3
 800b182:	d0b6      	beq.n	800b0f2 <_malloc_r+0x22>
 800b184:	1b9b      	subs	r3, r3, r6
 800b186:	50a3      	str	r3, [r4, r2]
 800b188:	e7b3      	b.n	800b0f2 <_malloc_r+0x22>
 800b18a:	6862      	ldr	r2, [r4, #4]
 800b18c:	42a3      	cmp	r3, r4
 800b18e:	bf0c      	ite	eq
 800b190:	6032      	streq	r2, [r6, #0]
 800b192:	605a      	strne	r2, [r3, #4]
 800b194:	e7ec      	b.n	800b170 <_malloc_r+0xa0>
 800b196:	4623      	mov	r3, r4
 800b198:	6864      	ldr	r4, [r4, #4]
 800b19a:	e7b2      	b.n	800b102 <_malloc_r+0x32>
 800b19c:	4634      	mov	r4, r6
 800b19e:	6876      	ldr	r6, [r6, #4]
 800b1a0:	e7b9      	b.n	800b116 <_malloc_r+0x46>
 800b1a2:	230c      	movs	r3, #12
 800b1a4:	603b      	str	r3, [r7, #0]
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	f000 f84c 	bl	800b244 <__malloc_unlock>
 800b1ac:	e7a1      	b.n	800b0f2 <_malloc_r+0x22>
 800b1ae:	6025      	str	r5, [r4, #0]
 800b1b0:	e7de      	b.n	800b170 <_malloc_r+0xa0>
 800b1b2:	bf00      	nop
 800b1b4:	200009b0 	.word	0x200009b0

0800b1b8 <_realloc_r>:
 800b1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1bc:	4680      	mov	r8, r0
 800b1be:	4614      	mov	r4, r2
 800b1c0:	460e      	mov	r6, r1
 800b1c2:	b921      	cbnz	r1, 800b1ce <_realloc_r+0x16>
 800b1c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	f7ff bf81 	b.w	800b0d0 <_malloc_r>
 800b1ce:	b92a      	cbnz	r2, 800b1dc <_realloc_r+0x24>
 800b1d0:	f7ff ff12 	bl	800aff8 <_free_r>
 800b1d4:	4625      	mov	r5, r4
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1dc:	f000 f838 	bl	800b250 <_malloc_usable_size_r>
 800b1e0:	4284      	cmp	r4, r0
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	d802      	bhi.n	800b1ec <_realloc_r+0x34>
 800b1e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1ea:	d812      	bhi.n	800b212 <_realloc_r+0x5a>
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4640      	mov	r0, r8
 800b1f0:	f7ff ff6e 	bl	800b0d0 <_malloc_r>
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d0ed      	beq.n	800b1d6 <_realloc_r+0x1e>
 800b1fa:	42bc      	cmp	r4, r7
 800b1fc:	4622      	mov	r2, r4
 800b1fe:	4631      	mov	r1, r6
 800b200:	bf28      	it	cs
 800b202:	463a      	movcs	r2, r7
 800b204:	f7ff fed0 	bl	800afa8 <memcpy>
 800b208:	4631      	mov	r1, r6
 800b20a:	4640      	mov	r0, r8
 800b20c:	f7ff fef4 	bl	800aff8 <_free_r>
 800b210:	e7e1      	b.n	800b1d6 <_realloc_r+0x1e>
 800b212:	4635      	mov	r5, r6
 800b214:	e7df      	b.n	800b1d6 <_realloc_r+0x1e>
	...

0800b218 <_sbrk_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d06      	ldr	r5, [pc, #24]	; (800b234 <_sbrk_r+0x1c>)
 800b21c:	2300      	movs	r3, #0
 800b21e:	4604      	mov	r4, r0
 800b220:	4608      	mov	r0, r1
 800b222:	602b      	str	r3, [r5, #0]
 800b224:	f7f8 f922 	bl	800346c <_sbrk>
 800b228:	1c43      	adds	r3, r0, #1
 800b22a:	d102      	bne.n	800b232 <_sbrk_r+0x1a>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	b103      	cbz	r3, 800b232 <_sbrk_r+0x1a>
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	200009b8 	.word	0x200009b8

0800b238 <__malloc_lock>:
 800b238:	4801      	ldr	r0, [pc, #4]	; (800b240 <__malloc_lock+0x8>)
 800b23a:	f000 b811 	b.w	800b260 <__retarget_lock_acquire_recursive>
 800b23e:	bf00      	nop
 800b240:	200009bc 	.word	0x200009bc

0800b244 <__malloc_unlock>:
 800b244:	4801      	ldr	r0, [pc, #4]	; (800b24c <__malloc_unlock+0x8>)
 800b246:	f000 b80c 	b.w	800b262 <__retarget_lock_release_recursive>
 800b24a:	bf00      	nop
 800b24c:	200009bc 	.word	0x200009bc

0800b250 <_malloc_usable_size_r>:
 800b250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b254:	1f18      	subs	r0, r3, #4
 800b256:	2b00      	cmp	r3, #0
 800b258:	bfbc      	itt	lt
 800b25a:	580b      	ldrlt	r3, [r1, r0]
 800b25c:	18c0      	addlt	r0, r0, r3
 800b25e:	4770      	bx	lr

0800b260 <__retarget_lock_acquire_recursive>:
 800b260:	4770      	bx	lr

0800b262 <__retarget_lock_release_recursive>:
 800b262:	4770      	bx	lr

0800b264 <_init>:
 800b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b266:	bf00      	nop
 800b268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b26a:	bc08      	pop	{r3}
 800b26c:	469e      	mov	lr, r3
 800b26e:	4770      	bx	lr

0800b270 <_fini>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	bf00      	nop
 800b274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b276:	bc08      	pop	{r3}
 800b278:	469e      	mov	lr, r3
 800b27a:	4770      	bx	lr
